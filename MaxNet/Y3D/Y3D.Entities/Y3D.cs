// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: y3d.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace y3d.e {

  /// <summary>Holder for reflection information generated from y3d.proto</summary>
  public static partial class Y3DReflection {

    #region Descriptor
    /// <summary>File descriptor for y3d.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Y3DReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgl5M2QucHJvdG8SA3kzZBoZZ29vZ2xlL3Byb3RvYnVmL2FueS5wcm90bxof",
            "Z29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoNeG5vcm1hbC5wcm90",
            "byIkCgZZQ29sb3ISDAoEbmFtZRgBIAEoCRIMCgRhcmdiGAIgASgFIioKB1lQ",
            "b2ludDMSCQoBeBgBIAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAIiPwoFWUJv",
            "eDMSGgoEcG1pbhgBIAEoCzIMLnkzZC5ZUG9pbnQzEhoKBHBtYXgYAiABKAsy",
            "DC55M2QuWVBvaW50MyKiAQoJWVJlc291cmNlEgsKA3JpZBgBIAEoCRIqCgVy",
            "dHlwZRgCIAEoDjIbLnkzZC5ZUmVzb3VyY2UuUmVzb3VyY2VUeXBlEgwKBGxp",
            "bmsYAyABKAkiTgoMUmVzb3VyY2VUeXBlEgoKBkJJTkFSWRAAEgkKBUlNQUdF",
            "EAESDgoKRkxBVEJVRkZFUhACEgwKCFBST1RPQlVGEAMSCQoFQ0FQTlAQBCKo",
            "AQoGWUxpZ2h0Eg8KB2RpZmZ1c2UYAyADKAISEAoIc3BlY3VsYXIYBCADKAIS",
            "EQoJaW50ZW5zaXR5GAUgASgCEg0KBXJhbmdlGAYgASgCEg0KBWFuZ2xlGAcg",
            "ASgCEhAKCGV4cG9uZW50GAggASgCEhkKEWV4Y2x1ZGVkTWVzaGVzSWRzGAkg",
            "AygJEh0KFWluY2x1ZGVkT25seU1lc2hlc0lkcxgKIAMoCSI4CgdZQ2FtZXJh",
            "EhAKCHJvdGF0aW9uGAMgAygCEg4KBnRhcmdldBgEIAMoAhILCgNmb3YYBSAB",
            "KAIi0gMKBVlNZXNoEhEKCW51bV9mYWNlcxgBIAEoBRIYCgRiYm94GAIgASgL",
            "MgoueTNkLllCb3gzEg4KBnJlc19pZBgDIAEoCRImCgd4c3RhdHVzGAUgASgO",
            "MhUueTNkLllNZXNoLlhyZWZTdGF0dXMSIgoFbXR5cGUYBiABKA4yEy55M2Qu",
            "WU1lc2guTWVzaFR5cGUSDwoHdmVybmFtZRgHIAEoCSK+AQoITWVzaFR5cGUS",
            "CwoHVW5rbm93bhAAEhEKDUVkaXRhYmxlX01lc2gQARIRCg1FZGl0YWJsZV9Q",
            "b2x5EAISBwoDQm94EAMSCgoGU3BoZXJlEAQSDQoJR2VvU3BoZXJlEAUSDAoI",
            "Q3lsaW5kZXIQBhIICgRUdWJlEAcSCQoFVG9ydXMQCBILCgdQeXJhbWlkEAkS",
            "CgoGVGVhcG90EAoSCQoFUGxhbmUQCxIKCgZUYXJnZXQQDBIICgRDb25lEA0i",
            "bgoKWHJlZlN0YXR1cxIMCghPUklHSU5BTBAAEg4KClhSRUZfSElHSFQQARIM",
            "CghYUkVGX0xPVxACEhQKEFhSRUZfTE9XX0RJU1BMQVkQAxIHCgNCT1gQBBIK",
            "CgZNRVJHRUQQBRIJCgVGSU5BTBAGIr8CCgdZT2JqZWN0EgwKBG5hbWUYASAB",
            "KAkSGQoDcG9zGAMgASgLMgwueTNkLllQb2ludDMSJgoFZXh0cmEYBSADKAsy",
            "Fy55M2QuWU9iamVjdC5FeHRyYUVudHJ5Eh4KBW90eXBlGAYgASgOMg8ueTNk",
            "Lk9iamVjdFR5cGUSDAoEdGFncxgHIAMoCRIPCgdjYXRlX2lkGAggASgFEhwK",
            "BWxpZ2h0GAogASgLMgsueTNkLllMaWdodEgAEh4KBmNhbWVyYRgLIAEoCzIM",
            "LnkzZC5ZQ2FtZXJhSAASGgoEbWVzaBgMIAEoCzIKLnkzZC5ZTWVzaEgAGkIK",
            "CkV4dHJhRW50cnkSCwoDa2V5GAEgASgJEiMKBXZhbHVlGAIgASgLMhQuZ29v",
            "Z2xlLnByb3RvYnVmLkFueToCOAFCBgoEZGF0YSKyAQoFWUFyZWESDAoEbmFt",
            "ZRgBIAEoCRIbCgZncm91cHMYAiADKAsyCy55M2QuWUdyb3VwEhoKBG9ianMY",
            "AyADKAsyDC55M2QuWU9iamVjdBIkCgVndmVycxgGIAMoCzIVLnkzZC5ZQXJl",
            "YS5HdmVyc0VudHJ5GjwKCkd2ZXJzRW50cnkSCwoDa2V5GAEgASgJEh0KBXZh",
            "bHVlGAIgASgLMg4ueTNkLllHcm91cFZlcjoCOAEiMwoGWUxheWVyEgwKBG5h",
            "bWUYASABKAkSGwoGZ3JvdXBzGAIgAygLMgsueTNkLllHcm91cCJ/CgZZR3Jv",
            "dXASDAoEbmFtZRgBIAEoCRIaCgRvYmpzGAIgAygLMgwueTNkLllPYmplY3QS",
            "HQoIY2hpbGRyZW4YAyADKAsyCy55M2QuWUdyb3VwEh4KB2d2X3R5cGUYBCAB",
            "KA4yDS55M2QuR1ZlclR5cGUSDAoEeHJlZhgFIAMoCSJICglZR3JvdXBWZXIS",
            "DQoFdm5hbWUYASABKAkSHgoJZ3JvdXBEYXRhGAIgASgLMgsueTNkLllHcm91",
            "cBIMCgRzdGVwGAMgASgFIl0KCkZpbHRlclZpZXcSHgoFb3R5cGUYASABKA4y",
            "Dy55M2QuT2JqZWN0VHlwZRISCgpmYWNlX3JhbmdlGAIgASgFEg4KBnNlYXJj",
            "aBgDIAEoCRILCgNhaWQYBCABKAUivQEKC1Byb2plY3RJbmZvEg0KBXBuYW1l",
            "GAEgASgJEgwKBHBhdGgYAiABKAkSJgoCdHMYAyABKAsyGi5nb29nbGUucHJv",
            "dG9idWYuVGltZXN0YW1wEhIKCmZhY2VfcmFuZ2UYBCADKAUSHQoIZnJfY29s",
            "b3IYBSADKAsyCy55M2QuWUNvbG9yEh4KBWZ2aWV3GAYgAygLMg8ueTNkLkZp",
            "bHRlclZpZXcSFgoOb3B0aW1pemVfcmF0aW8YByABKAIijQEKC1NldHRpbmdE",
            "YXRhEhEKCWFzZXRfbmFtZRgBIAEoCRIoCgRkYXRhGAIgAygLMhoueTNkLlNl",
            "dHRpbmdEYXRhLkRhdGFFbnRyeRpBCglEYXRhRW50cnkSCwoDa2V5GAEgASgJ",
            "EiMKBXZhbHVlGAIgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueToCOAEiPwoI",
            "UFNldHRpbmcSHwoFZXh0cmEYASABKAsyEC55M2QuU2V0dGluZ0RhdGESEgoK",
            "bWF4X3JlY2VudBgCIAEoBSKVAQoHWVN5c3RlbRIWCg53b3JraW5nX2ZvbGRl",
            "chgBIAEoCRImCgxkZWZhdWx0X2luZm8YAiABKAsyEC55M2QuUHJvamVjdElu",
            "Zm8SJgoPZGVmYXVsdF9zZXR0aW5nGAMgASgLMg0ueTNkLlBTZXR0aW5nEiIK",
            "CHByb2plY3RzGAQgAygLMhAueTNkLlByb2plY3RJbmZvIiYKCVlBcmVhTGlz",
            "dBIZCgVhcmVhcxgBIAMoCzIKLnkzZC5ZQXJlYSKoAQoFRXZlbnQSHQoHbm9l",
            "dmVudBgBIAEoCzIKLnkzZC5FTm9uZUgAEh4KBnNlbGVjdBgCIAEoCzIMLnkz",
            "ZC5FU2VsZWN0SAASGgoEbW92ZRgDIAEoCzIKLnkzZC5FTW92ZUgAEh4KBnJv",
            "dGF0ZRgEIAEoCzIMLnkzZC5FUm90YXRlSAASGwoDZGVsGAUgASgLMgwueTNk",
            "LkVEZWxldGVIAEIHCgVldmVudCIHCgVFTm9uZSIoCgdFU2VsZWN0EgwKBG5h",
            "bWUYASABKAkSDwoHaXNvbGF0ZRgCIAEoCCIWCgVFTW92ZRINCgVwb2ludBgB",
            "IAMoAiIZCgdFUm90YXRlEg4KBnJvdGF0ZRgBIAMoAiIXCgdFRGVsZXRlEgwK",
            "BG5hbWUYASABKAkiLAoIRUlzb2xhdGUSDAoEbmFtZRgBIAEoCRISCgplbmRJ",
            "c29sYXRlGAIgASgIIi0KC1Jlc3VsdFJlcGx5Eg0KBWVycm9yGAEgASgIEg8K",
            "B21lc3NhZ2UYAiABKAkiDAoKRW1wdHlQYXJhbSIhCgtSZW5hbWVQYXJhbRIS",
            "Cgp1c2Vfc2VsZWN0GAEgASgIIj8KDk1ha2U0VGVzdFBhcmFtEg0KBW9uYW1l",
            "GAEgASgJEh4KB2xvd3BvbHkYAiADKAsyDS55M2QuRUxvd3BvbHkiHgoNT3B0",
            "aW1pemVQYXJhbRINCgVyYXRpbxgBIAEoAiJFChJCYXRjaE9wdGltaXplUGFy",
            "YW0SDQoFcmF0aW8YASABKAISDgoGZm9sZGVyGAIgASgJEhAKCGZpbGVuYW1l",
            "GAMgASgJIhoKC1N0cmluZ1BhcmFtEgsKA3N0chgBIAEoCSJGCglUZXN0UGFy",
            "YW0SEQoJdGVzdF9uYW1lGAEgASgJEiYKCGFueXRoaW5nGAIgASgLMhQuZ29v",
            "Z2xlLnByb3RvYnVmLkFueSJ8CgdFVW53cmFwEg0KBW9uYW1lGAEgASgJEg8K",
            "B2NoYW5uZWwYAiABKAUSHwoFbWF4M2QYAyABKAsyDi55M2QuTWF4VW53cmFw",
            "SAASJQoHYmxlbmRlchgEIAEoCzISLnkzZC5CbGVuZGVyVW53cmFwSABCCQoH",
            "c2V0dGluZyIPCg1CbGVuZGVyVW53cmFwIisKCU1heFVud3JhcBINCgVhbmds",
            "ZRgBIAEoAhIPCgdzcGFjaW5nGAIgASgCIooBCghFUGFja2luZxINCgVvbmFt",
            "ZRgBIAEoCRIOCgZ1dm5hbWUYAiABKAkSEQoJdGlsZV9TaXplGAMgASgFEiEK",
            "B3BhY2ttYXgYBCABKAsyDi55M2QuUGFjazNETWF4SAASIQoIcGFja3JlY3QY",
            "BSABKAsyDS55M2QuUGFja1JlY3RIAEIGCgRwYWNrIiwKCFBhY2tSZWN0Eg8K",
            "B2RlbnNpdHkYASABKAUSDwoHcGFkZGluZxgCIAEoAiJtCglQYWNrM0RNYXgS",
            "DwoHbnVtVGlsZRgBIAEoBRIRCglub3JtYWxpemUYAiABKAgSFwoPcm90YXRl",
            "X2NsdXN0ZXJzGAMgASgIEhIKCmZpbGxfaG9sZXMYBCABKAgSDwoHcGFkZGlu",
            "ZxgFIAEoCCKbAQoIRUxvd3BvbHkSDQoFb25hbWUYASABKAkSIwoIbHBfM2Rt",
            "YXgYAiABKAsyDy55M2QuTFBvbHkzRE1heEgAEicKCmxwX2JsZW5kZXIYAyAB",
            "KAsyES55M2QuTFBvbHlCbGVuZGVySAASJwoKbHBfbWVzaGxhYhgEIAEoCzIR",
            "LnkzZC5MUG9seU1lc2hsYWJIAEIJCgdsb3d0eXBlIooDCgpMUG9seTNETWF4",
            "EhYKDnZlcnRleF9wZXJjZW50GAEgASgCEhQKDHZlcnRleF9jb3VudBgCIAEo",
            "BRIxChFvcHRpbWl6YXRpb25fbW9kZRgDIAEoDjIWLnkzZC5MUG9seTNETWF4",
            "Lk9wTW9kZRIrCgdub3JtYWxzGAQgASgOMhoueTNkLkxQb2x5M0RNYXguTm9y",
            "bWFsTW9kZRIbChNmYXZvcl9jb21wYWN0X2ZhY2VzGAUgASgIEh8KF3ByZXZl",
            "bnRfZmxpcHBlZF9ub3JtYWxzGAYgASgIEhwKFGxvY2tfdmVydGV4X3Bvc2l0",
            "aW9uGAcgASgIIkYKBk9wTW9kZRISCg5DUlVOQ0hfQk9SREVSUxAAEhMKD1BS",
            "T1RFQ1RfQk9SREVSUxABEhMKD0VYQ0xVREVfQk9SREVSUxACIkoKCk5vcm1h",
            "bE1vZGUSEgoOQ1JVTkNIX05PUk1BTFMQABITCg9QUk9URUNUX05PUk1BTFMQ",
            "ARITCg9FWENMVURFX05PUk1BTFMQAiIdCgxMUG9seUJsZW5kZXISDQoFcmF0",
            "aW8YASABKAIiDgoMTFBvbHlNZXNobGFiIr4BCgdFTm9ybWFsEg0KBW9uYW1l",
            "GAEgASgJEg8KB2xvd3BvbHkYAiABKAkSEAoIaGlnaHBvbHkYAyABKAkSEAoI",
            "dGV4X3NpemUYBCABKA0SDwoHb3V0X3RleBgFIAEoCRIoCgxub3JtYWxfM2Rt",
            "YXgYBiABKAsyEC55M2QuTm9ybWFsM0RNYXhIABIrCg5ub3JtYWxfeG5vcm1h",
            "bBgHIAEoCzIRLnhub3JtYWwuU2V0dGluZ3NIAEIHCgVudHlwZSINCgtOb3Jt",
            "YWwzRE1heCIrCg1SZXNwb25zZUV2ZW50Eg0KBWVycm9yGAEgASgIEgsKA21z",
            "ZxgCIAEoCSpHCgpPYmplY3RUeXBlEgwKCEdFT01FVFJZEAASCQoFTElHSFQQ",
            "ARIKCgZDQU1FUkEQAhIJCgVTSEFQRRADEgkKBU9USEVSEAQqPwoIR1ZlclR5",
            "cGUSCgoGTk9fVkVSEAASDAoIT1JJR0lOQUwQARILCgdJTl9CQUtFEAISDAoI",
            "U1RBTkRBUkQQA0IIqgIFeTNkLmViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::xnormal.XnormalReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::y3d.e.ObjectType), typeof(global::y3d.e.GVerType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YColor), global::y3d.e.YColor.Parser, new[]{ "Name", "Argb" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YPoint3), global::y3d.e.YPoint3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YBox3), global::y3d.e.YBox3.Parser, new[]{ "Pmin", "Pmax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YResource), global::y3d.e.YResource.Parser, new[]{ "Rid", "Rtype", "Link" }, null, new[]{ typeof(global::y3d.e.YResource.Types.ResourceType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YLight), global::y3d.e.YLight.Parser, new[]{ "Diffuse", "Specular", "Intensity", "Range", "Angle", "Exponent", "ExcludedMeshesIds", "IncludedOnlyMeshesIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YCamera), global::y3d.e.YCamera.Parser, new[]{ "Rotation", "Target", "Fov" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YMesh), global::y3d.e.YMesh.Parser, new[]{ "NumFaces", "Bbox", "ResId", "Xstatus", "Mtype", "Vername" }, null, new[]{ typeof(global::y3d.e.YMesh.Types.MeshType), typeof(global::y3d.e.YMesh.Types.XrefStatus) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YObject), global::y3d.e.YObject.Parser, new[]{ "Name", "Pos", "Extra", "Otype", "Tags", "CateId", "Light", "Camera", "Mesh" }, new[]{ "Data" }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YArea), global::y3d.e.YArea.Parser, new[]{ "Name", "Groups", "Objs", "Gvers" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YLayer), global::y3d.e.YLayer.Parser, new[]{ "Name", "Groups" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YGroup), global::y3d.e.YGroup.Parser, new[]{ "Name", "Objs", "Children", "GvType", "Xref" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YGroupVer), global::y3d.e.YGroupVer.Parser, new[]{ "Vname", "GroupData", "Step" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.FilterView), global::y3d.e.FilterView.Parser, new[]{ "Otype", "FaceRange", "Search", "Aid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ProjectInfo), global::y3d.e.ProjectInfo.Parser, new[]{ "Pname", "Path", "Ts", "FaceRange", "FrColor", "Fview", "OptimizeRatio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.SettingData), global::y3d.e.SettingData.Parser, new[]{ "AsetName", "Data" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.PSetting), global::y3d.e.PSetting.Parser, new[]{ "Extra", "MaxRecent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YSystem), global::y3d.e.YSystem.Parser, new[]{ "WorkingFolder", "DefaultInfo", "DefaultSetting", "Projects" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YAreaList), global::y3d.e.YAreaList.Parser, new[]{ "Areas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.Event), global::y3d.e.Event.Parser, new[]{ "Noevent", "Select", "Move", "Rotate", "Del" }, new[]{ "Event" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ENone), global::y3d.e.ENone.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ESelect), global::y3d.e.ESelect.Parser, new[]{ "Name", "Isolate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.EMove), global::y3d.e.EMove.Parser, new[]{ "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ERotate), global::y3d.e.ERotate.Parser, new[]{ "Rotate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.EDelete), global::y3d.e.EDelete.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.EIsolate), global::y3d.e.EIsolate.Parser, new[]{ "Name", "EndIsolate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ResultReply), global::y3d.e.ResultReply.Parser, new[]{ "Error", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.EmptyParam), global::y3d.e.EmptyParam.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.RenameParam), global::y3d.e.RenameParam.Parser, new[]{ "UseSelect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.Make4TestParam), global::y3d.e.Make4TestParam.Parser, new[]{ "Oname", "Lowpoly" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.OptimizeParam), global::y3d.e.OptimizeParam.Parser, new[]{ "Ratio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.BatchOptimizeParam), global::y3d.e.BatchOptimizeParam.Parser, new[]{ "Ratio", "Folder", "Filename" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.StringParam), global::y3d.e.StringParam.Parser, new[]{ "Str" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.TestParam), global::y3d.e.TestParam.Parser, new[]{ "TestName", "Anything" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.EUnwrap), global::y3d.e.EUnwrap.Parser, new[]{ "Oname", "Channel", "Max3D", "Blender" }, new[]{ "Setting" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.BlenderUnwrap), global::y3d.e.BlenderUnwrap.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.MaxUnwrap), global::y3d.e.MaxUnwrap.Parser, new[]{ "Angle", "Spacing" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.EPacking), global::y3d.e.EPacking.Parser, new[]{ "Oname", "Uvname", "TileSize", "Packmax", "Packrect" }, new[]{ "Pack" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.PackRect), global::y3d.e.PackRect.Parser, new[]{ "Density", "Padding" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.Pack3DMax), global::y3d.e.Pack3DMax.Parser, new[]{ "NumTile", "Normalize", "RotateClusters", "FillHoles", "Padding" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ELowpoly), global::y3d.e.ELowpoly.Parser, new[]{ "Oname", "Lp3Dmax", "LpBlender", "LpMeshlab" }, new[]{ "Lowtype" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.LPoly3DMax), global::y3d.e.LPoly3DMax.Parser, new[]{ "VertexPercent", "VertexCount", "OptimizationMode", "Normals", "FavorCompactFaces", "PreventFlippedNormals", "LockVertexPosition" }, null, new[]{ typeof(global::y3d.e.LPoly3DMax.Types.OpMode), typeof(global::y3d.e.LPoly3DMax.Types.NormalMode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.LPolyBlender), global::y3d.e.LPolyBlender.Parser, new[]{ "Ratio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.LPolyMeshlab), global::y3d.e.LPolyMeshlab.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ENormal), global::y3d.e.ENormal.Parser, new[]{ "Oname", "Lowpoly", "Highpoly", "TexSize", "OutTex", "Normal3Dmax", "NormalXnormal" }, new[]{ "Ntype" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.Normal3DMax), global::y3d.e.Normal3DMax.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ResponseEvent), global::y3d.e.ResponseEvent.Parser, new[]{ "Error", "Msg" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ObjectType {
    [pbr::OriginalName("GEOMETRY")] Geometry = 0,
    [pbr::OriginalName("LIGHT")] Light = 1,
    [pbr::OriginalName("CAMERA")] Camera = 2,
    [pbr::OriginalName("SHAPE")] Shape = 3,
    [pbr::OriginalName("OTHER")] Other = 4,
  }

  public enum GVerType {
    [pbr::OriginalName("NO_VER")] NoVer = 0,
    [pbr::OriginalName("ORIGINAL")] Original = 1,
    [pbr::OriginalName("IN_BAKE")] InBake = 2,
    [pbr::OriginalName("STANDARD")] Standard = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  [START messages]
  /// </summary>
  public sealed partial class YColor : pb::IMessage<YColor> {
    private static readonly pb::MessageParser<YColor> _parser = new pb::MessageParser<YColor>(() => new YColor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YColor(YColor other) : this() {
      name_ = other.name_;
      argb_ = other.argb_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YColor Clone() {
      return new YColor(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "argb" field.</summary>
    public const int ArgbFieldNumber = 2;
    private int argb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Argb {
      get { return argb_; }
      set {
        argb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Argb != other.Argb) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Argb != 0) hash ^= Argb.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Argb != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Argb);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Argb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Argb);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YColor other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Argb != 0) {
        Argb = other.Argb;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Argb = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YPoint3 : pb::IMessage<YPoint3> {
    private static readonly pb::MessageParser<YPoint3> _parser = new pb::MessageParser<YPoint3>(() => new YPoint3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YPoint3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YPoint3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YPoint3(YPoint3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YPoint3 Clone() {
      return new YPoint3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YPoint3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YPoint3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YPoint3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YBox3 : pb::IMessage<YBox3> {
    private static readonly pb::MessageParser<YBox3> _parser = new pb::MessageParser<YBox3>(() => new YBox3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YBox3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YBox3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YBox3(YBox3 other) : this() {
      Pmin = other.pmin_ != null ? other.Pmin.Clone() : null;
      Pmax = other.pmax_ != null ? other.Pmax.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YBox3 Clone() {
      return new YBox3(this);
    }

    /// <summary>Field number for the "pmin" field.</summary>
    public const int PminFieldNumber = 1;
    private global::y3d.e.YPoint3 pmin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YPoint3 Pmin {
      get { return pmin_; }
      set {
        pmin_ = value;
      }
    }

    /// <summary>Field number for the "pmax" field.</summary>
    public const int PmaxFieldNumber = 2;
    private global::y3d.e.YPoint3 pmax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YPoint3 Pmax {
      get { return pmax_; }
      set {
        pmax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YBox3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YBox3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pmin, other.Pmin)) return false;
      if (!object.Equals(Pmax, other.Pmax)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pmin_ != null) hash ^= Pmin.GetHashCode();
      if (pmax_ != null) hash ^= Pmax.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pmin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pmin);
      }
      if (pmax_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pmax);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pmin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pmin);
      }
      if (pmax_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pmax);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YBox3 other) {
      if (other == null) {
        return;
      }
      if (other.pmin_ != null) {
        if (pmin_ == null) {
          pmin_ = new global::y3d.e.YPoint3();
        }
        Pmin.MergeFrom(other.Pmin);
      }
      if (other.pmax_ != null) {
        if (pmax_ == null) {
          pmax_ = new global::y3d.e.YPoint3();
        }
        Pmax.MergeFrom(other.Pmax);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pmin_ == null) {
              pmin_ = new global::y3d.e.YPoint3();
            }
            input.ReadMessage(pmin_);
            break;
          }
          case 18: {
            if (pmax_ == null) {
              pmax_ = new global::y3d.e.YPoint3();
            }
            input.ReadMessage(pmax_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YResource : pb::IMessage<YResource> {
    private static readonly pb::MessageParser<YResource> _parser = new pb::MessageParser<YResource>(() => new YResource());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YResource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YResource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YResource(YResource other) : this() {
      rid_ = other.rid_;
      rtype_ = other.rtype_;
      link_ = other.link_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YResource Clone() {
      return new YResource(this);
    }

    /// <summary>Field number for the "rid" field.</summary>
    public const int RidFieldNumber = 1;
    private string rid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Rid {
      get { return rid_; }
      set {
        rid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rtype" field.</summary>
    public const int RtypeFieldNumber = 2;
    private global::y3d.e.YResource.Types.ResourceType rtype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YResource.Types.ResourceType Rtype {
      get { return rtype_; }
      set {
        rtype_ = value;
      }
    }

    /// <summary>Field number for the "link" field.</summary>
    public const int LinkFieldNumber = 3;
    private string link_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Link {
      get { return link_; }
      set {
        link_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YResource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YResource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rid != other.Rid) return false;
      if (Rtype != other.Rtype) return false;
      if (Link != other.Link) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rid.Length != 0) hash ^= Rid.GetHashCode();
      if (Rtype != 0) hash ^= Rtype.GetHashCode();
      if (Link.Length != 0) hash ^= Link.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Rid);
      }
      if (Rtype != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Rtype);
      }
      if (Link.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Link);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Rid);
      }
      if (Rtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Rtype);
      }
      if (Link.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Link);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YResource other) {
      if (other == null) {
        return;
      }
      if (other.Rid.Length != 0) {
        Rid = other.Rid;
      }
      if (other.Rtype != 0) {
        Rtype = other.Rtype;
      }
      if (other.Link.Length != 0) {
        Link = other.Link;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Rid = input.ReadString();
            break;
          }
          case 16: {
            rtype_ = (global::y3d.e.YResource.Types.ResourceType) input.ReadEnum();
            break;
          }
          case 26: {
            Link = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the YResource message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ResourceType {
        [pbr::OriginalName("BINARY")] Binary = 0,
        [pbr::OriginalName("IMAGE")] Image = 1,
        [pbr::OriginalName("FLATBUFFER")] Flatbuffer = 2,
        [pbr::OriginalName("PROTOBUF")] Protobuf = 3,
        [pbr::OriginalName("CAPNP")] Capnp = 4,
      }

    }
    #endregion

  }

  public sealed partial class YLight : pb::IMessage<YLight> {
    private static readonly pb::MessageParser<YLight> _parser = new pb::MessageParser<YLight>(() => new YLight());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YLight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YLight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YLight(YLight other) : this() {
      diffuse_ = other.diffuse_.Clone();
      specular_ = other.specular_.Clone();
      intensity_ = other.intensity_;
      range_ = other.range_;
      angle_ = other.angle_;
      exponent_ = other.exponent_;
      excludedMeshesIds_ = other.excludedMeshesIds_.Clone();
      includedOnlyMeshesIds_ = other.includedOnlyMeshesIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YLight Clone() {
      return new YLight(this);
    }

    /// <summary>Field number for the "diffuse" field.</summary>
    public const int DiffuseFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_diffuse_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> diffuse_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Diffuse {
      get { return diffuse_; }
    }

    /// <summary>Field number for the "specular" field.</summary>
    public const int SpecularFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_specular_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> specular_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Specular {
      get { return specular_; }
    }

    /// <summary>Field number for the "intensity" field.</summary>
    public const int IntensityFieldNumber = 5;
    private float intensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Intensity {
      get { return intensity_; }
      set {
        intensity_ = value;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 6;
    private float range_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 7;
    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "exponent" field.</summary>
    public const int ExponentFieldNumber = 8;
    private float exponent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Exponent {
      get { return exponent_; }
      set {
        exponent_ = value;
      }
    }

    /// <summary>Field number for the "excludedMeshesIds" field.</summary>
    public const int ExcludedMeshesIdsFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_excludedMeshesIds_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> excludedMeshesIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ExcludedMeshesIds {
      get { return excludedMeshesIds_; }
    }

    /// <summary>Field number for the "includedOnlyMeshesIds" field.</summary>
    public const int IncludedOnlyMeshesIdsFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_includedOnlyMeshesIds_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> includedOnlyMeshesIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> IncludedOnlyMeshesIds {
      get { return includedOnlyMeshesIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YLight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YLight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!diffuse_.Equals(other.diffuse_)) return false;
      if(!specular_.Equals(other.specular_)) return false;
      if (Intensity != other.Intensity) return false;
      if (Range != other.Range) return false;
      if (Angle != other.Angle) return false;
      if (Exponent != other.Exponent) return false;
      if(!excludedMeshesIds_.Equals(other.excludedMeshesIds_)) return false;
      if(!includedOnlyMeshesIds_.Equals(other.includedOnlyMeshesIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= diffuse_.GetHashCode();
      hash ^= specular_.GetHashCode();
      if (Intensity != 0F) hash ^= Intensity.GetHashCode();
      if (Range != 0F) hash ^= Range.GetHashCode();
      if (Angle != 0F) hash ^= Angle.GetHashCode();
      if (Exponent != 0F) hash ^= Exponent.GetHashCode();
      hash ^= excludedMeshesIds_.GetHashCode();
      hash ^= includedOnlyMeshesIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      diffuse_.WriteTo(output, _repeated_diffuse_codec);
      specular_.WriteTo(output, _repeated_specular_codec);
      if (Intensity != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Intensity);
      }
      if (Range != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Range);
      }
      if (Angle != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Angle);
      }
      if (Exponent != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Exponent);
      }
      excludedMeshesIds_.WriteTo(output, _repeated_excludedMeshesIds_codec);
      includedOnlyMeshesIds_.WriteTo(output, _repeated_includedOnlyMeshesIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += diffuse_.CalculateSize(_repeated_diffuse_codec);
      size += specular_.CalculateSize(_repeated_specular_codec);
      if (Intensity != 0F) {
        size += 1 + 4;
      }
      if (Range != 0F) {
        size += 1 + 4;
      }
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (Exponent != 0F) {
        size += 1 + 4;
      }
      size += excludedMeshesIds_.CalculateSize(_repeated_excludedMeshesIds_codec);
      size += includedOnlyMeshesIds_.CalculateSize(_repeated_includedOnlyMeshesIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YLight other) {
      if (other == null) {
        return;
      }
      diffuse_.Add(other.diffuse_);
      specular_.Add(other.specular_);
      if (other.Intensity != 0F) {
        Intensity = other.Intensity;
      }
      if (other.Range != 0F) {
        Range = other.Range;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      if (other.Exponent != 0F) {
        Exponent = other.Exponent;
      }
      excludedMeshesIds_.Add(other.excludedMeshesIds_);
      includedOnlyMeshesIds_.Add(other.includedOnlyMeshesIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26:
          case 29: {
            diffuse_.AddEntriesFrom(input, _repeated_diffuse_codec);
            break;
          }
          case 34:
          case 37: {
            specular_.AddEntriesFrom(input, _repeated_specular_codec);
            break;
          }
          case 45: {
            Intensity = input.ReadFloat();
            break;
          }
          case 53: {
            Range = input.ReadFloat();
            break;
          }
          case 61: {
            Angle = input.ReadFloat();
            break;
          }
          case 69: {
            Exponent = input.ReadFloat();
            break;
          }
          case 74: {
            excludedMeshesIds_.AddEntriesFrom(input, _repeated_excludedMeshesIds_codec);
            break;
          }
          case 82: {
            includedOnlyMeshesIds_.AddEntriesFrom(input, _repeated_includedOnlyMeshesIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YCamera : pb::IMessage<YCamera> {
    private static readonly pb::MessageParser<YCamera> _parser = new pb::MessageParser<YCamera>(() => new YCamera());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YCamera> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YCamera() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YCamera(YCamera other) : this() {
      rotation_ = other.rotation_.Clone();
      target_ = other.target_.Clone();
      fov_ = other.fov_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YCamera Clone() {
      return new YCamera(this);
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_rotation_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> rotation_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Rotation {
      get { return rotation_; }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_target_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> target_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Target {
      get { return target_; }
    }

    /// <summary>Field number for the "fov" field.</summary>
    public const int FovFieldNumber = 5;
    private float fov_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Fov {
      get { return fov_; }
      set {
        fov_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YCamera);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YCamera other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rotation_.Equals(other.rotation_)) return false;
      if(!target_.Equals(other.target_)) return false;
      if (Fov != other.Fov) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rotation_.GetHashCode();
      hash ^= target_.GetHashCode();
      if (Fov != 0F) hash ^= Fov.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rotation_.WriteTo(output, _repeated_rotation_codec);
      target_.WriteTo(output, _repeated_target_codec);
      if (Fov != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Fov);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rotation_.CalculateSize(_repeated_rotation_codec);
      size += target_.CalculateSize(_repeated_target_codec);
      if (Fov != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YCamera other) {
      if (other == null) {
        return;
      }
      rotation_.Add(other.rotation_);
      target_.Add(other.target_);
      if (other.Fov != 0F) {
        Fov = other.Fov;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26:
          case 29: {
            rotation_.AddEntriesFrom(input, _repeated_rotation_codec);
            break;
          }
          case 34:
          case 37: {
            target_.AddEntriesFrom(input, _repeated_target_codec);
            break;
          }
          case 45: {
            Fov = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YMesh : pb::IMessage<YMesh> {
    private static readonly pb::MessageParser<YMesh> _parser = new pb::MessageParser<YMesh>(() => new YMesh());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YMesh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMesh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMesh(YMesh other) : this() {
      numFaces_ = other.numFaces_;
      Bbox = other.bbox_ != null ? other.Bbox.Clone() : null;
      resId_ = other.resId_;
      xstatus_ = other.xstatus_;
      mtype_ = other.mtype_;
      vername_ = other.vername_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMesh Clone() {
      return new YMesh(this);
    }

    /// <summary>Field number for the "num_faces" field.</summary>
    public const int NumFacesFieldNumber = 1;
    private int numFaces_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumFaces {
      get { return numFaces_; }
      set {
        numFaces_ = value;
      }
    }

    /// <summary>Field number for the "bbox" field.</summary>
    public const int BboxFieldNumber = 2;
    private global::y3d.e.YBox3 bbox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YBox3 Bbox {
      get { return bbox_; }
      set {
        bbox_ = value;
      }
    }

    /// <summary>Field number for the "res_id" field.</summary>
    public const int ResIdFieldNumber = 3;
    private string resId_ = "";
    /// <summary>
    ///  Resource ID (GUID)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResId {
      get { return resId_; }
      set {
        resId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "xstatus" field.</summary>
    public const int XstatusFieldNumber = 5;
    private global::y3d.e.YMesh.Types.XrefStatus xstatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMesh.Types.XrefStatus Xstatus {
      get { return xstatus_; }
      set {
        xstatus_ = value;
      }
    }

    /// <summary>Field number for the "mtype" field.</summary>
    public const int MtypeFieldNumber = 6;
    private global::y3d.e.YMesh.Types.MeshType mtype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMesh.Types.MeshType Mtype {
      get { return mtype_; }
      set {
        mtype_ = value;
      }
    }

    /// <summary>Field number for the "vername" field.</summary>
    public const int VernameFieldNumber = 7;
    private string vername_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Vername {
      get { return vername_; }
      set {
        vername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YMesh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YMesh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumFaces != other.NumFaces) return false;
      if (!object.Equals(Bbox, other.Bbox)) return false;
      if (ResId != other.ResId) return false;
      if (Xstatus != other.Xstatus) return false;
      if (Mtype != other.Mtype) return false;
      if (Vername != other.Vername) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumFaces != 0) hash ^= NumFaces.GetHashCode();
      if (bbox_ != null) hash ^= Bbox.GetHashCode();
      if (ResId.Length != 0) hash ^= ResId.GetHashCode();
      if (Xstatus != 0) hash ^= Xstatus.GetHashCode();
      if (Mtype != 0) hash ^= Mtype.GetHashCode();
      if (Vername.Length != 0) hash ^= Vername.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumFaces != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumFaces);
      }
      if (bbox_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bbox);
      }
      if (ResId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ResId);
      }
      if (Xstatus != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Xstatus);
      }
      if (Mtype != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Mtype);
      }
      if (Vername.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Vername);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumFaces != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumFaces);
      }
      if (bbox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbox);
      }
      if (ResId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResId);
      }
      if (Xstatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Xstatus);
      }
      if (Mtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mtype);
      }
      if (Vername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Vername);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YMesh other) {
      if (other == null) {
        return;
      }
      if (other.NumFaces != 0) {
        NumFaces = other.NumFaces;
      }
      if (other.bbox_ != null) {
        if (bbox_ == null) {
          bbox_ = new global::y3d.e.YBox3();
        }
        Bbox.MergeFrom(other.Bbox);
      }
      if (other.ResId.Length != 0) {
        ResId = other.ResId;
      }
      if (other.Xstatus != 0) {
        Xstatus = other.Xstatus;
      }
      if (other.Mtype != 0) {
        Mtype = other.Mtype;
      }
      if (other.Vername.Length != 0) {
        Vername = other.Vername;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumFaces = input.ReadInt32();
            break;
          }
          case 18: {
            if (bbox_ == null) {
              bbox_ = new global::y3d.e.YBox3();
            }
            input.ReadMessage(bbox_);
            break;
          }
          case 26: {
            ResId = input.ReadString();
            break;
          }
          case 40: {
            xstatus_ = (global::y3d.e.YMesh.Types.XrefStatus) input.ReadEnum();
            break;
          }
          case 48: {
            mtype_ = (global::y3d.e.YMesh.Types.MeshType) input.ReadEnum();
            break;
          }
          case 58: {
            Vername = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the YMesh message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum MeshType {
        [pbr::OriginalName("Unknown")] Unknown = 0,
        [pbr::OriginalName("Editable_Mesh")] EditableMesh = 1,
        [pbr::OriginalName("Editable_Poly")] EditablePoly = 2,
        [pbr::OriginalName("Box")] Box = 3,
        [pbr::OriginalName("Sphere")] Sphere = 4,
        [pbr::OriginalName("GeoSphere")] GeoSphere = 5,
        [pbr::OriginalName("Cylinder")] Cylinder = 6,
        [pbr::OriginalName("Tube")] Tube = 7,
        [pbr::OriginalName("Torus")] Torus = 8,
        [pbr::OriginalName("Pyramid")] Pyramid = 9,
        [pbr::OriginalName("Teapot")] Teapot = 10,
        [pbr::OriginalName("Plane")] Plane = 11,
        [pbr::OriginalName("Target")] Target = 12,
        [pbr::OriginalName("Cone")] Cone = 13,
      }

      public enum XrefStatus {
        [pbr::OriginalName("ORIGINAL")] Original = 0,
        [pbr::OriginalName("XREF_HIGHT")] XrefHight = 1,
        [pbr::OriginalName("XREF_LOW")] XrefLow = 2,
        [pbr::OriginalName("XREF_LOW_DISPLAY")] XrefLowDisplay = 3,
        [pbr::OriginalName("BOX")] Box = 4,
        [pbr::OriginalName("MERGED")] Merged = 5,
        [pbr::OriginalName("FINAL")] Final = 6,
      }

    }
    #endregion

  }

  public sealed partial class YObject : pb::IMessage<YObject> {
    private static readonly pb::MessageParser<YObject> _parser = new pb::MessageParser<YObject>(() => new YObject());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YObject(YObject other) : this() {
      name_ = other.name_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      extra_ = other.extra_.Clone();
      otype_ = other.otype_;
      tags_ = other.tags_.Clone();
      cateId_ = other.cateId_;
      switch (other.DataCase) {
        case DataOneofCase.Light:
          Light = other.Light.Clone();
          break;
        case DataOneofCase.Camera:
          Camera = other.Camera.Clone();
          break;
        case DataOneofCase.Mesh:
          Mesh = other.Mesh.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YObject Clone() {
      return new YObject(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::y3d.e.YPoint3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YPoint3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 5;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_extra_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 42);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> extra_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Extra {
      get { return extra_; }
    }

    /// <summary>Field number for the "otype" field.</summary>
    public const int OtypeFieldNumber = 6;
    private global::y3d.e.ObjectType otype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ObjectType Otype {
      get { return otype_; }
      set {
        otype_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "cate_id" field.</summary>
    public const int CateIdFieldNumber = 8;
    private int cateId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CateId {
      get { return cateId_; }
      set {
        cateId_ = value;
      }
    }

    /// <summary>Field number for the "light" field.</summary>
    public const int LightFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YLight Light {
      get { return dataCase_ == DataOneofCase.Light ? (global::y3d.e.YLight) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Light;
      }
    }

    /// <summary>Field number for the "camera" field.</summary>
    public const int CameraFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YCamera Camera {
      get { return dataCase_ == DataOneofCase.Camera ? (global::y3d.e.YCamera) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Camera;
      }
    }

    /// <summary>Field number for the "mesh" field.</summary>
    public const int MeshFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMesh Mesh {
      get { return dataCase_ == DataOneofCase.Mesh ? (global::y3d.e.YMesh) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Mesh;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Light = 10,
      Camera = 11,
      Mesh = 12,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!Extra.Equals(other.Extra)) return false;
      if (Otype != other.Otype) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (CateId != other.CateId) return false;
      if (!object.Equals(Light, other.Light)) return false;
      if (!object.Equals(Camera, other.Camera)) return false;
      if (!object.Equals(Mesh, other.Mesh)) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      hash ^= Extra.GetHashCode();
      if (Otype != 0) hash ^= Otype.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (CateId != 0) hash ^= CateId.GetHashCode();
      if (dataCase_ == DataOneofCase.Light) hash ^= Light.GetHashCode();
      if (dataCase_ == DataOneofCase.Camera) hash ^= Camera.GetHashCode();
      if (dataCase_ == DataOneofCase.Mesh) hash ^= Mesh.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      extra_.WriteTo(output, _map_extra_codec);
      if (Otype != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Otype);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (CateId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CateId);
      }
      if (dataCase_ == DataOneofCase.Light) {
        output.WriteRawTag(82);
        output.WriteMessage(Light);
      }
      if (dataCase_ == DataOneofCase.Camera) {
        output.WriteRawTag(90);
        output.WriteMessage(Camera);
      }
      if (dataCase_ == DataOneofCase.Mesh) {
        output.WriteRawTag(98);
        output.WriteMessage(Mesh);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      size += extra_.CalculateSize(_map_extra_codec);
      if (Otype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Otype);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (CateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CateId);
      }
      if (dataCase_ == DataOneofCase.Light) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Light);
      }
      if (dataCase_ == DataOneofCase.Camera) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Camera);
      }
      if (dataCase_ == DataOneofCase.Mesh) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mesh);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YObject other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::y3d.e.YPoint3();
        }
        Pos.MergeFrom(other.Pos);
      }
      extra_.Add(other.extra_);
      if (other.Otype != 0) {
        Otype = other.Otype;
      }
      tags_.Add(other.tags_);
      if (other.CateId != 0) {
        CateId = other.CateId;
      }
      switch (other.DataCase) {
        case DataOneofCase.Light:
          Light = other.Light;
          break;
        case DataOneofCase.Camera:
          Camera = other.Camera;
          break;
        case DataOneofCase.Mesh:
          Mesh = other.Mesh;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (pos_ == null) {
              pos_ = new global::y3d.e.YPoint3();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 42: {
            extra_.AddEntriesFrom(input, _map_extra_codec);
            break;
          }
          case 48: {
            otype_ = (global::y3d.e.ObjectType) input.ReadEnum();
            break;
          }
          case 58: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 64: {
            CateId = input.ReadInt32();
            break;
          }
          case 82: {
            global::y3d.e.YLight subBuilder = new global::y3d.e.YLight();
            if (dataCase_ == DataOneofCase.Light) {
              subBuilder.MergeFrom(Light);
            }
            input.ReadMessage(subBuilder);
            Light = subBuilder;
            break;
          }
          case 90: {
            global::y3d.e.YCamera subBuilder = new global::y3d.e.YCamera();
            if (dataCase_ == DataOneofCase.Camera) {
              subBuilder.MergeFrom(Camera);
            }
            input.ReadMessage(subBuilder);
            Camera = subBuilder;
            break;
          }
          case 98: {
            global::y3d.e.YMesh subBuilder = new global::y3d.e.YMesh();
            if (dataCase_ == DataOneofCase.Mesh) {
              subBuilder.MergeFrom(Mesh);
            }
            input.ReadMessage(subBuilder);
            Mesh = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class YArea : pb::IMessage<YArea> {
    private static readonly pb::MessageParser<YArea> _parser = new pb::MessageParser<YArea>(() => new YArea());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YArea> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YArea() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YArea(YArea other) : this() {
      name_ = other.name_;
      groups_ = other.groups_.Clone();
      objs_ = other.objs_.Clone();
      gvers_ = other.gvers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YArea Clone() {
      return new YArea(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::y3d.e.YGroup> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(18, global::y3d.e.YGroup.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YGroup> groups_ = new pbc::RepeatedField<global::y3d.e.YGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YGroup> Groups {
      get { return groups_; }
    }

    /// <summary>Field number for the "objs" field.</summary>
    public const int ObjsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::y3d.e.YObject> _repeated_objs_codec
        = pb::FieldCodec.ForMessage(26, global::y3d.e.YObject.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YObject> objs_ = new pbc::RepeatedField<global::y3d.e.YObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YObject> Objs {
      get { return objs_; }
    }

    /// <summary>Field number for the "gvers" field.</summary>
    public const int GversFieldNumber = 6;
    private static readonly pbc::MapField<string, global::y3d.e.YGroupVer>.Codec _map_gvers_codec
        = new pbc::MapField<string, global::y3d.e.YGroupVer>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::y3d.e.YGroupVer.Parser), 50);
    private readonly pbc::MapField<string, global::y3d.e.YGroupVer> gvers_ = new pbc::MapField<string, global::y3d.e.YGroupVer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::y3d.e.YGroupVer> Gvers {
      get { return gvers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YArea);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YArea other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!groups_.Equals(other.groups_)) return false;
      if(!objs_.Equals(other.objs_)) return false;
      if (!Gvers.Equals(other.Gvers)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= groups_.GetHashCode();
      hash ^= objs_.GetHashCode();
      hash ^= Gvers.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      groups_.WriteTo(output, _repeated_groups_codec);
      objs_.WriteTo(output, _repeated_objs_codec);
      gvers_.WriteTo(output, _map_gvers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += groups_.CalculateSize(_repeated_groups_codec);
      size += objs_.CalculateSize(_repeated_objs_codec);
      size += gvers_.CalculateSize(_map_gvers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YArea other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      groups_.Add(other.groups_);
      objs_.Add(other.objs_);
      gvers_.Add(other.gvers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
          case 26: {
            objs_.AddEntriesFrom(input, _repeated_objs_codec);
            break;
          }
          case 50: {
            gvers_.AddEntriesFrom(input, _map_gvers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YLayer : pb::IMessage<YLayer> {
    private static readonly pb::MessageParser<YLayer> _parser = new pb::MessageParser<YLayer>(() => new YLayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YLayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YLayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YLayer(YLayer other) : this() {
      name_ = other.name_;
      groups_ = other.groups_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YLayer Clone() {
      return new YLayer(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::y3d.e.YGroup> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(18, global::y3d.e.YGroup.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YGroup> groups_ = new pbc::RepeatedField<global::y3d.e.YGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YGroup> Groups {
      get { return groups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YLayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YLayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!groups_.Equals(other.groups_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= groups_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      groups_.WriteTo(output, _repeated_groups_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += groups_.CalculateSize(_repeated_groups_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YLayer other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      groups_.Add(other.groups_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YGroup : pb::IMessage<YGroup> {
    private static readonly pb::MessageParser<YGroup> _parser = new pb::MessageParser<YGroup>(() => new YGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YGroup(YGroup other) : this() {
      name_ = other.name_;
      objs_ = other.objs_.Clone();
      children_ = other.children_.Clone();
      gvType_ = other.gvType_;
      xref_ = other.xref_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YGroup Clone() {
      return new YGroup(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "objs" field.</summary>
    public const int ObjsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::y3d.e.YObject> _repeated_objs_codec
        = pb::FieldCodec.ForMessage(18, global::y3d.e.YObject.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YObject> objs_ = new pbc::RepeatedField<global::y3d.e.YObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YObject> Objs {
      get { return objs_; }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 3;
    private static readonly pb::FieldCodec<global::y3d.e.YGroup> _repeated_children_codec
        = pb::FieldCodec.ForMessage(26, global::y3d.e.YGroup.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YGroup> children_ = new pbc::RepeatedField<global::y3d.e.YGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YGroup> Children {
      get { return children_; }
    }

    /// <summary>Field number for the "gv_type" field.</summary>
    public const int GvTypeFieldNumber = 4;
    private global::y3d.e.GVerType gvType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.GVerType GvType {
      get { return gvType_; }
      set {
        gvType_ = value;
      }
    }

    /// <summary>Field number for the "xref" field.</summary>
    public const int XrefFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_xref_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> xref_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Xref {
      get { return xref_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!objs_.Equals(other.objs_)) return false;
      if(!children_.Equals(other.children_)) return false;
      if (GvType != other.GvType) return false;
      if(!xref_.Equals(other.xref_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= objs_.GetHashCode();
      hash ^= children_.GetHashCode();
      if (GvType != 0) hash ^= GvType.GetHashCode();
      hash ^= xref_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      objs_.WriteTo(output, _repeated_objs_codec);
      children_.WriteTo(output, _repeated_children_codec);
      if (GvType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) GvType);
      }
      xref_.WriteTo(output, _repeated_xref_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += objs_.CalculateSize(_repeated_objs_codec);
      size += children_.CalculateSize(_repeated_children_codec);
      if (GvType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GvType);
      }
      size += xref_.CalculateSize(_repeated_xref_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YGroup other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      objs_.Add(other.objs_);
      children_.Add(other.children_);
      if (other.GvType != 0) {
        GvType = other.GvType;
      }
      xref_.Add(other.xref_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            objs_.AddEntriesFrom(input, _repeated_objs_codec);
            break;
          }
          case 26: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
          case 32: {
            gvType_ = (global::y3d.e.GVerType) input.ReadEnum();
            break;
          }
          case 42: {
            xref_.AddEntriesFrom(input, _repeated_xref_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YGroupVer : pb::IMessage<YGroupVer> {
    private static readonly pb::MessageParser<YGroupVer> _parser = new pb::MessageParser<YGroupVer>(() => new YGroupVer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YGroupVer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YGroupVer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YGroupVer(YGroupVer other) : this() {
      vname_ = other.vname_;
      GroupData = other.groupData_ != null ? other.GroupData.Clone() : null;
      step_ = other.step_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YGroupVer Clone() {
      return new YGroupVer(this);
    }

    /// <summary>Field number for the "vname" field.</summary>
    public const int VnameFieldNumber = 1;
    private string vname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Vname {
      get { return vname_; }
      set {
        vname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groupData" field.</summary>
    public const int GroupDataFieldNumber = 2;
    private global::y3d.e.YGroup groupData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YGroup GroupData {
      get { return groupData_; }
      set {
        groupData_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 3;
    private int step_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YGroupVer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YGroupVer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Vname != other.Vname) return false;
      if (!object.Equals(GroupData, other.GroupData)) return false;
      if (Step != other.Step) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Vname.Length != 0) hash ^= Vname.GetHashCode();
      if (groupData_ != null) hash ^= GroupData.GetHashCode();
      if (Step != 0) hash ^= Step.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Vname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Vname);
      }
      if (groupData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GroupData);
      }
      if (Step != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Step);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Vname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Vname);
      }
      if (groupData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupData);
      }
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Step);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YGroupVer other) {
      if (other == null) {
        return;
      }
      if (other.Vname.Length != 0) {
        Vname = other.Vname;
      }
      if (other.groupData_ != null) {
        if (groupData_ == null) {
          groupData_ = new global::y3d.e.YGroup();
        }
        GroupData.MergeFrom(other.GroupData);
      }
      if (other.Step != 0) {
        Step = other.Step;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Vname = input.ReadString();
            break;
          }
          case 18: {
            if (groupData_ == null) {
              groupData_ = new global::y3d.e.YGroup();
            }
            input.ReadMessage(groupData_);
            break;
          }
          case 24: {
            Step = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FilterView : pb::IMessage<FilterView> {
    private static readonly pb::MessageParser<FilterView> _parser = new pb::MessageParser<FilterView>(() => new FilterView());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FilterView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterView(FilterView other) : this() {
      otype_ = other.otype_;
      faceRange_ = other.faceRange_;
      search_ = other.search_;
      aid_ = other.aid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterView Clone() {
      return new FilterView(this);
    }

    /// <summary>Field number for the "otype" field.</summary>
    public const int OtypeFieldNumber = 1;
    private global::y3d.e.ObjectType otype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ObjectType Otype {
      get { return otype_; }
      set {
        otype_ = value;
      }
    }

    /// <summary>Field number for the "face_range" field.</summary>
    public const int FaceRangeFieldNumber = 2;
    private int faceRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceRange {
      get { return faceRange_; }
      set {
        faceRange_ = value;
      }
    }

    /// <summary>Field number for the "search" field.</summary>
    public const int SearchFieldNumber = 3;
    private string search_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Search {
      get { return search_; }
      set {
        search_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aid" field.</summary>
    public const int AidFieldNumber = 4;
    private int aid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Aid {
      get { return aid_; }
      set {
        aid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FilterView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FilterView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Otype != other.Otype) return false;
      if (FaceRange != other.FaceRange) return false;
      if (Search != other.Search) return false;
      if (Aid != other.Aid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Otype != 0) hash ^= Otype.GetHashCode();
      if (FaceRange != 0) hash ^= FaceRange.GetHashCode();
      if (Search.Length != 0) hash ^= Search.GetHashCode();
      if (Aid != 0) hash ^= Aid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Otype != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Otype);
      }
      if (FaceRange != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FaceRange);
      }
      if (Search.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Search);
      }
      if (Aid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Aid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Otype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Otype);
      }
      if (FaceRange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceRange);
      }
      if (Search.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Search);
      }
      if (Aid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Aid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FilterView other) {
      if (other == null) {
        return;
      }
      if (other.Otype != 0) {
        Otype = other.Otype;
      }
      if (other.FaceRange != 0) {
        FaceRange = other.FaceRange;
      }
      if (other.Search.Length != 0) {
        Search = other.Search;
      }
      if (other.Aid != 0) {
        Aid = other.Aid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            otype_ = (global::y3d.e.ObjectType) input.ReadEnum();
            break;
          }
          case 16: {
            FaceRange = input.ReadInt32();
            break;
          }
          case 26: {
            Search = input.ReadString();
            break;
          }
          case 32: {
            Aid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectInfo : pb::IMessage<ProjectInfo> {
    private static readonly pb::MessageParser<ProjectInfo> _parser = new pb::MessageParser<ProjectInfo>(() => new ProjectInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectInfo(ProjectInfo other) : this() {
      pname_ = other.pname_;
      path_ = other.path_;
      Ts = other.ts_ != null ? other.Ts.Clone() : null;
      faceRange_ = other.faceRange_.Clone();
      frColor_ = other.frColor_.Clone();
      fview_ = other.fview_.Clone();
      optimizeRatio_ = other.optimizeRatio_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectInfo Clone() {
      return new ProjectInfo(this);
    }

    /// <summary>Field number for the "pname" field.</summary>
    public const int PnameFieldNumber = 1;
    private string pname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pname {
      get { return pname_; }
      set {
        pname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ts" field.</summary>
    public const int TsFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp ts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Ts {
      get { return ts_; }
      set {
        ts_ = value;
      }
    }

    /// <summary>Field number for the "face_range" field.</summary>
    public const int FaceRangeFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_faceRange_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> faceRange_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///  string path = 2;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> FaceRange {
      get { return faceRange_; }
    }

    /// <summary>Field number for the "fr_color" field.</summary>
    public const int FrColorFieldNumber = 5;
    private static readonly pb::FieldCodec<global::y3d.e.YColor> _repeated_frColor_codec
        = pb::FieldCodec.ForMessage(42, global::y3d.e.YColor.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YColor> frColor_ = new pbc::RepeatedField<global::y3d.e.YColor>();
    /// <summary>
    ///  green, yellow, red v.v...
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YColor> FrColor {
      get { return frColor_; }
    }

    /// <summary>Field number for the "fview" field.</summary>
    public const int FviewFieldNumber = 6;
    private static readonly pb::FieldCodec<global::y3d.e.FilterView> _repeated_fview_codec
        = pb::FieldCodec.ForMessage(50, global::y3d.e.FilterView.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.FilterView> fview_ = new pbc::RepeatedField<global::y3d.e.FilterView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.FilterView> Fview {
      get { return fview_; }
    }

    /// <summary>Field number for the "optimize_ratio" field.</summary>
    public const int OptimizeRatioFieldNumber = 7;
    private float optimizeRatio_;
    /// <summary>
    ///  YAreaList alist=6;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OptimizeRatio {
      get { return optimizeRatio_; }
      set {
        optimizeRatio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pname != other.Pname) return false;
      if (Path != other.Path) return false;
      if (!object.Equals(Ts, other.Ts)) return false;
      if(!faceRange_.Equals(other.faceRange_)) return false;
      if(!frColor_.Equals(other.frColor_)) return false;
      if(!fview_.Equals(other.fview_)) return false;
      if (OptimizeRatio != other.OptimizeRatio) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pname.Length != 0) hash ^= Pname.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (ts_ != null) hash ^= Ts.GetHashCode();
      hash ^= faceRange_.GetHashCode();
      hash ^= frColor_.GetHashCode();
      hash ^= fview_.GetHashCode();
      if (OptimizeRatio != 0F) hash ^= OptimizeRatio.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Pname);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (ts_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Ts);
      }
      faceRange_.WriteTo(output, _repeated_faceRange_codec);
      frColor_.WriteTo(output, _repeated_frColor_codec);
      fview_.WriteTo(output, _repeated_fview_codec);
      if (OptimizeRatio != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(OptimizeRatio);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pname);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (ts_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ts);
      }
      size += faceRange_.CalculateSize(_repeated_faceRange_codec);
      size += frColor_.CalculateSize(_repeated_frColor_codec);
      size += fview_.CalculateSize(_repeated_fview_codec);
      if (OptimizeRatio != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectInfo other) {
      if (other == null) {
        return;
      }
      if (other.Pname.Length != 0) {
        Pname = other.Pname;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.ts_ != null) {
        if (ts_ == null) {
          ts_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Ts.MergeFrom(other.Ts);
      }
      faceRange_.Add(other.faceRange_);
      frColor_.Add(other.frColor_);
      fview_.Add(other.fview_);
      if (other.OptimizeRatio != 0F) {
        OptimizeRatio = other.OptimizeRatio;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Pname = input.ReadString();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26: {
            if (ts_ == null) {
              ts_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ts_);
            break;
          }
          case 34:
          case 32: {
            faceRange_.AddEntriesFrom(input, _repeated_faceRange_codec);
            break;
          }
          case 42: {
            frColor_.AddEntriesFrom(input, _repeated_frColor_codec);
            break;
          }
          case 50: {
            fview_.AddEntriesFrom(input, _repeated_fview_codec);
            break;
          }
          case 61: {
            OptimizeRatio = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SettingData : pb::IMessage<SettingData> {
    private static readonly pb::MessageParser<SettingData> _parser = new pb::MessageParser<SettingData>(() => new SettingData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SettingData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingData(SettingData other) : this() {
      asetName_ = other.asetName_;
      data_ = other.data_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingData Clone() {
      return new SettingData(this);
    }

    /// <summary>Field number for the "aset_name" field.</summary>
    public const int AsetNameFieldNumber = 1;
    private string asetName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AsetName {
      get { return asetName_; }
      set {
        asetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_data_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 18);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> data_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SettingData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SettingData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AsetName != other.AsetName) return false;
      if (!Data.Equals(other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AsetName.Length != 0) hash ^= AsetName.GetHashCode();
      hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AsetName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AsetName);
      }
      data_.WriteTo(output, _map_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AsetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AsetName);
      }
      size += data_.CalculateSize(_map_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SettingData other) {
      if (other == null) {
        return;
      }
      if (other.AsetName.Length != 0) {
        AsetName = other.AsetName;
      }
      data_.Add(other.data_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AsetName = input.ReadString();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _map_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PSetting : pb::IMessage<PSetting> {
    private static readonly pb::MessageParser<PSetting> _parser = new pb::MessageParser<PSetting>(() => new PSetting());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSetting(PSetting other) : this() {
      Extra = other.extra_ != null ? other.Extra.Clone() : null;
      maxRecent_ = other.maxRecent_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSetting Clone() {
      return new PSetting(this);
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 1;
    private global::y3d.e.SettingData extra_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.SettingData Extra {
      get { return extra_; }
      set {
        extra_ = value;
      }
    }

    /// <summary>Field number for the "max_recent" field.</summary>
    public const int MaxRecentFieldNumber = 2;
    private int maxRecent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRecent {
      get { return maxRecent_; }
      set {
        maxRecent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Extra, other.Extra)) return false;
      if (MaxRecent != other.MaxRecent) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (extra_ != null) hash ^= Extra.GetHashCode();
      if (MaxRecent != 0) hash ^= MaxRecent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (extra_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Extra);
      }
      if (MaxRecent != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxRecent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (extra_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extra);
      }
      if (MaxRecent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRecent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PSetting other) {
      if (other == null) {
        return;
      }
      if (other.extra_ != null) {
        if (extra_ == null) {
          extra_ = new global::y3d.e.SettingData();
        }
        Extra.MergeFrom(other.Extra);
      }
      if (other.MaxRecent != 0) {
        MaxRecent = other.MaxRecent;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (extra_ == null) {
              extra_ = new global::y3d.e.SettingData();
            }
            input.ReadMessage(extra_);
            break;
          }
          case 16: {
            MaxRecent = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YSystem : pb::IMessage<YSystem> {
    private static readonly pb::MessageParser<YSystem> _parser = new pb::MessageParser<YSystem>(() => new YSystem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YSystem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YSystem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YSystem(YSystem other) : this() {
      workingFolder_ = other.workingFolder_;
      DefaultInfo = other.defaultInfo_ != null ? other.DefaultInfo.Clone() : null;
      DefaultSetting = other.defaultSetting_ != null ? other.DefaultSetting.Clone() : null;
      projects_ = other.projects_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YSystem Clone() {
      return new YSystem(this);
    }

    /// <summary>Field number for the "working_folder" field.</summary>
    public const int WorkingFolderFieldNumber = 1;
    private string workingFolder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkingFolder {
      get { return workingFolder_; }
      set {
        workingFolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "default_info" field.</summary>
    public const int DefaultInfoFieldNumber = 2;
    private global::y3d.e.ProjectInfo defaultInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ProjectInfo DefaultInfo {
      get { return defaultInfo_; }
      set {
        defaultInfo_ = value;
      }
    }

    /// <summary>Field number for the "default_setting" field.</summary>
    public const int DefaultSettingFieldNumber = 3;
    private global::y3d.e.PSetting defaultSetting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.PSetting DefaultSetting {
      get { return defaultSetting_; }
      set {
        defaultSetting_ = value;
      }
    }

    /// <summary>Field number for the "projects" field.</summary>
    public const int ProjectsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::y3d.e.ProjectInfo> _repeated_projects_codec
        = pb::FieldCodec.ForMessage(34, global::y3d.e.ProjectInfo.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.ProjectInfo> projects_ = new pbc::RepeatedField<global::y3d.e.ProjectInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.ProjectInfo> Projects {
      get { return projects_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YSystem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YSystem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkingFolder != other.WorkingFolder) return false;
      if (!object.Equals(DefaultInfo, other.DefaultInfo)) return false;
      if (!object.Equals(DefaultSetting, other.DefaultSetting)) return false;
      if(!projects_.Equals(other.projects_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkingFolder.Length != 0) hash ^= WorkingFolder.GetHashCode();
      if (defaultInfo_ != null) hash ^= DefaultInfo.GetHashCode();
      if (defaultSetting_ != null) hash ^= DefaultSetting.GetHashCode();
      hash ^= projects_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkingFolder.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WorkingFolder);
      }
      if (defaultInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DefaultInfo);
      }
      if (defaultSetting_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DefaultSetting);
      }
      projects_.WriteTo(output, _repeated_projects_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkingFolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkingFolder);
      }
      if (defaultInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultInfo);
      }
      if (defaultSetting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultSetting);
      }
      size += projects_.CalculateSize(_repeated_projects_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YSystem other) {
      if (other == null) {
        return;
      }
      if (other.WorkingFolder.Length != 0) {
        WorkingFolder = other.WorkingFolder;
      }
      if (other.defaultInfo_ != null) {
        if (defaultInfo_ == null) {
          defaultInfo_ = new global::y3d.e.ProjectInfo();
        }
        DefaultInfo.MergeFrom(other.DefaultInfo);
      }
      if (other.defaultSetting_ != null) {
        if (defaultSetting_ == null) {
          defaultSetting_ = new global::y3d.e.PSetting();
        }
        DefaultSetting.MergeFrom(other.DefaultSetting);
      }
      projects_.Add(other.projects_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WorkingFolder = input.ReadString();
            break;
          }
          case 18: {
            if (defaultInfo_ == null) {
              defaultInfo_ = new global::y3d.e.ProjectInfo();
            }
            input.ReadMessage(defaultInfo_);
            break;
          }
          case 26: {
            if (defaultSetting_ == null) {
              defaultSetting_ = new global::y3d.e.PSetting();
            }
            input.ReadMessage(defaultSetting_);
            break;
          }
          case 34: {
            projects_.AddEntriesFrom(input, _repeated_projects_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YAreaList : pb::IMessage<YAreaList> {
    private static readonly pb::MessageParser<YAreaList> _parser = new pb::MessageParser<YAreaList>(() => new YAreaList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YAreaList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YAreaList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YAreaList(YAreaList other) : this() {
      areas_ = other.areas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YAreaList Clone() {
      return new YAreaList(this);
    }

    /// <summary>Field number for the "areas" field.</summary>
    public const int AreasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::y3d.e.YArea> _repeated_areas_codec
        = pb::FieldCodec.ForMessage(10, global::y3d.e.YArea.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YArea> areas_ = new pbc::RepeatedField<global::y3d.e.YArea>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YArea> Areas {
      get { return areas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YAreaList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YAreaList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!areas_.Equals(other.areas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= areas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      areas_.WriteTo(output, _repeated_areas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += areas_.CalculateSize(_repeated_areas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YAreaList other) {
      if (other == null) {
        return;
      }
      areas_.Add(other.areas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            areas_.AddEntriesFrom(input, _repeated_areas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      switch (other.EventCase) {
        case EventOneofCase.Noevent:
          Noevent = other.Noevent.Clone();
          break;
        case EventOneofCase.Select:
          Select = other.Select.Clone();
          break;
        case EventOneofCase.Move:
          Move = other.Move.Clone();
          break;
        case EventOneofCase.Rotate:
          Rotate = other.Rotate.Clone();
          break;
        case EventOneofCase.Del:
          Del = other.Del.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "noevent" field.</summary>
    public const int NoeventFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ENone Noevent {
      get { return eventCase_ == EventOneofCase.Noevent ? (global::y3d.e.ENone) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.Noevent;
      }
    }

    /// <summary>Field number for the "select" field.</summary>
    public const int SelectFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ESelect Select {
      get { return eventCase_ == EventOneofCase.Select ? (global::y3d.e.ESelect) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.Select;
      }
    }

    /// <summary>Field number for the "move" field.</summary>
    public const int MoveFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.EMove Move {
      get { return eventCase_ == EventOneofCase.Move ? (global::y3d.e.EMove) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.Move;
      }
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ERotate Rotate {
      get { return eventCase_ == EventOneofCase.Rotate ? (global::y3d.e.ERotate) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.Rotate;
      }
    }

    /// <summary>Field number for the "del" field.</summary>
    public const int DelFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.EDelete Del {
      get { return eventCase_ == EventOneofCase.Del ? (global::y3d.e.EDelete) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.Del;
      }
    }

    private object event_;
    /// <summary>Enum of possible cases for the "event" oneof.</summary>
    public enum EventOneofCase {
      None = 0,
      Noevent = 1,
      Select = 2,
      Move = 3,
      Rotate = 4,
      Del = 5,
    }
    private EventOneofCase eventCase_ = EventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventOneofCase EventCase {
      get { return eventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvent() {
      eventCase_ = EventOneofCase.None;
      event_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Noevent, other.Noevent)) return false;
      if (!object.Equals(Select, other.Select)) return false;
      if (!object.Equals(Move, other.Move)) return false;
      if (!object.Equals(Rotate, other.Rotate)) return false;
      if (!object.Equals(Del, other.Del)) return false;
      if (EventCase != other.EventCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventCase_ == EventOneofCase.Noevent) hash ^= Noevent.GetHashCode();
      if (eventCase_ == EventOneofCase.Select) hash ^= Select.GetHashCode();
      if (eventCase_ == EventOneofCase.Move) hash ^= Move.GetHashCode();
      if (eventCase_ == EventOneofCase.Rotate) hash ^= Rotate.GetHashCode();
      if (eventCase_ == EventOneofCase.Del) hash ^= Del.GetHashCode();
      hash ^= (int) eventCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eventCase_ == EventOneofCase.Noevent) {
        output.WriteRawTag(10);
        output.WriteMessage(Noevent);
      }
      if (eventCase_ == EventOneofCase.Select) {
        output.WriteRawTag(18);
        output.WriteMessage(Select);
      }
      if (eventCase_ == EventOneofCase.Move) {
        output.WriteRawTag(26);
        output.WriteMessage(Move);
      }
      if (eventCase_ == EventOneofCase.Rotate) {
        output.WriteRawTag(34);
        output.WriteMessage(Rotate);
      }
      if (eventCase_ == EventOneofCase.Del) {
        output.WriteRawTag(42);
        output.WriteMessage(Del);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventCase_ == EventOneofCase.Noevent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Noevent);
      }
      if (eventCase_ == EventOneofCase.Select) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Select);
      }
      if (eventCase_ == EventOneofCase.Move) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Move);
      }
      if (eventCase_ == EventOneofCase.Rotate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotate);
      }
      if (eventCase_ == EventOneofCase.Del) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Del);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      switch (other.EventCase) {
        case EventOneofCase.Noevent:
          Noevent = other.Noevent;
          break;
        case EventOneofCase.Select:
          Select = other.Select;
          break;
        case EventOneofCase.Move:
          Move = other.Move;
          break;
        case EventOneofCase.Rotate:
          Rotate = other.Rotate;
          break;
        case EventOneofCase.Del:
          Del = other.Del;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::y3d.e.ENone subBuilder = new global::y3d.e.ENone();
            if (eventCase_ == EventOneofCase.Noevent) {
              subBuilder.MergeFrom(Noevent);
            }
            input.ReadMessage(subBuilder);
            Noevent = subBuilder;
            break;
          }
          case 18: {
            global::y3d.e.ESelect subBuilder = new global::y3d.e.ESelect();
            if (eventCase_ == EventOneofCase.Select) {
              subBuilder.MergeFrom(Select);
            }
            input.ReadMessage(subBuilder);
            Select = subBuilder;
            break;
          }
          case 26: {
            global::y3d.e.EMove subBuilder = new global::y3d.e.EMove();
            if (eventCase_ == EventOneofCase.Move) {
              subBuilder.MergeFrom(Move);
            }
            input.ReadMessage(subBuilder);
            Move = subBuilder;
            break;
          }
          case 34: {
            global::y3d.e.ERotate subBuilder = new global::y3d.e.ERotate();
            if (eventCase_ == EventOneofCase.Rotate) {
              subBuilder.MergeFrom(Rotate);
            }
            input.ReadMessage(subBuilder);
            Rotate = subBuilder;
            break;
          }
          case 42: {
            global::y3d.e.EDelete subBuilder = new global::y3d.e.EDelete();
            if (eventCase_ == EventOneofCase.Del) {
              subBuilder.MergeFrom(Del);
            }
            input.ReadMessage(subBuilder);
            Del = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ENone : pb::IMessage<ENone> {
    private static readonly pb::MessageParser<ENone> _parser = new pb::MessageParser<ENone>(() => new ENone());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ENone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENone(ENone other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENone Clone() {
      return new ENone(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ENone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ENone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ENone other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ESelect : pb::IMessage<ESelect> {
    private static readonly pb::MessageParser<ESelect> _parser = new pb::MessageParser<ESelect>(() => new ESelect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESelect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESelect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESelect(ESelect other) : this() {
      name_ = other.name_;
      isolate_ = other.isolate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESelect Clone() {
      return new ESelect(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isolate" field.</summary>
    public const int IsolateFieldNumber = 2;
    private bool isolate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isolate {
      get { return isolate_; }
      set {
        isolate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESelect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESelect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Isolate != other.Isolate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Isolate != false) hash ^= Isolate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Isolate != false) {
        output.WriteRawTag(16);
        output.WriteBool(Isolate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Isolate != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESelect other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Isolate != false) {
        Isolate = other.Isolate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Isolate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EMove : pb::IMessage<EMove> {
    private static readonly pb::MessageParser<EMove> _parser = new pb::MessageParser<EMove>(() => new EMove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EMove(EMove other) : this() {
      point_ = other.point_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EMove Clone() {
      return new EMove(this);
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_point_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> point_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Point {
      get { return point_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!point_.Equals(other.point_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= point_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      point_.WriteTo(output, _repeated_point_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += point_.CalculateSize(_repeated_point_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EMove other) {
      if (other == null) {
        return;
      }
      point_.Add(other.point_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 13: {
            point_.AddEntriesFrom(input, _repeated_point_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ERotate : pb::IMessage<ERotate> {
    private static readonly pb::MessageParser<ERotate> _parser = new pb::MessageParser<ERotate>(() => new ERotate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ERotate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ERotate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ERotate(ERotate other) : this() {
      rotate_ = other.rotate_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ERotate Clone() {
      return new ERotate(this);
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_rotate_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> rotate_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Rotate {
      get { return rotate_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ERotate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ERotate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rotate_.Equals(other.rotate_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rotate_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rotate_.WriteTo(output, _repeated_rotate_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rotate_.CalculateSize(_repeated_rotate_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ERotate other) {
      if (other == null) {
        return;
      }
      rotate_.Add(other.rotate_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 13: {
            rotate_.AddEntriesFrom(input, _repeated_rotate_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EDelete : pb::IMessage<EDelete> {
    private static readonly pb::MessageParser<EDelete> _parser = new pb::MessageParser<EDelete>(() => new EDelete());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EDelete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EDelete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EDelete(EDelete other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EDelete Clone() {
      return new EDelete(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EDelete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EDelete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EDelete other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EIsolate : pb::IMessage<EIsolate> {
    private static readonly pb::MessageParser<EIsolate> _parser = new pb::MessageParser<EIsolate>(() => new EIsolate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EIsolate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EIsolate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EIsolate(EIsolate other) : this() {
      name_ = other.name_;
      endIsolate_ = other.endIsolate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EIsolate Clone() {
      return new EIsolate(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endIsolate" field.</summary>
    public const int EndIsolateFieldNumber = 2;
    private bool endIsolate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EndIsolate {
      get { return endIsolate_; }
      set {
        endIsolate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EIsolate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EIsolate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (EndIsolate != other.EndIsolate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (EndIsolate != false) hash ^= EndIsolate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (EndIsolate != false) {
        output.WriteRawTag(16);
        output.WriteBool(EndIsolate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (EndIsolate != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EIsolate other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.EndIsolate != false) {
        EndIsolate = other.EndIsolate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            EndIsolate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResultReply : pb::IMessage<ResultReply> {
    private static readonly pb::MessageParser<ResultReply> _parser = new pb::MessageParser<ResultReply>(() => new ResultReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResultReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultReply(ResultReply other) : this() {
      error_ = other.error_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultReply Clone() {
      return new ResultReply(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private bool error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResultReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResultReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error != false) hash ^= Error.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error != false) {
        output.WriteRawTag(8);
        output.WriteBool(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResultReply other) {
      if (other == null) {
        return;
      }
      if (other.Error != false) {
        Error = other.Error;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Error = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EmptyParam : pb::IMessage<EmptyParam> {
    private static readonly pb::MessageParser<EmptyParam> _parser = new pb::MessageParser<EmptyParam>(() => new EmptyParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmptyParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyParam(EmptyParam other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyParam Clone() {
      return new EmptyParam(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmptyParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmptyParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmptyParam other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RenameParam : pb::IMessage<RenameParam> {
    private static readonly pb::MessageParser<RenameParam> _parser = new pb::MessageParser<RenameParam>(() => new RenameParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenameParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameParam(RenameParam other) : this() {
      useSelect_ = other.useSelect_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameParam Clone() {
      return new RenameParam(this);
    }

    /// <summary>Field number for the "use_select" field.</summary>
    public const int UseSelectFieldNumber = 1;
    private bool useSelect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseSelect {
      get { return useSelect_; }
      set {
        useSelect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenameParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenameParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UseSelect != other.UseSelect) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UseSelect != false) hash ^= UseSelect.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UseSelect != false) {
        output.WriteRawTag(8);
        output.WriteBool(UseSelect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UseSelect != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenameParam other) {
      if (other == null) {
        return;
      }
      if (other.UseSelect != false) {
        UseSelect = other.UseSelect;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UseSelect = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Make4TestParam : pb::IMessage<Make4TestParam> {
    private static readonly pb::MessageParser<Make4TestParam> _parser = new pb::MessageParser<Make4TestParam>(() => new Make4TestParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Make4TestParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Make4TestParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Make4TestParam(Make4TestParam other) : this() {
      oname_ = other.oname_;
      lowpoly_ = other.lowpoly_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Make4TestParam Clone() {
      return new Make4TestParam(this);
    }

    /// <summary>Field number for the "oname" field.</summary>
    public const int OnameFieldNumber = 1;
    private string oname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oname {
      get { return oname_; }
      set {
        oname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lowpoly" field.</summary>
    public const int LowpolyFieldNumber = 2;
    private static readonly pb::FieldCodec<global::y3d.e.ELowpoly> _repeated_lowpoly_codec
        = pb::FieldCodec.ForMessage(18, global::y3d.e.ELowpoly.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.ELowpoly> lowpoly_ = new pbc::RepeatedField<global::y3d.e.ELowpoly>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.ELowpoly> Lowpoly {
      get { return lowpoly_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Make4TestParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Make4TestParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oname != other.Oname) return false;
      if(!lowpoly_.Equals(other.lowpoly_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Oname.Length != 0) hash ^= Oname.GetHashCode();
      hash ^= lowpoly_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Oname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Oname);
      }
      lowpoly_.WriteTo(output, _repeated_lowpoly_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Oname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oname);
      }
      size += lowpoly_.CalculateSize(_repeated_lowpoly_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Make4TestParam other) {
      if (other == null) {
        return;
      }
      if (other.Oname.Length != 0) {
        Oname = other.Oname;
      }
      lowpoly_.Add(other.lowpoly_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Oname = input.ReadString();
            break;
          }
          case 18: {
            lowpoly_.AddEntriesFrom(input, _repeated_lowpoly_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OptimizeParam : pb::IMessage<OptimizeParam> {
    private static readonly pb::MessageParser<OptimizeParam> _parser = new pb::MessageParser<OptimizeParam>(() => new OptimizeParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OptimizeParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptimizeParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptimizeParam(OptimizeParam other) : this() {
      ratio_ = other.ratio_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptimizeParam Clone() {
      return new OptimizeParam(this);
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 1;
    private float ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OptimizeParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OptimizeParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ratio != other.Ratio) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ratio != 0F) hash ^= Ratio.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ratio != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Ratio);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ratio != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OptimizeParam other) {
      if (other == null) {
        return;
      }
      if (other.Ratio != 0F) {
        Ratio = other.Ratio;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Ratio = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BatchOptimizeParam : pb::IMessage<BatchOptimizeParam> {
    private static readonly pb::MessageParser<BatchOptimizeParam> _parser = new pb::MessageParser<BatchOptimizeParam>(() => new BatchOptimizeParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchOptimizeParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchOptimizeParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchOptimizeParam(BatchOptimizeParam other) : this() {
      ratio_ = other.ratio_;
      folder_ = other.folder_;
      filename_ = other.filename_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchOptimizeParam Clone() {
      return new BatchOptimizeParam(this);
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 1;
    private float ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "folder" field.</summary>
    public const int FolderFieldNumber = 2;
    private string folder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Folder {
      get { return folder_; }
      set {
        folder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 3;
    private string filename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchOptimizeParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchOptimizeParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ratio != other.Ratio) return false;
      if (Folder != other.Folder) return false;
      if (Filename != other.Filename) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ratio != 0F) hash ^= Ratio.GetHashCode();
      if (Folder.Length != 0) hash ^= Folder.GetHashCode();
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ratio != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Ratio);
      }
      if (Folder.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Folder);
      }
      if (Filename.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Filename);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ratio != 0F) {
        size += 1 + 4;
      }
      if (Folder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Folder);
      }
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchOptimizeParam other) {
      if (other == null) {
        return;
      }
      if (other.Ratio != 0F) {
        Ratio = other.Ratio;
      }
      if (other.Folder.Length != 0) {
        Folder = other.Folder;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Ratio = input.ReadFloat();
            break;
          }
          case 18: {
            Folder = input.ReadString();
            break;
          }
          case 26: {
            Filename = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StringParam : pb::IMessage<StringParam> {
    private static readonly pb::MessageParser<StringParam> _parser = new pb::MessageParser<StringParam>(() => new StringParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringParam(StringParam other) : this() {
      str_ = other.str_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringParam Clone() {
      return new StringParam(this);
    }

    /// <summary>Field number for the "str" field.</summary>
    public const int StrFieldNumber = 1;
    private string str_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Str {
      get { return str_; }
      set {
        str_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Str != other.Str) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Str.Length != 0) hash ^= Str.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Str.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Str);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Str.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Str);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringParam other) {
      if (other == null) {
        return;
      }
      if (other.Str.Length != 0) {
        Str = other.Str;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Str = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestParam : pb::IMessage<TestParam> {
    private static readonly pb::MessageParser<TestParam> _parser = new pb::MessageParser<TestParam>(() => new TestParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestParam(TestParam other) : this() {
      testName_ = other.testName_;
      Anything = other.anything_ != null ? other.Anything.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestParam Clone() {
      return new TestParam(this);
    }

    /// <summary>Field number for the "test_name" field.</summary>
    public const int TestNameFieldNumber = 1;
    private string testName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestName {
      get { return testName_; }
      set {
        testName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "anything" field.</summary>
    public const int AnythingFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Any anything_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Anything {
      get { return anything_; }
      set {
        anything_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TestName != other.TestName) return false;
      if (!object.Equals(Anything, other.Anything)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TestName.Length != 0) hash ^= TestName.GetHashCode();
      if (anything_ != null) hash ^= Anything.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TestName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TestName);
      }
      if (anything_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Anything);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TestName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestName);
      }
      if (anything_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Anything);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestParam other) {
      if (other == null) {
        return;
      }
      if (other.TestName.Length != 0) {
        TestName = other.TestName;
      }
      if (other.anything_ != null) {
        if (anything_ == null) {
          anything_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Anything.MergeFrom(other.Anything);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TestName = input.ReadString();
            break;
          }
          case 18: {
            if (anything_ == null) {
              anything_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(anything_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Unwrap
  /// </summary>
  public sealed partial class EUnwrap : pb::IMessage<EUnwrap> {
    private static readonly pb::MessageParser<EUnwrap> _parser = new pb::MessageParser<EUnwrap>(() => new EUnwrap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EUnwrap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EUnwrap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EUnwrap(EUnwrap other) : this() {
      oname_ = other.oname_;
      channel_ = other.channel_;
      switch (other.SettingCase) {
        case SettingOneofCase.Max3D:
          Max3D = other.Max3D.Clone();
          break;
        case SettingOneofCase.Blender:
          Blender = other.Blender.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EUnwrap Clone() {
      return new EUnwrap(this);
    }

    /// <summary>Field number for the "oname" field.</summary>
    public const int OnameFieldNumber = 1;
    private string oname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oname {
      get { return oname_; }
      set {
        oname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private int channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "max3d" field.</summary>
    public const int Max3DFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.MaxUnwrap Max3D {
      get { return settingCase_ == SettingOneofCase.Max3D ? (global::y3d.e.MaxUnwrap) setting_ : null; }
      set {
        setting_ = value;
        settingCase_ = value == null ? SettingOneofCase.None : SettingOneofCase.Max3D;
      }
    }

    /// <summary>Field number for the "blender" field.</summary>
    public const int BlenderFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.BlenderUnwrap Blender {
      get { return settingCase_ == SettingOneofCase.Blender ? (global::y3d.e.BlenderUnwrap) setting_ : null; }
      set {
        setting_ = value;
        settingCase_ = value == null ? SettingOneofCase.None : SettingOneofCase.Blender;
      }
    }

    private object setting_;
    /// <summary>Enum of possible cases for the "setting" oneof.</summary>
    public enum SettingOneofCase {
      None = 0,
      Max3D = 3,
      Blender = 4,
    }
    private SettingOneofCase settingCase_ = SettingOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingOneofCase SettingCase {
      get { return settingCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSetting() {
      settingCase_ = SettingOneofCase.None;
      setting_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EUnwrap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EUnwrap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oname != other.Oname) return false;
      if (Channel != other.Channel) return false;
      if (!object.Equals(Max3D, other.Max3D)) return false;
      if (!object.Equals(Blender, other.Blender)) return false;
      if (SettingCase != other.SettingCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Oname.Length != 0) hash ^= Oname.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (settingCase_ == SettingOneofCase.Max3D) hash ^= Max3D.GetHashCode();
      if (settingCase_ == SettingOneofCase.Blender) hash ^= Blender.GetHashCode();
      hash ^= (int) settingCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Oname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Oname);
      }
      if (Channel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Channel);
      }
      if (settingCase_ == SettingOneofCase.Max3D) {
        output.WriteRawTag(26);
        output.WriteMessage(Max3D);
      }
      if (settingCase_ == SettingOneofCase.Blender) {
        output.WriteRawTag(34);
        output.WriteMessage(Blender);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Oname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oname);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      if (settingCase_ == SettingOneofCase.Max3D) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Max3D);
      }
      if (settingCase_ == SettingOneofCase.Blender) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blender);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EUnwrap other) {
      if (other == null) {
        return;
      }
      if (other.Oname.Length != 0) {
        Oname = other.Oname;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      switch (other.SettingCase) {
        case SettingOneofCase.Max3D:
          Max3D = other.Max3D;
          break;
        case SettingOneofCase.Blender:
          Blender = other.Blender;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Oname = input.ReadString();
            break;
          }
          case 16: {
            Channel = input.ReadInt32();
            break;
          }
          case 26: {
            global::y3d.e.MaxUnwrap subBuilder = new global::y3d.e.MaxUnwrap();
            if (settingCase_ == SettingOneofCase.Max3D) {
              subBuilder.MergeFrom(Max3D);
            }
            input.ReadMessage(subBuilder);
            Max3D = subBuilder;
            break;
          }
          case 34: {
            global::y3d.e.BlenderUnwrap subBuilder = new global::y3d.e.BlenderUnwrap();
            if (settingCase_ == SettingOneofCase.Blender) {
              subBuilder.MergeFrom(Blender);
            }
            input.ReadMessage(subBuilder);
            Blender = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlenderUnwrap : pb::IMessage<BlenderUnwrap> {
    private static readonly pb::MessageParser<BlenderUnwrap> _parser = new pb::MessageParser<BlenderUnwrap>(() => new BlenderUnwrap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlenderUnwrap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlenderUnwrap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlenderUnwrap(BlenderUnwrap other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlenderUnwrap Clone() {
      return new BlenderUnwrap(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlenderUnwrap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlenderUnwrap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlenderUnwrap other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class MaxUnwrap : pb::IMessage<MaxUnwrap> {
    private static readonly pb::MessageParser<MaxUnwrap> _parser = new pb::MessageParser<MaxUnwrap>(() => new MaxUnwrap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MaxUnwrap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaxUnwrap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaxUnwrap(MaxUnwrap other) : this() {
      angle_ = other.angle_;
      spacing_ = other.spacing_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaxUnwrap Clone() {
      return new MaxUnwrap(this);
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 1;
    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "spacing" field.</summary>
    public const int SpacingFieldNumber = 2;
    private float spacing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Spacing {
      get { return spacing_; }
      set {
        spacing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MaxUnwrap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MaxUnwrap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Angle != other.Angle) return false;
      if (Spacing != other.Spacing) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Angle != 0F) hash ^= Angle.GetHashCode();
      if (Spacing != 0F) hash ^= Spacing.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Angle != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Angle);
      }
      if (Spacing != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Spacing);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (Spacing != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MaxUnwrap other) {
      if (other == null) {
        return;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      if (other.Spacing != 0F) {
        Spacing = other.Spacing;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Angle = input.ReadFloat();
            break;
          }
          case 21: {
            Spacing = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Packing
  /// </summary>
  public sealed partial class EPacking : pb::IMessage<EPacking> {
    private static readonly pb::MessageParser<EPacking> _parser = new pb::MessageParser<EPacking>(() => new EPacking());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EPacking> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPacking() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPacking(EPacking other) : this() {
      oname_ = other.oname_;
      uvname_ = other.uvname_;
      tileSize_ = other.tileSize_;
      switch (other.PackCase) {
        case PackOneofCase.Packmax:
          Packmax = other.Packmax.Clone();
          break;
        case PackOneofCase.Packrect:
          Packrect = other.Packrect.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPacking Clone() {
      return new EPacking(this);
    }

    /// <summary>Field number for the "oname" field.</summary>
    public const int OnameFieldNumber = 1;
    private string oname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oname {
      get { return oname_; }
      set {
        oname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uvname" field.</summary>
    public const int UvnameFieldNumber = 2;
    private string uvname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uvname {
      get { return uvname_; }
      set {
        uvname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tile_Size" field.</summary>
    public const int TileSizeFieldNumber = 3;
    private int tileSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TileSize {
      get { return tileSize_; }
      set {
        tileSize_ = value;
      }
    }

    /// <summary>Field number for the "packmax" field.</summary>
    public const int PackmaxFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.Pack3DMax Packmax {
      get { return packCase_ == PackOneofCase.Packmax ? (global::y3d.e.Pack3DMax) pack_ : null; }
      set {
        pack_ = value;
        packCase_ = value == null ? PackOneofCase.None : PackOneofCase.Packmax;
      }
    }

    /// <summary>Field number for the "packrect" field.</summary>
    public const int PackrectFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.PackRect Packrect {
      get { return packCase_ == PackOneofCase.Packrect ? (global::y3d.e.PackRect) pack_ : null; }
      set {
        pack_ = value;
        packCase_ = value == null ? PackOneofCase.None : PackOneofCase.Packrect;
      }
    }

    private object pack_;
    /// <summary>Enum of possible cases for the "pack" oneof.</summary>
    public enum PackOneofCase {
      None = 0,
      Packmax = 4,
      Packrect = 5,
    }
    private PackOneofCase packCase_ = PackOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackOneofCase PackCase {
      get { return packCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPack() {
      packCase_ = PackOneofCase.None;
      pack_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EPacking);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EPacking other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oname != other.Oname) return false;
      if (Uvname != other.Uvname) return false;
      if (TileSize != other.TileSize) return false;
      if (!object.Equals(Packmax, other.Packmax)) return false;
      if (!object.Equals(Packrect, other.Packrect)) return false;
      if (PackCase != other.PackCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Oname.Length != 0) hash ^= Oname.GetHashCode();
      if (Uvname.Length != 0) hash ^= Uvname.GetHashCode();
      if (TileSize != 0) hash ^= TileSize.GetHashCode();
      if (packCase_ == PackOneofCase.Packmax) hash ^= Packmax.GetHashCode();
      if (packCase_ == PackOneofCase.Packrect) hash ^= Packrect.GetHashCode();
      hash ^= (int) packCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Oname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Oname);
      }
      if (Uvname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uvname);
      }
      if (TileSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TileSize);
      }
      if (packCase_ == PackOneofCase.Packmax) {
        output.WriteRawTag(34);
        output.WriteMessage(Packmax);
      }
      if (packCase_ == PackOneofCase.Packrect) {
        output.WriteRawTag(42);
        output.WriteMessage(Packrect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Oname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oname);
      }
      if (Uvname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uvname);
      }
      if (TileSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TileSize);
      }
      if (packCase_ == PackOneofCase.Packmax) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Packmax);
      }
      if (packCase_ == PackOneofCase.Packrect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Packrect);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EPacking other) {
      if (other == null) {
        return;
      }
      if (other.Oname.Length != 0) {
        Oname = other.Oname;
      }
      if (other.Uvname.Length != 0) {
        Uvname = other.Uvname;
      }
      if (other.TileSize != 0) {
        TileSize = other.TileSize;
      }
      switch (other.PackCase) {
        case PackOneofCase.Packmax:
          Packmax = other.Packmax;
          break;
        case PackOneofCase.Packrect:
          Packrect = other.Packrect;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Oname = input.ReadString();
            break;
          }
          case 18: {
            Uvname = input.ReadString();
            break;
          }
          case 24: {
            TileSize = input.ReadInt32();
            break;
          }
          case 34: {
            global::y3d.e.Pack3DMax subBuilder = new global::y3d.e.Pack3DMax();
            if (packCase_ == PackOneofCase.Packmax) {
              subBuilder.MergeFrom(Packmax);
            }
            input.ReadMessage(subBuilder);
            Packmax = subBuilder;
            break;
          }
          case 42: {
            global::y3d.e.PackRect subBuilder = new global::y3d.e.PackRect();
            if (packCase_ == PackOneofCase.Packrect) {
              subBuilder.MergeFrom(Packrect);
            }
            input.ReadMessage(subBuilder);
            Packrect = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class PackRect : pb::IMessage<PackRect> {
    private static readonly pb::MessageParser<PackRect> _parser = new pb::MessageParser<PackRect>(() => new PackRect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackRect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackRect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackRect(PackRect other) : this() {
      density_ = other.density_;
      padding_ = other.padding_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackRect Clone() {
      return new PackRect(this);
    }

    /// <summary>Field number for the "density" field.</summary>
    public const int DensityFieldNumber = 1;
    private int density_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Density {
      get { return density_; }
      set {
        density_ = value;
      }
    }

    /// <summary>Field number for the "padding" field.</summary>
    public const int PaddingFieldNumber = 2;
    private float padding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Padding {
      get { return padding_; }
      set {
        padding_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackRect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackRect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Density != other.Density) return false;
      if (Padding != other.Padding) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Density != 0) hash ^= Density.GetHashCode();
      if (Padding != 0F) hash ^= Padding.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Density != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Density);
      }
      if (Padding != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Padding);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Density != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Density);
      }
      if (Padding != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackRect other) {
      if (other == null) {
        return;
      }
      if (other.Density != 0) {
        Density = other.Density;
      }
      if (other.Padding != 0F) {
        Padding = other.Padding;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Density = input.ReadInt32();
            break;
          }
          case 21: {
            Padding = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pack3DMax : pb::IMessage<Pack3DMax> {
    private static readonly pb::MessageParser<Pack3DMax> _parser = new pb::MessageParser<Pack3DMax>(() => new Pack3DMax());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pack3DMax> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pack3DMax() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pack3DMax(Pack3DMax other) : this() {
      numTile_ = other.numTile_;
      normalize_ = other.normalize_;
      rotateClusters_ = other.rotateClusters_;
      fillHoles_ = other.fillHoles_;
      padding_ = other.padding_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pack3DMax Clone() {
      return new Pack3DMax(this);
    }

    /// <summary>Field number for the "numTile" field.</summary>
    public const int NumTileFieldNumber = 1;
    private int numTile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumTile {
      get { return numTile_; }
      set {
        numTile_ = value;
      }
    }

    /// <summary>Field number for the "normalize" field.</summary>
    public const int NormalizeFieldNumber = 2;
    private bool normalize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Normalize {
      get { return normalize_; }
      set {
        normalize_ = value;
      }
    }

    /// <summary>Field number for the "rotate_clusters" field.</summary>
    public const int RotateClustersFieldNumber = 3;
    private bool rotateClusters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RotateClusters {
      get { return rotateClusters_; }
      set {
        rotateClusters_ = value;
      }
    }

    /// <summary>Field number for the "fill_holes" field.</summary>
    public const int FillHolesFieldNumber = 4;
    private bool fillHoles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FillHoles {
      get { return fillHoles_; }
      set {
        fillHoles_ = value;
      }
    }

    /// <summary>Field number for the "padding" field.</summary>
    public const int PaddingFieldNumber = 5;
    private bool padding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Padding {
      get { return padding_; }
      set {
        padding_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pack3DMax);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pack3DMax other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumTile != other.NumTile) return false;
      if (Normalize != other.Normalize) return false;
      if (RotateClusters != other.RotateClusters) return false;
      if (FillHoles != other.FillHoles) return false;
      if (Padding != other.Padding) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumTile != 0) hash ^= NumTile.GetHashCode();
      if (Normalize != false) hash ^= Normalize.GetHashCode();
      if (RotateClusters != false) hash ^= RotateClusters.GetHashCode();
      if (FillHoles != false) hash ^= FillHoles.GetHashCode();
      if (Padding != false) hash ^= Padding.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumTile != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumTile);
      }
      if (Normalize != false) {
        output.WriteRawTag(16);
        output.WriteBool(Normalize);
      }
      if (RotateClusters != false) {
        output.WriteRawTag(24);
        output.WriteBool(RotateClusters);
      }
      if (FillHoles != false) {
        output.WriteRawTag(32);
        output.WriteBool(FillHoles);
      }
      if (Padding != false) {
        output.WriteRawTag(40);
        output.WriteBool(Padding);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumTile != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumTile);
      }
      if (Normalize != false) {
        size += 1 + 1;
      }
      if (RotateClusters != false) {
        size += 1 + 1;
      }
      if (FillHoles != false) {
        size += 1 + 1;
      }
      if (Padding != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pack3DMax other) {
      if (other == null) {
        return;
      }
      if (other.NumTile != 0) {
        NumTile = other.NumTile;
      }
      if (other.Normalize != false) {
        Normalize = other.Normalize;
      }
      if (other.RotateClusters != false) {
        RotateClusters = other.RotateClusters;
      }
      if (other.FillHoles != false) {
        FillHoles = other.FillHoles;
      }
      if (other.Padding != false) {
        Padding = other.Padding;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumTile = input.ReadInt32();
            break;
          }
          case 16: {
            Normalize = input.ReadBool();
            break;
          }
          case 24: {
            RotateClusters = input.ReadBool();
            break;
          }
          case 32: {
            FillHoles = input.ReadBool();
            break;
          }
          case 40: {
            Padding = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  Low Poly
  /// </summary>
  public sealed partial class ELowpoly : pb::IMessage<ELowpoly> {
    private static readonly pb::MessageParser<ELowpoly> _parser = new pb::MessageParser<ELowpoly>(() => new ELowpoly());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ELowpoly> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ELowpoly() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ELowpoly(ELowpoly other) : this() {
      oname_ = other.oname_;
      switch (other.LowtypeCase) {
        case LowtypeOneofCase.Lp3Dmax:
          Lp3Dmax = other.Lp3Dmax.Clone();
          break;
        case LowtypeOneofCase.LpBlender:
          LpBlender = other.LpBlender.Clone();
          break;
        case LowtypeOneofCase.LpMeshlab:
          LpMeshlab = other.LpMeshlab.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ELowpoly Clone() {
      return new ELowpoly(this);
    }

    /// <summary>Field number for the "oname" field.</summary>
    public const int OnameFieldNumber = 1;
    private string oname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oname {
      get { return oname_; }
      set {
        oname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lp_3dmax" field.</summary>
    public const int Lp3DmaxFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.LPoly3DMax Lp3Dmax {
      get { return lowtypeCase_ == LowtypeOneofCase.Lp3Dmax ? (global::y3d.e.LPoly3DMax) lowtype_ : null; }
      set {
        lowtype_ = value;
        lowtypeCase_ = value == null ? LowtypeOneofCase.None : LowtypeOneofCase.Lp3Dmax;
      }
    }

    /// <summary>Field number for the "lp_blender" field.</summary>
    public const int LpBlenderFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.LPolyBlender LpBlender {
      get { return lowtypeCase_ == LowtypeOneofCase.LpBlender ? (global::y3d.e.LPolyBlender) lowtype_ : null; }
      set {
        lowtype_ = value;
        lowtypeCase_ = value == null ? LowtypeOneofCase.None : LowtypeOneofCase.LpBlender;
      }
    }

    /// <summary>Field number for the "lp_meshlab" field.</summary>
    public const int LpMeshlabFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.LPolyMeshlab LpMeshlab {
      get { return lowtypeCase_ == LowtypeOneofCase.LpMeshlab ? (global::y3d.e.LPolyMeshlab) lowtype_ : null; }
      set {
        lowtype_ = value;
        lowtypeCase_ = value == null ? LowtypeOneofCase.None : LowtypeOneofCase.LpMeshlab;
      }
    }

    private object lowtype_;
    /// <summary>Enum of possible cases for the "lowtype" oneof.</summary>
    public enum LowtypeOneofCase {
      None = 0,
      Lp3Dmax = 2,
      LpBlender = 3,
      LpMeshlab = 4,
    }
    private LowtypeOneofCase lowtypeCase_ = LowtypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LowtypeOneofCase LowtypeCase {
      get { return lowtypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLowtype() {
      lowtypeCase_ = LowtypeOneofCase.None;
      lowtype_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ELowpoly);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ELowpoly other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oname != other.Oname) return false;
      if (!object.Equals(Lp3Dmax, other.Lp3Dmax)) return false;
      if (!object.Equals(LpBlender, other.LpBlender)) return false;
      if (!object.Equals(LpMeshlab, other.LpMeshlab)) return false;
      if (LowtypeCase != other.LowtypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Oname.Length != 0) hash ^= Oname.GetHashCode();
      if (lowtypeCase_ == LowtypeOneofCase.Lp3Dmax) hash ^= Lp3Dmax.GetHashCode();
      if (lowtypeCase_ == LowtypeOneofCase.LpBlender) hash ^= LpBlender.GetHashCode();
      if (lowtypeCase_ == LowtypeOneofCase.LpMeshlab) hash ^= LpMeshlab.GetHashCode();
      hash ^= (int) lowtypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Oname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Oname);
      }
      if (lowtypeCase_ == LowtypeOneofCase.Lp3Dmax) {
        output.WriteRawTag(18);
        output.WriteMessage(Lp3Dmax);
      }
      if (lowtypeCase_ == LowtypeOneofCase.LpBlender) {
        output.WriteRawTag(26);
        output.WriteMessage(LpBlender);
      }
      if (lowtypeCase_ == LowtypeOneofCase.LpMeshlab) {
        output.WriteRawTag(34);
        output.WriteMessage(LpMeshlab);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Oname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oname);
      }
      if (lowtypeCase_ == LowtypeOneofCase.Lp3Dmax) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lp3Dmax);
      }
      if (lowtypeCase_ == LowtypeOneofCase.LpBlender) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LpBlender);
      }
      if (lowtypeCase_ == LowtypeOneofCase.LpMeshlab) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LpMeshlab);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ELowpoly other) {
      if (other == null) {
        return;
      }
      if (other.Oname.Length != 0) {
        Oname = other.Oname;
      }
      switch (other.LowtypeCase) {
        case LowtypeOneofCase.Lp3Dmax:
          Lp3Dmax = other.Lp3Dmax;
          break;
        case LowtypeOneofCase.LpBlender:
          LpBlender = other.LpBlender;
          break;
        case LowtypeOneofCase.LpMeshlab:
          LpMeshlab = other.LpMeshlab;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Oname = input.ReadString();
            break;
          }
          case 18: {
            global::y3d.e.LPoly3DMax subBuilder = new global::y3d.e.LPoly3DMax();
            if (lowtypeCase_ == LowtypeOneofCase.Lp3Dmax) {
              subBuilder.MergeFrom(Lp3Dmax);
            }
            input.ReadMessage(subBuilder);
            Lp3Dmax = subBuilder;
            break;
          }
          case 26: {
            global::y3d.e.LPolyBlender subBuilder = new global::y3d.e.LPolyBlender();
            if (lowtypeCase_ == LowtypeOneofCase.LpBlender) {
              subBuilder.MergeFrom(LpBlender);
            }
            input.ReadMessage(subBuilder);
            LpBlender = subBuilder;
            break;
          }
          case 34: {
            global::y3d.e.LPolyMeshlab subBuilder = new global::y3d.e.LPolyMeshlab();
            if (lowtypeCase_ == LowtypeOneofCase.LpMeshlab) {
              subBuilder.MergeFrom(LpMeshlab);
            }
            input.ReadMessage(subBuilder);
            LpMeshlab = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class LPoly3DMax : pb::IMessage<LPoly3DMax> {
    private static readonly pb::MessageParser<LPoly3DMax> _parser = new pb::MessageParser<LPoly3DMax>(() => new LPoly3DMax());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LPoly3DMax> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPoly3DMax() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPoly3DMax(LPoly3DMax other) : this() {
      vertexPercent_ = other.vertexPercent_;
      vertexCount_ = other.vertexCount_;
      optimizationMode_ = other.optimizationMode_;
      normals_ = other.normals_;
      favorCompactFaces_ = other.favorCompactFaces_;
      preventFlippedNormals_ = other.preventFlippedNormals_;
      lockVertexPosition_ = other.lockVertexPosition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPoly3DMax Clone() {
      return new LPoly3DMax(this);
    }

    /// <summary>Field number for the "vertex_percent" field.</summary>
    public const int VertexPercentFieldNumber = 1;
    private float vertexPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VertexPercent {
      get { return vertexPercent_; }
      set {
        vertexPercent_ = value;
      }
    }

    /// <summary>Field number for the "vertex_count" field.</summary>
    public const int VertexCountFieldNumber = 2;
    private int vertexCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VertexCount {
      get { return vertexCount_; }
      set {
        vertexCount_ = value;
      }
    }

    /// <summary>Field number for the "optimization_mode" field.</summary>
    public const int OptimizationModeFieldNumber = 3;
    private global::y3d.e.LPoly3DMax.Types.OpMode optimizationMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.LPoly3DMax.Types.OpMode OptimizationMode {
      get { return optimizationMode_; }
      set {
        optimizationMode_ = value;
      }
    }

    /// <summary>Field number for the "normals" field.</summary>
    public const int NormalsFieldNumber = 4;
    private global::y3d.e.LPoly3DMax.Types.NormalMode normals_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.LPoly3DMax.Types.NormalMode Normals {
      get { return normals_; }
      set {
        normals_ = value;
      }
    }

    /// <summary>Field number for the "favor_compact_faces" field.</summary>
    public const int FavorCompactFacesFieldNumber = 5;
    private bool favorCompactFaces_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FavorCompactFaces {
      get { return favorCompactFaces_; }
      set {
        favorCompactFaces_ = value;
      }
    }

    /// <summary>Field number for the "prevent_flipped_normals" field.</summary>
    public const int PreventFlippedNormalsFieldNumber = 6;
    private bool preventFlippedNormals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PreventFlippedNormals {
      get { return preventFlippedNormals_; }
      set {
        preventFlippedNormals_ = value;
      }
    }

    /// <summary>Field number for the "lock_vertex_position" field.</summary>
    public const int LockVertexPositionFieldNumber = 7;
    private bool lockVertexPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LockVertexPosition {
      get { return lockVertexPosition_; }
      set {
        lockVertexPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LPoly3DMax);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LPoly3DMax other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VertexPercent != other.VertexPercent) return false;
      if (VertexCount != other.VertexCount) return false;
      if (OptimizationMode != other.OptimizationMode) return false;
      if (Normals != other.Normals) return false;
      if (FavorCompactFaces != other.FavorCompactFaces) return false;
      if (PreventFlippedNormals != other.PreventFlippedNormals) return false;
      if (LockVertexPosition != other.LockVertexPosition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VertexPercent != 0F) hash ^= VertexPercent.GetHashCode();
      if (VertexCount != 0) hash ^= VertexCount.GetHashCode();
      if (OptimizationMode != 0) hash ^= OptimizationMode.GetHashCode();
      if (Normals != 0) hash ^= Normals.GetHashCode();
      if (FavorCompactFaces != false) hash ^= FavorCompactFaces.GetHashCode();
      if (PreventFlippedNormals != false) hash ^= PreventFlippedNormals.GetHashCode();
      if (LockVertexPosition != false) hash ^= LockVertexPosition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VertexPercent != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(VertexPercent);
      }
      if (VertexCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VertexCount);
      }
      if (OptimizationMode != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) OptimizationMode);
      }
      if (Normals != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Normals);
      }
      if (FavorCompactFaces != false) {
        output.WriteRawTag(40);
        output.WriteBool(FavorCompactFaces);
      }
      if (PreventFlippedNormals != false) {
        output.WriteRawTag(48);
        output.WriteBool(PreventFlippedNormals);
      }
      if (LockVertexPosition != false) {
        output.WriteRawTag(56);
        output.WriteBool(LockVertexPosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VertexPercent != 0F) {
        size += 1 + 4;
      }
      if (VertexCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VertexCount);
      }
      if (OptimizationMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OptimizationMode);
      }
      if (Normals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Normals);
      }
      if (FavorCompactFaces != false) {
        size += 1 + 1;
      }
      if (PreventFlippedNormals != false) {
        size += 1 + 1;
      }
      if (LockVertexPosition != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LPoly3DMax other) {
      if (other == null) {
        return;
      }
      if (other.VertexPercent != 0F) {
        VertexPercent = other.VertexPercent;
      }
      if (other.VertexCount != 0) {
        VertexCount = other.VertexCount;
      }
      if (other.OptimizationMode != 0) {
        OptimizationMode = other.OptimizationMode;
      }
      if (other.Normals != 0) {
        Normals = other.Normals;
      }
      if (other.FavorCompactFaces != false) {
        FavorCompactFaces = other.FavorCompactFaces;
      }
      if (other.PreventFlippedNormals != false) {
        PreventFlippedNormals = other.PreventFlippedNormals;
      }
      if (other.LockVertexPosition != false) {
        LockVertexPosition = other.LockVertexPosition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            VertexPercent = input.ReadFloat();
            break;
          }
          case 16: {
            VertexCount = input.ReadInt32();
            break;
          }
          case 24: {
            optimizationMode_ = (global::y3d.e.LPoly3DMax.Types.OpMode) input.ReadEnum();
            break;
          }
          case 32: {
            normals_ = (global::y3d.e.LPoly3DMax.Types.NormalMode) input.ReadEnum();
            break;
          }
          case 40: {
            FavorCompactFaces = input.ReadBool();
            break;
          }
          case 48: {
            PreventFlippedNormals = input.ReadBool();
            break;
          }
          case 56: {
            LockVertexPosition = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LPoly3DMax message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum OpMode {
        [pbr::OriginalName("CRUNCH_BORDERS")] CrunchBorders = 0,
        [pbr::OriginalName("PROTECT_BORDERS")] ProtectBorders = 1,
        [pbr::OriginalName("EXCLUDE_BORDERS")] ExcludeBorders = 2,
      }

      public enum NormalMode {
        [pbr::OriginalName("CRUNCH_NORMALS")] CrunchNormals = 0,
        [pbr::OriginalName("PROTECT_NORMALS")] ProtectNormals = 1,
        [pbr::OriginalName("EXCLUDE_NORMALS")] ExcludeNormals = 2,
      }

    }
    #endregion

  }

  public sealed partial class LPolyBlender : pb::IMessage<LPolyBlender> {
    private static readonly pb::MessageParser<LPolyBlender> _parser = new pb::MessageParser<LPolyBlender>(() => new LPolyBlender());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LPolyBlender> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPolyBlender() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPolyBlender(LPolyBlender other) : this() {
      ratio_ = other.ratio_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPolyBlender Clone() {
      return new LPolyBlender(this);
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 1;
    private float ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LPolyBlender);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LPolyBlender other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ratio != other.Ratio) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ratio != 0F) hash ^= Ratio.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ratio != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Ratio);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ratio != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LPolyBlender other) {
      if (other == null) {
        return;
      }
      if (other.Ratio != 0F) {
        Ratio = other.Ratio;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Ratio = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LPolyMeshlab : pb::IMessage<LPolyMeshlab> {
    private static readonly pb::MessageParser<LPolyMeshlab> _parser = new pb::MessageParser<LPolyMeshlab>(() => new LPolyMeshlab());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LPolyMeshlab> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPolyMeshlab() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPolyMeshlab(LPolyMeshlab other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPolyMeshlab Clone() {
      return new LPolyMeshlab(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LPolyMeshlab);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LPolyMeshlab other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LPolyMeshlab other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  Normal
  /// </summary>
  public sealed partial class ENormal : pb::IMessage<ENormal> {
    private static readonly pb::MessageParser<ENormal> _parser = new pb::MessageParser<ENormal>(() => new ENormal());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ENormal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENormal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENormal(ENormal other) : this() {
      oname_ = other.oname_;
      lowpoly_ = other.lowpoly_;
      highpoly_ = other.highpoly_;
      texSize_ = other.texSize_;
      outTex_ = other.outTex_;
      switch (other.NtypeCase) {
        case NtypeOneofCase.Normal3Dmax:
          Normal3Dmax = other.Normal3Dmax.Clone();
          break;
        case NtypeOneofCase.NormalXnormal:
          NormalXnormal = other.NormalXnormal.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENormal Clone() {
      return new ENormal(this);
    }

    /// <summary>Field number for the "oname" field.</summary>
    public const int OnameFieldNumber = 1;
    private string oname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oname {
      get { return oname_; }
      set {
        oname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lowpoly" field.</summary>
    public const int LowpolyFieldNumber = 2;
    private string lowpoly_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lowpoly {
      get { return lowpoly_; }
      set {
        lowpoly_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "highpoly" field.</summary>
    public const int HighpolyFieldNumber = 3;
    private string highpoly_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Highpoly {
      get { return highpoly_; }
      set {
        highpoly_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tex_size" field.</summary>
    public const int TexSizeFieldNumber = 4;
    private uint texSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TexSize {
      get { return texSize_; }
      set {
        texSize_ = value;
      }
    }

    /// <summary>Field number for the "out_tex" field.</summary>
    public const int OutTexFieldNumber = 5;
    private string outTex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OutTex {
      get { return outTex_; }
      set {
        outTex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "normal_3dmax" field.</summary>
    public const int Normal3DmaxFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.Normal3DMax Normal3Dmax {
      get { return ntypeCase_ == NtypeOneofCase.Normal3Dmax ? (global::y3d.e.Normal3DMax) ntype_ : null; }
      set {
        ntype_ = value;
        ntypeCase_ = value == null ? NtypeOneofCase.None : NtypeOneofCase.Normal3Dmax;
      }
    }

    /// <summary>Field number for the "normal_xnormal" field.</summary>
    public const int NormalXnormalFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.Settings NormalXnormal {
      get { return ntypeCase_ == NtypeOneofCase.NormalXnormal ? (global::xnormal.Settings) ntype_ : null; }
      set {
        ntype_ = value;
        ntypeCase_ = value == null ? NtypeOneofCase.None : NtypeOneofCase.NormalXnormal;
      }
    }

    private object ntype_;
    /// <summary>Enum of possible cases for the "ntype" oneof.</summary>
    public enum NtypeOneofCase {
      None = 0,
      Normal3Dmax = 6,
      NormalXnormal = 7,
    }
    private NtypeOneofCase ntypeCase_ = NtypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NtypeOneofCase NtypeCase {
      get { return ntypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNtype() {
      ntypeCase_ = NtypeOneofCase.None;
      ntype_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ENormal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ENormal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oname != other.Oname) return false;
      if (Lowpoly != other.Lowpoly) return false;
      if (Highpoly != other.Highpoly) return false;
      if (TexSize != other.TexSize) return false;
      if (OutTex != other.OutTex) return false;
      if (!object.Equals(Normal3Dmax, other.Normal3Dmax)) return false;
      if (!object.Equals(NormalXnormal, other.NormalXnormal)) return false;
      if (NtypeCase != other.NtypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Oname.Length != 0) hash ^= Oname.GetHashCode();
      if (Lowpoly.Length != 0) hash ^= Lowpoly.GetHashCode();
      if (Highpoly.Length != 0) hash ^= Highpoly.GetHashCode();
      if (TexSize != 0) hash ^= TexSize.GetHashCode();
      if (OutTex.Length != 0) hash ^= OutTex.GetHashCode();
      if (ntypeCase_ == NtypeOneofCase.Normal3Dmax) hash ^= Normal3Dmax.GetHashCode();
      if (ntypeCase_ == NtypeOneofCase.NormalXnormal) hash ^= NormalXnormal.GetHashCode();
      hash ^= (int) ntypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Oname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Oname);
      }
      if (Lowpoly.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Lowpoly);
      }
      if (Highpoly.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Highpoly);
      }
      if (TexSize != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TexSize);
      }
      if (OutTex.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OutTex);
      }
      if (ntypeCase_ == NtypeOneofCase.Normal3Dmax) {
        output.WriteRawTag(50);
        output.WriteMessage(Normal3Dmax);
      }
      if (ntypeCase_ == NtypeOneofCase.NormalXnormal) {
        output.WriteRawTag(58);
        output.WriteMessage(NormalXnormal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Oname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oname);
      }
      if (Lowpoly.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lowpoly);
      }
      if (Highpoly.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Highpoly);
      }
      if (TexSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TexSize);
      }
      if (OutTex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OutTex);
      }
      if (ntypeCase_ == NtypeOneofCase.Normal3Dmax) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Normal3Dmax);
      }
      if (ntypeCase_ == NtypeOneofCase.NormalXnormal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NormalXnormal);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ENormal other) {
      if (other == null) {
        return;
      }
      if (other.Oname.Length != 0) {
        Oname = other.Oname;
      }
      if (other.Lowpoly.Length != 0) {
        Lowpoly = other.Lowpoly;
      }
      if (other.Highpoly.Length != 0) {
        Highpoly = other.Highpoly;
      }
      if (other.TexSize != 0) {
        TexSize = other.TexSize;
      }
      if (other.OutTex.Length != 0) {
        OutTex = other.OutTex;
      }
      switch (other.NtypeCase) {
        case NtypeOneofCase.Normal3Dmax:
          Normal3Dmax = other.Normal3Dmax;
          break;
        case NtypeOneofCase.NormalXnormal:
          NormalXnormal = other.NormalXnormal;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Oname = input.ReadString();
            break;
          }
          case 18: {
            Lowpoly = input.ReadString();
            break;
          }
          case 26: {
            Highpoly = input.ReadString();
            break;
          }
          case 32: {
            TexSize = input.ReadUInt32();
            break;
          }
          case 42: {
            OutTex = input.ReadString();
            break;
          }
          case 50: {
            global::y3d.e.Normal3DMax subBuilder = new global::y3d.e.Normal3DMax();
            if (ntypeCase_ == NtypeOneofCase.Normal3Dmax) {
              subBuilder.MergeFrom(Normal3Dmax);
            }
            input.ReadMessage(subBuilder);
            Normal3Dmax = subBuilder;
            break;
          }
          case 58: {
            global::xnormal.Settings subBuilder = new global::xnormal.Settings();
            if (ntypeCase_ == NtypeOneofCase.NormalXnormal) {
              subBuilder.MergeFrom(NormalXnormal);
            }
            input.ReadMessage(subBuilder);
            NormalXnormal = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Normal3DMax : pb::IMessage<Normal3DMax> {
    private static readonly pb::MessageParser<Normal3DMax> _parser = new pb::MessageParser<Normal3DMax>(() => new Normal3DMax());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Normal3DMax> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Normal3DMax() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Normal3DMax(Normal3DMax other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Normal3DMax Clone() {
      return new Normal3DMax(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Normal3DMax);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Normal3DMax other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Normal3DMax other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ResponseEvent : pb::IMessage<ResponseEvent> {
    private static readonly pb::MessageParser<ResponseEvent> _parser = new pb::MessageParser<ResponseEvent>(() => new ResponseEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseEvent(ResponseEvent other) : this() {
      error_ = other.error_;
      msg_ = other.msg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseEvent Clone() {
      return new ResponseEvent(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private bool error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if (Msg != other.Msg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error != false) hash ^= Error.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error != false) {
        output.WriteRawTag(8);
        output.WriteBool(Error);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error != false) {
        size += 1 + 1;
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseEvent other) {
      if (other == null) {
        return;
      }
      if (other.Error != false) {
        Error = other.Error;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Error = input.ReadBool();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
