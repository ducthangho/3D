// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ysetting.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace y3d.setting {

  /// <summary>Holder for reflection information generated from ysetting.proto</summary>
  public static partial class YsettingReflection {

    #region Descriptor
    /// <summary>File descriptor for ysetting.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static YsettingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg55c2V0dGluZy5wcm90bxIDeTNkGhlnb29nbGUvcHJvdG9idWYvYW55LnBy",
            "b3RvGgl5M2QucHJvdG8i3QEKCkN1c3RvbUF0dHISDAoEbmFtZRgBIAEoCRIb",
            "CgNzdHIYAyABKAsyDC55M2QuVFN0cmluZ0gAEioKDG9wdGlvblN0cmluZxgE",
            "IAEoCzISLnkzZC5UT3B0aW9uU3RyaW5nSAASJAoJb3B0aW9uSW50GAUgASgL",
            "Mg8ueTNkLlRPcHRpb25JbnRIABIoCgtvcHRpb25GbG9hdBgGIAEoCzIRLnkz",
            "ZC5UT3B0aW9uRmxvYXRIABIcCgVjb2xvchgHIAEoCzILLnkzZC5UQ29sb3JI",
            "AEIKCghkYXRhVHlwZSJBCgdUU3RyaW5nEhkKA2NvbRgBIAEoDjIMLnkzZC5D",
            "b21UeXBlEg0KBVJlZ0V4GAIgASgJEgwKBE1hc2sYAyABKAkiRQoEVEludBIZ",
            "CgNjb20YASABKA4yDC55M2QuQ29tVHlwZRIQCghtaW5WYWx1ZRgCIAEoBRIQ",
            "CghtYXhWYWx1ZRgDIAEoBSI7Cg1UT3B0aW9uU3RyaW5nEhkKA2NvbRgBIAEo",
            "DjIMLnkzZC5Db21UeXBlEg8KB29wdGlvbnMYAiADKAkiOAoKVE9wdGlvbklu",
            "dBIZCgNjb20YASABKA4yDC55M2QuQ29tVHlwZRIPCgdvcHRpb25zGAIgAygF",
            "IjoKDFRPcHRpb25GbG9hdBIZCgNjb20YASABKA4yDC55M2QuQ29tVHlwZRIP",
            "CgdvcHRpb25zGAIgAygCIoUBCgZUQ29sb3ISGQoDY29tGAEgASgOMgwueTNk",
            "LkNvbVR5cGUSJAoFY3R5cGUYAiABKA4yFS55M2QuVENvbG9yLkNvbG9yVHlw",
            "ZSI6CglDb2xvclR5cGUSBwoDUkdCEAASCAoEUkdCQRABEgcKA0hFWBACEggK",
            "BENNWUsQAxIHCgNJTlQQBCI4CgdBdHRyU2V0Eg0KBXNuYW1lGAEgASgJEh4K",
            "BWF0dHJzGAIgAygLMg8ueTNkLkN1c3RvbUF0dHIqkwEKB0NvbVR5cGUSCAoE",
            "VEVYVBAAEgkKBVJBRElPEAESDAoIQ09NQk9CT1gQAhIPCgtNVVRJTFNFTEVD",
            "VBADEgwKCENIRUNLQk9YEAQSCgoGT05fT0ZGEAUSCAoERklMRRAGEgkKBUNP",
            "TE9SEAcSBwoDVEFHEAgSBwoDUkVGEAkSCQoFSU1BR0UQChIICgRMSU5LEAtC",
            "DqoCC3kzZC5zZXR0aW5nYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::y3d.e.Y3DReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::y3d.setting.ComType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.setting.CustomAttr), global::y3d.setting.CustomAttr.Parser, new[]{ "Name", "Str", "OptionString", "OptionInt", "OptionFloat", "Color" }, new[]{ "DataType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.setting.TString), global::y3d.setting.TString.Parser, new[]{ "Com", "RegEx", "Mask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.setting.TInt), global::y3d.setting.TInt.Parser, new[]{ "Com", "MinValue", "MaxValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.setting.TOptionString), global::y3d.setting.TOptionString.Parser, new[]{ "Com", "Options" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.setting.TOptionInt), global::y3d.setting.TOptionInt.Parser, new[]{ "Com", "Options" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.setting.TOptionFloat), global::y3d.setting.TOptionFloat.Parser, new[]{ "Com", "Options" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.setting.TColor), global::y3d.setting.TColor.Parser, new[]{ "Com", "Ctype" }, null, new[]{ typeof(global::y3d.setting.TColor.Types.ColorType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.setting.AttrSet), global::y3d.setting.AttrSet.Parser, new[]{ "Sname", "Attrs" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ComType {
    [pbr::OriginalName("TEXT")] Text = 0,
    [pbr::OriginalName("RADIO")] Radio = 1,
    [pbr::OriginalName("COMBOBOX")] Combobox = 2,
    [pbr::OriginalName("MUTILSELECT")] Mutilselect = 3,
    [pbr::OriginalName("CHECKBOX")] Checkbox = 4,
    [pbr::OriginalName("ON_OFF")] OnOff = 5,
    [pbr::OriginalName("FILE")] File = 6,
    [pbr::OriginalName("COLOR")] Color = 7,
    [pbr::OriginalName("TAG")] Tag = 8,
    [pbr::OriginalName("REF")] Ref = 9,
    [pbr::OriginalName("IMAGE")] Image = 10,
    [pbr::OriginalName("LINK")] Link = 11,
  }

  #endregion

  #region Messages
  public sealed partial class CustomAttr : pb::IMessage<CustomAttr> {
    private static readonly pb::MessageParser<CustomAttr> _parser = new pb::MessageParser<CustomAttr>(() => new CustomAttr());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.setting.YsettingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomAttr(CustomAttr other) : this() {
      name_ = other.name_;
      switch (other.DataTypeCase) {
        case DataTypeOneofCase.Str:
          Str = other.Str.Clone();
          break;
        case DataTypeOneofCase.OptionString:
          OptionString = other.OptionString.Clone();
          break;
        case DataTypeOneofCase.OptionInt:
          OptionInt = other.OptionInt.Clone();
          break;
        case DataTypeOneofCase.OptionFloat:
          OptionFloat = other.OptionFloat.Clone();
          break;
        case DataTypeOneofCase.Color:
          Color = other.Color.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomAttr Clone() {
      return new CustomAttr(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "str" field.</summary>
    public const int StrFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.setting.TString Str {
      get { return dataTypeCase_ == DataTypeOneofCase.Str ? (global::y3d.setting.TString) dataType_ : null; }
      set {
        dataType_ = value;
        dataTypeCase_ = value == null ? DataTypeOneofCase.None : DataTypeOneofCase.Str;
      }
    }

    /// <summary>Field number for the "optionString" field.</summary>
    public const int OptionStringFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.setting.TOptionString OptionString {
      get { return dataTypeCase_ == DataTypeOneofCase.OptionString ? (global::y3d.setting.TOptionString) dataType_ : null; }
      set {
        dataType_ = value;
        dataTypeCase_ = value == null ? DataTypeOneofCase.None : DataTypeOneofCase.OptionString;
      }
    }

    /// <summary>Field number for the "optionInt" field.</summary>
    public const int OptionIntFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.setting.TOptionInt OptionInt {
      get { return dataTypeCase_ == DataTypeOneofCase.OptionInt ? (global::y3d.setting.TOptionInt) dataType_ : null; }
      set {
        dataType_ = value;
        dataTypeCase_ = value == null ? DataTypeOneofCase.None : DataTypeOneofCase.OptionInt;
      }
    }

    /// <summary>Field number for the "optionFloat" field.</summary>
    public const int OptionFloatFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.setting.TOptionFloat OptionFloat {
      get { return dataTypeCase_ == DataTypeOneofCase.OptionFloat ? (global::y3d.setting.TOptionFloat) dataType_ : null; }
      set {
        dataType_ = value;
        dataTypeCase_ = value == null ? DataTypeOneofCase.None : DataTypeOneofCase.OptionFloat;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.setting.TColor Color {
      get { return dataTypeCase_ == DataTypeOneofCase.Color ? (global::y3d.setting.TColor) dataType_ : null; }
      set {
        dataType_ = value;
        dataTypeCase_ = value == null ? DataTypeOneofCase.None : DataTypeOneofCase.Color;
      }
    }

    private object dataType_;
    /// <summary>Enum of possible cases for the "dataType" oneof.</summary>
    public enum DataTypeOneofCase {
      None = 0,
      Str = 3,
      OptionString = 4,
      OptionInt = 5,
      OptionFloat = 6,
      Color = 7,
    }
    private DataTypeOneofCase dataTypeCase_ = DataTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataTypeOneofCase DataTypeCase {
      get { return dataTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDataType() {
      dataTypeCase_ = DataTypeOneofCase.None;
      dataType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Str, other.Str)) return false;
      if (!object.Equals(OptionString, other.OptionString)) return false;
      if (!object.Equals(OptionInt, other.OptionInt)) return false;
      if (!object.Equals(OptionFloat, other.OptionFloat)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (DataTypeCase != other.DataTypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (dataTypeCase_ == DataTypeOneofCase.Str) hash ^= Str.GetHashCode();
      if (dataTypeCase_ == DataTypeOneofCase.OptionString) hash ^= OptionString.GetHashCode();
      if (dataTypeCase_ == DataTypeOneofCase.OptionInt) hash ^= OptionInt.GetHashCode();
      if (dataTypeCase_ == DataTypeOneofCase.OptionFloat) hash ^= OptionFloat.GetHashCode();
      if (dataTypeCase_ == DataTypeOneofCase.Color) hash ^= Color.GetHashCode();
      hash ^= (int) dataTypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (dataTypeCase_ == DataTypeOneofCase.Str) {
        output.WriteRawTag(26);
        output.WriteMessage(Str);
      }
      if (dataTypeCase_ == DataTypeOneofCase.OptionString) {
        output.WriteRawTag(34);
        output.WriteMessage(OptionString);
      }
      if (dataTypeCase_ == DataTypeOneofCase.OptionInt) {
        output.WriteRawTag(42);
        output.WriteMessage(OptionInt);
      }
      if (dataTypeCase_ == DataTypeOneofCase.OptionFloat) {
        output.WriteRawTag(50);
        output.WriteMessage(OptionFloat);
      }
      if (dataTypeCase_ == DataTypeOneofCase.Color) {
        output.WriteRawTag(58);
        output.WriteMessage(Color);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (dataTypeCase_ == DataTypeOneofCase.Str) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Str);
      }
      if (dataTypeCase_ == DataTypeOneofCase.OptionString) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionString);
      }
      if (dataTypeCase_ == DataTypeOneofCase.OptionInt) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionInt);
      }
      if (dataTypeCase_ == DataTypeOneofCase.OptionFloat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptionFloat);
      }
      if (dataTypeCase_ == DataTypeOneofCase.Color) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomAttr other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      switch (other.DataTypeCase) {
        case DataTypeOneofCase.Str:
          Str = other.Str;
          break;
        case DataTypeOneofCase.OptionString:
          OptionString = other.OptionString;
          break;
        case DataTypeOneofCase.OptionInt:
          OptionInt = other.OptionInt;
          break;
        case DataTypeOneofCase.OptionFloat:
          OptionFloat = other.OptionFloat;
          break;
        case DataTypeOneofCase.Color:
          Color = other.Color;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            global::y3d.setting.TString subBuilder = new global::y3d.setting.TString();
            if (dataTypeCase_ == DataTypeOneofCase.Str) {
              subBuilder.MergeFrom(Str);
            }
            input.ReadMessage(subBuilder);
            Str = subBuilder;
            break;
          }
          case 34: {
            global::y3d.setting.TOptionString subBuilder = new global::y3d.setting.TOptionString();
            if (dataTypeCase_ == DataTypeOneofCase.OptionString) {
              subBuilder.MergeFrom(OptionString);
            }
            input.ReadMessage(subBuilder);
            OptionString = subBuilder;
            break;
          }
          case 42: {
            global::y3d.setting.TOptionInt subBuilder = new global::y3d.setting.TOptionInt();
            if (dataTypeCase_ == DataTypeOneofCase.OptionInt) {
              subBuilder.MergeFrom(OptionInt);
            }
            input.ReadMessage(subBuilder);
            OptionInt = subBuilder;
            break;
          }
          case 50: {
            global::y3d.setting.TOptionFloat subBuilder = new global::y3d.setting.TOptionFloat();
            if (dataTypeCase_ == DataTypeOneofCase.OptionFloat) {
              subBuilder.MergeFrom(OptionFloat);
            }
            input.ReadMessage(subBuilder);
            OptionFloat = subBuilder;
            break;
          }
          case 58: {
            global::y3d.setting.TColor subBuilder = new global::y3d.setting.TColor();
            if (dataTypeCase_ == DataTypeOneofCase.Color) {
              subBuilder.MergeFrom(Color);
            }
            input.ReadMessage(subBuilder);
            Color = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class TString : pb::IMessage<TString> {
    private static readonly pb::MessageParser<TString> _parser = new pb::MessageParser<TString>(() => new TString());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.setting.YsettingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TString(TString other) : this() {
      com_ = other.com_;
      regEx_ = other.regEx_;
      mask_ = other.mask_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TString Clone() {
      return new TString(this);
    }

    /// <summary>Field number for the "com" field.</summary>
    public const int ComFieldNumber = 1;
    private global::y3d.setting.ComType com_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.setting.ComType Com {
      get { return com_; }
      set {
        com_ = value;
      }
    }

    /// <summary>Field number for the "RegEx" field.</summary>
    public const int RegExFieldNumber = 2;
    private string regEx_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegEx {
      get { return regEx_; }
      set {
        regEx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Mask" field.</summary>
    public const int MaskFieldNumber = 3;
    private string mask_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mask {
      get { return mask_; }
      set {
        mask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Com != other.Com) return false;
      if (RegEx != other.RegEx) return false;
      if (Mask != other.Mask) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Com != 0) hash ^= Com.GetHashCode();
      if (RegEx.Length != 0) hash ^= RegEx.GetHashCode();
      if (Mask.Length != 0) hash ^= Mask.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Com != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Com);
      }
      if (RegEx.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RegEx);
      }
      if (Mask.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Mask);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Com != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Com);
      }
      if (RegEx.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegEx);
      }
      if (Mask.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mask);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TString other) {
      if (other == null) {
        return;
      }
      if (other.Com != 0) {
        Com = other.Com;
      }
      if (other.RegEx.Length != 0) {
        RegEx = other.RegEx;
      }
      if (other.Mask.Length != 0) {
        Mask = other.Mask;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            com_ = (global::y3d.setting.ComType) input.ReadEnum();
            break;
          }
          case 18: {
            RegEx = input.ReadString();
            break;
          }
          case 26: {
            Mask = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TInt : pb::IMessage<TInt> {
    private static readonly pb::MessageParser<TInt> _parser = new pb::MessageParser<TInt>(() => new TInt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TInt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.setting.YsettingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TInt(TInt other) : this() {
      com_ = other.com_;
      minValue_ = other.minValue_;
      maxValue_ = other.maxValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TInt Clone() {
      return new TInt(this);
    }

    /// <summary>Field number for the "com" field.</summary>
    public const int ComFieldNumber = 1;
    private global::y3d.setting.ComType com_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.setting.ComType Com {
      get { return com_; }
      set {
        com_ = value;
      }
    }

    /// <summary>Field number for the "minValue" field.</summary>
    public const int MinValueFieldNumber = 2;
    private int minValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinValue {
      get { return minValue_; }
      set {
        minValue_ = value;
      }
    }

    /// <summary>Field number for the "maxValue" field.</summary>
    public const int MaxValueFieldNumber = 3;
    private int maxValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxValue {
      get { return maxValue_; }
      set {
        maxValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TInt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Com != other.Com) return false;
      if (MinValue != other.MinValue) return false;
      if (MaxValue != other.MaxValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Com != 0) hash ^= Com.GetHashCode();
      if (MinValue != 0) hash ^= MinValue.GetHashCode();
      if (MaxValue != 0) hash ^= MaxValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Com != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Com);
      }
      if (MinValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MinValue);
      }
      if (MaxValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Com != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Com);
      }
      if (MinValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinValue);
      }
      if (MaxValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TInt other) {
      if (other == null) {
        return;
      }
      if (other.Com != 0) {
        Com = other.Com;
      }
      if (other.MinValue != 0) {
        MinValue = other.MinValue;
      }
      if (other.MaxValue != 0) {
        MaxValue = other.MaxValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            com_ = (global::y3d.setting.ComType) input.ReadEnum();
            break;
          }
          case 16: {
            MinValue = input.ReadInt32();
            break;
          }
          case 24: {
            MaxValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TOptionString : pb::IMessage<TOptionString> {
    private static readonly pb::MessageParser<TOptionString> _parser = new pb::MessageParser<TOptionString>(() => new TOptionString());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TOptionString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.setting.YsettingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TOptionString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TOptionString(TOptionString other) : this() {
      com_ = other.com_;
      options_ = other.options_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TOptionString Clone() {
      return new TOptionString(this);
    }

    /// <summary>Field number for the "com" field.</summary>
    public const int ComFieldNumber = 1;
    private global::y3d.setting.ComType com_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.setting.ComType Com {
      get { return com_; }
      set {
        com_ = value;
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_options_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> options_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Options {
      get { return options_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TOptionString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TOptionString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Com != other.Com) return false;
      if(!options_.Equals(other.options_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Com != 0) hash ^= Com.GetHashCode();
      hash ^= options_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Com != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Com);
      }
      options_.WriteTo(output, _repeated_options_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Com != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Com);
      }
      size += options_.CalculateSize(_repeated_options_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TOptionString other) {
      if (other == null) {
        return;
      }
      if (other.Com != 0) {
        Com = other.Com;
      }
      options_.Add(other.options_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            com_ = (global::y3d.setting.ComType) input.ReadEnum();
            break;
          }
          case 18: {
            options_.AddEntriesFrom(input, _repeated_options_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TOptionInt : pb::IMessage<TOptionInt> {
    private static readonly pb::MessageParser<TOptionInt> _parser = new pb::MessageParser<TOptionInt>(() => new TOptionInt());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TOptionInt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.setting.YsettingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TOptionInt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TOptionInt(TOptionInt other) : this() {
      com_ = other.com_;
      options_ = other.options_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TOptionInt Clone() {
      return new TOptionInt(this);
    }

    /// <summary>Field number for the "com" field.</summary>
    public const int ComFieldNumber = 1;
    private global::y3d.setting.ComType com_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.setting.ComType Com {
      get { return com_; }
      set {
        com_ = value;
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_options_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> options_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Options {
      get { return options_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TOptionInt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TOptionInt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Com != other.Com) return false;
      if(!options_.Equals(other.options_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Com != 0) hash ^= Com.GetHashCode();
      hash ^= options_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Com != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Com);
      }
      options_.WriteTo(output, _repeated_options_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Com != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Com);
      }
      size += options_.CalculateSize(_repeated_options_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TOptionInt other) {
      if (other == null) {
        return;
      }
      if (other.Com != 0) {
        Com = other.Com;
      }
      options_.Add(other.options_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            com_ = (global::y3d.setting.ComType) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            options_.AddEntriesFrom(input, _repeated_options_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TOptionFloat : pb::IMessage<TOptionFloat> {
    private static readonly pb::MessageParser<TOptionFloat> _parser = new pb::MessageParser<TOptionFloat>(() => new TOptionFloat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TOptionFloat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.setting.YsettingReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TOptionFloat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TOptionFloat(TOptionFloat other) : this() {
      com_ = other.com_;
      options_ = other.options_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TOptionFloat Clone() {
      return new TOptionFloat(this);
    }

    /// <summary>Field number for the "com" field.</summary>
    public const int ComFieldNumber = 1;
    private global::y3d.setting.ComType com_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.setting.ComType Com {
      get { return com_; }
      set {
        com_ = value;
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_options_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> options_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Options {
      get { return options_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TOptionFloat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TOptionFloat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Com != other.Com) return false;
      if(!options_.Equals(other.options_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Com != 0) hash ^= Com.GetHashCode();
      hash ^= options_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Com != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Com);
      }
      options_.WriteTo(output, _repeated_options_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Com != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Com);
      }
      size += options_.CalculateSize(_repeated_options_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TOptionFloat other) {
      if (other == null) {
        return;
      }
      if (other.Com != 0) {
        Com = other.Com;
      }
      options_.Add(other.options_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            com_ = (global::y3d.setting.ComType) input.ReadEnum();
            break;
          }
          case 18:
          case 21: {
            options_.AddEntriesFrom(input, _repeated_options_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TColor : pb::IMessage<TColor> {
    private static readonly pb::MessageParser<TColor> _parser = new pb::MessageParser<TColor>(() => new TColor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.setting.YsettingReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TColor(TColor other) : this() {
      com_ = other.com_;
      ctype_ = other.ctype_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TColor Clone() {
      return new TColor(this);
    }

    /// <summary>Field number for the "com" field.</summary>
    public const int ComFieldNumber = 1;
    private global::y3d.setting.ComType com_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.setting.ComType Com {
      get { return com_; }
      set {
        com_ = value;
      }
    }

    /// <summary>Field number for the "ctype" field.</summary>
    public const int CtypeFieldNumber = 2;
    private global::y3d.setting.TColor.Types.ColorType ctype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.setting.TColor.Types.ColorType Ctype {
      get { return ctype_; }
      set {
        ctype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Com != other.Com) return false;
      if (Ctype != other.Ctype) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Com != 0) hash ^= Com.GetHashCode();
      if (Ctype != 0) hash ^= Ctype.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Com != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Com);
      }
      if (Ctype != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Ctype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Com != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Com);
      }
      if (Ctype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Ctype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TColor other) {
      if (other == null) {
        return;
      }
      if (other.Com != 0) {
        Com = other.Com;
      }
      if (other.Ctype != 0) {
        Ctype = other.Ctype;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            com_ = (global::y3d.setting.ComType) input.ReadEnum();
            break;
          }
          case 16: {
            ctype_ = (global::y3d.setting.TColor.Types.ColorType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TColor message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ColorType {
        [pbr::OriginalName("RGB")] Rgb = 0,
        [pbr::OriginalName("RGBA")] Rgba = 1,
        [pbr::OriginalName("HEX")] Hex = 2,
        [pbr::OriginalName("CMYK")] Cmyk = 3,
        [pbr::OriginalName("INT")] Int = 4,
      }

    }
    #endregion

  }

  public sealed partial class AttrSet : pb::IMessage<AttrSet> {
    private static readonly pb::MessageParser<AttrSet> _parser = new pb::MessageParser<AttrSet>(() => new AttrSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttrSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.setting.YsettingReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrSet(AttrSet other) : this() {
      sname_ = other.sname_;
      attrs_ = other.attrs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttrSet Clone() {
      return new AttrSet(this);
    }

    /// <summary>Field number for the "sname" field.</summary>
    public const int SnameFieldNumber = 1;
    private string sname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sname {
      get { return sname_; }
      set {
        sname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::y3d.setting.CustomAttr> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(18, global::y3d.setting.CustomAttr.Parser);
    private readonly pbc::RepeatedField<global::y3d.setting.CustomAttr> attrs_ = new pbc::RepeatedField<global::y3d.setting.CustomAttr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.setting.CustomAttr> Attrs {
      get { return attrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttrSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttrSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sname != other.Sname) return false;
      if(!attrs_.Equals(other.attrs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sname.Length != 0) hash ^= Sname.GetHashCode();
      hash ^= attrs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Sname);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sname);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttrSet other) {
      if (other == null) {
        return;
      }
      if (other.Sname.Length != 0) {
        Sname = other.Sname;
      }
      attrs_.Add(other.attrs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Sname = input.ReadString();
            break;
          }
          case 18: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
