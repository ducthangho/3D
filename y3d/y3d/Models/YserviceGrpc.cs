// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yservice.proto
// Original file comments:
// [START declaration]
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Y3D.YService {
  public static partial class Tools
  {
    static readonly string __ServiceName = "y3d.Tools";

    static readonly Marshaller<global::Y3D.YService.RenameParam> __Marshaller_RenameParam = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Y3D.YService.RenameParam.Parser.ParseFrom);
    static readonly Marshaller<global::Y3D.YService.ResultReply> __Marshaller_ResultReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Y3D.YService.ResultReply.Parser.ParseFrom);

    static readonly Method<global::Y3D.YService.RenameParam, global::Y3D.YService.ResultReply> __Method_RenameObject = new Method<global::Y3D.YService.RenameParam, global::Y3D.YService.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "RenameObject",
        __Marshaller_RenameParam,
        __Marshaller_ResultReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Y3D.YService.YserviceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Tools</summary>
    public abstract partial class ToolsBase
    {
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::System.Threading.Tasks.Task<global::Y3D.YService.ResultReply> RenameObject(global::Y3D.YService.RenameParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Tools</summary>
    public partial class ToolsClient : ClientBase<ToolsClient>
    {
      /// <summary>Creates a new client for Tools</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ToolsClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Tools that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ToolsClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ToolsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ToolsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::Y3D.YService.ResultReply RenameObject(global::Y3D.YService.RenameParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RenameObject(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual global::Y3D.YService.ResultReply RenameObject(global::Y3D.YService.RenameParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RenameObject, null, options, request);
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual AsyncUnaryCall<global::Y3D.YService.ResultReply> RenameObjectAsync(global::Y3D.YService.RenameParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RenameObjectAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///  Sends a greeting
      /// </summary>
      public virtual AsyncUnaryCall<global::Y3D.YService.ResultReply> RenameObjectAsync(global::Y3D.YService.RenameParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RenameObject, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ToolsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ToolsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    public static ServerServiceDefinition BindService(ToolsBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RenameObject, serviceImpl.RenameObject).Build();
    }

  }
}
#endregion
