// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ymat.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace y3d.e {

  /// <summary>Holder for reflection information generated from ymat.proto</summary>
  public static partial class YmatReflection {

    #region Descriptor
    /// <summary>File descriptor for ymat.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static YmatReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgp5bWF0LnByb3RvEgN5M2QiLAoJWVJHQkNvbG9yEgkKAVIYASABKA0SCQoB",
            "RxgCIAEoDRIJCgFCGAMgASgNIlQKBllDb2xvchIMCgRuYW1lGAEgASgJEgwK",
            "BGFyZ2IYAiABKAUSGwoDcmdiGAMgASgLMg4ueTNkLllSR0JDb2xvchIRCglo",
            "ZXhfY29sb3IYBCABKAkiJQoGWUltYWdlEgwKBGZpbGUYASABKAkSDQoFc2Nh",
            "bGUYAiABKAIiVAoIWURpZmZ1c2USEAoIc2V0X25hbWUYASABKAkSGgoFY29s",
            "b3IYAiABKAsyCy55M2QuWUNvbG9yEhoKBWltYWdlGAMgASgLMgsueTNkLllJ",
            "bWFnZSJVCglZU3BlY3VsYXISEAoIc2V0X25hbWUYASABKAkSGgoFY29sb3IY",
            "AiABKAsyCy55M2QuWUNvbG9yEhoKBWltYWdlGAMgASgLMgsueTNkLllJbWFn",
            "ZSJUCghZQW1iaWVudBIQCghzZXRfbmFtZRgBIAEoCRIaCgVjb2xvchgCIAEo",
            "CzILLnkzZC5ZQ29sb3ISGgoFaW1hZ2UYAyABKAsyCy55M2QuWUltYWdlIlUK",
            "CVlFbWlzc2l2ZRIQCghzZXRfbmFtZRgBIAEoCRIaCgVjb2xvchgCIAEoCzIL",
            "LnkzZC5ZQ29sb3ISGgoFaW1hZ2UYAyABKAsyCy55M2QuWUltYWdlIgkKB1lN",
            "YXRQQlIiQgoHWU1hdE1hcBIaCgVpbWFnZRgBIAEoCzILLnkzZC5ZSW1hZ2US",
            "DQoFc2NhbGUYAiABKAISDAoEbmFtZRgDIAEoCSKmAgoIWUJhc2VNYXASHAoG",
            "YWxiZWRvGAEgASgLMgwueTNkLllNYXRNYXASGgoEYnVtcBgCIAEoCzIMLnkz",
            "ZC5ZTWF0TWFwEhwKBm5vcm1hbBgDIAEoCzIMLnkzZC5ZTWF0TWFwEhgKAmFv",
            "GAQgASgLMgwueTNkLllNYXRNYXASHgoIc3BlY3VsYXIYBSABKAsyDC55M2Qu",
            "WU1hdE1hcBIiCgxkaXNwbGFjZW1lbnQYBiABKAsyDC55M2QuWU1hdE1hcBIj",
            "Cg10cmFuc2NsdWNlbmN5GE8gASgLMgwueTNkLllNYXRNYXASHwoJcm91Z2hu",
            "ZXNzGAggASgLMgwueTNkLllNYXRNYXASHgoIb3BhY3RpdHkYCSABKAsyDC55",
            "M2QuWU1hdE1hcCLIAQoMWU1hdFN0YW5kYXJkEgoKAmlkGAEgASgNEgwKBG5h",
            "bWUYAiABKAkSHgoHZGlmZnVzZRgDIAEoCzINLnkzZC5ZRGlmZnVzZRIgCghz",
            "cGVjdWxhchgEIAEoCzIOLnkzZC5ZU3BlY3VsYXISHgoHYW1iaWVudBgFIAEo",
            "CzINLnkzZC5ZQW1iaWVudBIgCghlbWlzc2l2ZRgGIAEoCzIOLnkzZC5ZRW1p",
            "c3NpdmUSGgoDbWFwGAcgASgLMg0ueTNkLllCYXNlTWFwImQKCFlNYXRWcmF5",
            "EhwKBGJyZGYYASABKA4yDi55M2QuQlJERl9UeXBlEh4KB2RpZmZ1c2UYAiAB",
            "KAsyDS55M2QuWURpZmZ1c2USGgoDbWFwGAMgASgLMg0ueTNkLllCYXNlTWFw",
            "IqQBCgRZTWF0EgoKAmlkGAEgASgNEgwKBG5hbWUYAiABKAkSJQoKbV9zdGFu",
            "ZGFyZBgDIAEoCzIRLnkzZC5ZTWF0U3RhbmRhcmQSHQoGbV92cmF5GAQgASgL",
            "Mg0ueTNkLllNYXRWcmF5EhsKBW1fcGJyGAUgASgLMgwueTNkLllNYXRQQlIS",
            "HwoHbV9tdWx0aRgGIAEoCzIOLnkzZC5ZTXVsdGlNYXQiUQoJWU11bHRpTWF0",
            "EiYKD2RlZmF1bHRfZGlmZnVzZRgBIAEoCzINLnkzZC5ZRGlmZnVzZRIcCglt",
            "YXRlcmlhbHMYAiADKAsyCS55M2QuWU1hdCorCglCUkRGX1R5cGUSCQoFUEhP",
            "TkcQABIJCgVCTElOThABEggKBFdBUkQQAkIIqgIFeTNkLmViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::y3d.e.BRDF_Type), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YRGBColor), global::y3d.e.YRGBColor.Parser, new[]{ "R", "G", "B" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YColor), global::y3d.e.YColor.Parser, new[]{ "Name", "Argb", "Rgb", "HexColor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YImage), global::y3d.e.YImage.Parser, new[]{ "File", "Scale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YDiffuse), global::y3d.e.YDiffuse.Parser, new[]{ "SetName", "Color", "Image" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YSpecular), global::y3d.e.YSpecular.Parser, new[]{ "SetName", "Color", "Image" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YAmbient), global::y3d.e.YAmbient.Parser, new[]{ "SetName", "Color", "Image" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YEmissive), global::y3d.e.YEmissive.Parser, new[]{ "SetName", "Color", "Image" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YMatPBR), global::y3d.e.YMatPBR.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YMatMap), global::y3d.e.YMatMap.Parser, new[]{ "Image", "Scale", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YBaseMap), global::y3d.e.YBaseMap.Parser, new[]{ "Albedo", "Bump", "Normal", "Ao", "Specular", "Displacement", "Transclucency", "Roughness", "Opactity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YMatStandard), global::y3d.e.YMatStandard.Parser, new[]{ "Id", "Name", "Diffuse", "Specular", "Ambient", "Emissive", "Map" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YMatVray), global::y3d.e.YMatVray.Parser, new[]{ "Brdf", "Diffuse", "Map" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YMat), global::y3d.e.YMat.Parser, new[]{ "Id", "Name", "MStandard", "MVray", "MPbr", "MMulti" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YMultiMat), global::y3d.e.YMultiMat.Parser, new[]{ "DefaultDiffuse", "Materials" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum BRDF_Type {
    [pbr::OriginalName("PHONG")] Phong = 0,
    [pbr::OriginalName("BLINN")] Blinn = 1,
    [pbr::OriginalName("WARD")] Ward = 2,
  }

  #endregion

  #region Messages
  public sealed partial class YRGBColor : pb::IMessage<YRGBColor> {
    private static readonly pb::MessageParser<YRGBColor> _parser = new pb::MessageParser<YRGBColor>(() => new YRGBColor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YRGBColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.YmatReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YRGBColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YRGBColor(YRGBColor other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YRGBColor Clone() {
      return new YRGBColor(this);
    }

    /// <summary>Field number for the "R" field.</summary>
    public const int RFieldNumber = 1;
    private uint r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "G" field.</summary>
    public const int GFieldNumber = 2;
    private uint g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "B" field.</summary>
    public const int BFieldNumber = 3;
    private uint b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YRGBColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YRGBColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (R != other.R) return false;
      if (G != other.G) return false;
      if (B != other.B) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0) hash ^= R.GetHashCode();
      if (G != 0) hash ^= G.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (R != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(R);
      }
      if (G != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(G);
      }
      if (B != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(B);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(R);
      }
      if (G != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(G);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(B);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YRGBColor other) {
      if (other == null) {
        return;
      }
      if (other.R != 0) {
        R = other.R;
      }
      if (other.G != 0) {
        G = other.G;
      }
      if (other.B != 0) {
        B = other.B;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            R = input.ReadUInt32();
            break;
          }
          case 16: {
            G = input.ReadUInt32();
            break;
          }
          case 24: {
            B = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YColor : pb::IMessage<YColor> {
    private static readonly pb::MessageParser<YColor> _parser = new pb::MessageParser<YColor>(() => new YColor());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.YmatReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YColor(YColor other) : this() {
      name_ = other.name_;
      argb_ = other.argb_;
      Rgb = other.rgb_ != null ? other.Rgb.Clone() : null;
      hexColor_ = other.hexColor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YColor Clone() {
      return new YColor(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "argb" field.</summary>
    public const int ArgbFieldNumber = 2;
    private int argb_;
    /// <summary>
    ///optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Argb {
      get { return argb_; }
      set {
        argb_ = value;
      }
    }

    /// <summary>Field number for the "rgb" field.</summary>
    public const int RgbFieldNumber = 3;
    private global::y3d.e.YRGBColor rgb_;
    /// <summary>
    ///optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YRGBColor Rgb {
      get { return rgb_; }
      set {
        rgb_ = value;
      }
    }

    /// <summary>Field number for the "hex_color" field.</summary>
    public const int HexColorFieldNumber = 4;
    private string hexColor_ = "";
    /// <summary>
    ///optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HexColor {
      get { return hexColor_; }
      set {
        hexColor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Argb != other.Argb) return false;
      if (!object.Equals(Rgb, other.Rgb)) return false;
      if (HexColor != other.HexColor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Argb != 0) hash ^= Argb.GetHashCode();
      if (rgb_ != null) hash ^= Rgb.GetHashCode();
      if (HexColor.Length != 0) hash ^= HexColor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Argb != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Argb);
      }
      if (rgb_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rgb);
      }
      if (HexColor.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HexColor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Argb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Argb);
      }
      if (rgb_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rgb);
      }
      if (HexColor.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HexColor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YColor other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Argb != 0) {
        Argb = other.Argb;
      }
      if (other.rgb_ != null) {
        if (rgb_ == null) {
          rgb_ = new global::y3d.e.YRGBColor();
        }
        Rgb.MergeFrom(other.Rgb);
      }
      if (other.HexColor.Length != 0) {
        HexColor = other.HexColor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Argb = input.ReadInt32();
            break;
          }
          case 26: {
            if (rgb_ == null) {
              rgb_ = new global::y3d.e.YRGBColor();
            }
            input.ReadMessage(rgb_);
            break;
          }
          case 34: {
            HexColor = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YImage : pb::IMessage<YImage> {
    private static readonly pb::MessageParser<YImage> _parser = new pb::MessageParser<YImage>(() => new YImage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YImage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.YmatReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YImage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YImage(YImage other) : this() {
      file_ = other.file_;
      scale_ = other.scale_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YImage Clone() {
      return new YImage(this);
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 1;
    private string file_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string File {
      get { return file_; }
      set {
        file_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YImage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YImage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (File != other.File) return false;
      if (Scale != other.Scale) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (File.Length != 0) hash ^= File.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (File.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(File);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (File.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(File);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YImage other) {
      if (other == null) {
        return;
      }
      if (other.File.Length != 0) {
        File = other.File;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            File = input.ReadString();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YDiffuse : pb::IMessage<YDiffuse> {
    private static readonly pb::MessageParser<YDiffuse> _parser = new pb::MessageParser<YDiffuse>(() => new YDiffuse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YDiffuse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.YmatReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YDiffuse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YDiffuse(YDiffuse other) : this() {
      setName_ = other.setName_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      Image = other.image_ != null ? other.Image.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YDiffuse Clone() {
      return new YDiffuse(this);
    }

    /// <summary>Field number for the "set_name" field.</summary>
    public const int SetNameFieldNumber = 1;
    private string setName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SetName {
      get { return setName_; }
      set {
        setName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private global::y3d.e.YColor color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YColor Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private global::y3d.e.YImage image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YImage Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YDiffuse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YDiffuse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SetName != other.SetName) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (!object.Equals(Image, other.Image)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SetName.Length != 0) hash ^= SetName.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SetName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SetName);
      }
      if (color_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Color);
      }
      if (image_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Image);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SetName);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YDiffuse other) {
      if (other == null) {
        return;
      }
      if (other.SetName.Length != 0) {
        SetName = other.SetName;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::y3d.e.YColor();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.image_ != null) {
        if (image_ == null) {
          image_ = new global::y3d.e.YImage();
        }
        Image.MergeFrom(other.Image);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SetName = input.ReadString();
            break;
          }
          case 18: {
            if (color_ == null) {
              color_ = new global::y3d.e.YColor();
            }
            input.ReadMessage(color_);
            break;
          }
          case 26: {
            if (image_ == null) {
              image_ = new global::y3d.e.YImage();
            }
            input.ReadMessage(image_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YSpecular : pb::IMessage<YSpecular> {
    private static readonly pb::MessageParser<YSpecular> _parser = new pb::MessageParser<YSpecular>(() => new YSpecular());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YSpecular> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.YmatReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YSpecular() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YSpecular(YSpecular other) : this() {
      setName_ = other.setName_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      Image = other.image_ != null ? other.Image.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YSpecular Clone() {
      return new YSpecular(this);
    }

    /// <summary>Field number for the "set_name" field.</summary>
    public const int SetNameFieldNumber = 1;
    private string setName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SetName {
      get { return setName_; }
      set {
        setName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private global::y3d.e.YColor color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YColor Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private global::y3d.e.YImage image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YImage Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YSpecular);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YSpecular other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SetName != other.SetName) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (!object.Equals(Image, other.Image)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SetName.Length != 0) hash ^= SetName.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SetName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SetName);
      }
      if (color_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Color);
      }
      if (image_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Image);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SetName);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YSpecular other) {
      if (other == null) {
        return;
      }
      if (other.SetName.Length != 0) {
        SetName = other.SetName;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::y3d.e.YColor();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.image_ != null) {
        if (image_ == null) {
          image_ = new global::y3d.e.YImage();
        }
        Image.MergeFrom(other.Image);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SetName = input.ReadString();
            break;
          }
          case 18: {
            if (color_ == null) {
              color_ = new global::y3d.e.YColor();
            }
            input.ReadMessage(color_);
            break;
          }
          case 26: {
            if (image_ == null) {
              image_ = new global::y3d.e.YImage();
            }
            input.ReadMessage(image_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YAmbient : pb::IMessage<YAmbient> {
    private static readonly pb::MessageParser<YAmbient> _parser = new pb::MessageParser<YAmbient>(() => new YAmbient());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YAmbient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.YmatReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YAmbient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YAmbient(YAmbient other) : this() {
      setName_ = other.setName_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      Image = other.image_ != null ? other.Image.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YAmbient Clone() {
      return new YAmbient(this);
    }

    /// <summary>Field number for the "set_name" field.</summary>
    public const int SetNameFieldNumber = 1;
    private string setName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SetName {
      get { return setName_; }
      set {
        setName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private global::y3d.e.YColor color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YColor Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private global::y3d.e.YImage image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YImage Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YAmbient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YAmbient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SetName != other.SetName) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (!object.Equals(Image, other.Image)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SetName.Length != 0) hash ^= SetName.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SetName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SetName);
      }
      if (color_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Color);
      }
      if (image_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Image);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SetName);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YAmbient other) {
      if (other == null) {
        return;
      }
      if (other.SetName.Length != 0) {
        SetName = other.SetName;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::y3d.e.YColor();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.image_ != null) {
        if (image_ == null) {
          image_ = new global::y3d.e.YImage();
        }
        Image.MergeFrom(other.Image);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SetName = input.ReadString();
            break;
          }
          case 18: {
            if (color_ == null) {
              color_ = new global::y3d.e.YColor();
            }
            input.ReadMessage(color_);
            break;
          }
          case 26: {
            if (image_ == null) {
              image_ = new global::y3d.e.YImage();
            }
            input.ReadMessage(image_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YEmissive : pb::IMessage<YEmissive> {
    private static readonly pb::MessageParser<YEmissive> _parser = new pb::MessageParser<YEmissive>(() => new YEmissive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YEmissive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.YmatReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YEmissive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YEmissive(YEmissive other) : this() {
      setName_ = other.setName_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      Image = other.image_ != null ? other.Image.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YEmissive Clone() {
      return new YEmissive(this);
    }

    /// <summary>Field number for the "set_name" field.</summary>
    public const int SetNameFieldNumber = 1;
    private string setName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SetName {
      get { return setName_; }
      set {
        setName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private global::y3d.e.YColor color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YColor Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private global::y3d.e.YImage image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YImage Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YEmissive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YEmissive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SetName != other.SetName) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (!object.Equals(Image, other.Image)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SetName.Length != 0) hash ^= SetName.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (image_ != null) hash ^= Image.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SetName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SetName);
      }
      if (color_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Color);
      }
      if (image_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Image);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SetName);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YEmissive other) {
      if (other == null) {
        return;
      }
      if (other.SetName.Length != 0) {
        SetName = other.SetName;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::y3d.e.YColor();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.image_ != null) {
        if (image_ == null) {
          image_ = new global::y3d.e.YImage();
        }
        Image.MergeFrom(other.Image);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SetName = input.ReadString();
            break;
          }
          case 18: {
            if (color_ == null) {
              color_ = new global::y3d.e.YColor();
            }
            input.ReadMessage(color_);
            break;
          }
          case 26: {
            if (image_ == null) {
              image_ = new global::y3d.e.YImage();
            }
            input.ReadMessage(image_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YMatPBR : pb::IMessage<YMatPBR> {
    private static readonly pb::MessageParser<YMatPBR> _parser = new pb::MessageParser<YMatPBR>(() => new YMatPBR());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YMatPBR> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.YmatReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMatPBR() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMatPBR(YMatPBR other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMatPBR Clone() {
      return new YMatPBR(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YMatPBR);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YMatPBR other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YMatPBR other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class YMatMap : pb::IMessage<YMatMap> {
    private static readonly pb::MessageParser<YMatMap> _parser = new pb::MessageParser<YMatMap>(() => new YMatMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YMatMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.YmatReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMatMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMatMap(YMatMap other) : this() {
      Image = other.image_ != null ? other.Image.Clone() : null;
      scale_ = other.scale_;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMatMap Clone() {
      return new YMatMap(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 1;
    private global::y3d.e.YImage image_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YImage Image {
      get { return image_; }
      set {
        image_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YMatMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YMatMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Image, other.Image)) return false;
      if (Scale != other.Scale) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (image_ != null) hash ^= Image.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (image_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Image);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (image_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YMatMap other) {
      if (other == null) {
        return;
      }
      if (other.image_ != null) {
        if (image_ == null) {
          image_ = new global::y3d.e.YImage();
        }
        Image.MergeFrom(other.Image);
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (image_ == null) {
              image_ = new global::y3d.e.YImage();
            }
            input.ReadMessage(image_);
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YBaseMap : pb::IMessage<YBaseMap> {
    private static readonly pb::MessageParser<YBaseMap> _parser = new pb::MessageParser<YBaseMap>(() => new YBaseMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YBaseMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.YmatReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YBaseMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YBaseMap(YBaseMap other) : this() {
      Albedo = other.albedo_ != null ? other.Albedo.Clone() : null;
      Bump = other.bump_ != null ? other.Bump.Clone() : null;
      Normal = other.normal_ != null ? other.Normal.Clone() : null;
      Ao = other.ao_ != null ? other.Ao.Clone() : null;
      Specular = other.specular_ != null ? other.Specular.Clone() : null;
      Displacement = other.displacement_ != null ? other.Displacement.Clone() : null;
      Transclucency = other.transclucency_ != null ? other.Transclucency.Clone() : null;
      Roughness = other.roughness_ != null ? other.Roughness.Clone() : null;
      Opactity = other.opactity_ != null ? other.Opactity.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YBaseMap Clone() {
      return new YBaseMap(this);
    }

    /// <summary>Field number for the "albedo" field.</summary>
    public const int AlbedoFieldNumber = 1;
    private global::y3d.e.YMatMap albedo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMatMap Albedo {
      get { return albedo_; }
      set {
        albedo_ = value;
      }
    }

    /// <summary>Field number for the "bump" field.</summary>
    public const int BumpFieldNumber = 2;
    private global::y3d.e.YMatMap bump_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMatMap Bump {
      get { return bump_; }
      set {
        bump_ = value;
      }
    }

    /// <summary>Field number for the "normal" field.</summary>
    public const int NormalFieldNumber = 3;
    private global::y3d.e.YMatMap normal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMatMap Normal {
      get { return normal_; }
      set {
        normal_ = value;
      }
    }

    /// <summary>Field number for the "ao" field.</summary>
    public const int AoFieldNumber = 4;
    private global::y3d.e.YMatMap ao_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMatMap Ao {
      get { return ao_; }
      set {
        ao_ = value;
      }
    }

    /// <summary>Field number for the "specular" field.</summary>
    public const int SpecularFieldNumber = 5;
    private global::y3d.e.YMatMap specular_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMatMap Specular {
      get { return specular_; }
      set {
        specular_ = value;
      }
    }

    /// <summary>Field number for the "displacement" field.</summary>
    public const int DisplacementFieldNumber = 6;
    private global::y3d.e.YMatMap displacement_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMatMap Displacement {
      get { return displacement_; }
      set {
        displacement_ = value;
      }
    }

    /// <summary>Field number for the "transclucency" field.</summary>
    public const int TransclucencyFieldNumber = 79;
    private global::y3d.e.YMatMap transclucency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMatMap Transclucency {
      get { return transclucency_; }
      set {
        transclucency_ = value;
      }
    }

    /// <summary>Field number for the "roughness" field.</summary>
    public const int RoughnessFieldNumber = 8;
    private global::y3d.e.YMatMap roughness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMatMap Roughness {
      get { return roughness_; }
      set {
        roughness_ = value;
      }
    }

    /// <summary>Field number for the "opactity" field.</summary>
    public const int OpactityFieldNumber = 9;
    private global::y3d.e.YMatMap opactity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMatMap Opactity {
      get { return opactity_; }
      set {
        opactity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YBaseMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YBaseMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Albedo, other.Albedo)) return false;
      if (!object.Equals(Bump, other.Bump)) return false;
      if (!object.Equals(Normal, other.Normal)) return false;
      if (!object.Equals(Ao, other.Ao)) return false;
      if (!object.Equals(Specular, other.Specular)) return false;
      if (!object.Equals(Displacement, other.Displacement)) return false;
      if (!object.Equals(Transclucency, other.Transclucency)) return false;
      if (!object.Equals(Roughness, other.Roughness)) return false;
      if (!object.Equals(Opactity, other.Opactity)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (albedo_ != null) hash ^= Albedo.GetHashCode();
      if (bump_ != null) hash ^= Bump.GetHashCode();
      if (normal_ != null) hash ^= Normal.GetHashCode();
      if (ao_ != null) hash ^= Ao.GetHashCode();
      if (specular_ != null) hash ^= Specular.GetHashCode();
      if (displacement_ != null) hash ^= Displacement.GetHashCode();
      if (transclucency_ != null) hash ^= Transclucency.GetHashCode();
      if (roughness_ != null) hash ^= Roughness.GetHashCode();
      if (opactity_ != null) hash ^= Opactity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (albedo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Albedo);
      }
      if (bump_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bump);
      }
      if (normal_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Normal);
      }
      if (ao_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Ao);
      }
      if (specular_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Specular);
      }
      if (displacement_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Displacement);
      }
      if (roughness_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Roughness);
      }
      if (opactity_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Opactity);
      }
      if (transclucency_ != null) {
        output.WriteRawTag(250, 4);
        output.WriteMessage(Transclucency);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (albedo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Albedo);
      }
      if (bump_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bump);
      }
      if (normal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Normal);
      }
      if (ao_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ao);
      }
      if (specular_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Specular);
      }
      if (displacement_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Displacement);
      }
      if (transclucency_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Transclucency);
      }
      if (roughness_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Roughness);
      }
      if (opactity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Opactity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YBaseMap other) {
      if (other == null) {
        return;
      }
      if (other.albedo_ != null) {
        if (albedo_ == null) {
          albedo_ = new global::y3d.e.YMatMap();
        }
        Albedo.MergeFrom(other.Albedo);
      }
      if (other.bump_ != null) {
        if (bump_ == null) {
          bump_ = new global::y3d.e.YMatMap();
        }
        Bump.MergeFrom(other.Bump);
      }
      if (other.normal_ != null) {
        if (normal_ == null) {
          normal_ = new global::y3d.e.YMatMap();
        }
        Normal.MergeFrom(other.Normal);
      }
      if (other.ao_ != null) {
        if (ao_ == null) {
          ao_ = new global::y3d.e.YMatMap();
        }
        Ao.MergeFrom(other.Ao);
      }
      if (other.specular_ != null) {
        if (specular_ == null) {
          specular_ = new global::y3d.e.YMatMap();
        }
        Specular.MergeFrom(other.Specular);
      }
      if (other.displacement_ != null) {
        if (displacement_ == null) {
          displacement_ = new global::y3d.e.YMatMap();
        }
        Displacement.MergeFrom(other.Displacement);
      }
      if (other.transclucency_ != null) {
        if (transclucency_ == null) {
          transclucency_ = new global::y3d.e.YMatMap();
        }
        Transclucency.MergeFrom(other.Transclucency);
      }
      if (other.roughness_ != null) {
        if (roughness_ == null) {
          roughness_ = new global::y3d.e.YMatMap();
        }
        Roughness.MergeFrom(other.Roughness);
      }
      if (other.opactity_ != null) {
        if (opactity_ == null) {
          opactity_ = new global::y3d.e.YMatMap();
        }
        Opactity.MergeFrom(other.Opactity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (albedo_ == null) {
              albedo_ = new global::y3d.e.YMatMap();
            }
            input.ReadMessage(albedo_);
            break;
          }
          case 18: {
            if (bump_ == null) {
              bump_ = new global::y3d.e.YMatMap();
            }
            input.ReadMessage(bump_);
            break;
          }
          case 26: {
            if (normal_ == null) {
              normal_ = new global::y3d.e.YMatMap();
            }
            input.ReadMessage(normal_);
            break;
          }
          case 34: {
            if (ao_ == null) {
              ao_ = new global::y3d.e.YMatMap();
            }
            input.ReadMessage(ao_);
            break;
          }
          case 42: {
            if (specular_ == null) {
              specular_ = new global::y3d.e.YMatMap();
            }
            input.ReadMessage(specular_);
            break;
          }
          case 50: {
            if (displacement_ == null) {
              displacement_ = new global::y3d.e.YMatMap();
            }
            input.ReadMessage(displacement_);
            break;
          }
          case 66: {
            if (roughness_ == null) {
              roughness_ = new global::y3d.e.YMatMap();
            }
            input.ReadMessage(roughness_);
            break;
          }
          case 74: {
            if (opactity_ == null) {
              opactity_ = new global::y3d.e.YMatMap();
            }
            input.ReadMessage(opactity_);
            break;
          }
          case 634: {
            if (transclucency_ == null) {
              transclucency_ = new global::y3d.e.YMatMap();
            }
            input.ReadMessage(transclucency_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YMatStandard : pb::IMessage<YMatStandard> {
    private static readonly pb::MessageParser<YMatStandard> _parser = new pb::MessageParser<YMatStandard>(() => new YMatStandard());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YMatStandard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.YmatReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMatStandard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMatStandard(YMatStandard other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      Diffuse = other.diffuse_ != null ? other.Diffuse.Clone() : null;
      Specular = other.specular_ != null ? other.Specular.Clone() : null;
      Ambient = other.ambient_ != null ? other.Ambient.Clone() : null;
      Emissive = other.emissive_ != null ? other.Emissive.Clone() : null;
      Map = other.map_ != null ? other.Map.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMatStandard Clone() {
      return new YMatStandard(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "diffuse" field.</summary>
    public const int DiffuseFieldNumber = 3;
    private global::y3d.e.YDiffuse diffuse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YDiffuse Diffuse {
      get { return diffuse_; }
      set {
        diffuse_ = value;
      }
    }

    /// <summary>Field number for the "specular" field.</summary>
    public const int SpecularFieldNumber = 4;
    private global::y3d.e.YSpecular specular_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YSpecular Specular {
      get { return specular_; }
      set {
        specular_ = value;
      }
    }

    /// <summary>Field number for the "ambient" field.</summary>
    public const int AmbientFieldNumber = 5;
    private global::y3d.e.YAmbient ambient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YAmbient Ambient {
      get { return ambient_; }
      set {
        ambient_ = value;
      }
    }

    /// <summary>Field number for the "emissive" field.</summary>
    public const int EmissiveFieldNumber = 6;
    private global::y3d.e.YEmissive emissive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YEmissive Emissive {
      get { return emissive_; }
      set {
        emissive_ = value;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 7;
    private global::y3d.e.YBaseMap map_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YBaseMap Map {
      get { return map_; }
      set {
        map_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YMatStandard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YMatStandard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Diffuse, other.Diffuse)) return false;
      if (!object.Equals(Specular, other.Specular)) return false;
      if (!object.Equals(Ambient, other.Ambient)) return false;
      if (!object.Equals(Emissive, other.Emissive)) return false;
      if (!object.Equals(Map, other.Map)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (diffuse_ != null) hash ^= Diffuse.GetHashCode();
      if (specular_ != null) hash ^= Specular.GetHashCode();
      if (ambient_ != null) hash ^= Ambient.GetHashCode();
      if (emissive_ != null) hash ^= Emissive.GetHashCode();
      if (map_ != null) hash ^= Map.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (diffuse_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Diffuse);
      }
      if (specular_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Specular);
      }
      if (ambient_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Ambient);
      }
      if (emissive_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Emissive);
      }
      if (map_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Map);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (diffuse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Diffuse);
      }
      if (specular_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Specular);
      }
      if (ambient_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ambient);
      }
      if (emissive_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Emissive);
      }
      if (map_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YMatStandard other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.diffuse_ != null) {
        if (diffuse_ == null) {
          diffuse_ = new global::y3d.e.YDiffuse();
        }
        Diffuse.MergeFrom(other.Diffuse);
      }
      if (other.specular_ != null) {
        if (specular_ == null) {
          specular_ = new global::y3d.e.YSpecular();
        }
        Specular.MergeFrom(other.Specular);
      }
      if (other.ambient_ != null) {
        if (ambient_ == null) {
          ambient_ = new global::y3d.e.YAmbient();
        }
        Ambient.MergeFrom(other.Ambient);
      }
      if (other.emissive_ != null) {
        if (emissive_ == null) {
          emissive_ = new global::y3d.e.YEmissive();
        }
        Emissive.MergeFrom(other.Emissive);
      }
      if (other.map_ != null) {
        if (map_ == null) {
          map_ = new global::y3d.e.YBaseMap();
        }
        Map.MergeFrom(other.Map);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (diffuse_ == null) {
              diffuse_ = new global::y3d.e.YDiffuse();
            }
            input.ReadMessage(diffuse_);
            break;
          }
          case 34: {
            if (specular_ == null) {
              specular_ = new global::y3d.e.YSpecular();
            }
            input.ReadMessage(specular_);
            break;
          }
          case 42: {
            if (ambient_ == null) {
              ambient_ = new global::y3d.e.YAmbient();
            }
            input.ReadMessage(ambient_);
            break;
          }
          case 50: {
            if (emissive_ == null) {
              emissive_ = new global::y3d.e.YEmissive();
            }
            input.ReadMessage(emissive_);
            break;
          }
          case 58: {
            if (map_ == null) {
              map_ = new global::y3d.e.YBaseMap();
            }
            input.ReadMessage(map_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YMatVray : pb::IMessage<YMatVray> {
    private static readonly pb::MessageParser<YMatVray> _parser = new pb::MessageParser<YMatVray>(() => new YMatVray());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YMatVray> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.YmatReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMatVray() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMatVray(YMatVray other) : this() {
      brdf_ = other.brdf_;
      Diffuse = other.diffuse_ != null ? other.Diffuse.Clone() : null;
      Map = other.map_ != null ? other.Map.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMatVray Clone() {
      return new YMatVray(this);
    }

    /// <summary>Field number for the "brdf" field.</summary>
    public const int BrdfFieldNumber = 1;
    private global::y3d.e.BRDF_Type brdf_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.BRDF_Type Brdf {
      get { return brdf_; }
      set {
        brdf_ = value;
      }
    }

    /// <summary>Field number for the "diffuse" field.</summary>
    public const int DiffuseFieldNumber = 2;
    private global::y3d.e.YDiffuse diffuse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YDiffuse Diffuse {
      get { return diffuse_; }
      set {
        diffuse_ = value;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 3;
    private global::y3d.e.YBaseMap map_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YBaseMap Map {
      get { return map_; }
      set {
        map_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YMatVray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YMatVray other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Brdf != other.Brdf) return false;
      if (!object.Equals(Diffuse, other.Diffuse)) return false;
      if (!object.Equals(Map, other.Map)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Brdf != 0) hash ^= Brdf.GetHashCode();
      if (diffuse_ != null) hash ^= Diffuse.GetHashCode();
      if (map_ != null) hash ^= Map.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Brdf != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Brdf);
      }
      if (diffuse_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Diffuse);
      }
      if (map_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Map);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Brdf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Brdf);
      }
      if (diffuse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Diffuse);
      }
      if (map_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YMatVray other) {
      if (other == null) {
        return;
      }
      if (other.Brdf != 0) {
        Brdf = other.Brdf;
      }
      if (other.diffuse_ != null) {
        if (diffuse_ == null) {
          diffuse_ = new global::y3d.e.YDiffuse();
        }
        Diffuse.MergeFrom(other.Diffuse);
      }
      if (other.map_ != null) {
        if (map_ == null) {
          map_ = new global::y3d.e.YBaseMap();
        }
        Map.MergeFrom(other.Map);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            brdf_ = (global::y3d.e.BRDF_Type) input.ReadEnum();
            break;
          }
          case 18: {
            if (diffuse_ == null) {
              diffuse_ = new global::y3d.e.YDiffuse();
            }
            input.ReadMessage(diffuse_);
            break;
          }
          case 26: {
            if (map_ == null) {
              map_ = new global::y3d.e.YBaseMap();
            }
            input.ReadMessage(map_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YMat : pb::IMessage<YMat> {
    private static readonly pb::MessageParser<YMat> _parser = new pb::MessageParser<YMat>(() => new YMat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YMat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.YmatReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMat(YMat other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      MStandard = other.mStandard_ != null ? other.MStandard.Clone() : null;
      MVray = other.mVray_ != null ? other.MVray.Clone() : null;
      MPbr = other.mPbr_ != null ? other.MPbr.Clone() : null;
      MMulti = other.mMulti_ != null ? other.MMulti.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMat Clone() {
      return new YMat(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "m_standard" field.</summary>
    public const int MStandardFieldNumber = 3;
    private global::y3d.e.YMatStandard mStandard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMatStandard MStandard {
      get { return mStandard_; }
      set {
        mStandard_ = value;
      }
    }

    /// <summary>Field number for the "m_vray" field.</summary>
    public const int MVrayFieldNumber = 4;
    private global::y3d.e.YMatVray mVray_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMatVray MVray {
      get { return mVray_; }
      set {
        mVray_ = value;
      }
    }

    /// <summary>Field number for the "m_pbr" field.</summary>
    public const int MPbrFieldNumber = 5;
    private global::y3d.e.YMatPBR mPbr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMatPBR MPbr {
      get { return mPbr_; }
      set {
        mPbr_ = value;
      }
    }

    /// <summary>Field number for the "m_multi" field.</summary>
    public const int MMultiFieldNumber = 6;
    private global::y3d.e.YMultiMat mMulti_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMultiMat MMulti {
      get { return mMulti_; }
      set {
        mMulti_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YMat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YMat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(MStandard, other.MStandard)) return false;
      if (!object.Equals(MVray, other.MVray)) return false;
      if (!object.Equals(MPbr, other.MPbr)) return false;
      if (!object.Equals(MMulti, other.MMulti)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (mStandard_ != null) hash ^= MStandard.GetHashCode();
      if (mVray_ != null) hash ^= MVray.GetHashCode();
      if (mPbr_ != null) hash ^= MPbr.GetHashCode();
      if (mMulti_ != null) hash ^= MMulti.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (mStandard_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MStandard);
      }
      if (mVray_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MVray);
      }
      if (mPbr_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MPbr);
      }
      if (mMulti_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MMulti);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (mStandard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MStandard);
      }
      if (mVray_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MVray);
      }
      if (mPbr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MPbr);
      }
      if (mMulti_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MMulti);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YMat other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.mStandard_ != null) {
        if (mStandard_ == null) {
          mStandard_ = new global::y3d.e.YMatStandard();
        }
        MStandard.MergeFrom(other.MStandard);
      }
      if (other.mVray_ != null) {
        if (mVray_ == null) {
          mVray_ = new global::y3d.e.YMatVray();
        }
        MVray.MergeFrom(other.MVray);
      }
      if (other.mPbr_ != null) {
        if (mPbr_ == null) {
          mPbr_ = new global::y3d.e.YMatPBR();
        }
        MPbr.MergeFrom(other.MPbr);
      }
      if (other.mMulti_ != null) {
        if (mMulti_ == null) {
          mMulti_ = new global::y3d.e.YMultiMat();
        }
        MMulti.MergeFrom(other.MMulti);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (mStandard_ == null) {
              mStandard_ = new global::y3d.e.YMatStandard();
            }
            input.ReadMessage(mStandard_);
            break;
          }
          case 34: {
            if (mVray_ == null) {
              mVray_ = new global::y3d.e.YMatVray();
            }
            input.ReadMessage(mVray_);
            break;
          }
          case 42: {
            if (mPbr_ == null) {
              mPbr_ = new global::y3d.e.YMatPBR();
            }
            input.ReadMessage(mPbr_);
            break;
          }
          case 50: {
            if (mMulti_ == null) {
              mMulti_ = new global::y3d.e.YMultiMat();
            }
            input.ReadMessage(mMulti_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YMultiMat : pb::IMessage<YMultiMat> {
    private static readonly pb::MessageParser<YMultiMat> _parser = new pb::MessageParser<YMultiMat>(() => new YMultiMat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YMultiMat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.YmatReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMultiMat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMultiMat(YMultiMat other) : this() {
      DefaultDiffuse = other.defaultDiffuse_ != null ? other.DefaultDiffuse.Clone() : null;
      materials_ = other.materials_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMultiMat Clone() {
      return new YMultiMat(this);
    }

    /// <summary>Field number for the "default_diffuse" field.</summary>
    public const int DefaultDiffuseFieldNumber = 1;
    private global::y3d.e.YDiffuse defaultDiffuse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YDiffuse DefaultDiffuse {
      get { return defaultDiffuse_; }
      set {
        defaultDiffuse_ = value;
      }
    }

    /// <summary>Field number for the "materials" field.</summary>
    public const int MaterialsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::y3d.e.YMat> _repeated_materials_codec
        = pb::FieldCodec.ForMessage(18, global::y3d.e.YMat.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YMat> materials_ = new pbc::RepeatedField<global::y3d.e.YMat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YMat> Materials {
      get { return materials_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YMultiMat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YMultiMat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DefaultDiffuse, other.DefaultDiffuse)) return false;
      if(!materials_.Equals(other.materials_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (defaultDiffuse_ != null) hash ^= DefaultDiffuse.GetHashCode();
      hash ^= materials_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (defaultDiffuse_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DefaultDiffuse);
      }
      materials_.WriteTo(output, _repeated_materials_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (defaultDiffuse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultDiffuse);
      }
      size += materials_.CalculateSize(_repeated_materials_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YMultiMat other) {
      if (other == null) {
        return;
      }
      if (other.defaultDiffuse_ != null) {
        if (defaultDiffuse_ == null) {
          defaultDiffuse_ = new global::y3d.e.YDiffuse();
        }
        DefaultDiffuse.MergeFrom(other.DefaultDiffuse);
      }
      materials_.Add(other.materials_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (defaultDiffuse_ == null) {
              defaultDiffuse_ = new global::y3d.e.YDiffuse();
            }
            input.ReadMessage(defaultDiffuse_);
            break;
          }
          case 18: {
            materials_.AddEntriesFrom(input, _repeated_materials_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
