// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yloader.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Y3D {
  public static partial class Loader
  {
    static readonly string __ServiceName = "y3d.Loader";

    static readonly Marshaller<global::Y3D.LibInfo> __Marshaller_LibInfo = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Y3D.LibInfo.Parser.ParseFrom);
    static readonly Marshaller<global::Y3D.ResultType> __Marshaller_ResultType = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Y3D.ResultType.Parser.ParseFrom);

    static readonly Method<global::Y3D.LibInfo, global::Y3D.ResultType> __Method_Shutdown = new Method<global::Y3D.LibInfo, global::Y3D.ResultType>(
        MethodType.Unary,
        __ServiceName,
        "Shutdown",
        __Marshaller_LibInfo,
        __Marshaller_ResultType);

    static readonly Method<global::Y3D.LibInfo, global::Y3D.ResultType> __Method_LoadDll = new Method<global::Y3D.LibInfo, global::Y3D.ResultType>(
        MethodType.Unary,
        __ServiceName,
        "LoadDll",
        __Marshaller_LibInfo,
        __Marshaller_ResultType);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Y3D.YloaderReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Loader</summary>
    public abstract partial class LoaderBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Y3D.ResultType> Shutdown(global::Y3D.LibInfo request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Y3D.ResultType> LoadDll(global::Y3D.LibInfo request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Loader</summary>
    public partial class LoaderClient : ClientBase<LoaderClient>
    {
      /// <summary>Creates a new client for Loader</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LoaderClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Loader that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LoaderClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LoaderClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LoaderClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Y3D.ResultType Shutdown(global::Y3D.LibInfo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Shutdown(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Y3D.ResultType Shutdown(global::Y3D.LibInfo request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Shutdown, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Y3D.ResultType> ShutdownAsync(global::Y3D.LibInfo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ShutdownAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Y3D.ResultType> ShutdownAsync(global::Y3D.LibInfo request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Shutdown, null, options, request);
      }
      public virtual global::Y3D.ResultType LoadDll(global::Y3D.LibInfo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LoadDll(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Y3D.ResultType LoadDll(global::Y3D.LibInfo request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LoadDll, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Y3D.ResultType> LoadDllAsync(global::Y3D.LibInfo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LoadDllAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Y3D.ResultType> LoadDllAsync(global::Y3D.LibInfo request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LoadDll, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LoaderClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LoaderClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static ServerServiceDefinition BindService(LoaderBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Shutdown, serviceImpl.Shutdown)
          .AddMethod(__Method_LoadDll, serviceImpl.LoadDll).Build();
    }

  }
}
#endregion
