// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: yloader.proto
#ifndef GRPC_yloader_2eproto__INCLUDED
#define GRPC_yloader_2eproto__INCLUDED

#include "yloader.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace y3d {

class Loader final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::y3d::ResultType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultType>> AsyncShutdown(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultType>>(AsyncShutdownRaw(context, request, cq));
    }
    virtual ::grpc::Status LoadDll(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::y3d::ResultType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultType>> AsyncLoadDll(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultType>>(AsyncLoadDllRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultType>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultType>* AsyncLoadDllRaw(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::y3d::ResultType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultType>> AsyncShutdown(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultType>>(AsyncShutdownRaw(context, request, cq));
    }
    ::grpc::Status LoadDll(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::y3d::ResultType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultType>> AsyncLoadDll(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultType>>(AsyncLoadDllRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultType>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultType>* AsyncLoadDllRaw(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_Shutdown_;
    const ::grpc::RpcMethod rpcmethod_LoadDll_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response);
    virtual ::grpc::Status LoadDll(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Shutdown() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::y3d::LibInfo* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadDll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LoadDll() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LoadDll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadDll(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadDll(::grpc::ServerContext* context, ::y3d::LibInfo* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Shutdown<WithAsyncMethod_LoadDll<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Shutdown() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadDll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LoadDll() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LoadDll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadDll(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Shutdown() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::y3d::LibInfo, ::y3d::ResultType>(std::bind(&WithStreamedUnaryMethod_Shutdown<BaseClass>::StreamedShutdown, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::LibInfo,::y3d::ResultType>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadDll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LoadDll() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::y3d::LibInfo, ::y3d::ResultType>(std::bind(&WithStreamedUnaryMethod_LoadDll<BaseClass>::StreamedLoadDll, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LoadDll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadDll(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadDll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::LibInfo,::y3d::ResultType>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_LoadDll<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_LoadDll<Service > > StreamedService;
};

class YServiceMaxLoader final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::y3d::ResultType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultType>> AsyncShutdown(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultType>>(AsyncShutdownRaw(context, request, cq));
    }
    virtual ::grpc::Status LoadDll(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::y3d::ResultType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultType>> AsyncLoadDll(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultType>>(AsyncLoadDllRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseApp(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::y3d::ResultType* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultType>> AsyncCloseApp(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultType>>(AsyncCloseAppRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultType>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultType>* AsyncLoadDllRaw(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultType>* AsyncCloseAppRaw(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::y3d::ResultType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultType>> AsyncShutdown(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultType>>(AsyncShutdownRaw(context, request, cq));
    }
    ::grpc::Status LoadDll(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::y3d::ResultType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultType>> AsyncLoadDll(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultType>>(AsyncLoadDllRaw(context, request, cq));
    }
    ::grpc::Status CloseApp(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::y3d::ResultType* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultType>> AsyncCloseApp(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultType>>(AsyncCloseAppRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultType>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultType>* AsyncLoadDllRaw(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultType>* AsyncCloseAppRaw(::grpc::ClientContext* context, const ::y3d::LibInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_Shutdown_;
    const ::grpc::RpcMethod rpcmethod_LoadDll_;
    const ::grpc::RpcMethod rpcmethod_CloseApp_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response);
    virtual ::grpc::Status LoadDll(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response);
    virtual ::grpc::Status CloseApp(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Shutdown() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::y3d::LibInfo* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadDll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LoadDll() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_LoadDll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadDll(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadDll(::grpc::ServerContext* context, ::y3d::LibInfo* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CloseApp() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CloseApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseApp(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseApp(::grpc::ServerContext* context, ::y3d::LibInfo* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultType>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Shutdown<WithAsyncMethod_LoadDll<WithAsyncMethod_CloseApp<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Shutdown() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadDll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LoadDll() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_LoadDll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadDll(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CloseApp() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CloseApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseApp(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Shutdown() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::y3d::LibInfo, ::y3d::ResultType>(std::bind(&WithStreamedUnaryMethod_Shutdown<BaseClass>::StreamedShutdown, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::LibInfo,::y3d::ResultType>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadDll : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LoadDll() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::y3d::LibInfo, ::y3d::ResultType>(std::bind(&WithStreamedUnaryMethod_LoadDll<BaseClass>::StreamedLoadDll, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LoadDll() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadDll(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadDll(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::LibInfo,::y3d::ResultType>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CloseApp() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::y3d::LibInfo, ::y3d::ResultType>(std::bind(&WithStreamedUnaryMethod_CloseApp<BaseClass>::StreamedCloseApp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CloseApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseApp(::grpc::ServerContext* context, const ::y3d::LibInfo* request, ::y3d::ResultType* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseApp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::LibInfo,::y3d::ResultType>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_LoadDll<WithStreamedUnaryMethod_CloseApp<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_LoadDll<WithStreamedUnaryMethod_CloseApp<Service > > > StreamedService;
};
// server run in 3dsmax order to control Tool service

}  // namespace y3d


#endif  // GRPC_yloader_2eproto__INCLUDED
