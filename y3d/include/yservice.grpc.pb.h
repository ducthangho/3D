// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: yservice.proto
// Original file comments:
// [START declaration]
#ifndef GRPC_yservice_2eproto__INCLUDED
#define GRPC_yservice_2eproto__INCLUDED

#include "yservice.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace y3d {

// [END csharp_declaration]
class YServiceMaxTools final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RenameObject(::grpc::ClientContext* context, const ::y3d::RenameParam& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncRenameObject(::grpc::ClientContext* context, const ::y3d::RenameParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncRenameObjectRaw(context, request, cq));
    }
    virtual ::grpc::Status SaveProject(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::y3d::ResponseEvent* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseEvent>> AsyncSaveProject(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseEvent>>(AsyncSaveProjectRaw(context, request, cq));
    }
    virtual ::grpc::Status NewProject(::grpc::ClientContext* context, const ::y3d::NewProjectParam& request, ::y3d::ResponseNProject* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseNProject>> AsyncNewProject(::grpc::ClientContext* context, const ::y3d::NewProjectParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseNProject>>(AsyncNewProjectRaw(context, request, cq));
    }
    virtual ::grpc::Status LoadProject(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::y3d::ResponseNProject* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseNProject>> AsyncLoadProject(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseNProject>>(AsyncLoadProjectRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteProject(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::y3d::ResponseNProject* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseNProject>> AsyncDeleteProject(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseNProject>>(AsyncDeleteProjectRaw(context, request, cq));
    }
    virtual ::grpc::Status Unwrap(::grpc::ClientContext* context, const ::y3d::EUnwrap& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncUnwrap(::grpc::ClientContext* context, const ::y3d::EUnwrap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncUnwrapRaw(context, request, cq));
    }
    virtual ::grpc::Status Packing(::grpc::ClientContext* context, const ::y3d::EPacking& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncPacking(::grpc::ClientContext* context, const ::y3d::EPacking& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncPackingRaw(context, request, cq));
    }
    virtual ::grpc::Status LowPoly(::grpc::ClientContext* context, const ::y3d::ELowpoly& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncLowPoly(::grpc::ClientContext* context, const ::y3d::ELowpoly& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncLowPolyRaw(context, request, cq));
    }
    virtual ::grpc::Status LoadSystem(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::YSystem* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YSystem>> AsyncLoadSystem(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YSystem>>(AsyncLoadSystemRaw(context, request, cq));
    }
    virtual ::grpc::Status SaveSystem(::grpc::ClientContext* context, const ::y3d::YSystem& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncSaveSystem(::grpc::ClientContext* context, const ::y3d::YSystem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncSaveSystemRaw(context, request, cq));
    }
    virtual ::grpc::Status BakeNormal(::grpc::ClientContext* context, const ::y3d::ENormal& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncBakeNormal(::grpc::ClientContext* context, const ::y3d::ENormal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncBakeNormalRaw(context, request, cq));
    }
    virtual ::grpc::Status BakeNormalMax(::grpc::ClientContext* context, const ::y3d::ENormal& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncBakeNormalMax(::grpc::ClientContext* context, const ::y3d::ENormal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncBakeNormalMaxRaw(context, request, cq));
    }
    virtual ::grpc::Status MakeNode4Edit(::grpc::ClientContext* context, const ::y3d::Make4TestParam& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncMakeNode4Edit(::grpc::ClientContext* context, const ::y3d::Make4TestParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncMakeNode4EditRaw(context, request, cq));
    }
    virtual ::grpc::Status BatchOptimize(::grpc::ClientContext* context, const ::y3d::BatchOptimizeParam& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncBatchOptimize(::grpc::ClientContext* context, const ::y3d::BatchOptimizeParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncBatchOptimizeRaw(context, request, cq));
    }
    virtual ::grpc::Status TestTest(::grpc::ClientContext* context, const ::y3d::TestParam& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncTestTest(::grpc::ClientContext* context, const ::y3d::TestParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncTestTestRaw(context, request, cq));
    }
    virtual ::grpc::Status GetObjectFromMax(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::YAreaList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YAreaList>> AsyncGetObjectFromMax(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YAreaList>>(AsyncGetObjectFromMaxRaw(context, request, cq));
    }
    virtual ::grpc::Status CloneObject(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncCloneObject(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncCloneObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::y3d::YEvent>> DoStreamClient(::grpc::ClientContext* context, ::y3d::ResponseEvent* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::y3d::YEvent>>(DoStreamClientRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::y3d::YEvent>> AsyncDoStreamClient(::grpc::ClientContext* context, ::y3d::ResponseEvent* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::y3d::YEvent>>(AsyncDoStreamClientRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::y3d::YEvent>> DoStreamServer(::grpc::ClientContext* context, const ::y3d::EmptyParam& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::y3d::YEvent>>(DoStreamServerRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::y3d::YEvent>> AsyncDoStreamServer(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::y3d::YEvent>>(AsyncDoStreamServerRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::y3d::YEvent, ::y3d::YEvent>> DoAction(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::y3d::YEvent, ::y3d::YEvent>>(DoActionRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::y3d::YEvent, ::y3d::YEvent>> AsyncDoAction(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::y3d::YEvent, ::y3d::YEvent>>(AsyncDoActionRaw(context, cq, tag));
    }
    virtual ::grpc::Status DoEvent(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::y3d::ResponseEvent* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseEvent>> AsyncDoEvent(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseEvent>>(AsyncDoEventRaw(context, request, cq));
    }
    virtual ::grpc::Status DoUnwrap(::grpc::ClientContext* context, const ::y3d::EUnwrap& request, ::y3d::ResponseEvent* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseEvent>> AsyncDoUnwrap(::grpc::ClientContext* context, const ::y3d::EUnwrap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseEvent>>(AsyncDoUnwrapRaw(context, request, cq));
    }
    virtual ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncShutdown(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncShutdownRaw(context, request, cq));
    }
    virtual ::grpc::Status AddTestObject(::grpc::ClientContext* context, const ::y3d::TestOParam& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncAddTestObject(::grpc::ClientContext* context, const ::y3d::TestOParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncAddTestObjectRaw(context, request, cq));
    }
    virtual ::grpc::Status ApplyTestObject(::grpc::ClientContext* context, const ::y3d::TestOParam& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncApplyTestObject(::grpc::ClientContext* context, const ::y3d::TestOParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncApplyTestObjectRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncRenameObjectRaw(::grpc::ClientContext* context, const ::y3d::RenameParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseEvent>* AsyncSaveProjectRaw(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseNProject>* AsyncNewProjectRaw(::grpc::ClientContext* context, const ::y3d::NewProjectParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseNProject>* AsyncLoadProjectRaw(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseNProject>* AsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncUnwrapRaw(::grpc::ClientContext* context, const ::y3d::EUnwrap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncPackingRaw(::grpc::ClientContext* context, const ::y3d::EPacking& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncLowPolyRaw(::grpc::ClientContext* context, const ::y3d::ELowpoly& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YSystem>* AsyncLoadSystemRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncSaveSystemRaw(::grpc::ClientContext* context, const ::y3d::YSystem& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncBakeNormalRaw(::grpc::ClientContext* context, const ::y3d::ENormal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncBakeNormalMaxRaw(::grpc::ClientContext* context, const ::y3d::ENormal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncMakeNode4EditRaw(::grpc::ClientContext* context, const ::y3d::Make4TestParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncBatchOptimizeRaw(::grpc::ClientContext* context, const ::y3d::BatchOptimizeParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncTestTestRaw(::grpc::ClientContext* context, const ::y3d::TestParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YAreaList>* AsyncGetObjectFromMaxRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncCloneObjectRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::y3d::YEvent>* DoStreamClientRaw(::grpc::ClientContext* context, ::y3d::ResponseEvent* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::y3d::YEvent>* AsyncDoStreamClientRaw(::grpc::ClientContext* context, ::y3d::ResponseEvent* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderInterface< ::y3d::YEvent>* DoStreamServerRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::y3d::YEvent>* AsyncDoStreamServerRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::y3d::YEvent, ::y3d::YEvent>* DoActionRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::y3d::YEvent, ::y3d::YEvent>* AsyncDoActionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseEvent>* AsyncDoEventRaw(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseEvent>* AsyncDoUnwrapRaw(::grpc::ClientContext* context, const ::y3d::EUnwrap& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncAddTestObjectRaw(::grpc::ClientContext* context, const ::y3d::TestOParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncApplyTestObjectRaw(::grpc::ClientContext* context, const ::y3d::TestOParam& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RenameObject(::grpc::ClientContext* context, const ::y3d::RenameParam& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncRenameObject(::grpc::ClientContext* context, const ::y3d::RenameParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncRenameObjectRaw(context, request, cq));
    }
    ::grpc::Status SaveProject(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::y3d::ResponseEvent* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>> AsyncSaveProject(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>>(AsyncSaveProjectRaw(context, request, cq));
    }
    ::grpc::Status NewProject(::grpc::ClientContext* context, const ::y3d::NewProjectParam& request, ::y3d::ResponseNProject* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResponseNProject>> AsyncNewProject(::grpc::ClientContext* context, const ::y3d::NewProjectParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResponseNProject>>(AsyncNewProjectRaw(context, request, cq));
    }
    ::grpc::Status LoadProject(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::y3d::ResponseNProject* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResponseNProject>> AsyncLoadProject(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResponseNProject>>(AsyncLoadProjectRaw(context, request, cq));
    }
    ::grpc::Status DeleteProject(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::y3d::ResponseNProject* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResponseNProject>> AsyncDeleteProject(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResponseNProject>>(AsyncDeleteProjectRaw(context, request, cq));
    }
    ::grpc::Status Unwrap(::grpc::ClientContext* context, const ::y3d::EUnwrap& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncUnwrap(::grpc::ClientContext* context, const ::y3d::EUnwrap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncUnwrapRaw(context, request, cq));
    }
    ::grpc::Status Packing(::grpc::ClientContext* context, const ::y3d::EPacking& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncPacking(::grpc::ClientContext* context, const ::y3d::EPacking& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncPackingRaw(context, request, cq));
    }
    ::grpc::Status LowPoly(::grpc::ClientContext* context, const ::y3d::ELowpoly& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncLowPoly(::grpc::ClientContext* context, const ::y3d::ELowpoly& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncLowPolyRaw(context, request, cq));
    }
    ::grpc::Status LoadSystem(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::YSystem* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YSystem>> AsyncLoadSystem(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YSystem>>(AsyncLoadSystemRaw(context, request, cq));
    }
    ::grpc::Status SaveSystem(::grpc::ClientContext* context, const ::y3d::YSystem& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncSaveSystem(::grpc::ClientContext* context, const ::y3d::YSystem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncSaveSystemRaw(context, request, cq));
    }
    ::grpc::Status BakeNormal(::grpc::ClientContext* context, const ::y3d::ENormal& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncBakeNormal(::grpc::ClientContext* context, const ::y3d::ENormal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncBakeNormalRaw(context, request, cq));
    }
    ::grpc::Status BakeNormalMax(::grpc::ClientContext* context, const ::y3d::ENormal& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncBakeNormalMax(::grpc::ClientContext* context, const ::y3d::ENormal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncBakeNormalMaxRaw(context, request, cq));
    }
    ::grpc::Status MakeNode4Edit(::grpc::ClientContext* context, const ::y3d::Make4TestParam& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncMakeNode4Edit(::grpc::ClientContext* context, const ::y3d::Make4TestParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncMakeNode4EditRaw(context, request, cq));
    }
    ::grpc::Status BatchOptimize(::grpc::ClientContext* context, const ::y3d::BatchOptimizeParam& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncBatchOptimize(::grpc::ClientContext* context, const ::y3d::BatchOptimizeParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncBatchOptimizeRaw(context, request, cq));
    }
    ::grpc::Status TestTest(::grpc::ClientContext* context, const ::y3d::TestParam& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncTestTest(::grpc::ClientContext* context, const ::y3d::TestParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncTestTestRaw(context, request, cq));
    }
    ::grpc::Status GetObjectFromMax(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::YAreaList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YAreaList>> AsyncGetObjectFromMax(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YAreaList>>(AsyncGetObjectFromMaxRaw(context, request, cq));
    }
    ::grpc::Status CloneObject(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncCloneObject(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncCloneObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::y3d::YEvent>> DoStreamClient(::grpc::ClientContext* context, ::y3d::ResponseEvent* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::y3d::YEvent>>(DoStreamClientRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::y3d::YEvent>> AsyncDoStreamClient(::grpc::ClientContext* context, ::y3d::ResponseEvent* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::y3d::YEvent>>(AsyncDoStreamClientRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReader< ::y3d::YEvent>> DoStreamServer(::grpc::ClientContext* context, const ::y3d::EmptyParam& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::y3d::YEvent>>(DoStreamServerRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::y3d::YEvent>> AsyncDoStreamServer(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::y3d::YEvent>>(AsyncDoStreamServerRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::y3d::YEvent, ::y3d::YEvent>> DoAction(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::y3d::YEvent, ::y3d::YEvent>>(DoActionRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::y3d::YEvent, ::y3d::YEvent>> AsyncDoAction(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::y3d::YEvent, ::y3d::YEvent>>(AsyncDoActionRaw(context, cq, tag));
    }
    ::grpc::Status DoEvent(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::y3d::ResponseEvent* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>> AsyncDoEvent(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>>(AsyncDoEventRaw(context, request, cq));
    }
    ::grpc::Status DoUnwrap(::grpc::ClientContext* context, const ::y3d::EUnwrap& request, ::y3d::ResponseEvent* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>> AsyncDoUnwrap(::grpc::ClientContext* context, const ::y3d::EUnwrap& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>>(AsyncDoUnwrapRaw(context, request, cq));
    }
    ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncShutdown(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncShutdownRaw(context, request, cq));
    }
    ::grpc::Status AddTestObject(::grpc::ClientContext* context, const ::y3d::TestOParam& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncAddTestObject(::grpc::ClientContext* context, const ::y3d::TestOParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncAddTestObjectRaw(context, request, cq));
    }
    ::grpc::Status ApplyTestObject(::grpc::ClientContext* context, const ::y3d::TestOParam& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncApplyTestObject(::grpc::ClientContext* context, const ::y3d::TestOParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncApplyTestObjectRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncRenameObjectRaw(::grpc::ClientContext* context, const ::y3d::RenameParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>* AsyncSaveProjectRaw(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResponseNProject>* AsyncNewProjectRaw(::grpc::ClientContext* context, const ::y3d::NewProjectParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResponseNProject>* AsyncLoadProjectRaw(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResponseNProject>* AsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncUnwrapRaw(::grpc::ClientContext* context, const ::y3d::EUnwrap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncPackingRaw(::grpc::ClientContext* context, const ::y3d::EPacking& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncLowPolyRaw(::grpc::ClientContext* context, const ::y3d::ELowpoly& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::YSystem>* AsyncLoadSystemRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncSaveSystemRaw(::grpc::ClientContext* context, const ::y3d::YSystem& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncBakeNormalRaw(::grpc::ClientContext* context, const ::y3d::ENormal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncBakeNormalMaxRaw(::grpc::ClientContext* context, const ::y3d::ENormal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncMakeNode4EditRaw(::grpc::ClientContext* context, const ::y3d::Make4TestParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncBatchOptimizeRaw(::grpc::ClientContext* context, const ::y3d::BatchOptimizeParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncTestTestRaw(::grpc::ClientContext* context, const ::y3d::TestParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::YAreaList>* AsyncGetObjectFromMaxRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncCloneObjectRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::y3d::YEvent>* DoStreamClientRaw(::grpc::ClientContext* context, ::y3d::ResponseEvent* response) override;
    ::grpc::ClientAsyncWriter< ::y3d::YEvent>* AsyncDoStreamClientRaw(::grpc::ClientContext* context, ::y3d::ResponseEvent* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientReader< ::y3d::YEvent>* DoStreamServerRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request) override;
    ::grpc::ClientAsyncReader< ::y3d::YEvent>* AsyncDoStreamServerRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientReaderWriter< ::y3d::YEvent, ::y3d::YEvent>* DoActionRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::y3d::YEvent, ::y3d::YEvent>* AsyncDoActionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>* AsyncDoEventRaw(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>* AsyncDoUnwrapRaw(::grpc::ClientContext* context, const ::y3d::EUnwrap& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncAddTestObjectRaw(::grpc::ClientContext* context, const ::y3d::TestOParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncApplyTestObjectRaw(::grpc::ClientContext* context, const ::y3d::TestOParam& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_RenameObject_;
    const ::grpc::RpcMethod rpcmethod_SaveProject_;
    const ::grpc::RpcMethod rpcmethod_NewProject_;
    const ::grpc::RpcMethod rpcmethod_LoadProject_;
    const ::grpc::RpcMethod rpcmethod_DeleteProject_;
    const ::grpc::RpcMethod rpcmethod_Unwrap_;
    const ::grpc::RpcMethod rpcmethod_Packing_;
    const ::grpc::RpcMethod rpcmethod_LowPoly_;
    const ::grpc::RpcMethod rpcmethod_LoadSystem_;
    const ::grpc::RpcMethod rpcmethod_SaveSystem_;
    const ::grpc::RpcMethod rpcmethod_BakeNormal_;
    const ::grpc::RpcMethod rpcmethod_BakeNormalMax_;
    const ::grpc::RpcMethod rpcmethod_MakeNode4Edit_;
    const ::grpc::RpcMethod rpcmethod_BatchOptimize_;
    const ::grpc::RpcMethod rpcmethod_TestTest_;
    const ::grpc::RpcMethod rpcmethod_GetObjectFromMax_;
    const ::grpc::RpcMethod rpcmethod_CloneObject_;
    const ::grpc::RpcMethod rpcmethod_DoStreamClient_;
    const ::grpc::RpcMethod rpcmethod_DoStreamServer_;
    const ::grpc::RpcMethod rpcmethod_DoAction_;
    const ::grpc::RpcMethod rpcmethod_DoEvent_;
    const ::grpc::RpcMethod rpcmethod_DoUnwrap_;
    const ::grpc::RpcMethod rpcmethod_Shutdown_;
    const ::grpc::RpcMethod rpcmethod_AddTestObject_;
    const ::grpc::RpcMethod rpcmethod_ApplyTestObject_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RenameObject(::grpc::ServerContext* context, const ::y3d::RenameParam* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status SaveProject(::grpc::ServerContext* context, const ::y3d::ProjectInfo* request, ::y3d::ResponseEvent* response);
    virtual ::grpc::Status NewProject(::grpc::ServerContext* context, const ::y3d::NewProjectParam* request, ::y3d::ResponseNProject* response);
    virtual ::grpc::Status LoadProject(::grpc::ServerContext* context, const ::y3d::ProjectInfo* request, ::y3d::ResponseNProject* response);
    virtual ::grpc::Status DeleteProject(::grpc::ServerContext* context, const ::y3d::ProjectInfo* request, ::y3d::ResponseNProject* response);
    virtual ::grpc::Status Unwrap(::grpc::ServerContext* context, const ::y3d::EUnwrap* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status Packing(::grpc::ServerContext* context, const ::y3d::EPacking* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status LowPoly(::grpc::ServerContext* context, const ::y3d::ELowpoly* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status LoadSystem(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YSystem* response);
    virtual ::grpc::Status SaveSystem(::grpc::ServerContext* context, const ::y3d::YSystem* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status BakeNormal(::grpc::ServerContext* context, const ::y3d::ENormal* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status BakeNormalMax(::grpc::ServerContext* context, const ::y3d::ENormal* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status MakeNode4Edit(::grpc::ServerContext* context, const ::y3d::Make4TestParam* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status BatchOptimize(::grpc::ServerContext* context, const ::y3d::BatchOptimizeParam* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status TestTest(::grpc::ServerContext* context, const ::y3d::TestParam* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status GetObjectFromMax(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YAreaList* response);
    virtual ::grpc::Status CloneObject(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status DoStreamClient(::grpc::ServerContext* context, ::grpc::ServerReader< ::y3d::YEvent>* reader, ::y3d::ResponseEvent* response);
    virtual ::grpc::Status DoStreamServer(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::grpc::ServerWriter< ::y3d::YEvent>* writer);
    virtual ::grpc::Status DoAction(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::y3d::YEvent, ::y3d::YEvent>* stream);
    virtual ::grpc::Status DoEvent(::grpc::ServerContext* context, const ::y3d::YEvent* request, ::y3d::ResponseEvent* response);
    virtual ::grpc::Status DoUnwrap(::grpc::ServerContext* context, const ::y3d::EUnwrap* request, ::y3d::ResponseEvent* response);
    virtual ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status AddTestObject(::grpc::ServerContext* context, const ::y3d::TestOParam* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status ApplyTestObject(::grpc::ServerContext* context, const ::y3d::TestOParam* request, ::y3d::ResultReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RenameObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RenameObject() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RenameObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameObject(::grpc::ServerContext* context, const ::y3d::RenameParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRenameObject(::grpc::ServerContext* context, ::y3d::RenameParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SaveProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SaveProject() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SaveProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveProject(::grpc::ServerContext* context, const ::y3d::ProjectInfo* request, ::y3d::ResponseEvent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveProject(::grpc::ServerContext* context, ::y3d::ProjectInfo* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResponseEvent>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NewProject() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_NewProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewProject(::grpc::ServerContext* context, const ::y3d::NewProjectParam* request, ::y3d::ResponseNProject* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewProject(::grpc::ServerContext* context, ::y3d::NewProjectParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResponseNProject>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LoadProject() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LoadProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadProject(::grpc::ServerContext* context, const ::y3d::ProjectInfo* request, ::y3d::ResponseNProject* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadProject(::grpc::ServerContext* context, ::y3d::ProjectInfo* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResponseNProject>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteProject() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProject(::grpc::ServerContext* context, const ::y3d::ProjectInfo* request, ::y3d::ResponseNProject* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteProject(::grpc::ServerContext* context, ::y3d::ProjectInfo* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResponseNProject>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Unwrap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Unwrap() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Unwrap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unwrap(::grpc::ServerContext* context, const ::y3d::EUnwrap* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnwrap(::grpc::ServerContext* context, ::y3d::EUnwrap* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Packing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Packing() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Packing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Packing(::grpc::ServerContext* context, const ::y3d::EPacking* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPacking(::grpc::ServerContext* context, ::y3d::EPacking* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LowPoly : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LowPoly() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_LowPoly() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LowPoly(::grpc::ServerContext* context, const ::y3d::ELowpoly* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLowPoly(::grpc::ServerContext* context, ::y3d::ELowpoly* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadSystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LoadSystem() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_LoadSystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSystem(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YSystem* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadSystem(::grpc::ServerContext* context, ::y3d::EmptyParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::YSystem>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SaveSystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SaveSystem() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SaveSystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveSystem(::grpc::ServerContext* context, const ::y3d::YSystem* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveSystem(::grpc::ServerContext* context, ::y3d::YSystem* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BakeNormal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BakeNormal() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_BakeNormal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BakeNormal(::grpc::ServerContext* context, const ::y3d::ENormal* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBakeNormal(::grpc::ServerContext* context, ::y3d::ENormal* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BakeNormalMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BakeNormalMax() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_BakeNormalMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BakeNormalMax(::grpc::ServerContext* context, const ::y3d::ENormal* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBakeNormalMax(::grpc::ServerContext* context, ::y3d::ENormal* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MakeNode4Edit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MakeNode4Edit() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_MakeNode4Edit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeNode4Edit(::grpc::ServerContext* context, const ::y3d::Make4TestParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMakeNode4Edit(::grpc::ServerContext* context, ::y3d::Make4TestParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchOptimize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BatchOptimize() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_BatchOptimize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchOptimize(::grpc::ServerContext* context, const ::y3d::BatchOptimizeParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchOptimize(::grpc::ServerContext* context, ::y3d::BatchOptimizeParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TestTest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TestTest() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_TestTest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestTest(::grpc::ServerContext* context, const ::y3d::TestParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTestTest(::grpc::ServerContext* context, ::y3d::TestParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetObjectFromMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetObjectFromMax() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetObjectFromMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectFromMax(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YAreaList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetObjectFromMax(::grpc::ServerContext* context, ::y3d::EmptyParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::YAreaList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloneObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CloneObject() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_CloneObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloneObject(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloneObject(::grpc::ServerContext* context, ::y3d::EmptyParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoStreamClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DoStreamClient() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_DoStreamClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoStreamClient(::grpc::ServerContext* context, ::grpc::ServerReader< ::y3d::YEvent>* reader, ::y3d::ResponseEvent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoStreamClient(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::y3d::ResponseEvent, ::y3d::YEvent>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(17, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoStreamServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DoStreamServer() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_DoStreamServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoStreamServer(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::grpc::ServerWriter< ::y3d::YEvent>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoStreamServer(::grpc::ServerContext* context, ::y3d::EmptyParam* request, ::grpc::ServerAsyncWriter< ::y3d::YEvent>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(18, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DoAction() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_DoAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoAction(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::y3d::YEvent, ::y3d::YEvent>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoAction(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::y3d::YEvent, ::y3d::YEvent>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(19, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DoEvent() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_DoEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoEvent(::grpc::ServerContext* context, const ::y3d::YEvent* request, ::y3d::ResponseEvent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoEvent(::grpc::ServerContext* context, ::y3d::YEvent* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResponseEvent>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoUnwrap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DoUnwrap() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_DoUnwrap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoUnwrap(::grpc::ServerContext* context, const ::y3d::EUnwrap* request, ::y3d::ResponseEvent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoUnwrap(::grpc::ServerContext* context, ::y3d::EUnwrap* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResponseEvent>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Shutdown() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::y3d::EmptyParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddTestObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddTestObject() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_AddTestObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTestObject(::grpc::ServerContext* context, const ::y3d::TestOParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTestObject(::grpc::ServerContext* context, ::y3d::TestOParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ApplyTestObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ApplyTestObject() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_ApplyTestObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyTestObject(::grpc::ServerContext* context, const ::y3d::TestOParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApplyTestObject(::grpc::ServerContext* context, ::y3d::TestOParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RenameObject<WithAsyncMethod_SaveProject<WithAsyncMethod_NewProject<WithAsyncMethod_LoadProject<WithAsyncMethod_DeleteProject<WithAsyncMethod_Unwrap<WithAsyncMethod_Packing<WithAsyncMethod_LowPoly<WithAsyncMethod_LoadSystem<WithAsyncMethod_SaveSystem<WithAsyncMethod_BakeNormal<WithAsyncMethod_BakeNormalMax<WithAsyncMethod_MakeNode4Edit<WithAsyncMethod_BatchOptimize<WithAsyncMethod_TestTest<WithAsyncMethod_GetObjectFromMax<WithAsyncMethod_CloneObject<WithAsyncMethod_DoStreamClient<WithAsyncMethod_DoStreamServer<WithAsyncMethod_DoAction<WithAsyncMethod_DoEvent<WithAsyncMethod_DoUnwrap<WithAsyncMethod_Shutdown<WithAsyncMethod_AddTestObject<WithAsyncMethod_ApplyTestObject<Service > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_RenameObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RenameObject() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RenameObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RenameObject(::grpc::ServerContext* context, const ::y3d::RenameParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SaveProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SaveProject() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SaveProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveProject(::grpc::ServerContext* context, const ::y3d::ProjectInfo* request, ::y3d::ResponseEvent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NewProject() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_NewProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewProject(::grpc::ServerContext* context, const ::y3d::NewProjectParam* request, ::y3d::ResponseNProject* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LoadProject() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LoadProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadProject(::grpc::ServerContext* context, const ::y3d::ProjectInfo* request, ::y3d::ResponseNProject* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteProject() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProject(::grpc::ServerContext* context, const ::y3d::ProjectInfo* request, ::y3d::ResponseNProject* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Unwrap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Unwrap() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Unwrap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unwrap(::grpc::ServerContext* context, const ::y3d::EUnwrap* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Packing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Packing() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Packing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Packing(::grpc::ServerContext* context, const ::y3d::EPacking* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LowPoly : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LowPoly() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_LowPoly() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LowPoly(::grpc::ServerContext* context, const ::y3d::ELowpoly* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadSystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LoadSystem() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_LoadSystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSystem(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YSystem* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SaveSystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SaveSystem() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SaveSystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveSystem(::grpc::ServerContext* context, const ::y3d::YSystem* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BakeNormal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BakeNormal() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_BakeNormal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BakeNormal(::grpc::ServerContext* context, const ::y3d::ENormal* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BakeNormalMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BakeNormalMax() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_BakeNormalMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BakeNormalMax(::grpc::ServerContext* context, const ::y3d::ENormal* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MakeNode4Edit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MakeNode4Edit() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_MakeNode4Edit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeNode4Edit(::grpc::ServerContext* context, const ::y3d::Make4TestParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchOptimize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BatchOptimize() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_BatchOptimize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchOptimize(::grpc::ServerContext* context, const ::y3d::BatchOptimizeParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TestTest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TestTest() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_TestTest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TestTest(::grpc::ServerContext* context, const ::y3d::TestParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetObjectFromMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetObjectFromMax() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetObjectFromMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectFromMax(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YAreaList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloneObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CloneObject() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_CloneObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloneObject(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoStreamClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DoStreamClient() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_DoStreamClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoStreamClient(::grpc::ServerContext* context, ::grpc::ServerReader< ::y3d::YEvent>* reader, ::y3d::ResponseEvent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoStreamServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DoStreamServer() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_DoStreamServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoStreamServer(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::grpc::ServerWriter< ::y3d::YEvent>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DoAction() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_DoAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoAction(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::y3d::YEvent, ::y3d::YEvent>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DoEvent() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_DoEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoEvent(::grpc::ServerContext* context, const ::y3d::YEvent* request, ::y3d::ResponseEvent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoUnwrap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DoUnwrap() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_DoUnwrap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoUnwrap(::grpc::ServerContext* context, const ::y3d::EUnwrap* request, ::y3d::ResponseEvent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Shutdown() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddTestObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddTestObject() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_AddTestObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTestObject(::grpc::ServerContext* context, const ::y3d::TestOParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ApplyTestObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ApplyTestObject() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_ApplyTestObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplyTestObject(::grpc::ServerContext* context, const ::y3d::TestOParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RenameObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RenameObject() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::y3d::RenameParam, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_RenameObject<BaseClass>::StreamedRenameObject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RenameObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RenameObject(::grpc::ServerContext* context, const ::y3d::RenameParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRenameObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::RenameParam,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SaveProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SaveProject() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::y3d::ProjectInfo, ::y3d::ResponseEvent>(std::bind(&WithStreamedUnaryMethod_SaveProject<BaseClass>::StreamedSaveProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SaveProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SaveProject(::grpc::ServerContext* context, const ::y3d::ProjectInfo* request, ::y3d::ResponseEvent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSaveProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::ProjectInfo,::y3d::ResponseEvent>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NewProject() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::y3d::NewProjectParam, ::y3d::ResponseNProject>(std::bind(&WithStreamedUnaryMethod_NewProject<BaseClass>::StreamedNewProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NewProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewProject(::grpc::ServerContext* context, const ::y3d::NewProjectParam* request, ::y3d::ResponseNProject* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::NewProjectParam,::y3d::ResponseNProject>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LoadProject() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::y3d::ProjectInfo, ::y3d::ResponseNProject>(std::bind(&WithStreamedUnaryMethod_LoadProject<BaseClass>::StreamedLoadProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LoadProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadProject(::grpc::ServerContext* context, const ::y3d::ProjectInfo* request, ::y3d::ResponseNProject* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::ProjectInfo,::y3d::ResponseNProject>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteProject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteProject() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::y3d::ProjectInfo, ::y3d::ResponseNProject>(std::bind(&WithStreamedUnaryMethod_DeleteProject<BaseClass>::StreamedDeleteProject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteProject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteProject(::grpc::ServerContext* context, const ::y3d::ProjectInfo* request, ::y3d::ResponseNProject* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteProject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::ProjectInfo,::y3d::ResponseNProject>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Unwrap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Unwrap() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::y3d::EUnwrap, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_Unwrap<BaseClass>::StreamedUnwrap, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Unwrap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Unwrap(::grpc::ServerContext* context, const ::y3d::EUnwrap* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnwrap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::EUnwrap,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Packing : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Packing() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::StreamedUnaryHandler< ::y3d::EPacking, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_Packing<BaseClass>::StreamedPacking, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Packing() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Packing(::grpc::ServerContext* context, const ::y3d::EPacking* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPacking(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::EPacking,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LowPoly : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LowPoly() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::StreamedUnaryHandler< ::y3d::ELowpoly, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_LowPoly<BaseClass>::StreamedLowPoly, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LowPoly() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LowPoly(::grpc::ServerContext* context, const ::y3d::ELowpoly* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLowPoly(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::ELowpoly,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadSystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LoadSystem() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::StreamedUnaryHandler< ::y3d::EmptyParam, ::y3d::YSystem>(std::bind(&WithStreamedUnaryMethod_LoadSystem<BaseClass>::StreamedLoadSystem, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LoadSystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadSystem(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YSystem* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadSystem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::EmptyParam,::y3d::YSystem>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SaveSystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SaveSystem() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::StreamedUnaryHandler< ::y3d::YSystem, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_SaveSystem<BaseClass>::StreamedSaveSystem, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SaveSystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SaveSystem(::grpc::ServerContext* context, const ::y3d::YSystem* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSaveSystem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::YSystem,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BakeNormal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BakeNormal() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::StreamedUnaryHandler< ::y3d::ENormal, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_BakeNormal<BaseClass>::StreamedBakeNormal, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BakeNormal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BakeNormal(::grpc::ServerContext* context, const ::y3d::ENormal* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBakeNormal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::ENormal,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BakeNormalMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BakeNormalMax() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::StreamedUnaryHandler< ::y3d::ENormal, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_BakeNormalMax<BaseClass>::StreamedBakeNormalMax, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BakeNormalMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BakeNormalMax(::grpc::ServerContext* context, const ::y3d::ENormal* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBakeNormalMax(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::ENormal,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MakeNode4Edit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MakeNode4Edit() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::StreamedUnaryHandler< ::y3d::Make4TestParam, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_MakeNode4Edit<BaseClass>::StreamedMakeNode4Edit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MakeNode4Edit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MakeNode4Edit(::grpc::ServerContext* context, const ::y3d::Make4TestParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMakeNode4Edit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::Make4TestParam,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchOptimize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BatchOptimize() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::StreamedUnaryHandler< ::y3d::BatchOptimizeParam, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_BatchOptimize<BaseClass>::StreamedBatchOptimize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BatchOptimize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchOptimize(::grpc::ServerContext* context, const ::y3d::BatchOptimizeParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchOptimize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::BatchOptimizeParam,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TestTest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TestTest() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::StreamedUnaryHandler< ::y3d::TestParam, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_TestTest<BaseClass>::StreamedTestTest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TestTest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TestTest(::grpc::ServerContext* context, const ::y3d::TestParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTestTest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::TestParam,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetObjectFromMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetObjectFromMax() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::StreamedUnaryHandler< ::y3d::EmptyParam, ::y3d::YAreaList>(std::bind(&WithStreamedUnaryMethod_GetObjectFromMax<BaseClass>::StreamedGetObjectFromMax, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetObjectFromMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetObjectFromMax(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YAreaList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetObjectFromMax(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::EmptyParam,::y3d::YAreaList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloneObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CloneObject() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::StreamedUnaryHandler< ::y3d::EmptyParam, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_CloneObject<BaseClass>::StreamedCloneObject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CloneObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloneObject(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloneObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::EmptyParam,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DoEvent() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::StreamedUnaryHandler< ::y3d::YEvent, ::y3d::ResponseEvent>(std::bind(&WithStreamedUnaryMethod_DoEvent<BaseClass>::StreamedDoEvent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DoEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoEvent(::grpc::ServerContext* context, const ::y3d::YEvent* request, ::y3d::ResponseEvent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::YEvent,::y3d::ResponseEvent>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoUnwrap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DoUnwrap() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::StreamedUnaryHandler< ::y3d::EUnwrap, ::y3d::ResponseEvent>(std::bind(&WithStreamedUnaryMethod_DoUnwrap<BaseClass>::StreamedDoUnwrap, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DoUnwrap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoUnwrap(::grpc::ServerContext* context, const ::y3d::EUnwrap* request, ::y3d::ResponseEvent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoUnwrap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::EUnwrap,::y3d::ResponseEvent>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Shutdown() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::StreamedUnaryHandler< ::y3d::EmptyParam, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_Shutdown<BaseClass>::StreamedShutdown, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::EmptyParam,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddTestObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddTestObject() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::StreamedUnaryHandler< ::y3d::TestOParam, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_AddTestObject<BaseClass>::StreamedAddTestObject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddTestObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddTestObject(::grpc::ServerContext* context, const ::y3d::TestOParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddTestObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::TestOParam,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ApplyTestObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ApplyTestObject() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::StreamedUnaryHandler< ::y3d::TestOParam, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_ApplyTestObject<BaseClass>::StreamedApplyTestObject, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ApplyTestObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ApplyTestObject(::grpc::ServerContext* context, const ::y3d::TestOParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedApplyTestObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::TestOParam,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RenameObject<WithStreamedUnaryMethod_SaveProject<WithStreamedUnaryMethod_NewProject<WithStreamedUnaryMethod_LoadProject<WithStreamedUnaryMethod_DeleteProject<WithStreamedUnaryMethod_Unwrap<WithStreamedUnaryMethod_Packing<WithStreamedUnaryMethod_LowPoly<WithStreamedUnaryMethod_LoadSystem<WithStreamedUnaryMethod_SaveSystem<WithStreamedUnaryMethod_BakeNormal<WithStreamedUnaryMethod_BakeNormalMax<WithStreamedUnaryMethod_MakeNode4Edit<WithStreamedUnaryMethod_BatchOptimize<WithStreamedUnaryMethod_TestTest<WithStreamedUnaryMethod_GetObjectFromMax<WithStreamedUnaryMethod_CloneObject<WithStreamedUnaryMethod_DoEvent<WithStreamedUnaryMethod_DoUnwrap<WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_AddTestObject<WithStreamedUnaryMethod_ApplyTestObject<Service > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_DoStreamServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_DoStreamServer() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::SplitServerStreamingHandler< ::y3d::EmptyParam, ::y3d::YEvent>(std::bind(&WithSplitStreamingMethod_DoStreamServer<BaseClass>::StreamedDoStreamServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_DoStreamServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoStreamServer(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::grpc::ServerWriter< ::y3d::YEvent>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDoStreamServer(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::y3d::EmptyParam,::y3d::YEvent>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_DoStreamServer<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_RenameObject<WithStreamedUnaryMethod_SaveProject<WithStreamedUnaryMethod_NewProject<WithStreamedUnaryMethod_LoadProject<WithStreamedUnaryMethod_DeleteProject<WithStreamedUnaryMethod_Unwrap<WithStreamedUnaryMethod_Packing<WithStreamedUnaryMethod_LowPoly<WithStreamedUnaryMethod_LoadSystem<WithStreamedUnaryMethod_SaveSystem<WithStreamedUnaryMethod_BakeNormal<WithStreamedUnaryMethod_BakeNormalMax<WithStreamedUnaryMethod_MakeNode4Edit<WithStreamedUnaryMethod_BatchOptimize<WithStreamedUnaryMethod_TestTest<WithStreamedUnaryMethod_GetObjectFromMax<WithStreamedUnaryMethod_CloneObject<WithSplitStreamingMethod_DoStreamServer<WithStreamedUnaryMethod_DoEvent<WithStreamedUnaryMethod_DoUnwrap<WithStreamedUnaryMethod_Shutdown<WithStreamedUnaryMethod_AddTestObject<WithStreamedUnaryMethod_ApplyTestObject<Service > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

class YServiceTest final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status MTest1(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::EmptyParam* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::EmptyParam>> AsyncMTest1(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::EmptyParam>>(AsyncMTest1Raw(context, request, cq));
    }
    virtual ::grpc::Status MTest2(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::EmptyParam* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::EmptyParam>> AsyncMTest2(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::EmptyParam>>(AsyncMTest2Raw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::EmptyParam>* AsyncMTest1Raw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::EmptyParam>* AsyncMTest2Raw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status MTest1(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::EmptyParam* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::EmptyParam>> AsyncMTest1(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::EmptyParam>>(AsyncMTest1Raw(context, request, cq));
    }
    ::grpc::Status MTest2(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::EmptyParam* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::EmptyParam>> AsyncMTest2(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::EmptyParam>>(AsyncMTest2Raw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::y3d::EmptyParam>* AsyncMTest1Raw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::EmptyParam>* AsyncMTest2Raw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_MTest1_;
    const ::grpc::RpcMethod rpcmethod_MTest2_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status MTest1(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::EmptyParam* response);
    virtual ::grpc::Status MTest2(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::EmptyParam* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_MTest1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MTest1() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_MTest1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MTest1(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::EmptyParam* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMTest1(::grpc::ServerContext* context, ::y3d::EmptyParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::EmptyParam>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MTest2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MTest2() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_MTest2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MTest2(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::EmptyParam* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMTest2(::grpc::ServerContext* context, ::y3d::EmptyParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::EmptyParam>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_MTest1<WithAsyncMethod_MTest2<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_MTest1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MTest1() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_MTest1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MTest1(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::EmptyParam* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MTest2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MTest2() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_MTest2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MTest2(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::EmptyParam* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MTest1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MTest1() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::y3d::EmptyParam, ::y3d::EmptyParam>(std::bind(&WithStreamedUnaryMethod_MTest1<BaseClass>::StreamedMTest1, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MTest1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MTest1(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::EmptyParam* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMTest1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::EmptyParam,::y3d::EmptyParam>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MTest2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MTest2() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::y3d::EmptyParam, ::y3d::EmptyParam>(std::bind(&WithStreamedUnaryMethod_MTest2<BaseClass>::StreamedMTest2, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MTest2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MTest2(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::EmptyParam* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMTest2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::EmptyParam,::y3d::EmptyParam>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_MTest1<WithStreamedUnaryMethod_MTest2<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_MTest1<WithStreamedUnaryMethod_MTest2<Service > > StreamedService;
};

class YServiceMaster final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status AllWorkers(::grpc::ClientContext* context, const ::y3d::AllWorkerParam& request, ::y3d::YWorkerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YWorkerResponse>> AsyncAllWorkers(::grpc::ClientContext* context, const ::y3d::AllWorkerParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YWorkerResponse>>(AsyncAllWorkersRaw(context, request, cq));
    }
    virtual ::grpc::Status StopAllWorkers(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncStopAllWorkers(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncStopAllWorkersRaw(context, request, cq));
    }
    virtual ::grpc::Status AddWorker(::grpc::ClientContext* context, const ::y3d::YWorkerRequest& request, ::y3d::YWorkerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YWorkerResponse>> AsyncAddWorker(::grpc::ClientContext* context, const ::y3d::YWorkerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YWorkerResponse>>(AsyncAddWorkerRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseWorkerApp(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncCloseWorkerApp(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncCloseWorkerAppRaw(context, request, cq));
    }
    virtual ::grpc::Status StartWorker(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::y3d::YWorkerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YWorkerResponse>> AsyncStartWorker(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YWorkerResponse>>(AsyncStartWorkerRaw(context, request, cq));
    }
    virtual ::grpc::Status StopWorker(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::y3d::YWorkerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YWorkerResponse>> AsyncStopWorker(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YWorkerResponse>>(AsyncStopWorkerRaw(context, request, cq));
    }
    virtual ::grpc::Status AppExitCallback(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncAppExitCallback(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncAppExitCallbackRaw(context, request, cq));
    }
    virtual ::grpc::Status ShowJobInMachine(::grpc::ClientContext* context, const ::y3d::YWorker& request, ::y3d::YJobList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YJobList>> AsyncShowJobInMachine(::grpc::ClientContext* context, const ::y3d::YWorker& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YJobList>>(AsyncShowJobInMachineRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckHealth(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncCheckHealth(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncCheckHealthRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateWorkerStatus(::grpc::ClientContext* context, const ::y3d::YWorker& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncUpdateWorkerStatus(::grpc::ClientContext* context, const ::y3d::YWorker& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncUpdateWorkerStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status LoadSystem(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::YSystem* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YSystem>> AsyncLoadSystem(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YSystem>>(AsyncLoadSystemRaw(context, request, cq));
    }
    virtual ::grpc::Status SaveSystem(::grpc::ClientContext* context, const ::y3d::YSystem& request, ::y3d::ResultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>> AsyncSaveSystem(::grpc::ClientContext* context, const ::y3d::YSystem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>>(AsyncSaveSystemRaw(context, request, cq));
    }
    virtual ::grpc::Status GiveMeAWorker(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::YWorker* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YWorker>> AsyncGiveMeAWorker(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YWorker>>(AsyncGiveMeAWorkerRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YWorkerResponse>* AsyncAllWorkersRaw(::grpc::ClientContext* context, const ::y3d::AllWorkerParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncStopAllWorkersRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YWorkerResponse>* AsyncAddWorkerRaw(::grpc::ClientContext* context, const ::y3d::YWorkerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncCloseWorkerAppRaw(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YWorkerResponse>* AsyncStartWorkerRaw(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YWorkerResponse>* AsyncStopWorkerRaw(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncAppExitCallbackRaw(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YJobList>* AsyncShowJobInMachineRaw(::grpc::ClientContext* context, const ::y3d::YWorker& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncUpdateWorkerStatusRaw(::grpc::ClientContext* context, const ::y3d::YWorker& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YSystem>* AsyncLoadSystemRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResultReply>* AsyncSaveSystemRaw(::grpc::ClientContext* context, const ::y3d::YSystem& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::YWorker>* AsyncGiveMeAWorkerRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AllWorkers(::grpc::ClientContext* context, const ::y3d::AllWorkerParam& request, ::y3d::YWorkerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YWorkerResponse>> AsyncAllWorkers(::grpc::ClientContext* context, const ::y3d::AllWorkerParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YWorkerResponse>>(AsyncAllWorkersRaw(context, request, cq));
    }
    ::grpc::Status StopAllWorkers(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncStopAllWorkers(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncStopAllWorkersRaw(context, request, cq));
    }
    ::grpc::Status AddWorker(::grpc::ClientContext* context, const ::y3d::YWorkerRequest& request, ::y3d::YWorkerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YWorkerResponse>> AsyncAddWorker(::grpc::ClientContext* context, const ::y3d::YWorkerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YWorkerResponse>>(AsyncAddWorkerRaw(context, request, cq));
    }
    ::grpc::Status CloseWorkerApp(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncCloseWorkerApp(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncCloseWorkerAppRaw(context, request, cq));
    }
    ::grpc::Status StartWorker(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::y3d::YWorkerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YWorkerResponse>> AsyncStartWorker(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YWorkerResponse>>(AsyncStartWorkerRaw(context, request, cq));
    }
    ::grpc::Status StopWorker(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::y3d::YWorkerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YWorkerResponse>> AsyncStopWorker(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YWorkerResponse>>(AsyncStopWorkerRaw(context, request, cq));
    }
    ::grpc::Status AppExitCallback(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncAppExitCallback(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncAppExitCallbackRaw(context, request, cq));
    }
    ::grpc::Status ShowJobInMachine(::grpc::ClientContext* context, const ::y3d::YWorker& request, ::y3d::YJobList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YJobList>> AsyncShowJobInMachine(::grpc::ClientContext* context, const ::y3d::YWorker& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YJobList>>(AsyncShowJobInMachineRaw(context, request, cq));
    }
    ::grpc::Status CheckHealth(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncCheckHealth(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncCheckHealthRaw(context, request, cq));
    }
    ::grpc::Status UpdateWorkerStatus(::grpc::ClientContext* context, const ::y3d::YWorker& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncUpdateWorkerStatus(::grpc::ClientContext* context, const ::y3d::YWorker& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncUpdateWorkerStatusRaw(context, request, cq));
    }
    ::grpc::Status LoadSystem(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::YSystem* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YSystem>> AsyncLoadSystem(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YSystem>>(AsyncLoadSystemRaw(context, request, cq));
    }
    ::grpc::Status SaveSystem(::grpc::ClientContext* context, const ::y3d::YSystem& request, ::y3d::ResultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>> AsyncSaveSystem(::grpc::ClientContext* context, const ::y3d::YSystem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>>(AsyncSaveSystemRaw(context, request, cq));
    }
    ::grpc::Status GiveMeAWorker(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::YWorker* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YWorker>> AsyncGiveMeAWorker(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::YWorker>>(AsyncGiveMeAWorkerRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::y3d::YWorkerResponse>* AsyncAllWorkersRaw(::grpc::ClientContext* context, const ::y3d::AllWorkerParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncStopAllWorkersRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::YWorkerResponse>* AsyncAddWorkerRaw(::grpc::ClientContext* context, const ::y3d::YWorkerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncCloseWorkerAppRaw(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::YWorkerResponse>* AsyncStartWorkerRaw(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::YWorkerResponse>* AsyncStopWorkerRaw(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncAppExitCallbackRaw(::grpc::ClientContext* context, const ::y3d::WorkerParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::YJobList>* AsyncShowJobInMachineRaw(::grpc::ClientContext* context, const ::y3d::YWorker& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncCheckHealthRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncUpdateWorkerStatusRaw(::grpc::ClientContext* context, const ::y3d::YWorker& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::YSystem>* AsyncLoadSystemRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* AsyncSaveSystemRaw(::grpc::ClientContext* context, const ::y3d::YSystem& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::YWorker>* AsyncGiveMeAWorkerRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_AllWorkers_;
    const ::grpc::RpcMethod rpcmethod_StopAllWorkers_;
    const ::grpc::RpcMethod rpcmethod_AddWorker_;
    const ::grpc::RpcMethod rpcmethod_CloseWorkerApp_;
    const ::grpc::RpcMethod rpcmethod_StartWorker_;
    const ::grpc::RpcMethod rpcmethod_StopWorker_;
    const ::grpc::RpcMethod rpcmethod_AppExitCallback_;
    const ::grpc::RpcMethod rpcmethod_ShowJobInMachine_;
    const ::grpc::RpcMethod rpcmethod_CheckHealth_;
    const ::grpc::RpcMethod rpcmethod_UpdateWorkerStatus_;
    const ::grpc::RpcMethod rpcmethod_LoadSystem_;
    const ::grpc::RpcMethod rpcmethod_SaveSystem_;
    const ::grpc::RpcMethod rpcmethod_GiveMeAWorker_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status AllWorkers(::grpc::ServerContext* context, const ::y3d::AllWorkerParam* request, ::y3d::YWorkerResponse* response);
    virtual ::grpc::Status StopAllWorkers(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status AddWorker(::grpc::ServerContext* context, const ::y3d::YWorkerRequest* request, ::y3d::YWorkerResponse* response);
    virtual ::grpc::Status CloseWorkerApp(::grpc::ServerContext* context, const ::y3d::WorkerParam* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status StartWorker(::grpc::ServerContext* context, const ::y3d::WorkerParam* request, ::y3d::YWorkerResponse* response);
    virtual ::grpc::Status StopWorker(::grpc::ServerContext* context, const ::y3d::WorkerParam* request, ::y3d::YWorkerResponse* response);
    virtual ::grpc::Status AppExitCallback(::grpc::ServerContext* context, const ::y3d::WorkerParam* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status ShowJobInMachine(::grpc::ServerContext* context, const ::y3d::YWorker* request, ::y3d::YJobList* response);
    virtual ::grpc::Status CheckHealth(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status UpdateWorkerStatus(::grpc::ServerContext* context, const ::y3d::YWorker* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status LoadSystem(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YSystem* response);
    virtual ::grpc::Status SaveSystem(::grpc::ServerContext* context, const ::y3d::YSystem* request, ::y3d::ResultReply* response);
    virtual ::grpc::Status GiveMeAWorker(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YWorker* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AllWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AllWorkers() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AllWorkers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllWorkers(::grpc::ServerContext* context, const ::y3d::AllWorkerParam* request, ::y3d::YWorkerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllWorkers(::grpc::ServerContext* context, ::y3d::AllWorkerParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::YWorkerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopAllWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StopAllWorkers() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StopAllWorkers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopAllWorkers(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopAllWorkers(::grpc::ServerContext* context, ::y3d::EmptyParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddWorker() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AddWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddWorker(::grpc::ServerContext* context, const ::y3d::YWorkerRequest* request, ::y3d::YWorkerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddWorker(::grpc::ServerContext* context, ::y3d::YWorkerRequest* request, ::grpc::ServerAsyncResponseWriter< ::y3d::YWorkerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseWorkerApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CloseWorkerApp() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CloseWorkerApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseWorkerApp(::grpc::ServerContext* context, const ::y3d::WorkerParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseWorkerApp(::grpc::ServerContext* context, ::y3d::WorkerParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StartWorker() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StartWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartWorker(::grpc::ServerContext* context, const ::y3d::WorkerParam* request, ::y3d::YWorkerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartWorker(::grpc::ServerContext* context, ::y3d::WorkerParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::YWorkerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StopWorker() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_StopWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopWorker(::grpc::ServerContext* context, const ::y3d::WorkerParam* request, ::y3d::YWorkerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopWorker(::grpc::ServerContext* context, ::y3d::WorkerParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::YWorkerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AppExitCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AppExitCallback() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_AppExitCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppExitCallback(::grpc::ServerContext* context, const ::y3d::WorkerParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppExitCallback(::grpc::ServerContext* context, ::y3d::WorkerParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShowJobInMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ShowJobInMachine() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ShowJobInMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowJobInMachine(::grpc::ServerContext* context, const ::y3d::YWorker* request, ::y3d::YJobList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShowJobInMachine(::grpc::ServerContext* context, ::y3d::YWorker* request, ::grpc::ServerAsyncResponseWriter< ::y3d::YJobList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CheckHealth() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckHealth(::grpc::ServerContext* context, ::y3d::EmptyParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateWorkerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateWorkerStatus() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_UpdateWorkerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWorkerStatus(::grpc::ServerContext* context, const ::y3d::YWorker* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateWorkerStatus(::grpc::ServerContext* context, ::y3d::YWorker* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadSystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LoadSystem() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_LoadSystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSystem(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YSystem* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadSystem(::grpc::ServerContext* context, ::y3d::EmptyParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::YSystem>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SaveSystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SaveSystem() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SaveSystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveSystem(::grpc::ServerContext* context, const ::y3d::YSystem* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveSystem(::grpc::ServerContext* context, ::y3d::YSystem* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GiveMeAWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GiveMeAWorker() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GiveMeAWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GiveMeAWorker(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YWorker* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGiveMeAWorker(::grpc::ServerContext* context, ::y3d::EmptyParam* request, ::grpc::ServerAsyncResponseWriter< ::y3d::YWorker>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AllWorkers<WithAsyncMethod_StopAllWorkers<WithAsyncMethod_AddWorker<WithAsyncMethod_CloseWorkerApp<WithAsyncMethod_StartWorker<WithAsyncMethod_StopWorker<WithAsyncMethod_AppExitCallback<WithAsyncMethod_ShowJobInMachine<WithAsyncMethod_CheckHealth<WithAsyncMethod_UpdateWorkerStatus<WithAsyncMethod_LoadSystem<WithAsyncMethod_SaveSystem<WithAsyncMethod_GiveMeAWorker<Service > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_AllWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AllWorkers() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AllWorkers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllWorkers(::grpc::ServerContext* context, const ::y3d::AllWorkerParam* request, ::y3d::YWorkerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopAllWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StopAllWorkers() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StopAllWorkers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopAllWorkers(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddWorker() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AddWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddWorker(::grpc::ServerContext* context, const ::y3d::YWorkerRequest* request, ::y3d::YWorkerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseWorkerApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CloseWorkerApp() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CloseWorkerApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseWorkerApp(::grpc::ServerContext* context, const ::y3d::WorkerParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StartWorker() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StartWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartWorker(::grpc::ServerContext* context, const ::y3d::WorkerParam* request, ::y3d::YWorkerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StopWorker() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_StopWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopWorker(::grpc::ServerContext* context, const ::y3d::WorkerParam* request, ::y3d::YWorkerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AppExitCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AppExitCallback() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_AppExitCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AppExitCallback(::grpc::ServerContext* context, const ::y3d::WorkerParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShowJobInMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ShowJobInMachine() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ShowJobInMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShowJobInMachine(::grpc::ServerContext* context, const ::y3d::YWorker* request, ::y3d::YJobList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CheckHealth() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateWorkerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateWorkerStatus() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_UpdateWorkerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateWorkerStatus(::grpc::ServerContext* context, const ::y3d::YWorker* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadSystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LoadSystem() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_LoadSystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSystem(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YSystem* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SaveSystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SaveSystem() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SaveSystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveSystem(::grpc::ServerContext* context, const ::y3d::YSystem* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GiveMeAWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GiveMeAWorker() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GiveMeAWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GiveMeAWorker(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YWorker* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AllWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AllWorkers() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::y3d::AllWorkerParam, ::y3d::YWorkerResponse>(std::bind(&WithStreamedUnaryMethod_AllWorkers<BaseClass>::StreamedAllWorkers, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AllWorkers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AllWorkers(::grpc::ServerContext* context, const ::y3d::AllWorkerParam* request, ::y3d::YWorkerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAllWorkers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::AllWorkerParam,::y3d::YWorkerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopAllWorkers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StopAllWorkers() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::y3d::EmptyParam, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_StopAllWorkers<BaseClass>::StreamedStopAllWorkers, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopAllWorkers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopAllWorkers(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopAllWorkers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::EmptyParam,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddWorker() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::y3d::YWorkerRequest, ::y3d::YWorkerResponse>(std::bind(&WithStreamedUnaryMethod_AddWorker<BaseClass>::StreamedAddWorker, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddWorker(::grpc::ServerContext* context, const ::y3d::YWorkerRequest* request, ::y3d::YWorkerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddWorker(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::YWorkerRequest,::y3d::YWorkerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseWorkerApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CloseWorkerApp() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::y3d::WorkerParam, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_CloseWorkerApp<BaseClass>::StreamedCloseWorkerApp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CloseWorkerApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseWorkerApp(::grpc::ServerContext* context, const ::y3d::WorkerParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseWorkerApp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::WorkerParam,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StartWorker() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::y3d::WorkerParam, ::y3d::YWorkerResponse>(std::bind(&WithStreamedUnaryMethod_StartWorker<BaseClass>::StreamedStartWorker, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartWorker(::grpc::ServerContext* context, const ::y3d::WorkerParam* request, ::y3d::YWorkerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartWorker(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::WorkerParam,::y3d::YWorkerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StopWorker() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::y3d::WorkerParam, ::y3d::YWorkerResponse>(std::bind(&WithStreamedUnaryMethod_StopWorker<BaseClass>::StreamedStopWorker, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopWorker(::grpc::ServerContext* context, const ::y3d::WorkerParam* request, ::y3d::YWorkerResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopWorker(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::WorkerParam,::y3d::YWorkerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AppExitCallback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AppExitCallback() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::StreamedUnaryHandler< ::y3d::WorkerParam, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_AppExitCallback<BaseClass>::StreamedAppExitCallback, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AppExitCallback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AppExitCallback(::grpc::ServerContext* context, const ::y3d::WorkerParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAppExitCallback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::WorkerParam,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShowJobInMachine : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ShowJobInMachine() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::StreamedUnaryHandler< ::y3d::YWorker, ::y3d::YJobList>(std::bind(&WithStreamedUnaryMethod_ShowJobInMachine<BaseClass>::StreamedShowJobInMachine, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ShowJobInMachine() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShowJobInMachine(::grpc::ServerContext* context, const ::y3d::YWorker* request, ::y3d::YJobList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShowJobInMachine(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::YWorker,::y3d::YJobList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckHealth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CheckHealth() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::StreamedUnaryHandler< ::y3d::EmptyParam, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_CheckHealth<BaseClass>::StreamedCheckHealth, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CheckHealth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckHealth(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckHealth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::EmptyParam,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateWorkerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateWorkerStatus() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::StreamedUnaryHandler< ::y3d::YWorker, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_UpdateWorkerStatus<BaseClass>::StreamedUpdateWorkerStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateWorkerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateWorkerStatus(::grpc::ServerContext* context, const ::y3d::YWorker* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateWorkerStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::YWorker,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadSystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LoadSystem() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::StreamedUnaryHandler< ::y3d::EmptyParam, ::y3d::YSystem>(std::bind(&WithStreamedUnaryMethod_LoadSystem<BaseClass>::StreamedLoadSystem, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LoadSystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadSystem(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YSystem* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadSystem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::EmptyParam,::y3d::YSystem>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SaveSystem : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SaveSystem() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::StreamedUnaryHandler< ::y3d::YSystem, ::y3d::ResultReply>(std::bind(&WithStreamedUnaryMethod_SaveSystem<BaseClass>::StreamedSaveSystem, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SaveSystem() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SaveSystem(::grpc::ServerContext* context, const ::y3d::YSystem* request, ::y3d::ResultReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSaveSystem(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::YSystem,::y3d::ResultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GiveMeAWorker : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GiveMeAWorker() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::StreamedUnaryHandler< ::y3d::EmptyParam, ::y3d::YWorker>(std::bind(&WithStreamedUnaryMethod_GiveMeAWorker<BaseClass>::StreamedGiveMeAWorker, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GiveMeAWorker() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GiveMeAWorker(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YWorker* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGiveMeAWorker(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::EmptyParam,::y3d::YWorker>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AllWorkers<WithStreamedUnaryMethod_StopAllWorkers<WithStreamedUnaryMethod_AddWorker<WithStreamedUnaryMethod_CloseWorkerApp<WithStreamedUnaryMethod_StartWorker<WithStreamedUnaryMethod_StopWorker<WithStreamedUnaryMethod_AppExitCallback<WithStreamedUnaryMethod_ShowJobInMachine<WithStreamedUnaryMethod_CheckHealth<WithStreamedUnaryMethod_UpdateWorkerStatus<WithStreamedUnaryMethod_LoadSystem<WithStreamedUnaryMethod_SaveSystem<WithStreamedUnaryMethod_GiveMeAWorker<Service > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AllWorkers<WithStreamedUnaryMethod_StopAllWorkers<WithStreamedUnaryMethod_AddWorker<WithStreamedUnaryMethod_CloseWorkerApp<WithStreamedUnaryMethod_StartWorker<WithStreamedUnaryMethod_StopWorker<WithStreamedUnaryMethod_AppExitCallback<WithStreamedUnaryMethod_ShowJobInMachine<WithStreamedUnaryMethod_CheckHealth<WithStreamedUnaryMethod_UpdateWorkerStatus<WithStreamedUnaryMethod_LoadSystem<WithStreamedUnaryMethod_SaveSystem<WithStreamedUnaryMethod_GiveMeAWorker<Service > > > > > > > > > > > > > StreamedService;
};

class YServiceMainWorker final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status DoEvent(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::y3d::ResponseEvent* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseEvent>> AsyncDoEvent(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseEvent>>(AsyncDoEventRaw(context, request, cq));
    }
    virtual ::grpc::Status CloseWorkerApp(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::y3d::ResponseEvent* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseEvent>> AsyncCloseWorkerApp(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseEvent>>(AsyncCloseWorkerAppRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseEvent>* AsyncDoEventRaw(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::y3d::ResponseEvent>* AsyncCloseWorkerAppRaw(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status DoEvent(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::y3d::ResponseEvent* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>> AsyncDoEvent(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>>(AsyncDoEventRaw(context, request, cq));
    }
    ::grpc::Status CloseWorkerApp(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::y3d::ResponseEvent* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>> AsyncCloseWorkerApp(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>>(AsyncCloseWorkerAppRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>* AsyncDoEventRaw(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>* AsyncCloseWorkerAppRaw(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_DoEvent_;
    const ::grpc::RpcMethod rpcmethod_CloseWorkerApp_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status DoEvent(::grpc::ServerContext* context, const ::y3d::YEvent* request, ::y3d::ResponseEvent* response);
    virtual ::grpc::Status CloseWorkerApp(::grpc::ServerContext* context, const ::y3d::YEvent* request, ::y3d::ResponseEvent* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DoEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DoEvent() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DoEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoEvent(::grpc::ServerContext* context, const ::y3d::YEvent* request, ::y3d::ResponseEvent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoEvent(::grpc::ServerContext* context, ::y3d::YEvent* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResponseEvent>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CloseWorkerApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CloseWorkerApp() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CloseWorkerApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseWorkerApp(::grpc::ServerContext* context, const ::y3d::YEvent* request, ::y3d::ResponseEvent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCloseWorkerApp(::grpc::ServerContext* context, ::y3d::YEvent* request, ::grpc::ServerAsyncResponseWriter< ::y3d::ResponseEvent>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DoEvent<WithAsyncMethod_CloseWorkerApp<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_DoEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DoEvent() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DoEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoEvent(::grpc::ServerContext* context, const ::y3d::YEvent* request, ::y3d::ResponseEvent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CloseWorkerApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CloseWorkerApp() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CloseWorkerApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CloseWorkerApp(::grpc::ServerContext* context, const ::y3d::YEvent* request, ::y3d::ResponseEvent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DoEvent() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::y3d::YEvent, ::y3d::ResponseEvent>(std::bind(&WithStreamedUnaryMethod_DoEvent<BaseClass>::StreamedDoEvent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DoEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoEvent(::grpc::ServerContext* context, const ::y3d::YEvent* request, ::y3d::ResponseEvent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::YEvent,::y3d::ResponseEvent>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CloseWorkerApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CloseWorkerApp() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::y3d::YEvent, ::y3d::ResponseEvent>(std::bind(&WithStreamedUnaryMethod_CloseWorkerApp<BaseClass>::StreamedCloseWorkerApp, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CloseWorkerApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CloseWorkerApp(::grpc::ServerContext* context, const ::y3d::YEvent* request, ::y3d::ResponseEvent* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCloseWorkerApp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::y3d::YEvent,::y3d::ResponseEvent>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DoEvent<WithStreamedUnaryMethod_CloseWorkerApp<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DoEvent<WithStreamedUnaryMethod_CloseWorkerApp<Service > > StreamedService;
};
// server for 3dsmax send actions request, run in mainworker app

}  // namespace y3d


#endif  // GRPC_yservice_2eproto__INCLUDED
