// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: y3d.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Y3D.Entities {

  /// <summary>Holder for reflection information generated from y3d.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Y3DReflection {

    #region Descriptor
    /// <summary>File descriptor for y3d.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Y3DReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgl5M2QucHJvdG8SA3kzZBoZZ29vZ2xlL3Byb3RvYnVmL2FueS5wcm90byIk",
            "CgZZQ29sb3ISDAoEbmFtZRgBIAEoCRIMCgRhcmdiGAIgASgFIioKB1lQb2lu",
            "dDMSCQoBeBgBIAEoAhIJCgF5GAIgASgCEgkKAXoYAyABKAIiPwoFWUJveDMS",
            "GgoEcG1pbhgBIAEoCzIMLnkzZC5ZUG9pbnQzEhoKBHBtYXgYAiABKAsyDC55",
            "M2QuWVBvaW50MyKiAQoJWVJlc291cmNlEgsKA3JpZBgBIAEoCRIqCgVydHlw",
            "ZRgCIAEoDjIbLnkzZC5ZUmVzb3VyY2UuUmVzb3VyY2VUeXBlEgwKBGxpbmsY",
            "AyABKAkiTgoMUmVzb3VyY2VUeXBlEgoKBkJJTkFSWRAAEgkKBUlNQUdFEAES",
            "DgoKRkxBVEJVRkZFUhACEgwKCFBST1RPQlVGEAMSCQoFQ0FQTlAQBCKoAQoG",
            "WUxpZ2h0Eg8KB2RpZmZ1c2UYAyADKAISEAoIc3BlY3VsYXIYBCADKAISEQoJ",
            "aW50ZW5zaXR5GAUgASgCEg0KBXJhbmdlGAYgASgCEg0KBWFuZ2xlGAcgASgC",
            "EhAKCGV4cG9uZW50GAggASgCEhkKEWV4Y2x1ZGVkTWVzaGVzSWRzGAkgAygJ",
            "Eh0KFWluY2x1ZGVkT25seU1lc2hlc0lkcxgKIAMoCSI4CgdZQ2FtZXJhEhAK",
            "CHJvdGF0aW9uGAMgAygCEg4KBnRhcmdldBgEIAMoAhILCgNmb3YYBSABKAIi",
            "wgMKBVlNZXNoEhEKCW51bV9mYWNlcxgBIAEoBRIYCgRiYm94GAIgASgLMgou",
            "eTNkLllCb3gzEg4KBnJlc19pZBgDIAEoCRIMCgR4cmVmGAQgAygFEiYKB3hz",
            "dGF0dXMYBSABKA4yFS55M2QuWU1lc2guWHJlZlN0YXR1cxIiCgVtdHlwZRgG",
            "IAEoDjITLnkzZC5ZTWVzaC5NZXNoVHlwZSKxAQoITWVzaFR5cGUSEQoNRWRp",
            "dGFibGVfTWVzaBAAEhEKDUVkaXRhYmxlX1BvbHkQARIHCgNCb3gQAhIICgRD",
            "b25lEAMSCgoGU3BoZXJlEAQSDQoJR2VvU3BoZXJlEAUSDAoIQ3lsaW5kZXIQ",
            "BhIICgRUdWJlEAcSCQoFVG9ydXMQCBILCgdQeXJhbWlkEAkSCgoGVGVhcG90",
            "EAoSCQoFUGxhbmUQCxIKCgZUYXJnZXQQDCJuCgpYcmVmU3RhdHVzEgwKCE9S",
            "SUdJTkFMEAASDgoKWFJFRl9ISUdIVBABEgwKCFhSRUZfTE9XEAISFAoQWFJF",
            "Rl9MT1dfRElTUExBWRADEgcKA0JPWBAEEgoKBk1FUkdFRBAFEgkKBUZJTkFM",
            "EAYivwIKB1lPYmplY3QSDAoEbmFtZRgBIAEoCRIZCgNwb3MYAyABKAsyDC55",
            "M2QuWVBvaW50MxImCgVleHRyYRgFIAMoCzIXLnkzZC5ZT2JqZWN0LkV4dHJh",
            "RW50cnkSHgoFb3R5cGUYBiABKA4yDy55M2QuT2JqZWN0VHlwZRIMCgR0YWdz",
            "GAcgAygJEg8KB2NhdGVfaWQYCCABKAUSHAoFbGlnaHQYCiABKAsyCy55M2Qu",
            "WUxpZ2h0SAASHgoGY2FtZXJhGAsgASgLMgwueTNkLllDYW1lcmFIABIaCgRt",
            "ZXNoGAwgASgLMgoueTNkLllNZXNoSAAaQgoKRXh0cmFFbnRyeRILCgNrZXkY",
            "ASABKAkSIwoFdmFsdWUYAiABKAsyFC5nb29nbGUucHJvdG9idWYuQW55OgI4",
            "AUIGCgRkYXRhInEKBllHcm91cBIMCgRuYW1lGAEgASgJEhoKBG9ianMYAiAD",
            "KAsyDC55M2QuWU9iamVjdBIdCghjaGlsZHJlbhgDIAMoCzILLnkzZC5ZR3Jv",
            "dXASHgoHZ3ZfdHlwZRgEIAEoDjINLnkzZC5HVmVyVHlwZSJOCgVZQXJlYRIM",
            "CgRuYW1lGAEgASgJEhsKBmdyb3VwcxgCIAMoCzILLnkzZC5ZR3JvdXASGgoE",
            "b2JqcxgDIAMoCzIMLnkzZC5ZT2JqZWN0IkgKCVlHcm91cFZlchINCgV2bmFt",
            "ZRgBIAEoCRIeCglncm91cERhdGEYAiABKAsyCy55M2QuWUdyb3VwEgwKBHN0",
            "ZXAYAyABKAUigQIKCkN1c3RvbUF0dHISDAoEbmFtZRgBIAEoCRIjCgV2YWx1",
            "ZRgCIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnkSIwoEdHlwZRgDIAEoDjIV",
            "LnkzZC5DdXN0b21BdHRyLkFUeXBlIpoBCgVBVHlwZRIKCgZTVFJJTkcQABIH",
            "CgNJTlQQARIJCgVGTE9BVBACEggKBEJPT0wQAxIKCgZQT0lOVDMQBBIQCgxB",
            "UlJBWV9TVFJJTkcQBRINCglBUlJBWV9JTlQQBhIPCgtBUlJBWV9GTE9BVBAH",
            "EggKBFRFWFQQCBIJCgVDT0xPUhAJEgkKBU9ORU9GEAoSCQoFT1RIRVIQCyI4",
            "CgdBdHRyU2V0Eg0KBXNuYW1lGAEgASgJEh4KBWF0dHJzGAIgAygLMg8ueTNk",
            "LkN1c3RvbUF0dHIiXQoKRmlsdGVyVmlldxIeCgVvdHlwZRgBIAEoDjIPLnkz",
            "ZC5PYmplY3RUeXBlEhIKCmZhY2VfcmFuZ2UYAiABKAUSDgoGc2VhcmNoGAMg",
            "ASgJEgsKA2FpZBgEIAEoBSKFAgoLUHJvamVjdEluZm8SDQoFcG5hbWUYASAB",
            "KAkSDAoEcGF0aBgCIAEoCRISCgpmYWNlX3JhbmdlGAMgAygFEiAKC2NvdW50",
            "X2NvbG9yGAQgAygLMgsueTNkLllDb2xvchIeCgVmdmlldxgFIAMoCzIPLnkz",
            "ZC5GaWx0ZXJWaWV3EhkKBWFyZWFzGAYgAygLMgoueTNkLllBcmVhEioKBWd2",
            "ZXJzGAcgAygLMhsueTNkLlByb2plY3RJbmZvLkd2ZXJzRW50cnkaPAoKR3Zl",
            "cnNFbnRyeRILCgNrZXkYASABKAkSHQoFdmFsdWUYAiABKAsyDi55M2QuWUdy",
            "b3VwVmVyOgI4ASIqCghQU2V0dGluZxIeCgVleHRyYRgCIAMoCzIPLnkzZC5D",
            "dXN0b21BdHRyIjEKB1lTeXN0ZW0SJgoPZGVmYXVsdFBTZXR0aW5nGAEgASgL",
            "Mg0ueTNkLlBTZXR0aW5nKkcKCk9iamVjdFR5cGUSDAoIR0VPTUVUUlkQABIJ",
            "CgVMSUdIVBABEgoKBkNBTUVSQRACEgkKBVNIQVBFEAMSCQoFT1RIRVIQBCo/",
            "CghHVmVyVHlwZRIKCgZOT19WRVIQABIMCghPUklHSU5BTBABEgsKB0lOX0JB",
            "S0UQAhIMCghTVEFOREFSRBADQg+qAgxZM0QuRW50aXRpZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Y3D.Entities.ObjectType), typeof(global::Y3D.Entities.GVerType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.Entities.YColor), global::Y3D.Entities.YColor.Parser, new[]{ "Name", "Argb" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.Entities.YPoint3), global::Y3D.Entities.YPoint3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.Entities.YBox3), global::Y3D.Entities.YBox3.Parser, new[]{ "Pmin", "Pmax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.Entities.YResource), global::Y3D.Entities.YResource.Parser, new[]{ "Rid", "Rtype", "Link" }, null, new[]{ typeof(global::Y3D.Entities.YResource.Types.ResourceType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.Entities.YLight), global::Y3D.Entities.YLight.Parser, new[]{ "Diffuse", "Specular", "Intensity", "Range", "Angle", "Exponent", "ExcludedMeshesIds", "IncludedOnlyMeshesIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.Entities.YCamera), global::Y3D.Entities.YCamera.Parser, new[]{ "Rotation", "Target", "Fov" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.Entities.YMesh), global::Y3D.Entities.YMesh.Parser, new[]{ "NumFaces", "Bbox", "ResId", "Xref", "Xstatus", "Mtype" }, null, new[]{ typeof(global::Y3D.Entities.YMesh.Types.MeshType), typeof(global::Y3D.Entities.YMesh.Types.XrefStatus) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.Entities.YObject), global::Y3D.Entities.YObject.Parser, new[]{ "Name", "Pos", "Extra", "Otype", "Tags", "CateId", "Light", "Camera", "Mesh" }, new[]{ "Data" }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.Entities.YGroup), global::Y3D.Entities.YGroup.Parser, new[]{ "Name", "Objs", "Children", "GvType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.Entities.YArea), global::Y3D.Entities.YArea.Parser, new[]{ "Name", "Groups", "Objs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.Entities.YGroupVer), global::Y3D.Entities.YGroupVer.Parser, new[]{ "Vname", "GroupData", "Step" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.Entities.CustomAttr), global::Y3D.Entities.CustomAttr.Parser, new[]{ "Name", "Value", "Type" }, null, new[]{ typeof(global::Y3D.Entities.CustomAttr.Types.AType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.Entities.AttrSet), global::Y3D.Entities.AttrSet.Parser, new[]{ "Sname", "Attrs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.Entities.FilterView), global::Y3D.Entities.FilterView.Parser, new[]{ "Otype", "FaceRange", "Search", "Aid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.Entities.ProjectInfo), global::Y3D.Entities.ProjectInfo.Parser, new[]{ "Pname", "Path", "FaceRange", "CountColor", "Fview", "Areas", "Gvers" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.Entities.PSetting), global::Y3D.Entities.PSetting.Parser, new[]{ "Extra" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.Entities.YSystem), global::Y3D.Entities.YSystem.Parser, new[]{ "DefaultPSetting" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ObjectType {
    [pbr::OriginalName("GEOMETRY")] Geometry = 0,
    [pbr::OriginalName("LIGHT")] Light = 1,
    [pbr::OriginalName("CAMERA")] Camera = 2,
    [pbr::OriginalName("SHAPE")] Shape = 3,
    [pbr::OriginalName("OTHER")] Other = 4,
  }

  public enum GVerType {
    [pbr::OriginalName("NO_VER")] NoVer = 0,
    [pbr::OriginalName("ORIGINAL")] Original = 1,
    [pbr::OriginalName("IN_BAKE")] InBake = 2,
    [pbr::OriginalName("STANDARD")] Standard = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  ///  [START messages]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class YColor : pb::IMessage<YColor> {
    private static readonly pb::MessageParser<YColor> _parser = new pb::MessageParser<YColor>(() => new YColor());
    public static pb::MessageParser<YColor> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.Entities.Y3DReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public YColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    public YColor(YColor other) : this() {
      name_ = other.name_;
      argb_ = other.argb_;
    }

    public YColor Clone() {
      return new YColor(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "argb" field.</summary>
    public const int ArgbFieldNumber = 2;
    private int argb_;
    public int Argb {
      get { return argb_; }
      set {
        argb_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as YColor);
    }

    public bool Equals(YColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Argb != other.Argb) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Argb != 0) hash ^= Argb.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Argb != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Argb);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Argb != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Argb);
      }
      return size;
    }

    public void MergeFrom(YColor other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Argb != 0) {
        Argb = other.Argb;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Argb = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class YPoint3 : pb::IMessage<YPoint3> {
    private static readonly pb::MessageParser<YPoint3> _parser = new pb::MessageParser<YPoint3>(() => new YPoint3());
    public static pb::MessageParser<YPoint3> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.Entities.Y3DReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public YPoint3() {
      OnConstruction();
    }

    partial void OnConstruction();

    public YPoint3(YPoint3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    public YPoint3 Clone() {
      return new YPoint3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as YPoint3);
    }

    public bool Equals(YPoint3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(YPoint3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class YBox3 : pb::IMessage<YBox3> {
    private static readonly pb::MessageParser<YBox3> _parser = new pb::MessageParser<YBox3>(() => new YBox3());
    public static pb::MessageParser<YBox3> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.Entities.Y3DReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public YBox3() {
      OnConstruction();
    }

    partial void OnConstruction();

    public YBox3(YBox3 other) : this() {
      Pmin = other.pmin_ != null ? other.Pmin.Clone() : null;
      Pmax = other.pmax_ != null ? other.Pmax.Clone() : null;
    }

    public YBox3 Clone() {
      return new YBox3(this);
    }

    /// <summary>Field number for the "pmin" field.</summary>
    public const int PminFieldNumber = 1;
    private global::Y3D.Entities.YPoint3 pmin_;
    public global::Y3D.Entities.YPoint3 Pmin {
      get { return pmin_; }
      set {
        pmin_ = value;
      }
    }

    /// <summary>Field number for the "pmax" field.</summary>
    public const int PmaxFieldNumber = 2;
    private global::Y3D.Entities.YPoint3 pmax_;
    public global::Y3D.Entities.YPoint3 Pmax {
      get { return pmax_; }
      set {
        pmax_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as YBox3);
    }

    public bool Equals(YBox3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pmin, other.Pmin)) return false;
      if (!object.Equals(Pmax, other.Pmax)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (pmin_ != null) hash ^= Pmin.GetHashCode();
      if (pmax_ != null) hash ^= Pmax.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (pmin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pmin);
      }
      if (pmax_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pmax);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (pmin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pmin);
      }
      if (pmax_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pmax);
      }
      return size;
    }

    public void MergeFrom(YBox3 other) {
      if (other == null) {
        return;
      }
      if (other.pmin_ != null) {
        if (pmin_ == null) {
          pmin_ = new global::Y3D.Entities.YPoint3();
        }
        Pmin.MergeFrom(other.Pmin);
      }
      if (other.pmax_ != null) {
        if (pmax_ == null) {
          pmax_ = new global::Y3D.Entities.YPoint3();
        }
        Pmax.MergeFrom(other.Pmax);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pmin_ == null) {
              pmin_ = new global::Y3D.Entities.YPoint3();
            }
            input.ReadMessage(pmin_);
            break;
          }
          case 18: {
            if (pmax_ == null) {
              pmax_ = new global::Y3D.Entities.YPoint3();
            }
            input.ReadMessage(pmax_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class YResource : pb::IMessage<YResource> {
    private static readonly pb::MessageParser<YResource> _parser = new pb::MessageParser<YResource>(() => new YResource());
    public static pb::MessageParser<YResource> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.Entities.Y3DReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public YResource() {
      OnConstruction();
    }

    partial void OnConstruction();

    public YResource(YResource other) : this() {
      rid_ = other.rid_;
      rtype_ = other.rtype_;
      link_ = other.link_;
    }

    public YResource Clone() {
      return new YResource(this);
    }

    /// <summary>Field number for the "rid" field.</summary>
    public const int RidFieldNumber = 1;
    private string rid_ = "";
    public string Rid {
      get { return rid_; }
      set {
        rid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rtype" field.</summary>
    public const int RtypeFieldNumber = 2;
    private global::Y3D.Entities.YResource.Types.ResourceType rtype_ = 0;
    public global::Y3D.Entities.YResource.Types.ResourceType Rtype {
      get { return rtype_; }
      set {
        rtype_ = value;
      }
    }

    /// <summary>Field number for the "link" field.</summary>
    public const int LinkFieldNumber = 3;
    private string link_ = "";
    public string Link {
      get { return link_; }
      set {
        link_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as YResource);
    }

    public bool Equals(YResource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rid != other.Rid) return false;
      if (Rtype != other.Rtype) return false;
      if (Link != other.Link) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Rid.Length != 0) hash ^= Rid.GetHashCode();
      if (Rtype != 0) hash ^= Rtype.GetHashCode();
      if (Link.Length != 0) hash ^= Link.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Rid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Rid);
      }
      if (Rtype != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Rtype);
      }
      if (Link.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Link);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Rid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Rid);
      }
      if (Rtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Rtype);
      }
      if (Link.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Link);
      }
      return size;
    }

    public void MergeFrom(YResource other) {
      if (other == null) {
        return;
      }
      if (other.Rid.Length != 0) {
        Rid = other.Rid;
      }
      if (other.Rtype != 0) {
        Rtype = other.Rtype;
      }
      if (other.Link.Length != 0) {
        Link = other.Link;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Rid = input.ReadString();
            break;
          }
          case 16: {
            rtype_ = (global::Y3D.Entities.YResource.Types.ResourceType) input.ReadEnum();
            break;
          }
          case 26: {
            Link = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the YResource message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ResourceType {
        [pbr::OriginalName("BINARY")] Binary = 0,
        [pbr::OriginalName("IMAGE")] Image = 1,
        [pbr::OriginalName("FLATBUFFER")] Flatbuffer = 2,
        [pbr::OriginalName("PROTOBUF")] Protobuf = 3,
        [pbr::OriginalName("CAPNP")] Capnp = 4,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class YLight : pb::IMessage<YLight> {
    private static readonly pb::MessageParser<YLight> _parser = new pb::MessageParser<YLight>(() => new YLight());
    public static pb::MessageParser<YLight> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.Entities.Y3DReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public YLight() {
      OnConstruction();
    }

    partial void OnConstruction();

    public YLight(YLight other) : this() {
      diffuse_ = other.diffuse_.Clone();
      specular_ = other.specular_.Clone();
      intensity_ = other.intensity_;
      range_ = other.range_;
      angle_ = other.angle_;
      exponent_ = other.exponent_;
      excludedMeshesIds_ = other.excludedMeshesIds_.Clone();
      includedOnlyMeshesIds_ = other.includedOnlyMeshesIds_.Clone();
    }

    public YLight Clone() {
      return new YLight(this);
    }

    /// <summary>Field number for the "diffuse" field.</summary>
    public const int DiffuseFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_diffuse_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> diffuse_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> Diffuse {
      get { return diffuse_; }
    }

    /// <summary>Field number for the "specular" field.</summary>
    public const int SpecularFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_specular_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> specular_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> Specular {
      get { return specular_; }
    }

    /// <summary>Field number for the "intensity" field.</summary>
    public const int IntensityFieldNumber = 5;
    private float intensity_;
    public float Intensity {
      get { return intensity_; }
      set {
        intensity_ = value;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 6;
    private float range_;
    public float Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 7;
    private float angle_;
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "exponent" field.</summary>
    public const int ExponentFieldNumber = 8;
    private float exponent_;
    public float Exponent {
      get { return exponent_; }
      set {
        exponent_ = value;
      }
    }

    /// <summary>Field number for the "excludedMeshesIds" field.</summary>
    public const int ExcludedMeshesIdsFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_excludedMeshesIds_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> excludedMeshesIds_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> ExcludedMeshesIds {
      get { return excludedMeshesIds_; }
    }

    /// <summary>Field number for the "includedOnlyMeshesIds" field.</summary>
    public const int IncludedOnlyMeshesIdsFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_includedOnlyMeshesIds_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> includedOnlyMeshesIds_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> IncludedOnlyMeshesIds {
      get { return includedOnlyMeshesIds_; }
    }

    public override bool Equals(object other) {
      return Equals(other as YLight);
    }

    public bool Equals(YLight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!diffuse_.Equals(other.diffuse_)) return false;
      if(!specular_.Equals(other.specular_)) return false;
      if (Intensity != other.Intensity) return false;
      if (Range != other.Range) return false;
      if (Angle != other.Angle) return false;
      if (Exponent != other.Exponent) return false;
      if(!excludedMeshesIds_.Equals(other.excludedMeshesIds_)) return false;
      if(!includedOnlyMeshesIds_.Equals(other.includedOnlyMeshesIds_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= diffuse_.GetHashCode();
      hash ^= specular_.GetHashCode();
      if (Intensity != 0F) hash ^= Intensity.GetHashCode();
      if (Range != 0F) hash ^= Range.GetHashCode();
      if (Angle != 0F) hash ^= Angle.GetHashCode();
      if (Exponent != 0F) hash ^= Exponent.GetHashCode();
      hash ^= excludedMeshesIds_.GetHashCode();
      hash ^= includedOnlyMeshesIds_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      diffuse_.WriteTo(output, _repeated_diffuse_codec);
      specular_.WriteTo(output, _repeated_specular_codec);
      if (Intensity != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Intensity);
      }
      if (Range != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Range);
      }
      if (Angle != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Angle);
      }
      if (Exponent != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Exponent);
      }
      excludedMeshesIds_.WriteTo(output, _repeated_excludedMeshesIds_codec);
      includedOnlyMeshesIds_.WriteTo(output, _repeated_includedOnlyMeshesIds_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += diffuse_.CalculateSize(_repeated_diffuse_codec);
      size += specular_.CalculateSize(_repeated_specular_codec);
      if (Intensity != 0F) {
        size += 1 + 4;
      }
      if (Range != 0F) {
        size += 1 + 4;
      }
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (Exponent != 0F) {
        size += 1 + 4;
      }
      size += excludedMeshesIds_.CalculateSize(_repeated_excludedMeshesIds_codec);
      size += includedOnlyMeshesIds_.CalculateSize(_repeated_includedOnlyMeshesIds_codec);
      return size;
    }

    public void MergeFrom(YLight other) {
      if (other == null) {
        return;
      }
      diffuse_.Add(other.diffuse_);
      specular_.Add(other.specular_);
      if (other.Intensity != 0F) {
        Intensity = other.Intensity;
      }
      if (other.Range != 0F) {
        Range = other.Range;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      if (other.Exponent != 0F) {
        Exponent = other.Exponent;
      }
      excludedMeshesIds_.Add(other.excludedMeshesIds_);
      includedOnlyMeshesIds_.Add(other.includedOnlyMeshesIds_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26:
          case 29: {
            diffuse_.AddEntriesFrom(input, _repeated_diffuse_codec);
            break;
          }
          case 34:
          case 37: {
            specular_.AddEntriesFrom(input, _repeated_specular_codec);
            break;
          }
          case 45: {
            Intensity = input.ReadFloat();
            break;
          }
          case 53: {
            Range = input.ReadFloat();
            break;
          }
          case 61: {
            Angle = input.ReadFloat();
            break;
          }
          case 69: {
            Exponent = input.ReadFloat();
            break;
          }
          case 74: {
            excludedMeshesIds_.AddEntriesFrom(input, _repeated_excludedMeshesIds_codec);
            break;
          }
          case 82: {
            includedOnlyMeshesIds_.AddEntriesFrom(input, _repeated_includedOnlyMeshesIds_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class YCamera : pb::IMessage<YCamera> {
    private static readonly pb::MessageParser<YCamera> _parser = new pb::MessageParser<YCamera>(() => new YCamera());
    public static pb::MessageParser<YCamera> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.Entities.Y3DReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public YCamera() {
      OnConstruction();
    }

    partial void OnConstruction();

    public YCamera(YCamera other) : this() {
      rotation_ = other.rotation_.Clone();
      target_ = other.target_.Clone();
      fov_ = other.fov_;
    }

    public YCamera Clone() {
      return new YCamera(this);
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_rotation_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> rotation_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> Rotation {
      get { return rotation_; }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_target_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> target_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> Target {
      get { return target_; }
    }

    /// <summary>Field number for the "fov" field.</summary>
    public const int FovFieldNumber = 5;
    private float fov_;
    public float Fov {
      get { return fov_; }
      set {
        fov_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as YCamera);
    }

    public bool Equals(YCamera other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rotation_.Equals(other.rotation_)) return false;
      if(!target_.Equals(other.target_)) return false;
      if (Fov != other.Fov) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= rotation_.GetHashCode();
      hash ^= target_.GetHashCode();
      if (Fov != 0F) hash ^= Fov.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      rotation_.WriteTo(output, _repeated_rotation_codec);
      target_.WriteTo(output, _repeated_target_codec);
      if (Fov != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Fov);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += rotation_.CalculateSize(_repeated_rotation_codec);
      size += target_.CalculateSize(_repeated_target_codec);
      if (Fov != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(YCamera other) {
      if (other == null) {
        return;
      }
      rotation_.Add(other.rotation_);
      target_.Add(other.target_);
      if (other.Fov != 0F) {
        Fov = other.Fov;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26:
          case 29: {
            rotation_.AddEntriesFrom(input, _repeated_rotation_codec);
            break;
          }
          case 34:
          case 37: {
            target_.AddEntriesFrom(input, _repeated_target_codec);
            break;
          }
          case 45: {
            Fov = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class YMesh : pb::IMessage<YMesh> {
    private static readonly pb::MessageParser<YMesh> _parser = new pb::MessageParser<YMesh>(() => new YMesh());
    public static pb::MessageParser<YMesh> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.Entities.Y3DReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public YMesh() {
      OnConstruction();
    }

    partial void OnConstruction();

    public YMesh(YMesh other) : this() {
      numFaces_ = other.numFaces_;
      Bbox = other.bbox_ != null ? other.Bbox.Clone() : null;
      resId_ = other.resId_;
      xref_ = other.xref_.Clone();
      xstatus_ = other.xstatus_;
      mtype_ = other.mtype_;
    }

    public YMesh Clone() {
      return new YMesh(this);
    }

    /// <summary>Field number for the "num_faces" field.</summary>
    public const int NumFacesFieldNumber = 1;
    private int numFaces_;
    public int NumFaces {
      get { return numFaces_; }
      set {
        numFaces_ = value;
      }
    }

    /// <summary>Field number for the "bbox" field.</summary>
    public const int BboxFieldNumber = 2;
    private global::Y3D.Entities.YBox3 bbox_;
    public global::Y3D.Entities.YBox3 Bbox {
      get { return bbox_; }
      set {
        bbox_ = value;
      }
    }

    /// <summary>Field number for the "res_id" field.</summary>
    public const int ResIdFieldNumber = 3;
    private string resId_ = "";
    /// <summary>
    ///  Resource ID (GUID)
    /// </summary>
    public string ResId {
      get { return resId_; }
      set {
        resId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "xref" field.</summary>
    public const int XrefFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_xref_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> xref_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Xref {
      get { return xref_; }
    }

    /// <summary>Field number for the "xstatus" field.</summary>
    public const int XstatusFieldNumber = 5;
    private global::Y3D.Entities.YMesh.Types.XrefStatus xstatus_ = 0;
    public global::Y3D.Entities.YMesh.Types.XrefStatus Xstatus {
      get { return xstatus_; }
      set {
        xstatus_ = value;
      }
    }

    /// <summary>Field number for the "mtype" field.</summary>
    public const int MtypeFieldNumber = 6;
    private global::Y3D.Entities.YMesh.Types.MeshType mtype_ = 0;
    public global::Y3D.Entities.YMesh.Types.MeshType Mtype {
      get { return mtype_; }
      set {
        mtype_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as YMesh);
    }

    public bool Equals(YMesh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumFaces != other.NumFaces) return false;
      if (!object.Equals(Bbox, other.Bbox)) return false;
      if (ResId != other.ResId) return false;
      if(!xref_.Equals(other.xref_)) return false;
      if (Xstatus != other.Xstatus) return false;
      if (Mtype != other.Mtype) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (NumFaces != 0) hash ^= NumFaces.GetHashCode();
      if (bbox_ != null) hash ^= Bbox.GetHashCode();
      if (ResId.Length != 0) hash ^= ResId.GetHashCode();
      hash ^= xref_.GetHashCode();
      if (Xstatus != 0) hash ^= Xstatus.GetHashCode();
      if (Mtype != 0) hash ^= Mtype.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NumFaces != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumFaces);
      }
      if (bbox_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bbox);
      }
      if (ResId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ResId);
      }
      xref_.WriteTo(output, _repeated_xref_codec);
      if (Xstatus != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Xstatus);
      }
      if (Mtype != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Mtype);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (NumFaces != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumFaces);
      }
      if (bbox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbox);
      }
      if (ResId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResId);
      }
      size += xref_.CalculateSize(_repeated_xref_codec);
      if (Xstatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Xstatus);
      }
      if (Mtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mtype);
      }
      return size;
    }

    public void MergeFrom(YMesh other) {
      if (other == null) {
        return;
      }
      if (other.NumFaces != 0) {
        NumFaces = other.NumFaces;
      }
      if (other.bbox_ != null) {
        if (bbox_ == null) {
          bbox_ = new global::Y3D.Entities.YBox3();
        }
        Bbox.MergeFrom(other.Bbox);
      }
      if (other.ResId.Length != 0) {
        ResId = other.ResId;
      }
      xref_.Add(other.xref_);
      if (other.Xstatus != 0) {
        Xstatus = other.Xstatus;
      }
      if (other.Mtype != 0) {
        Mtype = other.Mtype;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumFaces = input.ReadInt32();
            break;
          }
          case 18: {
            if (bbox_ == null) {
              bbox_ = new global::Y3D.Entities.YBox3();
            }
            input.ReadMessage(bbox_);
            break;
          }
          case 26: {
            ResId = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            xref_.AddEntriesFrom(input, _repeated_xref_codec);
            break;
          }
          case 40: {
            xstatus_ = (global::Y3D.Entities.YMesh.Types.XrefStatus) input.ReadEnum();
            break;
          }
          case 48: {
            mtype_ = (global::Y3D.Entities.YMesh.Types.MeshType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the YMesh message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum MeshType {
        [pbr::OriginalName("Editable_Mesh")] EditableMesh = 0,
        [pbr::OriginalName("Editable_Poly")] EditablePoly = 1,
        [pbr::OriginalName("Box")] Box = 2,
        [pbr::OriginalName("Cone")] Cone = 3,
        [pbr::OriginalName("Sphere")] Sphere = 4,
        [pbr::OriginalName("GeoSphere")] GeoSphere = 5,
        [pbr::OriginalName("Cylinder")] Cylinder = 6,
        [pbr::OriginalName("Tube")] Tube = 7,
        [pbr::OriginalName("Torus")] Torus = 8,
        [pbr::OriginalName("Pyramid")] Pyramid = 9,
        [pbr::OriginalName("Teapot")] Teapot = 10,
        [pbr::OriginalName("Plane")] Plane = 11,
        [pbr::OriginalName("Target")] Target = 12,
      }

      public enum XrefStatus {
        [pbr::OriginalName("ORIGINAL")] Original = 0,
        [pbr::OriginalName("XREF_HIGHT")] XrefHight = 1,
        [pbr::OriginalName("XREF_LOW")] XrefLow = 2,
        [pbr::OriginalName("XREF_LOW_DISPLAY")] XrefLowDisplay = 3,
        [pbr::OriginalName("BOX")] Box = 4,
        [pbr::OriginalName("MERGED")] Merged = 5,
        [pbr::OriginalName("FINAL")] Final = 6,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class YObject : pb::IMessage<YObject> {
    private static readonly pb::MessageParser<YObject> _parser = new pb::MessageParser<YObject>(() => new YObject());
    public static pb::MessageParser<YObject> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.Entities.Y3DReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public YObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    public YObject(YObject other) : this() {
      name_ = other.name_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      extra_ = other.extra_.Clone();
      otype_ = other.otype_;
      tags_ = other.tags_.Clone();
      cateId_ = other.cateId_;
      switch (other.DataCase) {
        case DataOneofCase.Light:
          Light = other.Light.Clone();
          break;
        case DataOneofCase.Camera:
          Camera = other.Camera.Clone();
          break;
        case DataOneofCase.Mesh:
          Mesh = other.Mesh.Clone();
          break;
      }

    }

    public YObject Clone() {
      return new YObject(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::Y3D.Entities.YPoint3 pos_;
    /// <summary>
    ///  int32 num_faces = 2;
    /// </summary>
    public global::Y3D.Entities.YPoint3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 5;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_extra_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 42);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> extra_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Extra {
      get { return extra_; }
    }

    /// <summary>Field number for the "otype" field.</summary>
    public const int OtypeFieldNumber = 6;
    private global::Y3D.Entities.ObjectType otype_ = 0;
    public global::Y3D.Entities.ObjectType Otype {
      get { return otype_; }
      set {
        otype_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "cate_id" field.</summary>
    public const int CateIdFieldNumber = 8;
    private int cateId_;
    public int CateId {
      get { return cateId_; }
      set {
        cateId_ = value;
      }
    }

    /// <summary>Field number for the "light" field.</summary>
    public const int LightFieldNumber = 10;
    public global::Y3D.Entities.YLight Light {
      get { return dataCase_ == DataOneofCase.Light ? (global::Y3D.Entities.YLight) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Light;
      }
    }

    /// <summary>Field number for the "camera" field.</summary>
    public const int CameraFieldNumber = 11;
    public global::Y3D.Entities.YCamera Camera {
      get { return dataCase_ == DataOneofCase.Camera ? (global::Y3D.Entities.YCamera) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Camera;
      }
    }

    /// <summary>Field number for the "mesh" field.</summary>
    public const int MeshFieldNumber = 12;
    public global::Y3D.Entities.YMesh Mesh {
      get { return dataCase_ == DataOneofCase.Mesh ? (global::Y3D.Entities.YMesh) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Mesh;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Light = 10,
      Camera = 11,
      Mesh = 12,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as YObject);
    }

    public bool Equals(YObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!Extra.Equals(other.Extra)) return false;
      if (Otype != other.Otype) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (CateId != other.CateId) return false;
      if (!object.Equals(Light, other.Light)) return false;
      if (!object.Equals(Camera, other.Camera)) return false;
      if (!object.Equals(Mesh, other.Mesh)) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      hash ^= Extra.GetHashCode();
      if (Otype != 0) hash ^= Otype.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (CateId != 0) hash ^= CateId.GetHashCode();
      if (dataCase_ == DataOneofCase.Light) hash ^= Light.GetHashCode();
      if (dataCase_ == DataOneofCase.Camera) hash ^= Camera.GetHashCode();
      if (dataCase_ == DataOneofCase.Mesh) hash ^= Mesh.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      extra_.WriteTo(output, _map_extra_codec);
      if (Otype != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Otype);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (CateId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CateId);
      }
      if (dataCase_ == DataOneofCase.Light) {
        output.WriteRawTag(82);
        output.WriteMessage(Light);
      }
      if (dataCase_ == DataOneofCase.Camera) {
        output.WriteRawTag(90);
        output.WriteMessage(Camera);
      }
      if (dataCase_ == DataOneofCase.Mesh) {
        output.WriteRawTag(98);
        output.WriteMessage(Mesh);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      size += extra_.CalculateSize(_map_extra_codec);
      if (Otype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Otype);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (CateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CateId);
      }
      if (dataCase_ == DataOneofCase.Light) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Light);
      }
      if (dataCase_ == DataOneofCase.Camera) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Camera);
      }
      if (dataCase_ == DataOneofCase.Mesh) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mesh);
      }
      return size;
    }

    public void MergeFrom(YObject other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Y3D.Entities.YPoint3();
        }
        Pos.MergeFrom(other.Pos);
      }
      extra_.Add(other.extra_);
      if (other.Otype != 0) {
        Otype = other.Otype;
      }
      tags_.Add(other.tags_);
      if (other.CateId != 0) {
        CateId = other.CateId;
      }
      switch (other.DataCase) {
        case DataOneofCase.Light:
          Light = other.Light;
          break;
        case DataOneofCase.Camera:
          Camera = other.Camera;
          break;
        case DataOneofCase.Mesh:
          Mesh = other.Mesh;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (pos_ == null) {
              pos_ = new global::Y3D.Entities.YPoint3();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 42: {
            extra_.AddEntriesFrom(input, _map_extra_codec);
            break;
          }
          case 48: {
            otype_ = (global::Y3D.Entities.ObjectType) input.ReadEnum();
            break;
          }
          case 58: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 64: {
            CateId = input.ReadInt32();
            break;
          }
          case 82: {
            global::Y3D.Entities.YLight subBuilder = new global::Y3D.Entities.YLight();
            if (dataCase_ == DataOneofCase.Light) {
              subBuilder.MergeFrom(Light);
            }
            input.ReadMessage(subBuilder);
            Light = subBuilder;
            break;
          }
          case 90: {
            global::Y3D.Entities.YCamera subBuilder = new global::Y3D.Entities.YCamera();
            if (dataCase_ == DataOneofCase.Camera) {
              subBuilder.MergeFrom(Camera);
            }
            input.ReadMessage(subBuilder);
            Camera = subBuilder;
            break;
          }
          case 98: {
            global::Y3D.Entities.YMesh subBuilder = new global::Y3D.Entities.YMesh();
            if (dataCase_ == DataOneofCase.Mesh) {
              subBuilder.MergeFrom(Mesh);
            }
            input.ReadMessage(subBuilder);
            Mesh = subBuilder;
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class YGroup : pb::IMessage<YGroup> {
    private static readonly pb::MessageParser<YGroup> _parser = new pb::MessageParser<YGroup>(() => new YGroup());
    public static pb::MessageParser<YGroup> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.Entities.Y3DReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public YGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    public YGroup(YGroup other) : this() {
      name_ = other.name_;
      objs_ = other.objs_.Clone();
      children_ = other.children_.Clone();
      gvType_ = other.gvType_;
    }

    public YGroup Clone() {
      return new YGroup(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "objs" field.</summary>
    public const int ObjsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Y3D.Entities.YObject> _repeated_objs_codec
        = pb::FieldCodec.ForMessage(18, global::Y3D.Entities.YObject.Parser);
    private readonly pbc::RepeatedField<global::Y3D.Entities.YObject> objs_ = new pbc::RepeatedField<global::Y3D.Entities.YObject>();
    public pbc::RepeatedField<global::Y3D.Entities.YObject> Objs {
      get { return objs_; }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Y3D.Entities.YGroup> _repeated_children_codec
        = pb::FieldCodec.ForMessage(26, global::Y3D.Entities.YGroup.Parser);
    private readonly pbc::RepeatedField<global::Y3D.Entities.YGroup> children_ = new pbc::RepeatedField<global::Y3D.Entities.YGroup>();
    public pbc::RepeatedField<global::Y3D.Entities.YGroup> Children {
      get { return children_; }
    }

    /// <summary>Field number for the "gv_type" field.</summary>
    public const int GvTypeFieldNumber = 4;
    private global::Y3D.Entities.GVerType gvType_ = 0;
    public global::Y3D.Entities.GVerType GvType {
      get { return gvType_; }
      set {
        gvType_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as YGroup);
    }

    public bool Equals(YGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!objs_.Equals(other.objs_)) return false;
      if(!children_.Equals(other.children_)) return false;
      if (GvType != other.GvType) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= objs_.GetHashCode();
      hash ^= children_.GetHashCode();
      if (GvType != 0) hash ^= GvType.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      objs_.WriteTo(output, _repeated_objs_codec);
      children_.WriteTo(output, _repeated_children_codec);
      if (GvType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) GvType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += objs_.CalculateSize(_repeated_objs_codec);
      size += children_.CalculateSize(_repeated_children_codec);
      if (GvType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GvType);
      }
      return size;
    }

    public void MergeFrom(YGroup other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      objs_.Add(other.objs_);
      children_.Add(other.children_);
      if (other.GvType != 0) {
        GvType = other.GvType;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            objs_.AddEntriesFrom(input, _repeated_objs_codec);
            break;
          }
          case 26: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
          case 32: {
            gvType_ = (global::Y3D.Entities.GVerType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class YArea : pb::IMessage<YArea> {
    private static readonly pb::MessageParser<YArea> _parser = new pb::MessageParser<YArea>(() => new YArea());
    public static pb::MessageParser<YArea> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.Entities.Y3DReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public YArea() {
      OnConstruction();
    }

    partial void OnConstruction();

    public YArea(YArea other) : this() {
      name_ = other.name_;
      groups_ = other.groups_.Clone();
      objs_ = other.objs_.Clone();
    }

    public YArea Clone() {
      return new YArea(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Y3D.Entities.YGroup> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(18, global::Y3D.Entities.YGroup.Parser);
    private readonly pbc::RepeatedField<global::Y3D.Entities.YGroup> groups_ = new pbc::RepeatedField<global::Y3D.Entities.YGroup>();
    public pbc::RepeatedField<global::Y3D.Entities.YGroup> Groups {
      get { return groups_; }
    }

    /// <summary>Field number for the "objs" field.</summary>
    public const int ObjsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Y3D.Entities.YObject> _repeated_objs_codec
        = pb::FieldCodec.ForMessage(26, global::Y3D.Entities.YObject.Parser);
    private readonly pbc::RepeatedField<global::Y3D.Entities.YObject> objs_ = new pbc::RepeatedField<global::Y3D.Entities.YObject>();
    public pbc::RepeatedField<global::Y3D.Entities.YObject> Objs {
      get { return objs_; }
    }

    public override bool Equals(object other) {
      return Equals(other as YArea);
    }

    public bool Equals(YArea other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!groups_.Equals(other.groups_)) return false;
      if(!objs_.Equals(other.objs_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= groups_.GetHashCode();
      hash ^= objs_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      groups_.WriteTo(output, _repeated_groups_codec);
      objs_.WriteTo(output, _repeated_objs_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += groups_.CalculateSize(_repeated_groups_codec);
      size += objs_.CalculateSize(_repeated_objs_codec);
      return size;
    }

    public void MergeFrom(YArea other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      groups_.Add(other.groups_);
      objs_.Add(other.objs_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
          case 26: {
            objs_.AddEntriesFrom(input, _repeated_objs_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class YGroupVer : pb::IMessage<YGroupVer> {
    private static readonly pb::MessageParser<YGroupVer> _parser = new pb::MessageParser<YGroupVer>(() => new YGroupVer());
    public static pb::MessageParser<YGroupVer> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.Entities.Y3DReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public YGroupVer() {
      OnConstruction();
    }

    partial void OnConstruction();

    public YGroupVer(YGroupVer other) : this() {
      vname_ = other.vname_;
      GroupData = other.groupData_ != null ? other.GroupData.Clone() : null;
      step_ = other.step_;
    }

    public YGroupVer Clone() {
      return new YGroupVer(this);
    }

    /// <summary>Field number for the "vname" field.</summary>
    public const int VnameFieldNumber = 1;
    private string vname_ = "";
    public string Vname {
      get { return vname_; }
      set {
        vname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groupData" field.</summary>
    public const int GroupDataFieldNumber = 2;
    private global::Y3D.Entities.YGroup groupData_;
    public global::Y3D.Entities.YGroup GroupData {
      get { return groupData_; }
      set {
        groupData_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 3;
    private int step_;
    public int Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as YGroupVer);
    }

    public bool Equals(YGroupVer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Vname != other.Vname) return false;
      if (!object.Equals(GroupData, other.GroupData)) return false;
      if (Step != other.Step) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Vname.Length != 0) hash ^= Vname.GetHashCode();
      if (groupData_ != null) hash ^= GroupData.GetHashCode();
      if (Step != 0) hash ^= Step.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Vname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Vname);
      }
      if (groupData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GroupData);
      }
      if (Step != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Step);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Vname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Vname);
      }
      if (groupData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupData);
      }
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Step);
      }
      return size;
    }

    public void MergeFrom(YGroupVer other) {
      if (other == null) {
        return;
      }
      if (other.Vname.Length != 0) {
        Vname = other.Vname;
      }
      if (other.groupData_ != null) {
        if (groupData_ == null) {
          groupData_ = new global::Y3D.Entities.YGroup();
        }
        GroupData.MergeFrom(other.GroupData);
      }
      if (other.Step != 0) {
        Step = other.Step;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Vname = input.ReadString();
            break;
          }
          case 18: {
            if (groupData_ == null) {
              groupData_ = new global::Y3D.Entities.YGroup();
            }
            input.ReadMessage(groupData_);
            break;
          }
          case 24: {
            Step = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CustomAttr : pb::IMessage<CustomAttr> {
    private static readonly pb::MessageParser<CustomAttr> _parser = new pb::MessageParser<CustomAttr>(() => new CustomAttr());
    public static pb::MessageParser<CustomAttr> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.Entities.Y3DReflection.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public CustomAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    public CustomAttr(CustomAttr other) : this() {
      name_ = other.name_;
      Value = other.value_ != null ? other.Value.Clone() : null;
      type_ = other.type_;
    }

    public CustomAttr Clone() {
      return new CustomAttr(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Any value_;
    public global::Google.Protobuf.WellKnownTypes.Any Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private global::Y3D.Entities.CustomAttr.Types.AType type_ = 0;
    public global::Y3D.Entities.CustomAttr.Types.AType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as CustomAttr);
    }

    public bool Equals(CustomAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Value, other.Value)) return false;
      if (Type != other.Type) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (value_ != null) hash ^= Value.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (value_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Value);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Type);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (value_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    public void MergeFrom(CustomAttr other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.value_ != null) {
        if (value_ == null) {
          value_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Value.MergeFrom(other.Value);
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (value_ == null) {
              value_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(value_);
            break;
          }
          case 24: {
            type_ = (global::Y3D.Entities.CustomAttr.Types.AType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CustomAttr message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum AType {
        [pbr::OriginalName("STRING")] String = 0,
        [pbr::OriginalName("INT")] Int = 1,
        [pbr::OriginalName("FLOAT")] Float = 2,
        [pbr::OriginalName("BOOL")] Bool = 3,
        [pbr::OriginalName("POINT3")] Point3 = 4,
        [pbr::OriginalName("ARRAY_STRING")] ArrayString = 5,
        [pbr::OriginalName("ARRAY_INT")] ArrayInt = 6,
        [pbr::OriginalName("ARRAY_FLOAT")] ArrayFloat = 7,
        /// <summary>
        ///  bytes
        /// </summary>
        [pbr::OriginalName("TEXT")] Text = 8,
        [pbr::OriginalName("COLOR")] Color = 9,
        /// <summary>
        ///  radio
        /// </summary>
        [pbr::OriginalName("ONEOF")] Oneof = 10,
        [pbr::OriginalName("OTHER")] Other = 11,
      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AttrSet : pb::IMessage<AttrSet> {
    private static readonly pb::MessageParser<AttrSet> _parser = new pb::MessageParser<AttrSet>(() => new AttrSet());
    public static pb::MessageParser<AttrSet> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.Entities.Y3DReflection.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public AttrSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    public AttrSet(AttrSet other) : this() {
      sname_ = other.sname_;
      attrs_ = other.attrs_.Clone();
    }

    public AttrSet Clone() {
      return new AttrSet(this);
    }

    /// <summary>Field number for the "sname" field.</summary>
    public const int SnameFieldNumber = 1;
    private string sname_ = "";
    public string Sname {
      get { return sname_; }
      set {
        sname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Y3D.Entities.CustomAttr> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(18, global::Y3D.Entities.CustomAttr.Parser);
    private readonly pbc::RepeatedField<global::Y3D.Entities.CustomAttr> attrs_ = new pbc::RepeatedField<global::Y3D.Entities.CustomAttr>();
    public pbc::RepeatedField<global::Y3D.Entities.CustomAttr> Attrs {
      get { return attrs_; }
    }

    public override bool Equals(object other) {
      return Equals(other as AttrSet);
    }

    public bool Equals(AttrSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sname != other.Sname) return false;
      if(!attrs_.Equals(other.attrs_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Sname.Length != 0) hash ^= Sname.GetHashCode();
      hash ^= attrs_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Sname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Sname);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Sname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sname);
      }
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      return size;
    }

    public void MergeFrom(AttrSet other) {
      if (other == null) {
        return;
      }
      if (other.Sname.Length != 0) {
        Sname = other.Sname;
      }
      attrs_.Add(other.attrs_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Sname = input.ReadString();
            break;
          }
          case 18: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FilterView : pb::IMessage<FilterView> {
    private static readonly pb::MessageParser<FilterView> _parser = new pb::MessageParser<FilterView>(() => new FilterView());
    public static pb::MessageParser<FilterView> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.Entities.Y3DReflection.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FilterView() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FilterView(FilterView other) : this() {
      otype_ = other.otype_;
      faceRange_ = other.faceRange_;
      search_ = other.search_;
      aid_ = other.aid_;
    }

    public FilterView Clone() {
      return new FilterView(this);
    }

    /// <summary>Field number for the "otype" field.</summary>
    public const int OtypeFieldNumber = 1;
    private global::Y3D.Entities.ObjectType otype_ = 0;
    public global::Y3D.Entities.ObjectType Otype {
      get { return otype_; }
      set {
        otype_ = value;
      }
    }

    /// <summary>Field number for the "face_range" field.</summary>
    public const int FaceRangeFieldNumber = 2;
    private int faceRange_;
    public int FaceRange {
      get { return faceRange_; }
      set {
        faceRange_ = value;
      }
    }

    /// <summary>Field number for the "search" field.</summary>
    public const int SearchFieldNumber = 3;
    private string search_ = "";
    public string Search {
      get { return search_; }
      set {
        search_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aid" field.</summary>
    public const int AidFieldNumber = 4;
    private int aid_;
    public int Aid {
      get { return aid_; }
      set {
        aid_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FilterView);
    }

    public bool Equals(FilterView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Otype != other.Otype) return false;
      if (FaceRange != other.FaceRange) return false;
      if (Search != other.Search) return false;
      if (Aid != other.Aid) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Otype != 0) hash ^= Otype.GetHashCode();
      if (FaceRange != 0) hash ^= FaceRange.GetHashCode();
      if (Search.Length != 0) hash ^= Search.GetHashCode();
      if (Aid != 0) hash ^= Aid.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Otype != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Otype);
      }
      if (FaceRange != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FaceRange);
      }
      if (Search.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Search);
      }
      if (Aid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Aid);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Otype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Otype);
      }
      if (FaceRange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceRange);
      }
      if (Search.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Search);
      }
      if (Aid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Aid);
      }
      return size;
    }

    public void MergeFrom(FilterView other) {
      if (other == null) {
        return;
      }
      if (other.Otype != 0) {
        Otype = other.Otype;
      }
      if (other.FaceRange != 0) {
        FaceRange = other.FaceRange;
      }
      if (other.Search.Length != 0) {
        Search = other.Search;
      }
      if (other.Aid != 0) {
        Aid = other.Aid;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            otype_ = (global::Y3D.Entities.ObjectType) input.ReadEnum();
            break;
          }
          case 16: {
            FaceRange = input.ReadInt32();
            break;
          }
          case 26: {
            Search = input.ReadString();
            break;
          }
          case 32: {
            Aid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ProjectInfo : pb::IMessage<ProjectInfo> {
    private static readonly pb::MessageParser<ProjectInfo> _parser = new pb::MessageParser<ProjectInfo>(() => new ProjectInfo());
    public static pb::MessageParser<ProjectInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.Entities.Y3DReflection.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ProjectInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ProjectInfo(ProjectInfo other) : this() {
      pname_ = other.pname_;
      path_ = other.path_;
      faceRange_ = other.faceRange_.Clone();
      countColor_ = other.countColor_.Clone();
      fview_ = other.fview_.Clone();
      areas_ = other.areas_.Clone();
      gvers_ = other.gvers_.Clone();
    }

    public ProjectInfo Clone() {
      return new ProjectInfo(this);
    }

    /// <summary>Field number for the "pname" field.</summary>
    public const int PnameFieldNumber = 1;
    private string pname_ = "";
    public string Pname {
      get { return pname_; }
      set {
        pname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "face_range" field.</summary>
    public const int FaceRangeFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_faceRange_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> faceRange_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///  0-100-1000-100000 v.v...
    /// </summary>
    public pbc::RepeatedField<int> FaceRange {
      get { return faceRange_; }
    }

    /// <summary>Field number for the "count_color" field.</summary>
    public const int CountColorFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Y3D.Entities.YColor> _repeated_countColor_codec
        = pb::FieldCodec.ForMessage(34, global::Y3D.Entities.YColor.Parser);
    private readonly pbc::RepeatedField<global::Y3D.Entities.YColor> countColor_ = new pbc::RepeatedField<global::Y3D.Entities.YColor>();
    /// <summary>
    ///  green, yellow, red v.v...
    /// </summary>
    public pbc::RepeatedField<global::Y3D.Entities.YColor> CountColor {
      get { return countColor_; }
    }

    /// <summary>Field number for the "fview" field.</summary>
    public const int FviewFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Y3D.Entities.FilterView> _repeated_fview_codec
        = pb::FieldCodec.ForMessage(42, global::Y3D.Entities.FilterView.Parser);
    private readonly pbc::RepeatedField<global::Y3D.Entities.FilterView> fview_ = new pbc::RepeatedField<global::Y3D.Entities.FilterView>();
    public pbc::RepeatedField<global::Y3D.Entities.FilterView> Fview {
      get { return fview_; }
    }

    /// <summary>Field number for the "areas" field.</summary>
    public const int AreasFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Y3D.Entities.YArea> _repeated_areas_codec
        = pb::FieldCodec.ForMessage(50, global::Y3D.Entities.YArea.Parser);
    private readonly pbc::RepeatedField<global::Y3D.Entities.YArea> areas_ = new pbc::RepeatedField<global::Y3D.Entities.YArea>();
    public pbc::RepeatedField<global::Y3D.Entities.YArea> Areas {
      get { return areas_; }
    }

    /// <summary>Field number for the "gvers" field.</summary>
    public const int GversFieldNumber = 7;
    private static readonly pbc::MapField<string, global::Y3D.Entities.YGroupVer>.Codec _map_gvers_codec
        = new pbc::MapField<string, global::Y3D.Entities.YGroupVer>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Y3D.Entities.YGroupVer.Parser), 58);
    private readonly pbc::MapField<string, global::Y3D.Entities.YGroupVer> gvers_ = new pbc::MapField<string, global::Y3D.Entities.YGroupVer>();
    public pbc::MapField<string, global::Y3D.Entities.YGroupVer> Gvers {
      get { return gvers_; }
    }

    public override bool Equals(object other) {
      return Equals(other as ProjectInfo);
    }

    public bool Equals(ProjectInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pname != other.Pname) return false;
      if (Path != other.Path) return false;
      if(!faceRange_.Equals(other.faceRange_)) return false;
      if(!countColor_.Equals(other.countColor_)) return false;
      if(!fview_.Equals(other.fview_)) return false;
      if(!areas_.Equals(other.areas_)) return false;
      if (!Gvers.Equals(other.Gvers)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Pname.Length != 0) hash ^= Pname.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      hash ^= faceRange_.GetHashCode();
      hash ^= countColor_.GetHashCode();
      hash ^= fview_.GetHashCode();
      hash ^= areas_.GetHashCode();
      hash ^= Gvers.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Pname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Pname);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      faceRange_.WriteTo(output, _repeated_faceRange_codec);
      countColor_.WriteTo(output, _repeated_countColor_codec);
      fview_.WriteTo(output, _repeated_fview_codec);
      areas_.WriteTo(output, _repeated_areas_codec);
      gvers_.WriteTo(output, _map_gvers_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Pname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pname);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      size += faceRange_.CalculateSize(_repeated_faceRange_codec);
      size += countColor_.CalculateSize(_repeated_countColor_codec);
      size += fview_.CalculateSize(_repeated_fview_codec);
      size += areas_.CalculateSize(_repeated_areas_codec);
      size += gvers_.CalculateSize(_map_gvers_codec);
      return size;
    }

    public void MergeFrom(ProjectInfo other) {
      if (other == null) {
        return;
      }
      if (other.Pname.Length != 0) {
        Pname = other.Pname;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      faceRange_.Add(other.faceRange_);
      countColor_.Add(other.countColor_);
      fview_.Add(other.fview_);
      areas_.Add(other.areas_);
      gvers_.Add(other.gvers_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Pname = input.ReadString();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26:
          case 24: {
            faceRange_.AddEntriesFrom(input, _repeated_faceRange_codec);
            break;
          }
          case 34: {
            countColor_.AddEntriesFrom(input, _repeated_countColor_codec);
            break;
          }
          case 42: {
            fview_.AddEntriesFrom(input, _repeated_fview_codec);
            break;
          }
          case 50: {
            areas_.AddEntriesFrom(input, _repeated_areas_codec);
            break;
          }
          case 58: {
            gvers_.AddEntriesFrom(input, _map_gvers_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class PSetting : pb::IMessage<PSetting> {
    private static readonly pb::MessageParser<PSetting> _parser = new pb::MessageParser<PSetting>(() => new PSetting());
    public static pb::MessageParser<PSetting> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.Entities.Y3DReflection.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public PSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    public PSetting(PSetting other) : this() {
      extra_ = other.extra_.Clone();
    }

    public PSetting Clone() {
      return new PSetting(this);
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Y3D.Entities.CustomAttr> _repeated_extra_codec
        = pb::FieldCodec.ForMessage(18, global::Y3D.Entities.CustomAttr.Parser);
    private readonly pbc::RepeatedField<global::Y3D.Entities.CustomAttr> extra_ = new pbc::RepeatedField<global::Y3D.Entities.CustomAttr>();
    public pbc::RepeatedField<global::Y3D.Entities.CustomAttr> Extra {
      get { return extra_; }
    }

    public override bool Equals(object other) {
      return Equals(other as PSetting);
    }

    public bool Equals(PSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!extra_.Equals(other.extra_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= extra_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      extra_.WriteTo(output, _repeated_extra_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += extra_.CalculateSize(_repeated_extra_codec);
      return size;
    }

    public void MergeFrom(PSetting other) {
      if (other == null) {
        return;
      }
      extra_.Add(other.extra_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            extra_.AddEntriesFrom(input, _repeated_extra_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class YSystem : pb::IMessage<YSystem> {
    private static readonly pb::MessageParser<YSystem> _parser = new pb::MessageParser<YSystem>(() => new YSystem());
    public static pb::MessageParser<YSystem> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.Entities.Y3DReflection.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public YSystem() {
      OnConstruction();
    }

    partial void OnConstruction();

    public YSystem(YSystem other) : this() {
      DefaultPSetting = other.defaultPSetting_ != null ? other.DefaultPSetting.Clone() : null;
    }

    public YSystem Clone() {
      return new YSystem(this);
    }

    /// <summary>Field number for the "defaultPSetting" field.</summary>
    public const int DefaultPSettingFieldNumber = 1;
    private global::Y3D.Entities.PSetting defaultPSetting_;
    public global::Y3D.Entities.PSetting DefaultPSetting {
      get { return defaultPSetting_; }
      set {
        defaultPSetting_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as YSystem);
    }

    public bool Equals(YSystem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DefaultPSetting, other.DefaultPSetting)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (defaultPSetting_ != null) hash ^= DefaultPSetting.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (defaultPSetting_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DefaultPSetting);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (defaultPSetting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultPSetting);
      }
      return size;
    }

    public void MergeFrom(YSystem other) {
      if (other == null) {
        return;
      }
      if (other.defaultPSetting_ != null) {
        if (defaultPSetting_ == null) {
          defaultPSetting_ = new global::Y3D.Entities.PSetting();
        }
        DefaultPSetting.MergeFrom(other.DefaultPSetting);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (defaultPSetting_ == null) {
              defaultPSetting_ = new global::Y3D.Entities.PSetting();
            }
            input.ReadMessage(defaultPSetting_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
