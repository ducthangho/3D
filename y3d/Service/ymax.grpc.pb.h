// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: ymax.proto
// Original file comments:
// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
#ifndef GRPC_ymax_2eproto__INCLUDED
#define GRPC_ymax_2eproto__INCLUDED

#include "ymax.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace yproto {

// The greeting service definition.
class YPrepare final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status MakeBox(::grpc::ClientContext* context, const ::yproto::NumFaceRange& request, ::yproto::ObjList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yproto::ObjList>> AsyncMakeBox(::grpc::ClientContext* context, const ::yproto::NumFaceRange& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yproto::ObjList>>(AsyncMakeBoxRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::yproto::ObjList>* AsyncMakeBoxRaw(::grpc::ClientContext* context, const ::yproto::NumFaceRange& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status MakeBox(::grpc::ClientContext* context, const ::yproto::NumFaceRange& request, ::yproto::ObjList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yproto::ObjList>> AsyncMakeBox(::grpc::ClientContext* context, const ::yproto::NumFaceRange& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yproto::ObjList>>(AsyncMakeBoxRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::yproto::ObjList>* AsyncMakeBoxRaw(::grpc::ClientContext* context, const ::yproto::NumFaceRange& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_MakeBox_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status MakeBox(::grpc::ServerContext* context, const ::yproto::NumFaceRange* request, ::yproto::ObjList* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_MakeBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MakeBox() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_MakeBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeBox(::grpc::ServerContext* context, const ::yproto::NumFaceRange* request, ::yproto::ObjList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMakeBox(::grpc::ServerContext* context, ::yproto::NumFaceRange* request, ::grpc::ServerAsyncResponseWriter< ::yproto::ObjList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_MakeBox<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_MakeBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MakeBox() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_MakeBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MakeBox(::grpc::ServerContext* context, const ::yproto::NumFaceRange* request, ::yproto::ObjList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MakeBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MakeBox() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::yproto::NumFaceRange, ::yproto::ObjList>(std::bind(&WithStreamedUnaryMethod_MakeBox<BaseClass>::StreamedMakeBox, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MakeBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MakeBox(::grpc::ServerContext* context, const ::yproto::NumFaceRange* request, ::yproto::ObjList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMakeBox(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::yproto::NumFaceRange,::yproto::ObjList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_MakeBox<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_MakeBox<Service > StreamedService;
};

}  // namespace yproto


#endif  // GRPC_ymax_2eproto__INCLUDED
