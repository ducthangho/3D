// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xnormal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "xnormal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* UnspecifiedType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnspecifiedType_reflection_ = NULL;
const ::google::protobuf::Descriptor* tMatrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tMatrix_reflection_ = NULL;
const ::google::protobuf::Descriptor* tDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tDetail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* tDetail_eHM2NMMethod_descriptor_ = NULL;
const ::google::protobuf::Descriptor* tRGB8_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tRGB8_reflection_ = NULL;
const ::google::protobuf::Descriptor* tHighPolyMesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tHighPolyMesh_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* tHighPolyMesh_eSmoothNormals_descriptor_ = NULL;
const ::google::protobuf::Descriptor* tLowPolyMesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tLowPolyMesh_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* tLowPolyMesh_eSwizzleComponent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* tLowPolyMesh_eTransparencyMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* tLowPolyMesh_eNormalMapType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* tVector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tVector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* tGenerateMaps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tGenerateMaps_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* tGenerateMaps_eAODistribution_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* tGenerateMaps_eSwizzleComponent_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* tGenerateMaps_eHMNormalization_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* tGenerateMaps_eRNMCoordSys_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* tGenerateMaps_eAntialiasing_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* tGenerateMaps_eCurvAlgorithm_descriptor_ = NULL;
const ::google::protobuf::Descriptor* tHighPolyModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tHighPolyModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* tLowPolyModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tLowPolyModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* tViewer3D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tViewer3D_reflection_ = NULL;
const ::google::protobuf::Descriptor* Settings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Settings_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_xnormal_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_xnormal_2eproto() {
  protobuf_AddDesc_xnormal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "xnormal.proto");
  GOOGLE_CHECK(file != NULL);
  UnspecifiedType_descriptor_ = file->message_type(0);
  static const int UnspecifiedType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnspecifiedType, baseobjecttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnspecifiedType, object_),
  };
  UnspecifiedType_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnspecifiedType_descriptor_,
      UnspecifiedType::default_instance_,
      UnspecifiedType_offsets_,
      -1,
      -1,
      -1,
      sizeof(UnspecifiedType),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnspecifiedType, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnspecifiedType, _is_default_instance_));
  tMatrix_descriptor_ = file->message_type(1);
  static const int tMatrix_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e13_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e23_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e31_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e22_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e33_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e21_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e32_),
  };
  tMatrix_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      tMatrix_descriptor_,
      tMatrix::default_instance_,
      tMatrix_offsets_,
      -1,
      -1,
      -1,
      sizeof(tMatrix),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, _is_default_instance_));
  tDetail_descriptor_ = file->message_type(2);
  static const int tDetail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tDetail, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tDetail, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tDetail, file_),
  };
  tDetail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      tDetail_descriptor_,
      tDetail::default_instance_,
      tDetail_offsets_,
      -1,
      -1,
      -1,
      sizeof(tDetail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tDetail, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tDetail, _is_default_instance_));
  tDetail_eHM2NMMethod_descriptor_ = tDetail_descriptor_->enum_type(0);
  tRGB8_descriptor_ = file->message_type(3);
  static const int tRGB8_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tRGB8, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tRGB8, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tRGB8, b_),
  };
  tRGB8_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      tRGB8_descriptor_,
      tRGB8::default_instance_,
      tRGB8_offsets_,
      -1,
      -1,
      -1,
      sizeof(tRGB8),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tRGB8, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tRGB8, _is_default_instance_));
  tHighPolyMesh_descriptor_ = file->message_type(4);
  static const int tHighPolyMesh_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyMesh, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyMesh, positionoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyMesh, ignorepervertexcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyMesh, averagenormals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyMesh, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyMesh, basetexistsnm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyMesh, scale_),
  };
  tHighPolyMesh_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      tHighPolyMesh_descriptor_,
      tHighPolyMesh::default_instance_,
      tHighPolyMesh_offsets_,
      -1,
      -1,
      -1,
      sizeof(tHighPolyMesh),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyMesh, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyMesh, _is_default_instance_));
  tHighPolyMesh_eSmoothNormals_descriptor_ = tHighPolyMesh_descriptor_->enum_type(0);
  tLowPolyMesh_descriptor_ = file->message_type(5);
  static const int tLowPolyMesh_offsets_[45] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, basetex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, blockersfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, vvdmswizzlez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, fresnelrefractiveindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, uoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, reflecthdrmult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, transparencymode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, voffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, reflecttex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, maxraydistancefront_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, diffusegitex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, normapmaptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, vvdmswizzley_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, cagefile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, heighttex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, nmswizzley_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, batchprotect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, alphatestvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, subdivisions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, matte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, averagenormals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, vectordisplacementts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, usecage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, nmswizzlex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, glosstex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, nmswizzlez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, vectordisplacementtex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, vvdmswizzlex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, usepervertexcolors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, highpolynormalsoverridetangentspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, lmaotex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, spectex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, normtex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, highpolynormaloverride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, positionoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, maxraydistanceback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, usefresnel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, receiveshadows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, emissivetex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, backfacecull_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, castshadows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, matchuvs_),
  };
  tLowPolyMesh_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      tLowPolyMesh_descriptor_,
      tLowPolyMesh::default_instance_,
      tLowPolyMesh_offsets_,
      -1,
      -1,
      -1,
      sizeof(tLowPolyMesh),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, _is_default_instance_));
  tLowPolyMesh_eSwizzleComponent_descriptor_ = tLowPolyMesh_descriptor_->enum_type(0);
  tLowPolyMesh_eTransparencyMode_descriptor_ = tLowPolyMesh_descriptor_->enum_type(1);
  tLowPolyMesh_eNormalMapType_descriptor_ = tLowPolyMesh_descriptor_->enum_type(2);
  tVector3_descriptor_ = file->message_type(6);
  static const int tVector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tVector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tVector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tVector3, z_),
  };
  tVector3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      tVector3_descriptor_,
      tVector3::default_instance_,
      tVector3_offsets_,
      -1,
      -1,
      -1,
      sizeof(tVector3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tVector3, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tVector3, _is_default_instance_));
  tGenerateMaps_descriptor_ = file->message_type(7);
  static const int tGenerateMaps_offsets_[130] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, nmbackgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, hmbackgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bakehighpolybasetexturenotexcol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bakehighpolybasetexturebackgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, renderwireframebackgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, renderwireframecol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, rendercwcol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, renderseamcol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, renderrayfailscol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aooccludedcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aounoccludedcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aobackgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentbackgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, prtbackgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, convexitybackgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, thicknessbackgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, proximitybackgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, cavitybackgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, vdmbackgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radnmbackgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvbackgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, derivnmbackgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, translubackgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bakehighpolyvcolsbackgroundcol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, closestiffails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, directionstonemapmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvmonocrome_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aobias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, benttangentspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, gentranslu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aodistribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, prtthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, directionstonemapmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvdistribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentjitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentdistribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bakehighpolybasetexture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genconvexity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsattenlinear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, translurayspersample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvsearchdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, swizzlez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, translubias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, prtlimitraydistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genbent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aolimitraydistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvrayspersample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsdistribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsrayspersample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvjitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, tangentspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsallowpureocclusion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentswizzlex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, swizzley_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, gencurv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, prtjitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aoattencuadratic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentconeangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, swizzlex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, renderrayfails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, cavitysearchradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsencodeao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, transluconeangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentrayspersample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, convexityscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsconeangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genderivnm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentlimitraydistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, prtbias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, renderwireframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, prtnormalize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, prtconeangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsattencuadratic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, directionstonemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, directionsts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, prtrayspersample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, edgepadding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, directionsswizzlez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aoallowpureoccluded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aoignorebackfacehits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, cavityrayspersample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aoattenconstant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, cavityjitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, heighttonemapmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, gendirections_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalslimitraydistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, heighttonemapmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsjitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, directionsswizzley_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bakehighpolybasetexturedrawobjectidifnotexture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, concavity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, directionsswizzlex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, gennormals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, proximityrayspersample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genheights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsattenconstant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genproximity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genprt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, cavitycontrast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalscoordsys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, translujitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aorayspersample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentbias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, discardraybackfaceshits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aoconeangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentswizzley_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsbias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalscontrast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, cavitysteps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentswizzlez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bucketsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvconeangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, transludist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aojitter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvbias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genwirerays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvalgorithm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, transludistribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aoattenlinear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, proximitylimitraydistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genradiositynormals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, proximityconeangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, heighttonemap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, gencavity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bakehighpolyvcols_),
  };
  tGenerateMaps_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      tGenerateMaps_descriptor_,
      tGenerateMaps::default_instance_,
      tGenerateMaps_offsets_,
      -1,
      -1,
      -1,
      sizeof(tGenerateMaps),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, _is_default_instance_));
  tGenerateMaps_eAODistribution_descriptor_ = tGenerateMaps_descriptor_->enum_type(0);
  tGenerateMaps_eSwizzleComponent_descriptor_ = tGenerateMaps_descriptor_->enum_type(1);
  tGenerateMaps_eHMNormalization_descriptor_ = tGenerateMaps_descriptor_->enum_type(2);
  tGenerateMaps_eRNMCoordSys_descriptor_ = tGenerateMaps_descriptor_->enum_type(3);
  tGenerateMaps_eAntialiasing_descriptor_ = tGenerateMaps_descriptor_->enum_type(4);
  tGenerateMaps_eCurvAlgorithm_descriptor_ = tGenerateMaps_descriptor_->enum_type(5);
  tHighPolyModel_descriptor_ = file->message_type(8);
  static const int tHighPolyModel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyModel, mesh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyModel, basetex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyModel, defaultmeshscale_),
  };
  tHighPolyModel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      tHighPolyModel_descriptor_,
      tHighPolyModel::default_instance_,
      tHighPolyModel_offsets_,
      -1,
      -1,
      -1,
      sizeof(tHighPolyModel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyModel, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyModel, _is_default_instance_));
  tLowPolyModel_descriptor_ = file->message_type(9);
  static const int tLowPolyModel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyModel, mesh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyModel, defaultmeshscale_),
  };
  tLowPolyModel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      tLowPolyModel_descriptor_,
      tLowPolyModel::default_instance_,
      tLowPolyModel_offsets_,
      -1,
      -1,
      -1,
      sizeof(tLowPolyModel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyModel, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyModel, _is_default_instance_));
  tViewer3D_descriptor_ = file->message_type(10);
  static const int tViewer3D_offsets_[42] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, lightambientcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, lightdiffusecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, lightspecularcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, lightsecondarycolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, lighttertiarycolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, backgroundcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, gridcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, cagecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, camerarotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, cameraposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, lightposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, axisscl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, xemakosexample_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, showwireframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, cageopacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, diffusegiintensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, showao_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, ssaocontrast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, shadowarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, lightindiretintensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, showhighpolys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, showstarfield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, showblockers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, hdrthreshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, ssaobright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, ssaoblurradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, showgrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, parallaxstrength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, ssaoatten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, cameraorbitdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, useglow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, ssaoenabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, shadowbias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, ssaoradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, lightintensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, exposure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, cameraorbitautocenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, castshadows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, shownormals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, maxtessellationlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, showtangents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, glowintensity_),
  };
  tViewer3D_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      tViewer3D_descriptor_,
      tViewer3D::default_instance_,
      tViewer3D_offsets_,
      -1,
      -1,
      -1,
      sizeof(tViewer3D),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, _is_default_instance_));
  Settings_descriptor_ = file->message_type(11);
  static const int Settings_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, highpolymodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, lowpolymodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, generatemaps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, viewer3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, version_),
  };
  Settings_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Settings_descriptor_,
      Settings::default_instance_,
      Settings_offsets_,
      -1,
      -1,
      -1,
      sizeof(Settings),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_xnormal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnspecifiedType_descriptor_, &UnspecifiedType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      tMatrix_descriptor_, &tMatrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      tDetail_descriptor_, &tDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      tRGB8_descriptor_, &tRGB8::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      tHighPolyMesh_descriptor_, &tHighPolyMesh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      tLowPolyMesh_descriptor_, &tLowPolyMesh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      tVector3_descriptor_, &tVector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      tGenerateMaps_descriptor_, &tGenerateMaps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      tHighPolyModel_descriptor_, &tHighPolyModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      tLowPolyModel_descriptor_, &tLowPolyModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      tViewer3D_descriptor_, &tViewer3D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Settings_descriptor_, &Settings::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_xnormal_2eproto() {
  delete UnspecifiedType::default_instance_;
  delete UnspecifiedType_reflection_;
  delete tMatrix::default_instance_;
  delete tMatrix_reflection_;
  delete tDetail::default_instance_;
  delete tDetail_reflection_;
  delete tRGB8::default_instance_;
  delete tRGB8_reflection_;
  delete tHighPolyMesh::default_instance_;
  delete tHighPolyMesh_reflection_;
  delete tLowPolyMesh::default_instance_;
  delete tLowPolyMesh_reflection_;
  delete tVector3::default_instance_;
  delete tVector3_reflection_;
  delete tGenerateMaps::default_instance_;
  delete tGenerateMaps_reflection_;
  delete tHighPolyModel::default_instance_;
  delete tHighPolyModel_reflection_;
  delete tLowPolyModel::default_instance_;
  delete tLowPolyModel_reflection_;
  delete tViewer3D::default_instance_;
  delete tViewer3D_reflection_;
  delete Settings::default_instance_;
  delete Settings_reflection_;
}

void protobuf_AddDesc_xnormal_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_xnormal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rxnormal.proto\032 google/protobuf/descrip"
    "tor.proto\"9\n\017UnspecifiedType\022\026\n\016baseObje"
    "ctType\030\001 \001(\t\022\016\n\006object\030\002 \001(\014\"~\n\007tMatrix\022"
    "\013\n\003e13\030\001 \001(\002\022\013\n\003e12\030\002 \001(\002\022\013\n\003e23\030\003 \001(\002\022\013"
    "\n\003e31\030\004 \001(\002\022\013\n\003e11\030\005 \001(\002\022\013\n\003e22\030\006 \001(\002\022\013\n"
    "\003e33\030\007 \001(\002\022\013\n\003e21\030\010 \001(\002\022\013\n\003e32\030\t \001(\002\"\325\002\n"
    "\007tDetail\022%\n\006Method\030\001 \001(\0162\025.tDetail.eHM2N"
    "MMethod\022\r\n\005Scale\030\002 \001(\002\022\014\n\004File\030\003 \001(\t\"\205\002\n"
    "\014eHM2NMMethod\022\035\n\020eHM2NMMethod_3x3\020\000\032\007\202\265\030"
    "\0033x3\022\'\n\025eHM2NMMethod_4Samples\020\001\032\014\202\265\030\0104Sa"
    "mples\022\035\n\020eHM2NMMethod_5x5\020\002\032\007\202\265\030\0035x5\022#\n\023"
    "eHM2NMMethod_PRE3x3\020\003\032\n\202\265\030\006PRE3x3\022#\n\023eHM"
    "2NMMethod_PRE5x5\020\004\032\n\202\265\030\006PRE5x5\022!\n\022eHM2NM"
    "Method_SO3x3\020\005\032\t\202\265\030\005SO3x3\022!\n\022eHM2NMMetho"
    "d_SO5x5\020\006\032\t\202\265\030\005SO5x5\"(\n\005tRGB8\022\t\n\001R\030\001 \001(\r"
    "\022\t\n\001G\030\002 \001(\r\022\t\n\001B\030\003 \001(\r\"\377\002\n\rtHighPolyMesh"
    "\022\014\n\004File\030\001 \001(\t\022\026\n\016PositionOffset\030\002 \001(\t\022\034"
    "\n\024IgnorePerVertexColor\030\003 \001(\010\0225\n\016AverageN"
    "ormals\030\004 \001(\0162\035.tHighPolyMesh.eSmoothNorm"
    "als\022\017\n\007Visible\030\005 \001(\010\022\025\n\rBaseTexIsTSNM\030\006 "
    "\001(\010\022\r\n\005Scale\030\007 \001(\002\"\273\001\n\016eSmoothNormals\0225\n"
    "\035eSmoothNormals_AverageNormals\020\000\032\022\212\265\030\016Av"
    "erageNormals\0223\n\034eSmoothNormals_HardenNor"
    "mals\020\001\032\021\212\265\030\rHardenNormals\022=\n!eSmoothNorm"
    "als_UseExportedNormals\020\002\032\026\212\265\030\022UseExporte"
    "dNormals\"\210\017\n\014tLowPolyMesh\022\017\n\007BaseTex\030\001 \001"
    "(\t\022\024\n\014BlockersFile\030\002 \001(\t\0225\n\014VVDMSwizzleZ"
    "\030\003 \001(\0162\037.tLowPolyMesh.eSwizzleComponent\022"
    "\036\n\026FresnelRefractiveIndex\030\004 \001(\002\022\017\n\007UOffs"
    "et\030\005 \001(\002\022\026\n\016ReflectHDRMult\030\006 \001(\002\0229\n\020Tran"
    "sparencyMode\030\007 \001(\0162\037.tLowPolyMesh.eTrans"
    "parencyMode\022\017\n\007VOffset\030\010 \001(\002\022\022\n\nReflectT"
    "ex\030\t \001(\t\022\033\n\023MaxRayDistanceFront\030\n \001(\002\022\024\n"
    "\014DiffuseGITex\030\013 \001(\t\0223\n\rNormapMapType\030\014 \001"
    "(\0162\034.tLowPolyMesh.eNormalMapType\022\014\n\004File"
    "\030\r \001(\t\0225\n\014VVDMSwizzleY\030\016 \001(\0162\037.tLowPolyM"
    "esh.eSwizzleComponent\022\020\n\010CageFile\030\017 \001(\t\022"
    "\021\n\tHeightTex\030\020 \001(\t\0223\n\nNMSwizzleY\030\021 \001(\0162\037"
    ".tLowPolyMesh.eSwizzleComponent\022\024\n\014Batch"
    "Protect\030\022 \001(\010\022\026\n\016AlphaTestValue\030\023 \001(\014\022\024\n"
    "\014Subdivisions\030\024 \001(\r\022\r\n\005Matte\030\025 \001(\010\022\026\n\016Av"
    "erageNormals\030\026 \001(\010\022\034\n\024VectorDisplacement"
    "TS\030\027 \001(\010\022\017\n\007UseCage\030\030 \001(\010\022\017\n\007Visible\030\031 \001"
    "(\010\0223\n\nNMSwizzleX\030\032 \001(\0162\037.tLowPolyMesh.eS"
    "wizzleComponent\022\020\n\010GlossTex\030\033 \001(\t\022\r\n\005Sca"
    "le\030\034 \001(\002\0223\n\nNMSwizzleZ\030\035 \001(\0162\037.tLowPolyM"
    "esh.eSwizzleComponent\022\035\n\025VectorDisplacem"
    "entTex\030\036 \001(\t\0225\n\014VVDMSwizzleX\030\037 \001(\0162\037.tLo"
    "wPolyMesh.eSwizzleComponent\022\032\n\022UsePerVer"
    "texColors\030  \001(\010\022+\n#HighpolyNormalsOverri"
    "deTangentSpace\030! \001(\010\022\017\n\007LMAOTex\030\" \001(\t\022\017\n"
    "\007SpecTex\030# \001(\t\022\017\n\007NormTex\030$ \001(\t\0220\n\026Highp"
    "olyNormalOverride\030% \001(\0132\020.UnspecifiedTyp"
    "e\022\026\n\016PositionOffset\030& \001(\t\022\032\n\022MaxRayDista"
    "nceBack\030\' \001(\002\022\022\n\nUseFresnel\030( \001(\010\022\026\n\016Rec"
    "eiveShadows\030) \001(\010\022\023\n\013EmissiveTex\030* \001(\t\022\024"
    "\n\014BackfaceCull\030+ \001(\010\022\023\n\013CastShadows\030, \001("
    "\010\022\020\n\010MatchUVs\030- \001(\010\"\337\001\n\021eSwizzleComponen"
    "t\022 \n\024eSwizzleComponent_X0\020\000\032\006\222\265\030\002X+\022 \n\024e"
    "SwizzleComponent_X1\020\001\032\006\222\265\030\002X-\022 \n\024eSwizzl"
    "eComponent_Y0\020\002\032\006\222\265\030\002Y+\022 \n\024eSwizzleCompo"
    "nent_Y1\020\003\032\006\222\265\030\002Y-\022 \n\024eSwizzleComponent_Z"
    "0\020\004\032\006\222\265\030\002Z+\022 \n\024eSwizzleComponent_Z1\020\005\032\006\222"
    "\265\030\002Z-\"\361\001\n\021eTransparencyMode\022$\n\026eTranspar"
    "encyMode_1Bit\020\000\032\010\242\265\030\0041Bit\0224\n\036eTransparen"
    "cyMode_AdditiveGlow\020\001\032\020\242\265\030\014AdditiveGlow\022"
    "&\n\027eTransparencyMode_Blend\020\002\032\t\242\265\030\005Blend\022"
    "$\n\026eTransparencyMode_None\020\003\032\010\242\265\030\004None\0222\n"
    "\035eTransparencyMode_ScreenGlass\020\004\032\017\242\265\030\013Sc"
    "reenGlass\"\247\001\n\016eNormalMapType\022-\n\031eNormalM"
    "apType_Derivative\020\000\032\016\232\265\030\nDerivative\0221\n\033e"
    "NormalMapType_Object_space\020\001\032\020\232\265\030\014Object"
    "-space\0223\n\034eNormalMapType_Tangent_space\020\002"
    "\032\021\232\265\030\rTangent-space\"+\n\010tVector3\022\t\n\001x\030\001 \001"
    "(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\361\'\n\rtGenerateMa"
    "ps\022!\n\021NMBackgroundColor\030\001 \001(\0132\006.tRGB8\022!\n"
    "\021HMBackgroundColor\030\002 \001(\0132\006.tRGB8\022/\n\037Bake"
    "HighpolyBaseTextureNoTexCol\030\003 \001(\0132\006.tRGB"
    "8\0226\n&BakeHighpolyBaseTextureBackgroundCo"
    "lor\030\004 \001(\0132\006.tRGB8\022.\n\036RenderWireframeBack"
    "groundColor\030\005 \001(\0132\006.tRGB8\022\"\n\022RenderWiref"
    "rameCol\030\006 \001(\0132\006.tRGB8\022\033\n\013RenderCWCol\030\007 \001"
    "(\0132\006.tRGB8\022\035\n\rRenderSeamCol\030\010 \001(\0132\006.tRGB"
    "8\022!\n\021RenderRayFailsCol\030\t \001(\0132\006.tRGB8\022\037\n\017"
    "AOOccludedColor\030\n \001(\0132\006.tRGB8\022!\n\021AOUnocc"
    "ludedColor\030\013 \001(\0132\006.tRGB8\022!\n\021AOBackground"
    "Color\030\014 \001(\0132\006.tRGB8\022#\n\023BentBackgroundCol"
    "or\030\r \001(\0132\006.tRGB8\022\"\n\022PRTBackgroundColor\030\016"
    " \001(\0132\006.tRGB8\022(\n\030ConvexityBackgroundColor"
    "\030\017 \001(\0132\006.tRGB8\022(\n\030ThicknessBackgroundCol"
    "or\030\020 \001(\0132\006.tRGB8\022(\n\030ProximityBackgroundC"
    "olor\030\021 \001(\0132\006.tRGB8\022%\n\025CavityBackgroundCo"
    "lor\030\022 \001(\0132\006.tRGB8\022\"\n\022VDMBackgroundColor\030"
    "\023 \001(\0132\006.tRGB8\022$\n\024RadNMBackgroundColor\030\024 "
    "\001(\0132\006.tRGB8\022#\n\023CurvBackgroundColor\030\025 \001(\013"
    "2\006.tRGB8\022&\n\026DerivNMBackgroundColor\030\026 \001(\013"
    "2\006.tRGB8\022&\n\026TransluBackgroundColor\030\027 \001(\013"
    "2\006.tRGB8\022.\n\036BakeHighpolyVColsBackgroundC"
    "ol\030\030 \001(\0132\006.tRGB8\022\026\n\016ClosestIfFails\030\031 \001(\010"
    "\022\034\n\024DirectionsTonemapMax\030\032 \001(\002\022\025\n\rCurvMo"
    "nocrome\030\033 \001(\010\022\016\n\006AOBias\030\034 \001(\002\022\030\n\020BentTan"
    "gentSpace\030\035 \001(\010\022\022\n\nGenTranslu\030\036 \001(\010\0226\n\016A"
    "ODistribution\030\037 \001(\0162\036.tGenerateMaps.eAOD"
    "istribution\022\024\n\014PRTThreshold\030  \001(\002\022\034\n\024Dir"
    "ectionsTonemapMin\030! \001(\002\0228\n\020CurvDistribut"
    "ion\030\" \001(\0162\036.tGenerateMaps.eAODistributio"
    "n\022\022\n\nBentJitter\030# \001(\010\0228\n\020BentDistributio"
    "n\030$ \001(\0162\036.tGenerateMaps.eAODistribution\022"
    "\037\n\027BakeHighpolyBaseTexture\030% \001(\010\022\024\n\014GenC"
    "onvexity\030& \001(\010\022#\n\033RadiosityNormalsAttenL"
    "inear\030\' \001(\002\022\034\n\024TransluRaysPerSample\030( \001("
    "\r\022\032\n\022CurvSearchDistance\030) \001(\002\0222\n\010Swizzle"
    "Z\030* \001(\0162 .tGenerateMaps.eSwizzleComponen"
    "t\022\023\n\013TransluBias\030+ \001(\002\022\033\n\023PRTLimitRayDis"
    "tance\030, \001(\010\022\017\n\007GenBent\030- \001(\010\022\032\n\022AOLimitR"
    "ayDistance\030. \001(\010\022\031\n\021CurvRaysPerSample\030/ "
    "\001(\r\022D\n\034RadiosityNormalsDistribution\0300 \001("
    "\0162\036.tGenerateMaps.eAODistribution\022%\n\035Rad"
    "iosityNormalsRaysPerSample\0301 \001(\r\022\022\n\nCurv"
    "Jitter\0302 \001(\010\022\024\n\014TangentSpace\0303 \001(\010\022*\n\"Ra"
    "diosityNormalsAllowPureOcclusion\0304 \001(\010\0226"
    "\n\014BentSwizzleX\0305 \001(\0162 .tGenerateMaps.eSw"
    "izzleComponent\0222\n\010SwizzleY\0306 \001(\0162 .tGene"
    "rateMaps.eSwizzleComponent\022\017\n\007GenCurv\0307 "
    "\001(\010\022\021\n\tPRTJitter\0308 \001(\010\022\030\n\020AOAttenCuadrat"
    "ic\0309 \001(\002\022\025\n\rBentConeAngle\030: \001(\002\0222\n\010Swizz"
    "leX\030; \001(\0162 .tGenerateMaps.eSwizzleCompon"
    "ent\022\026\n\016RenderRayFails\030< \001(\010\022\032\n\022CavitySea"
    "rchRadius\030= \001(\002\022 \n\030RadiosityNormalsEncod"
    "eAO\030> \001(\010\022\030\n\020TransluConeAngle\030\? \001(\002\022\031\n\021B"
    "entRaysPerSample\030@ \001(\r\022\026\n\016ConvexityScale"
    "\030A \001(\002\022!\n\031RadiosityNormalsConeAngle\030B \001("
    "\002\022\014\n\004File\030C \001(\t\022\022\n\nGenDerivNM\030D \001(\010\022\034\n\024B"
    "entLimitRayDistance\030E \001(\010\022\017\n\007PRTBias\030F \001"
    "(\002\022\027\n\017RenderWireframe\030G \001(\010\022\024\n\014PRTNormal"
    "ize\030H \001(\010\022\r\n\005GenAO\030I \001(\010\022\024\n\014PRTConeAngle"
    "\030J \001(\002\022\016\n\006Height\030K \001(\r\022&\n\036RadiosityNorma"
    "lsAttenCuadratic\030L \001(\002\022:\n\021DirectionsTone"
    "map\030M \001(\0162\037.tGenerateMaps.eHMNormalizati"
    "on\022\024\n\014DirectionsTS\030N \001(\010\022\030\n\020PRTRaysPerSa"
    "mple\030O \001(\r\022\023\n\013EdgePadding\030P \001(\r\022<\n\022Direc"
    "tionsSwizzleZ\030Q \001(\0162 .tGenerateMaps.eSwi"
    "zzleComponent\022\033\n\023AOAllowPureOccluded\030R \001"
    "(\010\022\034\n\024AOIgnoreBackfaceHits\030S \001(\010\022\033\n\023Cavi"
    "tyRaysPerSample\030T \001(\r\022\027\n\017AOAttenConstant"
    "\030U \001(\002\022\024\n\014CavityJitter\030V \001(\010\022\030\n\020HeightTo"
    "nemapMax\030W \001(\002\022\025\n\rGenDirections\030X \001(\010\022(\n"
    " RadiosityNormalsLimitRayDistance\030Y \001(\010\022"
    "\030\n\020HeightTonemapMin\030Z \001(\002\022\036\n\026RadiosityNo"
    "rmalsJitter\030[ \001(\010\022<\n\022DirectionsSwizzleY\030"
    "\\ \001(\0162 .tGenerateMaps.eSwizzleComponent\022"
    "\r\n\005Width\030] \001(\r\0226\n.BakeHighpolyBaseTextur"
    "eDrawObjectIDIfNoTexture\030^ \001(\010\022\021\n\tConcav"
    "ity\030_ \001(\010\022<\n\022DirectionsSwizzleX\030` \001(\0162 ."
    "tGenerateMaps.eSwizzleComponent\022\022\n\nGenNo"
    "rmals\030a \001(\010\022\036\n\026ProximityRaysPerSample\030b "
    "\001(\r\022\022\n\nGenHeights\030c \001(\010\022%\n\035RadiosityNorm"
    "alsAttenConstant\030d \001(\002\022\024\n\014GenProximity\030e"
    " \001(\010\022\016\n\006GenPRT\030f \001(\010\022\026\n\016CavityContrast\030g"
    " \001(\002\022=\n\030RadiosityNormalsCoordSys\030h \001(\0162\033"
    ".tGenerateMaps.eRNMCoordSys\022\025\n\rTransluJi"
    "tter\030i \001(\010\022\027\n\017AORaysPerSample\030j \001(\r\022\020\n\010B"
    "entBias\030k \001(\002\022\037\n\027DiscardRayBackFacesHits"
    "\030l \001(\010\022\023\n\013AOConeAngle\030m \001(\002\0226\n\014BentSwizz"
    "leY\030n \001(\0162 .tGenerateMaps.eSwizzleCompon"
    "ent\022\034\n\024RadiosityNormalsBias\030o \001(\002\022 \n\030Rad"
    "iosityNormalsContrast\030p \001(\002\022\023\n\013CavitySte"
    "ps\030q \001(\r\022(\n\002AA\030r \001(\0162\034.tGenerateMaps.eAn"
    "tialiasing\0226\n\014BentSwizzleZ\030s \001(\0162 .tGene"
    "rateMaps.eSwizzleComponent\022\022\n\nBucketSize"
    "\030t \001(\r\022\025\n\rCurvConeAngle\030u \001(\002\022\023\n\013Translu"
    "Dist\030v \001(\002\022\020\n\010AOJitter\030w \001(\010\022\020\n\010CurvBias"
    "\030x \001(\002\022\023\n\013GenWireRays\030y \001(\010\0224\n\rCurvAlgor"
    "ithm\030z \001(\0162\035.tGenerateMaps.eCurvAlgorith"
    "m\022;\n\023TransluDistribution\030{ \001(\0162\036.tGenera"
    "teMaps.eAODistribution\022\025\n\rAOAttenLinear\030"
    "| \001(\002\022!\n\031ProximityLimitRayDistance\030} \001(\010"
    "\022\033\n\023GenRadiosityNormals\030~ \001(\010\022\032\n\022Proximi"
    "tyConeAngle\030\177 \001(\002\0227\n\rHeightTonemap\030\200\001 \001("
    "\0162\037.tGenerateMaps.eHMNormalization\022\022\n\tGe"
    "nCavity\030\201\001 \001(\010\022\032\n\021BakeHighpolyVCols\030\202\001 \001"
    "(\010\"\217\001\n\017eAODistribution\022&\n\026eAODistributio"
    "n_Cosine\020\000\032\n\252\265\030\006Cosine\022*\n\030eAODistributio"
    "n_CosineSq\020\001\032\014\252\265\030\010CosineSq\022(\n\027eAODistrib"
    "ution_Uniform\020\002\032\013\252\265\030\007Uniform\"\337\001\n\021eSwizzl"
    "eComponent\022 \n\024eSwizzleComponent_X0\020\000\032\006\262\265"
    "\030\002X+\022 \n\024eSwizzleComponent_X1\020\001\032\006\262\265\030\002X-\022 "
    "\n\024eSwizzleComponent_Y0\020\002\032\006\262\265\030\002Y+\022 \n\024eSwi"
    "zzleComponent_Y1\020\003\032\006\262\265\030\002Y-\022 \n\024eSwizzleCo"
    "mponent_Z0\020\004\032\006\262\265\030\002Z+\022 \n\024eSwizzleComponen"
    "t_Z1\020\005\032\006\262\265\030\002Z-\"\221\001\n\020eHMNormalization\0221\n\034e"
    "HMNormalization_Interactive\020\000\032\017\272\265\030\013Inter"
    "active\022\'\n\027eHMNormalization_Manual\020\001\032\n\272\265\030"
    "\006Manual\022!\n\024eHMNormalization_Raw\020\002\032\007\272\265\030\003R"
    "aw\"}\n\014eRNMCoordSys\022\037\n\021eRNMCoordSys_AliB\020"
    "\000\032\010\302\265\030\004AliB\022\'\n\025eRNMCoordSys_Direct3D\020\001\032\014"
    "\302\265\030\010Direct3D\022#\n\023eRNMCoordSys_OpenGL\020\002\032\n\302"
    "\265\030\006OpenGL\"c\n\reAntialiasing\022\032\n\017eAntialias"
    "ing_1\020\000\032\005\312\265\030\0011\022\032\n\017eAntialiasing_2\020\001\032\005\312\265\030"
    "\0012\022\032\n\017eAntialiasing_4\020\002\032\005\312\265\030\0014\"d\n\016eCurvA"
    "lgorithm\022\'\n\026eCurvAlgorithm_Average\020\000\032\013\322\265"
    "\030\007Average\022)\n\027eCurvAlgorithm_Gaussian\020\001\032\014"
    "\322\265\030\010Gaussian\"Y\n\016tHighPolyModel\022\034\n\004Mesh\030\001"
    " \003(\0132\016.tHighPolyMesh\022\017\n\007BaseTex\030\002 \001(\t\022\030\n"
    "\020DefaultMeshScale\030\003 \001(\002\"F\n\rtLowPolyModel"
    "\022\033\n\004Mesh\030\001 \003(\0132\r.tLowPolyMesh\022\030\n\020Default"
    "MeshScale\030\002 \001(\002\"\264\010\n\ttViewer3D\022!\n\021LightAm"
    "bientColor\030\001 \001(\0132\006.tRGB8\022!\n\021LightDiffuse"
    "Color\030\002 \001(\0132\006.tRGB8\022\"\n\022LightSpecularColo"
    "r\030\003 \001(\0132\006.tRGB8\022#\n\023LightSecondaryColor\030\004"
    " \001(\0132\006.tRGB8\022\"\n\022LightTertiaryColor\030\005 \001(\013"
    "2\006.tRGB8\022\037\n\017BackgroundColor\030\006 \001(\0132\006.tRGB"
    "8\022\031\n\tGridColor\030\007 \001(\0132\006.tRGB8\022\031\n\tCageColo"
    "r\030\010 \001(\0132\006.tRGB8\022 \n\016CameraRotation\030\t \001(\0132"
    "\010.tMatrix\022!\n\016CameraPosition\030\n \001(\0132\t.tVec"
    "tor3\022 \n\rLightPosition\030\013 \001(\0132\t.tVector3\022\017"
    "\n\007AxisScl\030\014 \001(\002\022\026\n\016XemakosExample\030\r \001(\010\022"
    "\025\n\rShowWireframe\030\016 \001(\010\022\023\n\013CageOpacity\030\017 "
    "\001(\002\022\032\n\022DiffuseGIIntensity\030\020 \001(\002\022\016\n\006ShowA"
    "O\030\021 \001(\010\022\024\n\014SSAOContrast\030\022 \001(\002\022\022\n\nShadowA"
    "rea\030\023 \001(\002\022\035\n\025LightIndiretIntensity\030\024 \001(\002"
    "\022\025\n\rShowHighpolys\030\025 \001(\010\022\025\n\rShowStarfield"
    "\030\026 \001(\010\022\024\n\014ShowBlockers\030\027 \001(\010\022\024\n\014HDRThres"
    "hold\030\030 \001(\002\022\022\n\nSSAOBright\030\031 \001(\002\022\026\n\016SSAOBl"
    "urRadius\030\032 \001(\002\022\020\n\010ShowGrid\030\033 \001(\010\022\030\n\020Para"
    "llaxStrength\030\034 \001(\002\022\021\n\tSSAOAtten\030\035 \001(\002\022\033\n"
    "\023CameraOrbitDistance\030\036 \001(\002\022\017\n\007UseGlow\030\037 "
    "\001(\010\022\023\n\013SSAOEnabled\030  \001(\010\022\022\n\nShadowBias\030!"
    " \001(\002\022\022\n\nSSAORadius\030\" \001(\002\022\026\n\016LightIntensi"
    "ty\030# \001(\002\022\020\n\010Exposure\030$ \001(\002\022\035\n\025CameraOrbi"
    "tAutoCenter\030% \001(\010\022\023\n\013CastShadows\030& \001(\010\022\023"
    "\n\013ShowNormals\030\' \001(\010\022\034\n\024MaxTessellationLe"
    "vel\030( \001(\003\022\024\n\014ShowTangents\030) \001(\010\022\025\n\rGlowI"
    "ntensity\030* \001(\002\"\307\001\n\010Settings\022&\n\rHighPolyM"
    "odel\030\001 \001(\0132\017.tHighPolyModel\022$\n\014LowPolyMo"
    "del\030\002 \001(\0132\016.tLowPolyModel\022$\n\014GenerateMap"
    "s\030\003 \001(\0132\016.tGenerateMaps\022\030\n\006Detail\030\004 \001(\0132"
    "\010.tDetail\022\034\n\010Viewer3D\030\005 \001(\0132\n.tViewer3D\022"
    "\017\n\007Version\030\006 \001(\t:C\n\026my_eHM2NMMethod_opti"
    "on\022!.google.protobuf.EnumValueOptions\030\320\206"
    "\003 \001(\t:E\n\030my_eSmoothNormals_option\022!.goog"
    "le.protobuf.EnumValueOptions\030\321\206\003 \001(\t:H\n\033"
    "my_eSwizzleComponent_option\022!.google.pro"
    "tobuf.EnumValueOptions\030\322\206\003 \001(\t:E\n\030my_eNo"
    "rmalMapType_option\022!.google.protobuf.Enu"
    "mValueOptions\030\323\206\003 \001(\t:H\n\033my_eTransparenc"
    "yMode_option\022!.google.protobuf.EnumValue"
    "Options\030\324\206\003 \001(\t:F\n\031my_eAODistribution_op"
    "tion\022!.google.protobuf.EnumValueOptions\030"
    "\325\206\003 \001(\t:I\n\034my_eSwizzleComponent2_option\022"
    "!.google.protobuf.EnumValueOptions\030\326\206\003 \001"
    "(\t:G\n\032my_eHMNormalization_option\022!.googl"
    "e.protobuf.EnumValueOptions\030\327\206\003 \001(\t:C\n\026m"
    "y_eRNMCoordSys_option\022!.google.protobuf."
    "EnumValueOptions\030\330\206\003 \001(\t:D\n\027my_eAntialia"
    "sing_option\022!.google.protobuf.EnumValueO"
    "ptions\030\331\206\003 \001(\t:E\n\030my_eCurvAlgorithm_opti"
    "on\022!.google.protobuf.EnumValueOptions\030\332\206"
    "\003 \001(\tb\006proto3", 10333);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "xnormal.proto", &protobuf_RegisterTypes);
  UnspecifiedType::default_instance_ = new UnspecifiedType();
  tMatrix::default_instance_ = new tMatrix();
  tDetail::default_instance_ = new tDetail();
  tRGB8::default_instance_ = new tRGB8();
  tHighPolyMesh::default_instance_ = new tHighPolyMesh();
  tLowPolyMesh::default_instance_ = new tLowPolyMesh();
  tVector3::default_instance_ = new tVector3();
  tGenerateMaps::default_instance_ = new tGenerateMaps();
  tHighPolyModel::default_instance_ = new tHighPolyModel();
  tLowPolyModel::default_instance_ = new tLowPolyModel();
  tViewer3D::default_instance_ = new tViewer3D();
  Settings::default_instance_ = new Settings();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::EnumValueOptions::default_instance(),
    50000, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::EnumValueOptions::default_instance(),
    50001, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::EnumValueOptions::default_instance(),
    50002, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::EnumValueOptions::default_instance(),
    50003, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::EnumValueOptions::default_instance(),
    50004, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::EnumValueOptions::default_instance(),
    50005, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::EnumValueOptions::default_instance(),
    50006, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::EnumValueOptions::default_instance(),
    50007, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::EnumValueOptions::default_instance(),
    50008, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::EnumValueOptions::default_instance(),
    50009, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::EnumValueOptions::default_instance(),
    50010, 9, false, false);
  UnspecifiedType::default_instance_->InitAsDefaultInstance();
  tMatrix::default_instance_->InitAsDefaultInstance();
  tDetail::default_instance_->InitAsDefaultInstance();
  tRGB8::default_instance_->InitAsDefaultInstance();
  tHighPolyMesh::default_instance_->InitAsDefaultInstance();
  tLowPolyMesh::default_instance_->InitAsDefaultInstance();
  tVector3::default_instance_->InitAsDefaultInstance();
  tGenerateMaps::default_instance_->InitAsDefaultInstance();
  tHighPolyModel::default_instance_->InitAsDefaultInstance();
  tLowPolyModel::default_instance_->InitAsDefaultInstance();
  tViewer3D::default_instance_->InitAsDefaultInstance();
  Settings::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_xnormal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_xnormal_2eproto {
  StaticDescriptorInitializer_xnormal_2eproto() {
    protobuf_AddDesc_xnormal_2eproto();
  }
} static_descriptor_initializer_xnormal_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnspecifiedType::kBaseObjectTypeFieldNumber;
const int UnspecifiedType::kObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnspecifiedType::UnspecifiedType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UnspecifiedType)
}

void UnspecifiedType::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UnspecifiedType::UnspecifiedType(const UnspecifiedType& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UnspecifiedType)
}

void UnspecifiedType::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  baseobjecttype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UnspecifiedType::~UnspecifiedType() {
  // @@protoc_insertion_point(destructor:UnspecifiedType)
  SharedDtor();
}

void UnspecifiedType::SharedDtor() {
  baseobjecttype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UnspecifiedType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnspecifiedType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnspecifiedType_descriptor_;
}

const UnspecifiedType& UnspecifiedType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xnormal_2eproto();
  return *default_instance_;
}

UnspecifiedType* UnspecifiedType::default_instance_ = NULL;

UnspecifiedType* UnspecifiedType::New(::google::protobuf::Arena* arena) const {
  UnspecifiedType* n = new UnspecifiedType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnspecifiedType::Clear() {
// @@protoc_insertion_point(message_clear_start:UnspecifiedType)
  baseobjecttype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UnspecifiedType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UnspecifiedType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string baseObjectType = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_baseobjecttype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->baseobjecttype().data(), this->baseobjecttype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UnspecifiedType.baseObjectType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_object;
        break;
      }

      // optional bytes object = 2;
      case 2: {
        if (tag == 18) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UnspecifiedType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UnspecifiedType)
  return false;
#undef DO_
}

void UnspecifiedType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UnspecifiedType)
  // optional string baseObjectType = 1;
  if (this->baseobjecttype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->baseobjecttype().data(), this->baseobjecttype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UnspecifiedType.baseObjectType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->baseobjecttype(), output);
  }

  // optional bytes object = 2;
  if (this->object().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->object(), output);
  }

  // @@protoc_insertion_point(serialize_end:UnspecifiedType)
}

::google::protobuf::uint8* UnspecifiedType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UnspecifiedType)
  // optional string baseObjectType = 1;
  if (this->baseobjecttype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->baseobjecttype().data(), this->baseobjecttype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UnspecifiedType.baseObjectType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->baseobjecttype(), target);
  }

  // optional bytes object = 2;
  if (this->object().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->object(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:UnspecifiedType)
  return target;
}

int UnspecifiedType::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:UnspecifiedType)
  int total_size = 0;

  // optional string baseObjectType = 1;
  if (this->baseobjecttype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->baseobjecttype());
  }

  // optional bytes object = 2;
  if (this->object().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->object());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnspecifiedType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UnspecifiedType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UnspecifiedType* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UnspecifiedType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UnspecifiedType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UnspecifiedType)
    MergeFrom(*source);
  }
}

void UnspecifiedType::MergeFrom(const UnspecifiedType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UnspecifiedType)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.baseobjecttype().size() > 0) {

    baseobjecttype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.baseobjecttype_);
  }
  if (from.object().size() > 0) {

    object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
  }
}

void UnspecifiedType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UnspecifiedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnspecifiedType::CopyFrom(const UnspecifiedType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UnspecifiedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnspecifiedType::IsInitialized() const {

  return true;
}

void UnspecifiedType::Swap(UnspecifiedType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnspecifiedType::InternalSwap(UnspecifiedType* other) {
  baseobjecttype_.Swap(&other->baseobjecttype_);
  object_.Swap(&other->object_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnspecifiedType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnspecifiedType_descriptor_;
  metadata.reflection = UnspecifiedType_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnspecifiedType

// optional string baseObjectType = 1;
void UnspecifiedType::clear_baseobjecttype() {
  baseobjecttype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UnspecifiedType::baseobjecttype() const {
  // @@protoc_insertion_point(field_get:UnspecifiedType.baseObjectType)
  return baseobjecttype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnspecifiedType::set_baseobjecttype(const ::std::string& value) {
  
  baseobjecttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UnspecifiedType.baseObjectType)
}
 void UnspecifiedType::set_baseobjecttype(const char* value) {
  
  baseobjecttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UnspecifiedType.baseObjectType)
}
 void UnspecifiedType::set_baseobjecttype(const char* value, size_t size) {
  
  baseobjecttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UnspecifiedType.baseObjectType)
}
 ::std::string* UnspecifiedType::mutable_baseobjecttype() {
  
  // @@protoc_insertion_point(field_mutable:UnspecifiedType.baseObjectType)
  return baseobjecttype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UnspecifiedType::release_baseobjecttype() {
  // @@protoc_insertion_point(field_release:UnspecifiedType.baseObjectType)
  
  return baseobjecttype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnspecifiedType::set_allocated_baseobjecttype(::std::string* baseobjecttype) {
  if (baseobjecttype != NULL) {
    
  } else {
    
  }
  baseobjecttype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), baseobjecttype);
  // @@protoc_insertion_point(field_set_allocated:UnspecifiedType.baseObjectType)
}

// optional bytes object = 2;
void UnspecifiedType::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UnspecifiedType::object() const {
  // @@protoc_insertion_point(field_get:UnspecifiedType.object)
  return object_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnspecifiedType::set_object(const ::std::string& value) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UnspecifiedType.object)
}
 void UnspecifiedType::set_object(const char* value) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UnspecifiedType.object)
}
 void UnspecifiedType::set_object(const void* value, size_t size) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UnspecifiedType.object)
}
 ::std::string* UnspecifiedType::mutable_object() {
  
  // @@protoc_insertion_point(field_mutable:UnspecifiedType.object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UnspecifiedType::release_object() {
  // @@protoc_insertion_point(field_release:UnspecifiedType.object)
  
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnspecifiedType::set_allocated_object(::std::string* object) {
  if (object != NULL) {
    
  } else {
    
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:UnspecifiedType.object)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tMatrix::kE13FieldNumber;
const int tMatrix::kE12FieldNumber;
const int tMatrix::kE23FieldNumber;
const int tMatrix::kE31FieldNumber;
const int tMatrix::kE11FieldNumber;
const int tMatrix::kE22FieldNumber;
const int tMatrix::kE33FieldNumber;
const int tMatrix::kE21FieldNumber;
const int tMatrix::kE32FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tMatrix::tMatrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tMatrix)
}

void tMatrix::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

tMatrix::tMatrix(const tMatrix& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tMatrix)
}

void tMatrix::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  e13_ = 0;
  e12_ = 0;
  e23_ = 0;
  e31_ = 0;
  e11_ = 0;
  e22_ = 0;
  e33_ = 0;
  e21_ = 0;
  e32_ = 0;
}

tMatrix::~tMatrix() {
  // @@protoc_insertion_point(destructor:tMatrix)
  SharedDtor();
}

void tMatrix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tMatrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tMatrix_descriptor_;
}

const tMatrix& tMatrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xnormal_2eproto();
  return *default_instance_;
}

tMatrix* tMatrix::default_instance_ = NULL;

tMatrix* tMatrix::New(::google::protobuf::Arena* arena) const {
  tMatrix* n = new tMatrix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:tMatrix)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(tMatrix, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<tMatrix*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(e13_, e21_);
  e32_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool tMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tMatrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float e13 = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e13_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_e12;
        break;
      }

      // optional float e12 = 2;
      case 2: {
        if (tag == 21) {
         parse_e12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e12_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_e23;
        break;
      }

      // optional float e23 = 3;
      case 3: {
        if (tag == 29) {
         parse_e23:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e23_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_e31;
        break;
      }

      // optional float e31 = 4;
      case 4: {
        if (tag == 37) {
         parse_e31:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e31_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_e11;
        break;
      }

      // optional float e11 = 5;
      case 5: {
        if (tag == 45) {
         parse_e11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e11_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_e22;
        break;
      }

      // optional float e22 = 6;
      case 6: {
        if (tag == 53) {
         parse_e22:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e22_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_e33;
        break;
      }

      // optional float e33 = 7;
      case 7: {
        if (tag == 61) {
         parse_e33:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e33_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_e21;
        break;
      }

      // optional float e21 = 8;
      case 8: {
        if (tag == 69) {
         parse_e21:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e21_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_e32;
        break;
      }

      // optional float e32 = 9;
      case 9: {
        if (tag == 77) {
         parse_e32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e32_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tMatrix)
  return false;
#undef DO_
}

void tMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tMatrix)
  // optional float e13 = 1;
  if (this->e13() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->e13(), output);
  }

  // optional float e12 = 2;
  if (this->e12() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->e12(), output);
  }

  // optional float e23 = 3;
  if (this->e23() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->e23(), output);
  }

  // optional float e31 = 4;
  if (this->e31() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->e31(), output);
  }

  // optional float e11 = 5;
  if (this->e11() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->e11(), output);
  }

  // optional float e22 = 6;
  if (this->e22() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->e22(), output);
  }

  // optional float e33 = 7;
  if (this->e33() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->e33(), output);
  }

  // optional float e21 = 8;
  if (this->e21() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->e21(), output);
  }

  // optional float e32 = 9;
  if (this->e32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->e32(), output);
  }

  // @@protoc_insertion_point(serialize_end:tMatrix)
}

::google::protobuf::uint8* tMatrix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tMatrix)
  // optional float e13 = 1;
  if (this->e13() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->e13(), target);
  }

  // optional float e12 = 2;
  if (this->e12() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->e12(), target);
  }

  // optional float e23 = 3;
  if (this->e23() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->e23(), target);
  }

  // optional float e31 = 4;
  if (this->e31() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->e31(), target);
  }

  // optional float e11 = 5;
  if (this->e11() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->e11(), target);
  }

  // optional float e22 = 6;
  if (this->e22() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->e22(), target);
  }

  // optional float e33 = 7;
  if (this->e33() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->e33(), target);
  }

  // optional float e21 = 8;
  if (this->e21() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->e21(), target);
  }

  // optional float e32 = 9;
  if (this->e32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->e32(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tMatrix)
  return target;
}

int tMatrix::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tMatrix)
  int total_size = 0;

  // optional float e13 = 1;
  if (this->e13() != 0) {
    total_size += 1 + 4;
  }

  // optional float e12 = 2;
  if (this->e12() != 0) {
    total_size += 1 + 4;
  }

  // optional float e23 = 3;
  if (this->e23() != 0) {
    total_size += 1 + 4;
  }

  // optional float e31 = 4;
  if (this->e31() != 0) {
    total_size += 1 + 4;
  }

  // optional float e11 = 5;
  if (this->e11() != 0) {
    total_size += 1 + 4;
  }

  // optional float e22 = 6;
  if (this->e22() != 0) {
    total_size += 1 + 4;
  }

  // optional float e33 = 7;
  if (this->e33() != 0) {
    total_size += 1 + 4;
  }

  // optional float e21 = 8;
  if (this->e21() != 0) {
    total_size += 1 + 4;
  }

  // optional float e32 = 9;
  if (this->e32() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tMatrix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tMatrix)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const tMatrix* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const tMatrix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tMatrix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tMatrix)
    MergeFrom(*source);
  }
}

void tMatrix::MergeFrom(const tMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tMatrix)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.e13() != 0) {
    set_e13(from.e13());
  }
  if (from.e12() != 0) {
    set_e12(from.e12());
  }
  if (from.e23() != 0) {
    set_e23(from.e23());
  }
  if (from.e31() != 0) {
    set_e31(from.e31());
  }
  if (from.e11() != 0) {
    set_e11(from.e11());
  }
  if (from.e22() != 0) {
    set_e22(from.e22());
  }
  if (from.e33() != 0) {
    set_e33(from.e33());
  }
  if (from.e21() != 0) {
    set_e21(from.e21());
  }
  if (from.e32() != 0) {
    set_e32(from.e32());
  }
}

void tMatrix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tMatrix::CopyFrom(const tMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tMatrix::IsInitialized() const {

  return true;
}

void tMatrix::Swap(tMatrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tMatrix::InternalSwap(tMatrix* other) {
  std::swap(e13_, other->e13_);
  std::swap(e12_, other->e12_);
  std::swap(e23_, other->e23_);
  std::swap(e31_, other->e31_);
  std::swap(e11_, other->e11_);
  std::swap(e22_, other->e22_);
  std::swap(e33_, other->e33_);
  std::swap(e21_, other->e21_);
  std::swap(e32_, other->e32_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tMatrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tMatrix_descriptor_;
  metadata.reflection = tMatrix_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tMatrix

// optional float e13 = 1;
void tMatrix::clear_e13() {
  e13_ = 0;
}
 float tMatrix::e13() const {
  // @@protoc_insertion_point(field_get:tMatrix.e13)
  return e13_;
}
 void tMatrix::set_e13(float value) {
  
  e13_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e13)
}

// optional float e12 = 2;
void tMatrix::clear_e12() {
  e12_ = 0;
}
 float tMatrix::e12() const {
  // @@protoc_insertion_point(field_get:tMatrix.e12)
  return e12_;
}
 void tMatrix::set_e12(float value) {
  
  e12_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e12)
}

// optional float e23 = 3;
void tMatrix::clear_e23() {
  e23_ = 0;
}
 float tMatrix::e23() const {
  // @@protoc_insertion_point(field_get:tMatrix.e23)
  return e23_;
}
 void tMatrix::set_e23(float value) {
  
  e23_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e23)
}

// optional float e31 = 4;
void tMatrix::clear_e31() {
  e31_ = 0;
}
 float tMatrix::e31() const {
  // @@protoc_insertion_point(field_get:tMatrix.e31)
  return e31_;
}
 void tMatrix::set_e31(float value) {
  
  e31_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e31)
}

// optional float e11 = 5;
void tMatrix::clear_e11() {
  e11_ = 0;
}
 float tMatrix::e11() const {
  // @@protoc_insertion_point(field_get:tMatrix.e11)
  return e11_;
}
 void tMatrix::set_e11(float value) {
  
  e11_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e11)
}

// optional float e22 = 6;
void tMatrix::clear_e22() {
  e22_ = 0;
}
 float tMatrix::e22() const {
  // @@protoc_insertion_point(field_get:tMatrix.e22)
  return e22_;
}
 void tMatrix::set_e22(float value) {
  
  e22_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e22)
}

// optional float e33 = 7;
void tMatrix::clear_e33() {
  e33_ = 0;
}
 float tMatrix::e33() const {
  // @@protoc_insertion_point(field_get:tMatrix.e33)
  return e33_;
}
 void tMatrix::set_e33(float value) {
  
  e33_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e33)
}

// optional float e21 = 8;
void tMatrix::clear_e21() {
  e21_ = 0;
}
 float tMatrix::e21() const {
  // @@protoc_insertion_point(field_get:tMatrix.e21)
  return e21_;
}
 void tMatrix::set_e21(float value) {
  
  e21_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e21)
}

// optional float e32 = 9;
void tMatrix::clear_e32() {
  e32_ = 0;
}
 float tMatrix::e32() const {
  // @@protoc_insertion_point(field_get:tMatrix.e32)
  return e32_;
}
 void tMatrix::set_e32(float value) {
  
  e32_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e32)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* tDetail_eHM2NMMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tDetail_eHM2NMMethod_descriptor_;
}
bool tDetail_eHM2NMMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_3x3;
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_4Samples;
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_5x5;
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_PRE3x3;
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_PRE5x5;
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_SO3x3;
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_SO5x5;
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_MIN;
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_MAX;
const int tDetail::eHM2NMMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tDetail::kMethodFieldNumber;
const int tDetail::kScaleFieldNumber;
const int tDetail::kFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tDetail::tDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tDetail)
}

void tDetail::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

tDetail::tDetail(const tDetail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tDetail)
}

void tDetail::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  method_ = 0;
  scale_ = 0;
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

tDetail::~tDetail() {
  // @@protoc_insertion_point(destructor:tDetail)
  SharedDtor();
}

void tDetail::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void tDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tDetail_descriptor_;
}

const tDetail& tDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xnormal_2eproto();
  return *default_instance_;
}

tDetail* tDetail::default_instance_ = NULL;

tDetail* tDetail::New(::google::protobuf::Arena* arena) const {
  tDetail* n = new tDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:tDetail)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(tDetail, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<tDetail*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(method_, scale_);
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool tDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tDetail.eHM2NMMethod Method = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_method(static_cast< ::tDetail_eHM2NMMethod >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_Scale;
        break;
      }

      // optional float Scale = 2;
      case 2: {
        if (tag == 21) {
         parse_Scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_File;
        break;
      }

      // optional string File = 3;
      case 3: {
        if (tag == 26) {
         parse_File:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tDetail.File"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tDetail)
  return false;
#undef DO_
}

void tDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tDetail)
  // optional .tDetail.eHM2NMMethod Method = 1;
  if (this->method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->method(), output);
  }

  // optional float Scale = 2;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional string File = 3;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tDetail.File");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file(), output);
  }

  // @@protoc_insertion_point(serialize_end:tDetail)
}

::google::protobuf::uint8* tDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tDetail)
  // optional .tDetail.eHM2NMMethod Method = 1;
  if (this->method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->method(), target);
  }

  // optional float Scale = 2;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional string File = 3;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tDetail.File");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tDetail)
  return target;
}

int tDetail::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tDetail)
  int total_size = 0;

  // optional .tDetail.eHM2NMMethod Method = 1;
  if (this->method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
  }

  // optional float Scale = 2;
  if (this->scale() != 0) {
    total_size += 1 + 4;
  }

  // optional string File = 3;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tDetail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const tDetail* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const tDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tDetail)
    MergeFrom(*source);
  }
}

void tDetail::MergeFrom(const tDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tDetail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.method() != 0) {
    set_method(from.method());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
}

void tDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tDetail::CopyFrom(const tDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tDetail::IsInitialized() const {

  return true;
}

void tDetail::Swap(tDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tDetail::InternalSwap(tDetail* other) {
  std::swap(method_, other->method_);
  std::swap(scale_, other->scale_);
  file_.Swap(&other->file_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tDetail_descriptor_;
  metadata.reflection = tDetail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tDetail

// optional .tDetail.eHM2NMMethod Method = 1;
void tDetail::clear_method() {
  method_ = 0;
}
 ::tDetail_eHM2NMMethod tDetail::method() const {
  // @@protoc_insertion_point(field_get:tDetail.Method)
  return static_cast< ::tDetail_eHM2NMMethod >(method_);
}
 void tDetail::set_method(::tDetail_eHM2NMMethod value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:tDetail.Method)
}

// optional float Scale = 2;
void tDetail::clear_scale() {
  scale_ = 0;
}
 float tDetail::scale() const {
  // @@protoc_insertion_point(field_get:tDetail.Scale)
  return scale_;
}
 void tDetail::set_scale(float value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:tDetail.Scale)
}

// optional string File = 3;
void tDetail::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tDetail::file() const {
  // @@protoc_insertion_point(field_get:tDetail.File)
  return file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tDetail::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tDetail.File)
}
 void tDetail::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tDetail.File)
}
 void tDetail::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tDetail.File)
}
 ::std::string* tDetail::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:tDetail.File)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tDetail::release_file() {
  // @@protoc_insertion_point(field_release:tDetail.File)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tDetail::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:tDetail.File)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tRGB8::kRFieldNumber;
const int tRGB8::kGFieldNumber;
const int tRGB8::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tRGB8::tRGB8()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tRGB8)
}

void tRGB8::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

tRGB8::tRGB8(const tRGB8& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tRGB8)
}

void tRGB8::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  r_ = 0u;
  g_ = 0u;
  b_ = 0u;
}

tRGB8::~tRGB8() {
  // @@protoc_insertion_point(destructor:tRGB8)
  SharedDtor();
}

void tRGB8::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tRGB8::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tRGB8::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tRGB8_descriptor_;
}

const tRGB8& tRGB8::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xnormal_2eproto();
  return *default_instance_;
}

tRGB8* tRGB8::default_instance_ = NULL;

tRGB8* tRGB8::New(::google::protobuf::Arena* arena) const {
  tRGB8* n = new tRGB8;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tRGB8::Clear() {
// @@protoc_insertion_point(message_clear_start:tRGB8)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(tRGB8, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<tRGB8*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(r_, b_);

#undef ZR_HELPER_
#undef ZR_

}

bool tRGB8::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tRGB8)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 R = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_G;
        break;
      }

      // optional uint32 G = 2;
      case 2: {
        if (tag == 16) {
         parse_G:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &g_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_B;
        break;
      }

      // optional uint32 B = 3;
      case 3: {
        if (tag == 24) {
         parse_B:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tRGB8)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tRGB8)
  return false;
#undef DO_
}

void tRGB8::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tRGB8)
  // optional uint32 R = 1;
  if (this->r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->r(), output);
  }

  // optional uint32 G = 2;
  if (this->g() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->g(), output);
  }

  // optional uint32 B = 3;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->b(), output);
  }

  // @@protoc_insertion_point(serialize_end:tRGB8)
}

::google::protobuf::uint8* tRGB8::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tRGB8)
  // optional uint32 R = 1;
  if (this->r() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->r(), target);
  }

  // optional uint32 G = 2;
  if (this->g() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->g(), target);
  }

  // optional uint32 B = 3;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->b(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tRGB8)
  return target;
}

int tRGB8::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tRGB8)
  int total_size = 0;

  // optional uint32 R = 1;
  if (this->r() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->r());
  }

  // optional uint32 G = 2;
  if (this->g() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->g());
  }

  // optional uint32 B = 3;
  if (this->b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->b());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tRGB8::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tRGB8)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const tRGB8* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const tRGB8>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tRGB8)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tRGB8)
    MergeFrom(*source);
  }
}

void tRGB8::MergeFrom(const tRGB8& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tRGB8)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.r() != 0) {
    set_r(from.r());
  }
  if (from.g() != 0) {
    set_g(from.g());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
}

void tRGB8::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tRGB8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tRGB8::CopyFrom(const tRGB8& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tRGB8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tRGB8::IsInitialized() const {

  return true;
}

void tRGB8::Swap(tRGB8* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tRGB8::InternalSwap(tRGB8* other) {
  std::swap(r_, other->r_);
  std::swap(g_, other->g_);
  std::swap(b_, other->b_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tRGB8::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tRGB8_descriptor_;
  metadata.reflection = tRGB8_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tRGB8

// optional uint32 R = 1;
void tRGB8::clear_r() {
  r_ = 0u;
}
 ::google::protobuf::uint32 tRGB8::r() const {
  // @@protoc_insertion_point(field_get:tRGB8.R)
  return r_;
}
 void tRGB8::set_r(::google::protobuf::uint32 value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:tRGB8.R)
}

// optional uint32 G = 2;
void tRGB8::clear_g() {
  g_ = 0u;
}
 ::google::protobuf::uint32 tRGB8::g() const {
  // @@protoc_insertion_point(field_get:tRGB8.G)
  return g_;
}
 void tRGB8::set_g(::google::protobuf::uint32 value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:tRGB8.G)
}

// optional uint32 B = 3;
void tRGB8::clear_b() {
  b_ = 0u;
}
 ::google::protobuf::uint32 tRGB8::b() const {
  // @@protoc_insertion_point(field_get:tRGB8.B)
  return b_;
}
 void tRGB8::set_b(::google::protobuf::uint32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:tRGB8.B)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* tHighPolyMesh_eSmoothNormals_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tHighPolyMesh_eSmoothNormals_descriptor_;
}
bool tHighPolyMesh_eSmoothNormals_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tHighPolyMesh_eSmoothNormals tHighPolyMesh::eSmoothNormals_AverageNormals;
const tHighPolyMesh_eSmoothNormals tHighPolyMesh::eSmoothNormals_HardenNormals;
const tHighPolyMesh_eSmoothNormals tHighPolyMesh::eSmoothNormals_UseExportedNormals;
const tHighPolyMesh_eSmoothNormals tHighPolyMesh::eSmoothNormals_MIN;
const tHighPolyMesh_eSmoothNormals tHighPolyMesh::eSmoothNormals_MAX;
const int tHighPolyMesh::eSmoothNormals_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tHighPolyMesh::kFileFieldNumber;
const int tHighPolyMesh::kPositionOffsetFieldNumber;
const int tHighPolyMesh::kIgnorePerVertexColorFieldNumber;
const int tHighPolyMesh::kAverageNormalsFieldNumber;
const int tHighPolyMesh::kVisibleFieldNumber;
const int tHighPolyMesh::kBaseTexIsTSNMFieldNumber;
const int tHighPolyMesh::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tHighPolyMesh::tHighPolyMesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tHighPolyMesh)
}

void tHighPolyMesh::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

tHighPolyMesh::tHighPolyMesh(const tHighPolyMesh& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tHighPolyMesh)
}

void tHighPolyMesh::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positionoffset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ignorepervertexcolor_ = false;
  averagenormals_ = 0;
  visible_ = false;
  basetexistsnm_ = false;
  scale_ = 0;
}

tHighPolyMesh::~tHighPolyMesh() {
  // @@protoc_insertion_point(destructor:tHighPolyMesh)
  SharedDtor();
}

void tHighPolyMesh::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positionoffset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void tHighPolyMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tHighPolyMesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tHighPolyMesh_descriptor_;
}

const tHighPolyMesh& tHighPolyMesh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xnormal_2eproto();
  return *default_instance_;
}

tHighPolyMesh* tHighPolyMesh::default_instance_ = NULL;

tHighPolyMesh* tHighPolyMesh::New(::google::protobuf::Arena* arena) const {
  tHighPolyMesh* n = new tHighPolyMesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tHighPolyMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:tHighPolyMesh)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(tHighPolyMesh, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<tHighPolyMesh*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(averagenormals_, scale_);
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positionoffset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool tHighPolyMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tHighPolyMesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string File = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tHighPolyMesh.File"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PositionOffset;
        break;
      }

      // optional string PositionOffset = 2;
      case 2: {
        if (tag == 18) {
         parse_PositionOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positionoffset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->positionoffset().data(), this->positionoffset().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tHighPolyMesh.PositionOffset"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IgnorePerVertexColor;
        break;
      }

      // optional bool IgnorePerVertexColor = 3;
      case 3: {
        if (tag == 24) {
         parse_IgnorePerVertexColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignorepervertexcolor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AverageNormals;
        break;
      }

      // optional .tHighPolyMesh.eSmoothNormals AverageNormals = 4;
      case 4: {
        if (tag == 32) {
         parse_AverageNormals:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_averagenormals(static_cast< ::tHighPolyMesh_eSmoothNormals >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Visible;
        break;
      }

      // optional bool Visible = 5;
      case 5: {
        if (tag == 40) {
         parse_Visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_BaseTexIsTSNM;
        break;
      }

      // optional bool BaseTexIsTSNM = 6;
      case 6: {
        if (tag == 48) {
         parse_BaseTexIsTSNM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &basetexistsnm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_Scale;
        break;
      }

      // optional float Scale = 7;
      case 7: {
        if (tag == 61) {
         parse_Scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tHighPolyMesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tHighPolyMesh)
  return false;
#undef DO_
}

void tHighPolyMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tHighPolyMesh)
  // optional string File = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tHighPolyMesh.File");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file(), output);
  }

  // optional string PositionOffset = 2;
  if (this->positionoffset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positionoffset().data(), this->positionoffset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tHighPolyMesh.PositionOffset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->positionoffset(), output);
  }

  // optional bool IgnorePerVertexColor = 3;
  if (this->ignorepervertexcolor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ignorepervertexcolor(), output);
  }

  // optional .tHighPolyMesh.eSmoothNormals AverageNormals = 4;
  if (this->averagenormals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->averagenormals(), output);
  }

  // optional bool Visible = 5;
  if (this->visible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->visible(), output);
  }

  // optional bool BaseTexIsTSNM = 6;
  if (this->basetexistsnm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->basetexistsnm(), output);
  }

  // optional float Scale = 7;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->scale(), output);
  }

  // @@protoc_insertion_point(serialize_end:tHighPolyMesh)
}

::google::protobuf::uint8* tHighPolyMesh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tHighPolyMesh)
  // optional string File = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tHighPolyMesh.File");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file(), target);
  }

  // optional string PositionOffset = 2;
  if (this->positionoffset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positionoffset().data(), this->positionoffset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tHighPolyMesh.PositionOffset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->positionoffset(), target);
  }

  // optional bool IgnorePerVertexColor = 3;
  if (this->ignorepervertexcolor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ignorepervertexcolor(), target);
  }

  // optional .tHighPolyMesh.eSmoothNormals AverageNormals = 4;
  if (this->averagenormals() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->averagenormals(), target);
  }

  // optional bool Visible = 5;
  if (this->visible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->visible(), target);
  }

  // optional bool BaseTexIsTSNM = 6;
  if (this->basetexistsnm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->basetexistsnm(), target);
  }

  // optional float Scale = 7;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->scale(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tHighPolyMesh)
  return target;
}

int tHighPolyMesh::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tHighPolyMesh)
  int total_size = 0;

  // optional string File = 1;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // optional string PositionOffset = 2;
  if (this->positionoffset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->positionoffset());
  }

  // optional bool IgnorePerVertexColor = 3;
  if (this->ignorepervertexcolor() != 0) {
    total_size += 1 + 1;
  }

  // optional .tHighPolyMesh.eSmoothNormals AverageNormals = 4;
  if (this->averagenormals() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->averagenormals());
  }

  // optional bool Visible = 5;
  if (this->visible() != 0) {
    total_size += 1 + 1;
  }

  // optional bool BaseTexIsTSNM = 6;
  if (this->basetexistsnm() != 0) {
    total_size += 1 + 1;
  }

  // optional float Scale = 7;
  if (this->scale() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tHighPolyMesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tHighPolyMesh)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const tHighPolyMesh* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const tHighPolyMesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tHighPolyMesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tHighPolyMesh)
    MergeFrom(*source);
  }
}

void tHighPolyMesh::MergeFrom(const tHighPolyMesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tHighPolyMesh)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.positionoffset().size() > 0) {

    positionoffset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positionoffset_);
  }
  if (from.ignorepervertexcolor() != 0) {
    set_ignorepervertexcolor(from.ignorepervertexcolor());
  }
  if (from.averagenormals() != 0) {
    set_averagenormals(from.averagenormals());
  }
  if (from.visible() != 0) {
    set_visible(from.visible());
  }
  if (from.basetexistsnm() != 0) {
    set_basetexistsnm(from.basetexistsnm());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
}

void tHighPolyMesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tHighPolyMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tHighPolyMesh::CopyFrom(const tHighPolyMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tHighPolyMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tHighPolyMesh::IsInitialized() const {

  return true;
}

void tHighPolyMesh::Swap(tHighPolyMesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tHighPolyMesh::InternalSwap(tHighPolyMesh* other) {
  file_.Swap(&other->file_);
  positionoffset_.Swap(&other->positionoffset_);
  std::swap(ignorepervertexcolor_, other->ignorepervertexcolor_);
  std::swap(averagenormals_, other->averagenormals_);
  std::swap(visible_, other->visible_);
  std::swap(basetexistsnm_, other->basetexistsnm_);
  std::swap(scale_, other->scale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tHighPolyMesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tHighPolyMesh_descriptor_;
  metadata.reflection = tHighPolyMesh_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tHighPolyMesh

// optional string File = 1;
void tHighPolyMesh::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tHighPolyMesh::file() const {
  // @@protoc_insertion_point(field_get:tHighPolyMesh.File)
  return file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tHighPolyMesh::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tHighPolyMesh.File)
}
 void tHighPolyMesh::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tHighPolyMesh.File)
}
 void tHighPolyMesh::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tHighPolyMesh.File)
}
 ::std::string* tHighPolyMesh::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:tHighPolyMesh.File)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tHighPolyMesh::release_file() {
  // @@protoc_insertion_point(field_release:tHighPolyMesh.File)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tHighPolyMesh::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:tHighPolyMesh.File)
}

// optional string PositionOffset = 2;
void tHighPolyMesh::clear_positionoffset() {
  positionoffset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tHighPolyMesh::positionoffset() const {
  // @@protoc_insertion_point(field_get:tHighPolyMesh.PositionOffset)
  return positionoffset_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tHighPolyMesh::set_positionoffset(const ::std::string& value) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tHighPolyMesh.PositionOffset)
}
 void tHighPolyMesh::set_positionoffset(const char* value) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tHighPolyMesh.PositionOffset)
}
 void tHighPolyMesh::set_positionoffset(const char* value, size_t size) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tHighPolyMesh.PositionOffset)
}
 ::std::string* tHighPolyMesh::mutable_positionoffset() {
  
  // @@protoc_insertion_point(field_mutable:tHighPolyMesh.PositionOffset)
  return positionoffset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tHighPolyMesh::release_positionoffset() {
  // @@protoc_insertion_point(field_release:tHighPolyMesh.PositionOffset)
  
  return positionoffset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tHighPolyMesh::set_allocated_positionoffset(::std::string* positionoffset) {
  if (positionoffset != NULL) {
    
  } else {
    
  }
  positionoffset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positionoffset);
  // @@protoc_insertion_point(field_set_allocated:tHighPolyMesh.PositionOffset)
}

// optional bool IgnorePerVertexColor = 3;
void tHighPolyMesh::clear_ignorepervertexcolor() {
  ignorepervertexcolor_ = false;
}
 bool tHighPolyMesh::ignorepervertexcolor() const {
  // @@protoc_insertion_point(field_get:tHighPolyMesh.IgnorePerVertexColor)
  return ignorepervertexcolor_;
}
 void tHighPolyMesh::set_ignorepervertexcolor(bool value) {
  
  ignorepervertexcolor_ = value;
  // @@protoc_insertion_point(field_set:tHighPolyMesh.IgnorePerVertexColor)
}

// optional .tHighPolyMesh.eSmoothNormals AverageNormals = 4;
void tHighPolyMesh::clear_averagenormals() {
  averagenormals_ = 0;
}
 ::tHighPolyMesh_eSmoothNormals tHighPolyMesh::averagenormals() const {
  // @@protoc_insertion_point(field_get:tHighPolyMesh.AverageNormals)
  return static_cast< ::tHighPolyMesh_eSmoothNormals >(averagenormals_);
}
 void tHighPolyMesh::set_averagenormals(::tHighPolyMesh_eSmoothNormals value) {
  
  averagenormals_ = value;
  // @@protoc_insertion_point(field_set:tHighPolyMesh.AverageNormals)
}

// optional bool Visible = 5;
void tHighPolyMesh::clear_visible() {
  visible_ = false;
}
 bool tHighPolyMesh::visible() const {
  // @@protoc_insertion_point(field_get:tHighPolyMesh.Visible)
  return visible_;
}
 void tHighPolyMesh::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:tHighPolyMesh.Visible)
}

// optional bool BaseTexIsTSNM = 6;
void tHighPolyMesh::clear_basetexistsnm() {
  basetexistsnm_ = false;
}
 bool tHighPolyMesh::basetexistsnm() const {
  // @@protoc_insertion_point(field_get:tHighPolyMesh.BaseTexIsTSNM)
  return basetexistsnm_;
}
 void tHighPolyMesh::set_basetexistsnm(bool value) {
  
  basetexistsnm_ = value;
  // @@protoc_insertion_point(field_set:tHighPolyMesh.BaseTexIsTSNM)
}

// optional float Scale = 7;
void tHighPolyMesh::clear_scale() {
  scale_ = 0;
}
 float tHighPolyMesh::scale() const {
  // @@protoc_insertion_point(field_get:tHighPolyMesh.Scale)
  return scale_;
}
 void tHighPolyMesh::set_scale(float value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:tHighPolyMesh.Scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* tLowPolyMesh_eSwizzleComponent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tLowPolyMesh_eSwizzleComponent_descriptor_;
}
bool tLowPolyMesh_eSwizzleComponent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh::eSwizzleComponent_X0;
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh::eSwizzleComponent_X1;
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh::eSwizzleComponent_Y0;
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh::eSwizzleComponent_Y1;
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh::eSwizzleComponent_Z0;
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh::eSwizzleComponent_Z1;
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh::eSwizzleComponent_MIN;
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh::eSwizzleComponent_MAX;
const int tLowPolyMesh::eSwizzleComponent_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* tLowPolyMesh_eTransparencyMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tLowPolyMesh_eTransparencyMode_descriptor_;
}
bool tLowPolyMesh_eTransparencyMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tLowPolyMesh_eTransparencyMode tLowPolyMesh::eTransparencyMode_1Bit;
const tLowPolyMesh_eTransparencyMode tLowPolyMesh::eTransparencyMode_AdditiveGlow;
const tLowPolyMesh_eTransparencyMode tLowPolyMesh::eTransparencyMode_Blend;
const tLowPolyMesh_eTransparencyMode tLowPolyMesh::eTransparencyMode_None;
const tLowPolyMesh_eTransparencyMode tLowPolyMesh::eTransparencyMode_ScreenGlass;
const tLowPolyMesh_eTransparencyMode tLowPolyMesh::eTransparencyMode_MIN;
const tLowPolyMesh_eTransparencyMode tLowPolyMesh::eTransparencyMode_MAX;
const int tLowPolyMesh::eTransparencyMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* tLowPolyMesh_eNormalMapType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tLowPolyMesh_eNormalMapType_descriptor_;
}
bool tLowPolyMesh_eNormalMapType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tLowPolyMesh_eNormalMapType tLowPolyMesh::eNormalMapType_Derivative;
const tLowPolyMesh_eNormalMapType tLowPolyMesh::eNormalMapType_Object_space;
const tLowPolyMesh_eNormalMapType tLowPolyMesh::eNormalMapType_Tangent_space;
const tLowPolyMesh_eNormalMapType tLowPolyMesh::eNormalMapType_MIN;
const tLowPolyMesh_eNormalMapType tLowPolyMesh::eNormalMapType_MAX;
const int tLowPolyMesh::eNormalMapType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tLowPolyMesh::kBaseTexFieldNumber;
const int tLowPolyMesh::kBlockersFileFieldNumber;
const int tLowPolyMesh::kVVDMSwizzleZFieldNumber;
const int tLowPolyMesh::kFresnelRefractiveIndexFieldNumber;
const int tLowPolyMesh::kUOffsetFieldNumber;
const int tLowPolyMesh::kReflectHDRMultFieldNumber;
const int tLowPolyMesh::kTransparencyModeFieldNumber;
const int tLowPolyMesh::kVOffsetFieldNumber;
const int tLowPolyMesh::kReflectTexFieldNumber;
const int tLowPolyMesh::kMaxRayDistanceFrontFieldNumber;
const int tLowPolyMesh::kDiffuseGITexFieldNumber;
const int tLowPolyMesh::kNormapMapTypeFieldNumber;
const int tLowPolyMesh::kFileFieldNumber;
const int tLowPolyMesh::kVVDMSwizzleYFieldNumber;
const int tLowPolyMesh::kCageFileFieldNumber;
const int tLowPolyMesh::kHeightTexFieldNumber;
const int tLowPolyMesh::kNMSwizzleYFieldNumber;
const int tLowPolyMesh::kBatchProtectFieldNumber;
const int tLowPolyMesh::kAlphaTestValueFieldNumber;
const int tLowPolyMesh::kSubdivisionsFieldNumber;
const int tLowPolyMesh::kMatteFieldNumber;
const int tLowPolyMesh::kAverageNormalsFieldNumber;
const int tLowPolyMesh::kVectorDisplacementTSFieldNumber;
const int tLowPolyMesh::kUseCageFieldNumber;
const int tLowPolyMesh::kVisibleFieldNumber;
const int tLowPolyMesh::kNMSwizzleXFieldNumber;
const int tLowPolyMesh::kGlossTexFieldNumber;
const int tLowPolyMesh::kScaleFieldNumber;
const int tLowPolyMesh::kNMSwizzleZFieldNumber;
const int tLowPolyMesh::kVectorDisplacementTexFieldNumber;
const int tLowPolyMesh::kVVDMSwizzleXFieldNumber;
const int tLowPolyMesh::kUsePerVertexColorsFieldNumber;
const int tLowPolyMesh::kHighpolyNormalsOverrideTangentSpaceFieldNumber;
const int tLowPolyMesh::kLMAOTexFieldNumber;
const int tLowPolyMesh::kSpecTexFieldNumber;
const int tLowPolyMesh::kNormTexFieldNumber;
const int tLowPolyMesh::kHighpolyNormalOverrideFieldNumber;
const int tLowPolyMesh::kPositionOffsetFieldNumber;
const int tLowPolyMesh::kMaxRayDistanceBackFieldNumber;
const int tLowPolyMesh::kUseFresnelFieldNumber;
const int tLowPolyMesh::kReceiveShadowsFieldNumber;
const int tLowPolyMesh::kEmissiveTexFieldNumber;
const int tLowPolyMesh::kBackfaceCullFieldNumber;
const int tLowPolyMesh::kCastShadowsFieldNumber;
const int tLowPolyMesh::kMatchUVsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tLowPolyMesh::tLowPolyMesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tLowPolyMesh)
}

void tLowPolyMesh::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  highpolynormaloverride_ = const_cast< ::UnspecifiedType*>(&::UnspecifiedType::default_instance());
}

tLowPolyMesh::tLowPolyMesh(const tLowPolyMesh& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tLowPolyMesh)
}

void tLowPolyMesh::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  basetex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockersfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vvdmswizzlez_ = 0;
  fresnelrefractiveindex_ = 0;
  uoffset_ = 0;
  reflecthdrmult_ = 0;
  transparencymode_ = 0;
  voffset_ = 0;
  reflecttex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxraydistancefront_ = 0;
  diffusegitex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normapmaptype_ = 0;
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vvdmswizzley_ = 0;
  cagefile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  heighttex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nmswizzley_ = 0;
  batchprotect_ = false;
  alphatestvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subdivisions_ = 0u;
  matte_ = false;
  averagenormals_ = false;
  vectordisplacementts_ = false;
  usecage_ = false;
  visible_ = false;
  nmswizzlex_ = 0;
  glosstex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_ = 0;
  nmswizzlez_ = 0;
  vectordisplacementtex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vvdmswizzlex_ = 0;
  usepervertexcolors_ = false;
  highpolynormalsoverridetangentspace_ = false;
  lmaotex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spectex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normtex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  highpolynormaloverride_ = NULL;
  positionoffset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxraydistanceback_ = 0;
  usefresnel_ = false;
  receiveshadows_ = false;
  emissivetex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backfacecull_ = false;
  castshadows_ = false;
  matchuvs_ = false;
}

tLowPolyMesh::~tLowPolyMesh() {
  // @@protoc_insertion_point(destructor:tLowPolyMesh)
  SharedDtor();
}

void tLowPolyMesh::SharedDtor() {
  basetex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockersfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reflecttex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diffusegitex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cagefile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  heighttex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alphatestvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  glosstex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vectordisplacementtex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lmaotex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spectex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normtex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positionoffset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emissivetex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete highpolynormaloverride_;
  }
}

void tLowPolyMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tLowPolyMesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tLowPolyMesh_descriptor_;
}

const tLowPolyMesh& tLowPolyMesh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xnormal_2eproto();
  return *default_instance_;
}

tLowPolyMesh* tLowPolyMesh::default_instance_ = NULL;

tLowPolyMesh* tLowPolyMesh::New(::google::protobuf::Arena* arena) const {
  tLowPolyMesh* n = new tLowPolyMesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tLowPolyMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:tLowPolyMesh)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(tLowPolyMesh, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<tLowPolyMesh*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(vvdmswizzlez_, voffset_);
  basetex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockersfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(maxraydistancefront_, normapmaptype_);
  reflecttex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diffusegitex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vvdmswizzley_ = 0;
  cagefile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  heighttex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(subdivisions_, vectordisplacementts_);
  nmswizzley_ = 0;
  alphatestvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usecage_ = false;
  ZR_(nmswizzlex_, scale_);
  ZR_(visible_, usepervertexcolors_);
  glosstex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nmswizzlez_ = 0;
  vectordisplacementtex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vvdmswizzlex_ = 0;
  highpolynormalsoverridetangentspace_ = false;
  lmaotex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spectex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normtex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && highpolynormaloverride_ != NULL) delete highpolynormaloverride_;
  highpolynormaloverride_ = NULL;
  positionoffset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxraydistanceback_ = 0;
  usefresnel_ = false;
  ZR_(receiveshadows_, matchuvs_);
  emissivetex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool tLowPolyMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tLowPolyMesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BaseTex = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basetex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->basetex().data(), this->basetex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tLowPolyMesh.BaseTex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BlockersFile;
        break;
      }

      // optional string BlockersFile = 2;
      case 2: {
        if (tag == 18) {
         parse_BlockersFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockersfile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->blockersfile().data(), this->blockersfile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tLowPolyMesh.BlockersFile"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_VVDMSwizzleZ;
        break;
      }

      // optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleZ = 3;
      case 3: {
        if (tag == 24) {
         parse_VVDMSwizzleZ:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vvdmswizzlez(static_cast< ::tLowPolyMesh_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_FresnelRefractiveIndex;
        break;
      }

      // optional float FresnelRefractiveIndex = 4;
      case 4: {
        if (tag == 37) {
         parse_FresnelRefractiveIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fresnelrefractiveindex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_UOffset;
        break;
      }

      // optional float UOffset = 5;
      case 5: {
        if (tag == 45) {
         parse_UOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &uoffset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_ReflectHDRMult;
        break;
      }

      // optional float ReflectHDRMult = 6;
      case 6: {
        if (tag == 53) {
         parse_ReflectHDRMult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reflecthdrmult_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_TransparencyMode;
        break;
      }

      // optional .tLowPolyMesh.eTransparencyMode TransparencyMode = 7;
      case 7: {
        if (tag == 56) {
         parse_TransparencyMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_transparencymode(static_cast< ::tLowPolyMesh_eTransparencyMode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_VOffset;
        break;
      }

      // optional float VOffset = 8;
      case 8: {
        if (tag == 69) {
         parse_VOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voffset_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ReflectTex;
        break;
      }

      // optional string ReflectTex = 9;
      case 9: {
        if (tag == 74) {
         parse_ReflectTex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reflecttex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reflecttex().data(), this->reflecttex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tLowPolyMesh.ReflectTex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_MaxRayDistanceFront;
        break;
      }

      // optional float MaxRayDistanceFront = 10;
      case 10: {
        if (tag == 85) {
         parse_MaxRayDistanceFront:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxraydistancefront_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_DiffuseGITex;
        break;
      }

      // optional string DiffuseGITex = 11;
      case 11: {
        if (tag == 90) {
         parse_DiffuseGITex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diffusegitex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diffusegitex().data(), this->diffusegitex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tLowPolyMesh.DiffuseGITex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_NormapMapType;
        break;
      }

      // optional .tLowPolyMesh.eNormalMapType NormapMapType = 12;
      case 12: {
        if (tag == 96) {
         parse_NormapMapType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_normapmaptype(static_cast< ::tLowPolyMesh_eNormalMapType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_File;
        break;
      }

      // optional string File = 13;
      case 13: {
        if (tag == 106) {
         parse_File:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tLowPolyMesh.File"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_VVDMSwizzleY;
        break;
      }

      // optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleY = 14;
      case 14: {
        if (tag == 112) {
         parse_VVDMSwizzleY:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vvdmswizzley(static_cast< ::tLowPolyMesh_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_CageFile;
        break;
      }

      // optional string CageFile = 15;
      case 15: {
        if (tag == 122) {
         parse_CageFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cagefile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cagefile().data(), this->cagefile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tLowPolyMesh.CageFile"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_HeightTex;
        break;
      }

      // optional string HeightTex = 16;
      case 16: {
        if (tag == 130) {
         parse_HeightTex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_heighttex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->heighttex().data(), this->heighttex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tLowPolyMesh.HeightTex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_NMSwizzleY;
        break;
      }

      // optional .tLowPolyMesh.eSwizzleComponent NMSwizzleY = 17;
      case 17: {
        if (tag == 136) {
         parse_NMSwizzleY:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nmswizzley(static_cast< ::tLowPolyMesh_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_BatchProtect;
        break;
      }

      // optional bool BatchProtect = 18;
      case 18: {
        if (tag == 144) {
         parse_BatchProtect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &batchprotect_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_AlphaTestValue;
        break;
      }

      // optional bytes AlphaTestValue = 19;
      case 19: {
        if (tag == 154) {
         parse_AlphaTestValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_alphatestvalue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_Subdivisions;
        break;
      }

      // optional uint32 Subdivisions = 20;
      case 20: {
        if (tag == 160) {
         parse_Subdivisions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subdivisions_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_Matte;
        break;
      }

      // optional bool Matte = 21;
      case 21: {
        if (tag == 168) {
         parse_Matte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &matte_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_AverageNormals;
        break;
      }

      // optional bool AverageNormals = 22;
      case 22: {
        if (tag == 176) {
         parse_AverageNormals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &averagenormals_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_VectorDisplacementTS;
        break;
      }

      // optional bool VectorDisplacementTS = 23;
      case 23: {
        if (tag == 184) {
         parse_VectorDisplacementTS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vectordisplacementts_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_UseCage;
        break;
      }

      // optional bool UseCage = 24;
      case 24: {
        if (tag == 192) {
         parse_UseCage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usecage_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_Visible;
        break;
      }

      // optional bool Visible = 25;
      case 25: {
        if (tag == 200) {
         parse_Visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_NMSwizzleX;
        break;
      }

      // optional .tLowPolyMesh.eSwizzleComponent NMSwizzleX = 26;
      case 26: {
        if (tag == 208) {
         parse_NMSwizzleX:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nmswizzlex(static_cast< ::tLowPolyMesh_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_GlossTex;
        break;
      }

      // optional string GlossTex = 27;
      case 27: {
        if (tag == 218) {
         parse_GlossTex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_glosstex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->glosstex().data(), this->glosstex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tLowPolyMesh.GlossTex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(229)) goto parse_Scale;
        break;
      }

      // optional float Scale = 28;
      case 28: {
        if (tag == 229) {
         parse_Scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_NMSwizzleZ;
        break;
      }

      // optional .tLowPolyMesh.eSwizzleComponent NMSwizzleZ = 29;
      case 29: {
        if (tag == 232) {
         parse_NMSwizzleZ:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nmswizzlez(static_cast< ::tLowPolyMesh_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_VectorDisplacementTex;
        break;
      }

      // optional string VectorDisplacementTex = 30;
      case 30: {
        if (tag == 242) {
         parse_VectorDisplacementTex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vectordisplacementtex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vectordisplacementtex().data(), this->vectordisplacementtex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tLowPolyMesh.VectorDisplacementTex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_VVDMSwizzleX;
        break;
      }

      // optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleX = 31;
      case 31: {
        if (tag == 248) {
         parse_VVDMSwizzleX:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vvdmswizzlex(static_cast< ::tLowPolyMesh_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_UsePerVertexColors;
        break;
      }

      // optional bool UsePerVertexColors = 32;
      case 32: {
        if (tag == 256) {
         parse_UsePerVertexColors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usepervertexcolors_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_HighpolyNormalsOverrideTangentSpace;
        break;
      }

      // optional bool HighpolyNormalsOverrideTangentSpace = 33;
      case 33: {
        if (tag == 264) {
         parse_HighpolyNormalsOverrideTangentSpace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &highpolynormalsoverridetangentspace_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_LMAOTex;
        break;
      }

      // optional string LMAOTex = 34;
      case 34: {
        if (tag == 274) {
         parse_LMAOTex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lmaotex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lmaotex().data(), this->lmaotex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tLowPolyMesh.LMAOTex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_SpecTex;
        break;
      }

      // optional string SpecTex = 35;
      case 35: {
        if (tag == 282) {
         parse_SpecTex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spectex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->spectex().data(), this->spectex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tLowPolyMesh.SpecTex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_NormTex;
        break;
      }

      // optional string NormTex = 36;
      case 36: {
        if (tag == 290) {
         parse_NormTex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normtex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->normtex().data(), this->normtex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tLowPolyMesh.NormTex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_HighpolyNormalOverride;
        break;
      }

      // optional .UnspecifiedType HighpolyNormalOverride = 37;
      case 37: {
        if (tag == 298) {
         parse_HighpolyNormalOverride:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_highpolynormaloverride()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_PositionOffset;
        break;
      }

      // optional string PositionOffset = 38;
      case 38: {
        if (tag == 306) {
         parse_PositionOffset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positionoffset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->positionoffset().data(), this->positionoffset().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tLowPolyMesh.PositionOffset"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(317)) goto parse_MaxRayDistanceBack;
        break;
      }

      // optional float MaxRayDistanceBack = 39;
      case 39: {
        if (tag == 317) {
         parse_MaxRayDistanceBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxraydistanceback_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_UseFresnel;
        break;
      }

      // optional bool UseFresnel = 40;
      case 40: {
        if (tag == 320) {
         parse_UseFresnel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usefresnel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_ReceiveShadows;
        break;
      }

      // optional bool ReceiveShadows = 41;
      case 41: {
        if (tag == 328) {
         parse_ReceiveShadows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &receiveshadows_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(338)) goto parse_EmissiveTex;
        break;
      }

      // optional string EmissiveTex = 42;
      case 42: {
        if (tag == 338) {
         parse_EmissiveTex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emissivetex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->emissivetex().data(), this->emissivetex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tLowPolyMesh.EmissiveTex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_BackfaceCull;
        break;
      }

      // optional bool BackfaceCull = 43;
      case 43: {
        if (tag == 344) {
         parse_BackfaceCull:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &backfacecull_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_CastShadows;
        break;
      }

      // optional bool CastShadows = 44;
      case 44: {
        if (tag == 352) {
         parse_CastShadows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &castshadows_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_MatchUVs;
        break;
      }

      // optional bool MatchUVs = 45;
      case 45: {
        if (tag == 360) {
         parse_MatchUVs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &matchuvs_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tLowPolyMesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tLowPolyMesh)
  return false;
#undef DO_
}

void tLowPolyMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tLowPolyMesh)
  // optional string BaseTex = 1;
  if (this->basetex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basetex().data(), this->basetex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.BaseTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->basetex(), output);
  }

  // optional string BlockersFile = 2;
  if (this->blockersfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blockersfile().data(), this->blockersfile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.BlockersFile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->blockersfile(), output);
  }

  // optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleZ = 3;
  if (this->vvdmswizzlez() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->vvdmswizzlez(), output);
  }

  // optional float FresnelRefractiveIndex = 4;
  if (this->fresnelrefractiveindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fresnelrefractiveindex(), output);
  }

  // optional float UOffset = 5;
  if (this->uoffset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->uoffset(), output);
  }

  // optional float ReflectHDRMult = 6;
  if (this->reflecthdrmult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->reflecthdrmult(), output);
  }

  // optional .tLowPolyMesh.eTransparencyMode TransparencyMode = 7;
  if (this->transparencymode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->transparencymode(), output);
  }

  // optional float VOffset = 8;
  if (this->voffset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->voffset(), output);
  }

  // optional string ReflectTex = 9;
  if (this->reflecttex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reflecttex().data(), this->reflecttex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.ReflectTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->reflecttex(), output);
  }

  // optional float MaxRayDistanceFront = 10;
  if (this->maxraydistancefront() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->maxraydistancefront(), output);
  }

  // optional string DiffuseGITex = 11;
  if (this->diffusegitex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diffusegitex().data(), this->diffusegitex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.DiffuseGITex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->diffusegitex(), output);
  }

  // optional .tLowPolyMesh.eNormalMapType NormapMapType = 12;
  if (this->normapmaptype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->normapmaptype(), output);
  }

  // optional string File = 13;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.File");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->file(), output);
  }

  // optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleY = 14;
  if (this->vvdmswizzley() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->vvdmswizzley(), output);
  }

  // optional string CageFile = 15;
  if (this->cagefile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cagefile().data(), this->cagefile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.CageFile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->cagefile(), output);
  }

  // optional string HeightTex = 16;
  if (this->heighttex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->heighttex().data(), this->heighttex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.HeightTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->heighttex(), output);
  }

  // optional .tLowPolyMesh.eSwizzleComponent NMSwizzleY = 17;
  if (this->nmswizzley() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->nmswizzley(), output);
  }

  // optional bool BatchProtect = 18;
  if (this->batchprotect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->batchprotect(), output);
  }

  // optional bytes AlphaTestValue = 19;
  if (this->alphatestvalue().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->alphatestvalue(), output);
  }

  // optional uint32 Subdivisions = 20;
  if (this->subdivisions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->subdivisions(), output);
  }

  // optional bool Matte = 21;
  if (this->matte() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->matte(), output);
  }

  // optional bool AverageNormals = 22;
  if (this->averagenormals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->averagenormals(), output);
  }

  // optional bool VectorDisplacementTS = 23;
  if (this->vectordisplacementts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->vectordisplacementts(), output);
  }

  // optional bool UseCage = 24;
  if (this->usecage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->usecage(), output);
  }

  // optional bool Visible = 25;
  if (this->visible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->visible(), output);
  }

  // optional .tLowPolyMesh.eSwizzleComponent NMSwizzleX = 26;
  if (this->nmswizzlex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->nmswizzlex(), output);
  }

  // optional string GlossTex = 27;
  if (this->glosstex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->glosstex().data(), this->glosstex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.GlossTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->glosstex(), output);
  }

  // optional float Scale = 28;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->scale(), output);
  }

  // optional .tLowPolyMesh.eSwizzleComponent NMSwizzleZ = 29;
  if (this->nmswizzlez() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->nmswizzlez(), output);
  }

  // optional string VectorDisplacementTex = 30;
  if (this->vectordisplacementtex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vectordisplacementtex().data(), this->vectordisplacementtex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.VectorDisplacementTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->vectordisplacementtex(), output);
  }

  // optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleX = 31;
  if (this->vvdmswizzlex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->vvdmswizzlex(), output);
  }

  // optional bool UsePerVertexColors = 32;
  if (this->usepervertexcolors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->usepervertexcolors(), output);
  }

  // optional bool HighpolyNormalsOverrideTangentSpace = 33;
  if (this->highpolynormalsoverridetangentspace() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->highpolynormalsoverridetangentspace(), output);
  }

  // optional string LMAOTex = 34;
  if (this->lmaotex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lmaotex().data(), this->lmaotex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.LMAOTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->lmaotex(), output);
  }

  // optional string SpecTex = 35;
  if (this->spectex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spectex().data(), this->spectex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.SpecTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      35, this->spectex(), output);
  }

  // optional string NormTex = 36;
  if (this->normtex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->normtex().data(), this->normtex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.NormTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      36, this->normtex(), output);
  }

  // optional .UnspecifiedType HighpolyNormalOverride = 37;
  if (this->has_highpolynormaloverride()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->highpolynormaloverride_, output);
  }

  // optional string PositionOffset = 38;
  if (this->positionoffset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positionoffset().data(), this->positionoffset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.PositionOffset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->positionoffset(), output);
  }

  // optional float MaxRayDistanceBack = 39;
  if (this->maxraydistanceback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->maxraydistanceback(), output);
  }

  // optional bool UseFresnel = 40;
  if (this->usefresnel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->usefresnel(), output);
  }

  // optional bool ReceiveShadows = 41;
  if (this->receiveshadows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->receiveshadows(), output);
  }

  // optional string EmissiveTex = 42;
  if (this->emissivetex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->emissivetex().data(), this->emissivetex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.EmissiveTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      42, this->emissivetex(), output);
  }

  // optional bool BackfaceCull = 43;
  if (this->backfacecull() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->backfacecull(), output);
  }

  // optional bool CastShadows = 44;
  if (this->castshadows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->castshadows(), output);
  }

  // optional bool MatchUVs = 45;
  if (this->matchuvs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->matchuvs(), output);
  }

  // @@protoc_insertion_point(serialize_end:tLowPolyMesh)
}

::google::protobuf::uint8* tLowPolyMesh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tLowPolyMesh)
  // optional string BaseTex = 1;
  if (this->basetex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basetex().data(), this->basetex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.BaseTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->basetex(), target);
  }

  // optional string BlockersFile = 2;
  if (this->blockersfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blockersfile().data(), this->blockersfile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.BlockersFile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->blockersfile(), target);
  }

  // optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleZ = 3;
  if (this->vvdmswizzlez() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->vvdmswizzlez(), target);
  }

  // optional float FresnelRefractiveIndex = 4;
  if (this->fresnelrefractiveindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fresnelrefractiveindex(), target);
  }

  // optional float UOffset = 5;
  if (this->uoffset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->uoffset(), target);
  }

  // optional float ReflectHDRMult = 6;
  if (this->reflecthdrmult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->reflecthdrmult(), target);
  }

  // optional .tLowPolyMesh.eTransparencyMode TransparencyMode = 7;
  if (this->transparencymode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->transparencymode(), target);
  }

  // optional float VOffset = 8;
  if (this->voffset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->voffset(), target);
  }

  // optional string ReflectTex = 9;
  if (this->reflecttex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reflecttex().data(), this->reflecttex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.ReflectTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->reflecttex(), target);
  }

  // optional float MaxRayDistanceFront = 10;
  if (this->maxraydistancefront() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->maxraydistancefront(), target);
  }

  // optional string DiffuseGITex = 11;
  if (this->diffusegitex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diffusegitex().data(), this->diffusegitex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.DiffuseGITex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->diffusegitex(), target);
  }

  // optional .tLowPolyMesh.eNormalMapType NormapMapType = 12;
  if (this->normapmaptype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->normapmaptype(), target);
  }

  // optional string File = 13;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.File");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->file(), target);
  }

  // optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleY = 14;
  if (this->vvdmswizzley() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->vvdmswizzley(), target);
  }

  // optional string CageFile = 15;
  if (this->cagefile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cagefile().data(), this->cagefile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.CageFile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->cagefile(), target);
  }

  // optional string HeightTex = 16;
  if (this->heighttex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->heighttex().data(), this->heighttex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.HeightTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->heighttex(), target);
  }

  // optional .tLowPolyMesh.eSwizzleComponent NMSwizzleY = 17;
  if (this->nmswizzley() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->nmswizzley(), target);
  }

  // optional bool BatchProtect = 18;
  if (this->batchprotect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->batchprotect(), target);
  }

  // optional bytes AlphaTestValue = 19;
  if (this->alphatestvalue().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->alphatestvalue(), target);
  }

  // optional uint32 Subdivisions = 20;
  if (this->subdivisions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->subdivisions(), target);
  }

  // optional bool Matte = 21;
  if (this->matte() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->matte(), target);
  }

  // optional bool AverageNormals = 22;
  if (this->averagenormals() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->averagenormals(), target);
  }

  // optional bool VectorDisplacementTS = 23;
  if (this->vectordisplacementts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->vectordisplacementts(), target);
  }

  // optional bool UseCage = 24;
  if (this->usecage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->usecage(), target);
  }

  // optional bool Visible = 25;
  if (this->visible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->visible(), target);
  }

  // optional .tLowPolyMesh.eSwizzleComponent NMSwizzleX = 26;
  if (this->nmswizzlex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->nmswizzlex(), target);
  }

  // optional string GlossTex = 27;
  if (this->glosstex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->glosstex().data(), this->glosstex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.GlossTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->glosstex(), target);
  }

  // optional float Scale = 28;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->scale(), target);
  }

  // optional .tLowPolyMesh.eSwizzleComponent NMSwizzleZ = 29;
  if (this->nmswizzlez() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      29, this->nmswizzlez(), target);
  }

  // optional string VectorDisplacementTex = 30;
  if (this->vectordisplacementtex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vectordisplacementtex().data(), this->vectordisplacementtex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.VectorDisplacementTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->vectordisplacementtex(), target);
  }

  // optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleX = 31;
  if (this->vvdmswizzlex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->vvdmswizzlex(), target);
  }

  // optional bool UsePerVertexColors = 32;
  if (this->usepervertexcolors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->usepervertexcolors(), target);
  }

  // optional bool HighpolyNormalsOverrideTangentSpace = 33;
  if (this->highpolynormalsoverridetangentspace() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->highpolynormalsoverridetangentspace(), target);
  }

  // optional string LMAOTex = 34;
  if (this->lmaotex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lmaotex().data(), this->lmaotex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.LMAOTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->lmaotex(), target);
  }

  // optional string SpecTex = 35;
  if (this->spectex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spectex().data(), this->spectex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.SpecTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->spectex(), target);
  }

  // optional string NormTex = 36;
  if (this->normtex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->normtex().data(), this->normtex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.NormTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->normtex(), target);
  }

  // optional .UnspecifiedType HighpolyNormalOverride = 37;
  if (this->has_highpolynormaloverride()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->highpolynormaloverride_, false, target);
  }

  // optional string PositionOffset = 38;
  if (this->positionoffset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positionoffset().data(), this->positionoffset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.PositionOffset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->positionoffset(), target);
  }

  // optional float MaxRayDistanceBack = 39;
  if (this->maxraydistanceback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->maxraydistanceback(), target);
  }

  // optional bool UseFresnel = 40;
  if (this->usefresnel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->usefresnel(), target);
  }

  // optional bool ReceiveShadows = 41;
  if (this->receiveshadows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->receiveshadows(), target);
  }

  // optional string EmissiveTex = 42;
  if (this->emissivetex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->emissivetex().data(), this->emissivetex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tLowPolyMesh.EmissiveTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->emissivetex(), target);
  }

  // optional bool BackfaceCull = 43;
  if (this->backfacecull() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->backfacecull(), target);
  }

  // optional bool CastShadows = 44;
  if (this->castshadows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->castshadows(), target);
  }

  // optional bool MatchUVs = 45;
  if (this->matchuvs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->matchuvs(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tLowPolyMesh)
  return target;
}

int tLowPolyMesh::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tLowPolyMesh)
  int total_size = 0;

  // optional string BaseTex = 1;
  if (this->basetex().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->basetex());
  }

  // optional string BlockersFile = 2;
  if (this->blockersfile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->blockersfile());
  }

  // optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleZ = 3;
  if (this->vvdmswizzlez() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vvdmswizzlez());
  }

  // optional float FresnelRefractiveIndex = 4;
  if (this->fresnelrefractiveindex() != 0) {
    total_size += 1 + 4;
  }

  // optional float UOffset = 5;
  if (this->uoffset() != 0) {
    total_size += 1 + 4;
  }

  // optional float ReflectHDRMult = 6;
  if (this->reflecthdrmult() != 0) {
    total_size += 1 + 4;
  }

  // optional .tLowPolyMesh.eTransparencyMode TransparencyMode = 7;
  if (this->transparencymode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->transparencymode());
  }

  // optional float VOffset = 8;
  if (this->voffset() != 0) {
    total_size += 1 + 4;
  }

  // optional string ReflectTex = 9;
  if (this->reflecttex().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reflecttex());
  }

  // optional float MaxRayDistanceFront = 10;
  if (this->maxraydistancefront() != 0) {
    total_size += 1 + 4;
  }

  // optional string DiffuseGITex = 11;
  if (this->diffusegitex().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diffusegitex());
  }

  // optional .tLowPolyMesh.eNormalMapType NormapMapType = 12;
  if (this->normapmaptype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->normapmaptype());
  }

  // optional string File = 13;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleY = 14;
  if (this->vvdmswizzley() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vvdmswizzley());
  }

  // optional string CageFile = 15;
  if (this->cagefile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cagefile());
  }

  // optional string HeightTex = 16;
  if (this->heighttex().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->heighttex());
  }

  // optional .tLowPolyMesh.eSwizzleComponent NMSwizzleY = 17;
  if (this->nmswizzley() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nmswizzley());
  }

  // optional bool BatchProtect = 18;
  if (this->batchprotect() != 0) {
    total_size += 2 + 1;
  }

  // optional bytes AlphaTestValue = 19;
  if (this->alphatestvalue().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->alphatestvalue());
  }

  // optional uint32 Subdivisions = 20;
  if (this->subdivisions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->subdivisions());
  }

  // optional bool Matte = 21;
  if (this->matte() != 0) {
    total_size += 2 + 1;
  }

  // optional bool AverageNormals = 22;
  if (this->averagenormals() != 0) {
    total_size += 2 + 1;
  }

  // optional bool VectorDisplacementTS = 23;
  if (this->vectordisplacementts() != 0) {
    total_size += 2 + 1;
  }

  // optional bool UseCage = 24;
  if (this->usecage() != 0) {
    total_size += 2 + 1;
  }

  // optional bool Visible = 25;
  if (this->visible() != 0) {
    total_size += 2 + 1;
  }

  // optional .tLowPolyMesh.eSwizzleComponent NMSwizzleX = 26;
  if (this->nmswizzlex() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nmswizzlex());
  }

  // optional string GlossTex = 27;
  if (this->glosstex().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->glosstex());
  }

  // optional float Scale = 28;
  if (this->scale() != 0) {
    total_size += 2 + 4;
  }

  // optional .tLowPolyMesh.eSwizzleComponent NMSwizzleZ = 29;
  if (this->nmswizzlez() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nmswizzlez());
  }

  // optional string VectorDisplacementTex = 30;
  if (this->vectordisplacementtex().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vectordisplacementtex());
  }

  // optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleX = 31;
  if (this->vvdmswizzlex() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vvdmswizzlex());
  }

  // optional bool UsePerVertexColors = 32;
  if (this->usepervertexcolors() != 0) {
    total_size += 2 + 1;
  }

  // optional bool HighpolyNormalsOverrideTangentSpace = 33;
  if (this->highpolynormalsoverridetangentspace() != 0) {
    total_size += 2 + 1;
  }

  // optional string LMAOTex = 34;
  if (this->lmaotex().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lmaotex());
  }

  // optional string SpecTex = 35;
  if (this->spectex().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->spectex());
  }

  // optional string NormTex = 36;
  if (this->normtex().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->normtex());
  }

  // optional .UnspecifiedType HighpolyNormalOverride = 37;
  if (this->has_highpolynormaloverride()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->highpolynormaloverride_);
  }

  // optional string PositionOffset = 38;
  if (this->positionoffset().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->positionoffset());
  }

  // optional float MaxRayDistanceBack = 39;
  if (this->maxraydistanceback() != 0) {
    total_size += 2 + 4;
  }

  // optional bool UseFresnel = 40;
  if (this->usefresnel() != 0) {
    total_size += 2 + 1;
  }

  // optional bool ReceiveShadows = 41;
  if (this->receiveshadows() != 0) {
    total_size += 2 + 1;
  }

  // optional string EmissiveTex = 42;
  if (this->emissivetex().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->emissivetex());
  }

  // optional bool BackfaceCull = 43;
  if (this->backfacecull() != 0) {
    total_size += 2 + 1;
  }

  // optional bool CastShadows = 44;
  if (this->castshadows() != 0) {
    total_size += 2 + 1;
  }

  // optional bool MatchUVs = 45;
  if (this->matchuvs() != 0) {
    total_size += 2 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tLowPolyMesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tLowPolyMesh)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const tLowPolyMesh* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const tLowPolyMesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tLowPolyMesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tLowPolyMesh)
    MergeFrom(*source);
  }
}

void tLowPolyMesh::MergeFrom(const tLowPolyMesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tLowPolyMesh)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.basetex().size() > 0) {

    basetex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basetex_);
  }
  if (from.blockersfile().size() > 0) {

    blockersfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockersfile_);
  }
  if (from.vvdmswizzlez() != 0) {
    set_vvdmswizzlez(from.vvdmswizzlez());
  }
  if (from.fresnelrefractiveindex() != 0) {
    set_fresnelrefractiveindex(from.fresnelrefractiveindex());
  }
  if (from.uoffset() != 0) {
    set_uoffset(from.uoffset());
  }
  if (from.reflecthdrmult() != 0) {
    set_reflecthdrmult(from.reflecthdrmult());
  }
  if (from.transparencymode() != 0) {
    set_transparencymode(from.transparencymode());
  }
  if (from.voffset() != 0) {
    set_voffset(from.voffset());
  }
  if (from.reflecttex().size() > 0) {

    reflecttex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reflecttex_);
  }
  if (from.maxraydistancefront() != 0) {
    set_maxraydistancefront(from.maxraydistancefront());
  }
  if (from.diffusegitex().size() > 0) {

    diffusegitex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diffusegitex_);
  }
  if (from.normapmaptype() != 0) {
    set_normapmaptype(from.normapmaptype());
  }
  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.vvdmswizzley() != 0) {
    set_vvdmswizzley(from.vvdmswizzley());
  }
  if (from.cagefile().size() > 0) {

    cagefile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cagefile_);
  }
  if (from.heighttex().size() > 0) {

    heighttex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.heighttex_);
  }
  if (from.nmswizzley() != 0) {
    set_nmswizzley(from.nmswizzley());
  }
  if (from.batchprotect() != 0) {
    set_batchprotect(from.batchprotect());
  }
  if (from.alphatestvalue().size() > 0) {

    alphatestvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alphatestvalue_);
  }
  if (from.subdivisions() != 0) {
    set_subdivisions(from.subdivisions());
  }
  if (from.matte() != 0) {
    set_matte(from.matte());
  }
  if (from.averagenormals() != 0) {
    set_averagenormals(from.averagenormals());
  }
  if (from.vectordisplacementts() != 0) {
    set_vectordisplacementts(from.vectordisplacementts());
  }
  if (from.usecage() != 0) {
    set_usecage(from.usecage());
  }
  if (from.visible() != 0) {
    set_visible(from.visible());
  }
  if (from.nmswizzlex() != 0) {
    set_nmswizzlex(from.nmswizzlex());
  }
  if (from.glosstex().size() > 0) {

    glosstex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.glosstex_);
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
  if (from.nmswizzlez() != 0) {
    set_nmswizzlez(from.nmswizzlez());
  }
  if (from.vectordisplacementtex().size() > 0) {

    vectordisplacementtex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vectordisplacementtex_);
  }
  if (from.vvdmswizzlex() != 0) {
    set_vvdmswizzlex(from.vvdmswizzlex());
  }
  if (from.usepervertexcolors() != 0) {
    set_usepervertexcolors(from.usepervertexcolors());
  }
  if (from.highpolynormalsoverridetangentspace() != 0) {
    set_highpolynormalsoverridetangentspace(from.highpolynormalsoverridetangentspace());
  }
  if (from.lmaotex().size() > 0) {

    lmaotex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lmaotex_);
  }
  if (from.spectex().size() > 0) {

    spectex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spectex_);
  }
  if (from.normtex().size() > 0) {

    normtex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normtex_);
  }
  if (from.has_highpolynormaloverride()) {
    mutable_highpolynormaloverride()->::UnspecifiedType::MergeFrom(from.highpolynormaloverride());
  }
  if (from.positionoffset().size() > 0) {

    positionoffset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positionoffset_);
  }
  if (from.maxraydistanceback() != 0) {
    set_maxraydistanceback(from.maxraydistanceback());
  }
  if (from.usefresnel() != 0) {
    set_usefresnel(from.usefresnel());
  }
  if (from.receiveshadows() != 0) {
    set_receiveshadows(from.receiveshadows());
  }
  if (from.emissivetex().size() > 0) {

    emissivetex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emissivetex_);
  }
  if (from.backfacecull() != 0) {
    set_backfacecull(from.backfacecull());
  }
  if (from.castshadows() != 0) {
    set_castshadows(from.castshadows());
  }
  if (from.matchuvs() != 0) {
    set_matchuvs(from.matchuvs());
  }
}

void tLowPolyMesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tLowPolyMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tLowPolyMesh::CopyFrom(const tLowPolyMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tLowPolyMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tLowPolyMesh::IsInitialized() const {

  return true;
}

void tLowPolyMesh::Swap(tLowPolyMesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tLowPolyMesh::InternalSwap(tLowPolyMesh* other) {
  basetex_.Swap(&other->basetex_);
  blockersfile_.Swap(&other->blockersfile_);
  std::swap(vvdmswizzlez_, other->vvdmswizzlez_);
  std::swap(fresnelrefractiveindex_, other->fresnelrefractiveindex_);
  std::swap(uoffset_, other->uoffset_);
  std::swap(reflecthdrmult_, other->reflecthdrmult_);
  std::swap(transparencymode_, other->transparencymode_);
  std::swap(voffset_, other->voffset_);
  reflecttex_.Swap(&other->reflecttex_);
  std::swap(maxraydistancefront_, other->maxraydistancefront_);
  diffusegitex_.Swap(&other->diffusegitex_);
  std::swap(normapmaptype_, other->normapmaptype_);
  file_.Swap(&other->file_);
  std::swap(vvdmswizzley_, other->vvdmswizzley_);
  cagefile_.Swap(&other->cagefile_);
  heighttex_.Swap(&other->heighttex_);
  std::swap(nmswizzley_, other->nmswizzley_);
  std::swap(batchprotect_, other->batchprotect_);
  alphatestvalue_.Swap(&other->alphatestvalue_);
  std::swap(subdivisions_, other->subdivisions_);
  std::swap(matte_, other->matte_);
  std::swap(averagenormals_, other->averagenormals_);
  std::swap(vectordisplacementts_, other->vectordisplacementts_);
  std::swap(usecage_, other->usecage_);
  std::swap(visible_, other->visible_);
  std::swap(nmswizzlex_, other->nmswizzlex_);
  glosstex_.Swap(&other->glosstex_);
  std::swap(scale_, other->scale_);
  std::swap(nmswizzlez_, other->nmswizzlez_);
  vectordisplacementtex_.Swap(&other->vectordisplacementtex_);
  std::swap(vvdmswizzlex_, other->vvdmswizzlex_);
  std::swap(usepervertexcolors_, other->usepervertexcolors_);
  std::swap(highpolynormalsoverridetangentspace_, other->highpolynormalsoverridetangentspace_);
  lmaotex_.Swap(&other->lmaotex_);
  spectex_.Swap(&other->spectex_);
  normtex_.Swap(&other->normtex_);
  std::swap(highpolynormaloverride_, other->highpolynormaloverride_);
  positionoffset_.Swap(&other->positionoffset_);
  std::swap(maxraydistanceback_, other->maxraydistanceback_);
  std::swap(usefresnel_, other->usefresnel_);
  std::swap(receiveshadows_, other->receiveshadows_);
  emissivetex_.Swap(&other->emissivetex_);
  std::swap(backfacecull_, other->backfacecull_);
  std::swap(castshadows_, other->castshadows_);
  std::swap(matchuvs_, other->matchuvs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tLowPolyMesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tLowPolyMesh_descriptor_;
  metadata.reflection = tLowPolyMesh_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tLowPolyMesh

// optional string BaseTex = 1;
void tLowPolyMesh::clear_basetex() {
  basetex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tLowPolyMesh::basetex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.BaseTex)
  return basetex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_basetex(const ::std::string& value) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.BaseTex)
}
 void tLowPolyMesh::set_basetex(const char* value) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.BaseTex)
}
 void tLowPolyMesh::set_basetex(const char* value, size_t size) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.BaseTex)
}
 ::std::string* tLowPolyMesh::mutable_basetex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.BaseTex)
  return basetex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tLowPolyMesh::release_basetex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.BaseTex)
  
  return basetex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_allocated_basetex(::std::string* basetex) {
  if (basetex != NULL) {
    
  } else {
    
  }
  basetex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basetex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.BaseTex)
}

// optional string BlockersFile = 2;
void tLowPolyMesh::clear_blockersfile() {
  blockersfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tLowPolyMesh::blockersfile() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.BlockersFile)
  return blockersfile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_blockersfile(const ::std::string& value) {
  
  blockersfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.BlockersFile)
}
 void tLowPolyMesh::set_blockersfile(const char* value) {
  
  blockersfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.BlockersFile)
}
 void tLowPolyMesh::set_blockersfile(const char* value, size_t size) {
  
  blockersfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.BlockersFile)
}
 ::std::string* tLowPolyMesh::mutable_blockersfile() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.BlockersFile)
  return blockersfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tLowPolyMesh::release_blockersfile() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.BlockersFile)
  
  return blockersfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_allocated_blockersfile(::std::string* blockersfile) {
  if (blockersfile != NULL) {
    
  } else {
    
  }
  blockersfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockersfile);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.BlockersFile)
}

// optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleZ = 3;
void tLowPolyMesh::clear_vvdmswizzlez() {
  vvdmswizzlez_ = 0;
}
 ::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::vvdmswizzlez() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.VVDMSwizzleZ)
  return static_cast< ::tLowPolyMesh_eSwizzleComponent >(vvdmswizzlez_);
}
 void tLowPolyMesh::set_vvdmswizzlez(::tLowPolyMesh_eSwizzleComponent value) {
  
  vvdmswizzlez_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.VVDMSwizzleZ)
}

// optional float FresnelRefractiveIndex = 4;
void tLowPolyMesh::clear_fresnelrefractiveindex() {
  fresnelrefractiveindex_ = 0;
}
 float tLowPolyMesh::fresnelrefractiveindex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.FresnelRefractiveIndex)
  return fresnelrefractiveindex_;
}
 void tLowPolyMesh::set_fresnelrefractiveindex(float value) {
  
  fresnelrefractiveindex_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.FresnelRefractiveIndex)
}

// optional float UOffset = 5;
void tLowPolyMesh::clear_uoffset() {
  uoffset_ = 0;
}
 float tLowPolyMesh::uoffset() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.UOffset)
  return uoffset_;
}
 void tLowPolyMesh::set_uoffset(float value) {
  
  uoffset_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.UOffset)
}

// optional float ReflectHDRMult = 6;
void tLowPolyMesh::clear_reflecthdrmult() {
  reflecthdrmult_ = 0;
}
 float tLowPolyMesh::reflecthdrmult() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.ReflectHDRMult)
  return reflecthdrmult_;
}
 void tLowPolyMesh::set_reflecthdrmult(float value) {
  
  reflecthdrmult_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.ReflectHDRMult)
}

// optional .tLowPolyMesh.eTransparencyMode TransparencyMode = 7;
void tLowPolyMesh::clear_transparencymode() {
  transparencymode_ = 0;
}
 ::tLowPolyMesh_eTransparencyMode tLowPolyMesh::transparencymode() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.TransparencyMode)
  return static_cast< ::tLowPolyMesh_eTransparencyMode >(transparencymode_);
}
 void tLowPolyMesh::set_transparencymode(::tLowPolyMesh_eTransparencyMode value) {
  
  transparencymode_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.TransparencyMode)
}

// optional float VOffset = 8;
void tLowPolyMesh::clear_voffset() {
  voffset_ = 0;
}
 float tLowPolyMesh::voffset() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.VOffset)
  return voffset_;
}
 void tLowPolyMesh::set_voffset(float value) {
  
  voffset_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.VOffset)
}

// optional string ReflectTex = 9;
void tLowPolyMesh::clear_reflecttex() {
  reflecttex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tLowPolyMesh::reflecttex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.ReflectTex)
  return reflecttex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_reflecttex(const ::std::string& value) {
  
  reflecttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.ReflectTex)
}
 void tLowPolyMesh::set_reflecttex(const char* value) {
  
  reflecttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.ReflectTex)
}
 void tLowPolyMesh::set_reflecttex(const char* value, size_t size) {
  
  reflecttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.ReflectTex)
}
 ::std::string* tLowPolyMesh::mutable_reflecttex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.ReflectTex)
  return reflecttex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tLowPolyMesh::release_reflecttex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.ReflectTex)
  
  return reflecttex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_allocated_reflecttex(::std::string* reflecttex) {
  if (reflecttex != NULL) {
    
  } else {
    
  }
  reflecttex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reflecttex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.ReflectTex)
}

// optional float MaxRayDistanceFront = 10;
void tLowPolyMesh::clear_maxraydistancefront() {
  maxraydistancefront_ = 0;
}
 float tLowPolyMesh::maxraydistancefront() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.MaxRayDistanceFront)
  return maxraydistancefront_;
}
 void tLowPolyMesh::set_maxraydistancefront(float value) {
  
  maxraydistancefront_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.MaxRayDistanceFront)
}

// optional string DiffuseGITex = 11;
void tLowPolyMesh::clear_diffusegitex() {
  diffusegitex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tLowPolyMesh::diffusegitex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.DiffuseGITex)
  return diffusegitex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_diffusegitex(const ::std::string& value) {
  
  diffusegitex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.DiffuseGITex)
}
 void tLowPolyMesh::set_diffusegitex(const char* value) {
  
  diffusegitex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.DiffuseGITex)
}
 void tLowPolyMesh::set_diffusegitex(const char* value, size_t size) {
  
  diffusegitex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.DiffuseGITex)
}
 ::std::string* tLowPolyMesh::mutable_diffusegitex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.DiffuseGITex)
  return diffusegitex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tLowPolyMesh::release_diffusegitex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.DiffuseGITex)
  
  return diffusegitex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_allocated_diffusegitex(::std::string* diffusegitex) {
  if (diffusegitex != NULL) {
    
  } else {
    
  }
  diffusegitex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diffusegitex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.DiffuseGITex)
}

// optional .tLowPolyMesh.eNormalMapType NormapMapType = 12;
void tLowPolyMesh::clear_normapmaptype() {
  normapmaptype_ = 0;
}
 ::tLowPolyMesh_eNormalMapType tLowPolyMesh::normapmaptype() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.NormapMapType)
  return static_cast< ::tLowPolyMesh_eNormalMapType >(normapmaptype_);
}
 void tLowPolyMesh::set_normapmaptype(::tLowPolyMesh_eNormalMapType value) {
  
  normapmaptype_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.NormapMapType)
}

// optional string File = 13;
void tLowPolyMesh::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tLowPolyMesh::file() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.File)
  return file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.File)
}
 void tLowPolyMesh::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.File)
}
 void tLowPolyMesh::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.File)
}
 ::std::string* tLowPolyMesh::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.File)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tLowPolyMesh::release_file() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.File)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.File)
}

// optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleY = 14;
void tLowPolyMesh::clear_vvdmswizzley() {
  vvdmswizzley_ = 0;
}
 ::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::vvdmswizzley() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.VVDMSwizzleY)
  return static_cast< ::tLowPolyMesh_eSwizzleComponent >(vvdmswizzley_);
}
 void tLowPolyMesh::set_vvdmswizzley(::tLowPolyMesh_eSwizzleComponent value) {
  
  vvdmswizzley_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.VVDMSwizzleY)
}

// optional string CageFile = 15;
void tLowPolyMesh::clear_cagefile() {
  cagefile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tLowPolyMesh::cagefile() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.CageFile)
  return cagefile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_cagefile(const ::std::string& value) {
  
  cagefile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.CageFile)
}
 void tLowPolyMesh::set_cagefile(const char* value) {
  
  cagefile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.CageFile)
}
 void tLowPolyMesh::set_cagefile(const char* value, size_t size) {
  
  cagefile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.CageFile)
}
 ::std::string* tLowPolyMesh::mutable_cagefile() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.CageFile)
  return cagefile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tLowPolyMesh::release_cagefile() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.CageFile)
  
  return cagefile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_allocated_cagefile(::std::string* cagefile) {
  if (cagefile != NULL) {
    
  } else {
    
  }
  cagefile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cagefile);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.CageFile)
}

// optional string HeightTex = 16;
void tLowPolyMesh::clear_heighttex() {
  heighttex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tLowPolyMesh::heighttex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.HeightTex)
  return heighttex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_heighttex(const ::std::string& value) {
  
  heighttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.HeightTex)
}
 void tLowPolyMesh::set_heighttex(const char* value) {
  
  heighttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.HeightTex)
}
 void tLowPolyMesh::set_heighttex(const char* value, size_t size) {
  
  heighttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.HeightTex)
}
 ::std::string* tLowPolyMesh::mutable_heighttex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.HeightTex)
  return heighttex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tLowPolyMesh::release_heighttex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.HeightTex)
  
  return heighttex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_allocated_heighttex(::std::string* heighttex) {
  if (heighttex != NULL) {
    
  } else {
    
  }
  heighttex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), heighttex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.HeightTex)
}

// optional .tLowPolyMesh.eSwizzleComponent NMSwizzleY = 17;
void tLowPolyMesh::clear_nmswizzley() {
  nmswizzley_ = 0;
}
 ::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::nmswizzley() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.NMSwizzleY)
  return static_cast< ::tLowPolyMesh_eSwizzleComponent >(nmswizzley_);
}
 void tLowPolyMesh::set_nmswizzley(::tLowPolyMesh_eSwizzleComponent value) {
  
  nmswizzley_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.NMSwizzleY)
}

// optional bool BatchProtect = 18;
void tLowPolyMesh::clear_batchprotect() {
  batchprotect_ = false;
}
 bool tLowPolyMesh::batchprotect() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.BatchProtect)
  return batchprotect_;
}
 void tLowPolyMesh::set_batchprotect(bool value) {
  
  batchprotect_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.BatchProtect)
}

// optional bytes AlphaTestValue = 19;
void tLowPolyMesh::clear_alphatestvalue() {
  alphatestvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tLowPolyMesh::alphatestvalue() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.AlphaTestValue)
  return alphatestvalue_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_alphatestvalue(const ::std::string& value) {
  
  alphatestvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.AlphaTestValue)
}
 void tLowPolyMesh::set_alphatestvalue(const char* value) {
  
  alphatestvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.AlphaTestValue)
}
 void tLowPolyMesh::set_alphatestvalue(const void* value, size_t size) {
  
  alphatestvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.AlphaTestValue)
}
 ::std::string* tLowPolyMesh::mutable_alphatestvalue() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.AlphaTestValue)
  return alphatestvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tLowPolyMesh::release_alphatestvalue() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.AlphaTestValue)
  
  return alphatestvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_allocated_alphatestvalue(::std::string* alphatestvalue) {
  if (alphatestvalue != NULL) {
    
  } else {
    
  }
  alphatestvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alphatestvalue);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.AlphaTestValue)
}

// optional uint32 Subdivisions = 20;
void tLowPolyMesh::clear_subdivisions() {
  subdivisions_ = 0u;
}
 ::google::protobuf::uint32 tLowPolyMesh::subdivisions() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.Subdivisions)
  return subdivisions_;
}
 void tLowPolyMesh::set_subdivisions(::google::protobuf::uint32 value) {
  
  subdivisions_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.Subdivisions)
}

// optional bool Matte = 21;
void tLowPolyMesh::clear_matte() {
  matte_ = false;
}
 bool tLowPolyMesh::matte() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.Matte)
  return matte_;
}
 void tLowPolyMesh::set_matte(bool value) {
  
  matte_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.Matte)
}

// optional bool AverageNormals = 22;
void tLowPolyMesh::clear_averagenormals() {
  averagenormals_ = false;
}
 bool tLowPolyMesh::averagenormals() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.AverageNormals)
  return averagenormals_;
}
 void tLowPolyMesh::set_averagenormals(bool value) {
  
  averagenormals_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.AverageNormals)
}

// optional bool VectorDisplacementTS = 23;
void tLowPolyMesh::clear_vectordisplacementts() {
  vectordisplacementts_ = false;
}
 bool tLowPolyMesh::vectordisplacementts() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.VectorDisplacementTS)
  return vectordisplacementts_;
}
 void tLowPolyMesh::set_vectordisplacementts(bool value) {
  
  vectordisplacementts_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.VectorDisplacementTS)
}

// optional bool UseCage = 24;
void tLowPolyMesh::clear_usecage() {
  usecage_ = false;
}
 bool tLowPolyMesh::usecage() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.UseCage)
  return usecage_;
}
 void tLowPolyMesh::set_usecage(bool value) {
  
  usecage_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.UseCage)
}

// optional bool Visible = 25;
void tLowPolyMesh::clear_visible() {
  visible_ = false;
}
 bool tLowPolyMesh::visible() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.Visible)
  return visible_;
}
 void tLowPolyMesh::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.Visible)
}

// optional .tLowPolyMesh.eSwizzleComponent NMSwizzleX = 26;
void tLowPolyMesh::clear_nmswizzlex() {
  nmswizzlex_ = 0;
}
 ::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::nmswizzlex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.NMSwizzleX)
  return static_cast< ::tLowPolyMesh_eSwizzleComponent >(nmswizzlex_);
}
 void tLowPolyMesh::set_nmswizzlex(::tLowPolyMesh_eSwizzleComponent value) {
  
  nmswizzlex_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.NMSwizzleX)
}

// optional string GlossTex = 27;
void tLowPolyMesh::clear_glosstex() {
  glosstex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tLowPolyMesh::glosstex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.GlossTex)
  return glosstex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_glosstex(const ::std::string& value) {
  
  glosstex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.GlossTex)
}
 void tLowPolyMesh::set_glosstex(const char* value) {
  
  glosstex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.GlossTex)
}
 void tLowPolyMesh::set_glosstex(const char* value, size_t size) {
  
  glosstex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.GlossTex)
}
 ::std::string* tLowPolyMesh::mutable_glosstex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.GlossTex)
  return glosstex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tLowPolyMesh::release_glosstex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.GlossTex)
  
  return glosstex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_allocated_glosstex(::std::string* glosstex) {
  if (glosstex != NULL) {
    
  } else {
    
  }
  glosstex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), glosstex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.GlossTex)
}

// optional float Scale = 28;
void tLowPolyMesh::clear_scale() {
  scale_ = 0;
}
 float tLowPolyMesh::scale() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.Scale)
  return scale_;
}
 void tLowPolyMesh::set_scale(float value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.Scale)
}

// optional .tLowPolyMesh.eSwizzleComponent NMSwizzleZ = 29;
void tLowPolyMesh::clear_nmswizzlez() {
  nmswizzlez_ = 0;
}
 ::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::nmswizzlez() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.NMSwizzleZ)
  return static_cast< ::tLowPolyMesh_eSwizzleComponent >(nmswizzlez_);
}
 void tLowPolyMesh::set_nmswizzlez(::tLowPolyMesh_eSwizzleComponent value) {
  
  nmswizzlez_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.NMSwizzleZ)
}

// optional string VectorDisplacementTex = 30;
void tLowPolyMesh::clear_vectordisplacementtex() {
  vectordisplacementtex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tLowPolyMesh::vectordisplacementtex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.VectorDisplacementTex)
  return vectordisplacementtex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_vectordisplacementtex(const ::std::string& value) {
  
  vectordisplacementtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.VectorDisplacementTex)
}
 void tLowPolyMesh::set_vectordisplacementtex(const char* value) {
  
  vectordisplacementtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.VectorDisplacementTex)
}
 void tLowPolyMesh::set_vectordisplacementtex(const char* value, size_t size) {
  
  vectordisplacementtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.VectorDisplacementTex)
}
 ::std::string* tLowPolyMesh::mutable_vectordisplacementtex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.VectorDisplacementTex)
  return vectordisplacementtex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tLowPolyMesh::release_vectordisplacementtex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.VectorDisplacementTex)
  
  return vectordisplacementtex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_allocated_vectordisplacementtex(::std::string* vectordisplacementtex) {
  if (vectordisplacementtex != NULL) {
    
  } else {
    
  }
  vectordisplacementtex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vectordisplacementtex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.VectorDisplacementTex)
}

// optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleX = 31;
void tLowPolyMesh::clear_vvdmswizzlex() {
  vvdmswizzlex_ = 0;
}
 ::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::vvdmswizzlex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.VVDMSwizzleX)
  return static_cast< ::tLowPolyMesh_eSwizzleComponent >(vvdmswizzlex_);
}
 void tLowPolyMesh::set_vvdmswizzlex(::tLowPolyMesh_eSwizzleComponent value) {
  
  vvdmswizzlex_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.VVDMSwizzleX)
}

// optional bool UsePerVertexColors = 32;
void tLowPolyMesh::clear_usepervertexcolors() {
  usepervertexcolors_ = false;
}
 bool tLowPolyMesh::usepervertexcolors() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.UsePerVertexColors)
  return usepervertexcolors_;
}
 void tLowPolyMesh::set_usepervertexcolors(bool value) {
  
  usepervertexcolors_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.UsePerVertexColors)
}

// optional bool HighpolyNormalsOverrideTangentSpace = 33;
void tLowPolyMesh::clear_highpolynormalsoverridetangentspace() {
  highpolynormalsoverridetangentspace_ = false;
}
 bool tLowPolyMesh::highpolynormalsoverridetangentspace() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.HighpolyNormalsOverrideTangentSpace)
  return highpolynormalsoverridetangentspace_;
}
 void tLowPolyMesh::set_highpolynormalsoverridetangentspace(bool value) {
  
  highpolynormalsoverridetangentspace_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.HighpolyNormalsOverrideTangentSpace)
}

// optional string LMAOTex = 34;
void tLowPolyMesh::clear_lmaotex() {
  lmaotex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tLowPolyMesh::lmaotex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.LMAOTex)
  return lmaotex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_lmaotex(const ::std::string& value) {
  
  lmaotex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.LMAOTex)
}
 void tLowPolyMesh::set_lmaotex(const char* value) {
  
  lmaotex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.LMAOTex)
}
 void tLowPolyMesh::set_lmaotex(const char* value, size_t size) {
  
  lmaotex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.LMAOTex)
}
 ::std::string* tLowPolyMesh::mutable_lmaotex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.LMAOTex)
  return lmaotex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tLowPolyMesh::release_lmaotex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.LMAOTex)
  
  return lmaotex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_allocated_lmaotex(::std::string* lmaotex) {
  if (lmaotex != NULL) {
    
  } else {
    
  }
  lmaotex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lmaotex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.LMAOTex)
}

// optional string SpecTex = 35;
void tLowPolyMesh::clear_spectex() {
  spectex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tLowPolyMesh::spectex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.SpecTex)
  return spectex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_spectex(const ::std::string& value) {
  
  spectex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.SpecTex)
}
 void tLowPolyMesh::set_spectex(const char* value) {
  
  spectex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.SpecTex)
}
 void tLowPolyMesh::set_spectex(const char* value, size_t size) {
  
  spectex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.SpecTex)
}
 ::std::string* tLowPolyMesh::mutable_spectex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.SpecTex)
  return spectex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tLowPolyMesh::release_spectex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.SpecTex)
  
  return spectex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_allocated_spectex(::std::string* spectex) {
  if (spectex != NULL) {
    
  } else {
    
  }
  spectex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spectex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.SpecTex)
}

// optional string NormTex = 36;
void tLowPolyMesh::clear_normtex() {
  normtex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tLowPolyMesh::normtex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.NormTex)
  return normtex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_normtex(const ::std::string& value) {
  
  normtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.NormTex)
}
 void tLowPolyMesh::set_normtex(const char* value) {
  
  normtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.NormTex)
}
 void tLowPolyMesh::set_normtex(const char* value, size_t size) {
  
  normtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.NormTex)
}
 ::std::string* tLowPolyMesh::mutable_normtex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.NormTex)
  return normtex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tLowPolyMesh::release_normtex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.NormTex)
  
  return normtex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_allocated_normtex(::std::string* normtex) {
  if (normtex != NULL) {
    
  } else {
    
  }
  normtex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normtex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.NormTex)
}

// optional .UnspecifiedType HighpolyNormalOverride = 37;
bool tLowPolyMesh::has_highpolynormaloverride() const {
  return !_is_default_instance_ && highpolynormaloverride_ != NULL;
}
void tLowPolyMesh::clear_highpolynormaloverride() {
  if (GetArenaNoVirtual() == NULL && highpolynormaloverride_ != NULL) delete highpolynormaloverride_;
  highpolynormaloverride_ = NULL;
}
const ::UnspecifiedType& tLowPolyMesh::highpolynormaloverride() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.HighpolyNormalOverride)
  return highpolynormaloverride_ != NULL ? *highpolynormaloverride_ : *default_instance_->highpolynormaloverride_;
}
::UnspecifiedType* tLowPolyMesh::mutable_highpolynormaloverride() {
  
  if (highpolynormaloverride_ == NULL) {
    highpolynormaloverride_ = new ::UnspecifiedType;
  }
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.HighpolyNormalOverride)
  return highpolynormaloverride_;
}
::UnspecifiedType* tLowPolyMesh::release_highpolynormaloverride() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.HighpolyNormalOverride)
  
  ::UnspecifiedType* temp = highpolynormaloverride_;
  highpolynormaloverride_ = NULL;
  return temp;
}
void tLowPolyMesh::set_allocated_highpolynormaloverride(::UnspecifiedType* highpolynormaloverride) {
  delete highpolynormaloverride_;
  highpolynormaloverride_ = highpolynormaloverride;
  if (highpolynormaloverride) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.HighpolyNormalOverride)
}

// optional string PositionOffset = 38;
void tLowPolyMesh::clear_positionoffset() {
  positionoffset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tLowPolyMesh::positionoffset() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.PositionOffset)
  return positionoffset_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_positionoffset(const ::std::string& value) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.PositionOffset)
}
 void tLowPolyMesh::set_positionoffset(const char* value) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.PositionOffset)
}
 void tLowPolyMesh::set_positionoffset(const char* value, size_t size) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.PositionOffset)
}
 ::std::string* tLowPolyMesh::mutable_positionoffset() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.PositionOffset)
  return positionoffset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tLowPolyMesh::release_positionoffset() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.PositionOffset)
  
  return positionoffset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_allocated_positionoffset(::std::string* positionoffset) {
  if (positionoffset != NULL) {
    
  } else {
    
  }
  positionoffset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positionoffset);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.PositionOffset)
}

// optional float MaxRayDistanceBack = 39;
void tLowPolyMesh::clear_maxraydistanceback() {
  maxraydistanceback_ = 0;
}
 float tLowPolyMesh::maxraydistanceback() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.MaxRayDistanceBack)
  return maxraydistanceback_;
}
 void tLowPolyMesh::set_maxraydistanceback(float value) {
  
  maxraydistanceback_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.MaxRayDistanceBack)
}

// optional bool UseFresnel = 40;
void tLowPolyMesh::clear_usefresnel() {
  usefresnel_ = false;
}
 bool tLowPolyMesh::usefresnel() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.UseFresnel)
  return usefresnel_;
}
 void tLowPolyMesh::set_usefresnel(bool value) {
  
  usefresnel_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.UseFresnel)
}

// optional bool ReceiveShadows = 41;
void tLowPolyMesh::clear_receiveshadows() {
  receiveshadows_ = false;
}
 bool tLowPolyMesh::receiveshadows() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.ReceiveShadows)
  return receiveshadows_;
}
 void tLowPolyMesh::set_receiveshadows(bool value) {
  
  receiveshadows_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.ReceiveShadows)
}

// optional string EmissiveTex = 42;
void tLowPolyMesh::clear_emissivetex() {
  emissivetex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tLowPolyMesh::emissivetex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.EmissiveTex)
  return emissivetex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_emissivetex(const ::std::string& value) {
  
  emissivetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.EmissiveTex)
}
 void tLowPolyMesh::set_emissivetex(const char* value) {
  
  emissivetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.EmissiveTex)
}
 void tLowPolyMesh::set_emissivetex(const char* value, size_t size) {
  
  emissivetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.EmissiveTex)
}
 ::std::string* tLowPolyMesh::mutable_emissivetex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.EmissiveTex)
  return emissivetex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tLowPolyMesh::release_emissivetex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.EmissiveTex)
  
  return emissivetex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tLowPolyMesh::set_allocated_emissivetex(::std::string* emissivetex) {
  if (emissivetex != NULL) {
    
  } else {
    
  }
  emissivetex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emissivetex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.EmissiveTex)
}

// optional bool BackfaceCull = 43;
void tLowPolyMesh::clear_backfacecull() {
  backfacecull_ = false;
}
 bool tLowPolyMesh::backfacecull() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.BackfaceCull)
  return backfacecull_;
}
 void tLowPolyMesh::set_backfacecull(bool value) {
  
  backfacecull_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.BackfaceCull)
}

// optional bool CastShadows = 44;
void tLowPolyMesh::clear_castshadows() {
  castshadows_ = false;
}
 bool tLowPolyMesh::castshadows() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.CastShadows)
  return castshadows_;
}
 void tLowPolyMesh::set_castshadows(bool value) {
  
  castshadows_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.CastShadows)
}

// optional bool MatchUVs = 45;
void tLowPolyMesh::clear_matchuvs() {
  matchuvs_ = false;
}
 bool tLowPolyMesh::matchuvs() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.MatchUVs)
  return matchuvs_;
}
 void tLowPolyMesh::set_matchuvs(bool value) {
  
  matchuvs_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.MatchUVs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tVector3::kXFieldNumber;
const int tVector3::kYFieldNumber;
const int tVector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tVector3::tVector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tVector3)
}

void tVector3::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

tVector3::tVector3(const tVector3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tVector3)
}

void tVector3::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

tVector3::~tVector3() {
  // @@protoc_insertion_point(destructor:tVector3)
  SharedDtor();
}

void tVector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tVector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tVector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tVector3_descriptor_;
}

const tVector3& tVector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xnormal_2eproto();
  return *default_instance_;
}

tVector3* tVector3::default_instance_ = NULL;

tVector3* tVector3::New(::google::protobuf::Arena* arena) const {
  tVector3* n = new tVector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tVector3::Clear() {
// @@protoc_insertion_point(message_clear_start:tVector3)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(tVector3, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<tVector3*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool tVector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tVector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tVector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tVector3)
  return false;
#undef DO_
}

void tVector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tVector3)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:tVector3)
}

::google::protobuf::uint8* tVector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tVector3)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tVector3)
  return target;
}

int tVector3::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tVector3)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tVector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tVector3)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const tVector3* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const tVector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tVector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tVector3)
    MergeFrom(*source);
  }
}

void tVector3::MergeFrom(const tVector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tVector3)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void tVector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tVector3::CopyFrom(const tVector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tVector3::IsInitialized() const {

  return true;
}

void tVector3::Swap(tVector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tVector3::InternalSwap(tVector3* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tVector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tVector3_descriptor_;
  metadata.reflection = tVector3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tVector3

// optional float x = 1;
void tVector3::clear_x() {
  x_ = 0;
}
 float tVector3::x() const {
  // @@protoc_insertion_point(field_get:tVector3.x)
  return x_;
}
 void tVector3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:tVector3.x)
}

// optional float y = 2;
void tVector3::clear_y() {
  y_ = 0;
}
 float tVector3::y() const {
  // @@protoc_insertion_point(field_get:tVector3.y)
  return y_;
}
 void tVector3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:tVector3.y)
}

// optional float z = 3;
void tVector3::clear_z() {
  z_ = 0;
}
 float tVector3::z() const {
  // @@protoc_insertion_point(field_get:tVector3.z)
  return z_;
}
 void tVector3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:tVector3.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* tGenerateMaps_eAODistribution_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tGenerateMaps_eAODistribution_descriptor_;
}
bool tGenerateMaps_eAODistribution_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tGenerateMaps_eAODistribution tGenerateMaps::eAODistribution_Cosine;
const tGenerateMaps_eAODistribution tGenerateMaps::eAODistribution_CosineSq;
const tGenerateMaps_eAODistribution tGenerateMaps::eAODistribution_Uniform;
const tGenerateMaps_eAODistribution tGenerateMaps::eAODistribution_MIN;
const tGenerateMaps_eAODistribution tGenerateMaps::eAODistribution_MAX;
const int tGenerateMaps::eAODistribution_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* tGenerateMaps_eSwizzleComponent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tGenerateMaps_eSwizzleComponent_descriptor_;
}
bool tGenerateMaps_eSwizzleComponent_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tGenerateMaps_eSwizzleComponent tGenerateMaps::eSwizzleComponent_X0;
const tGenerateMaps_eSwizzleComponent tGenerateMaps::eSwizzleComponent_X1;
const tGenerateMaps_eSwizzleComponent tGenerateMaps::eSwizzleComponent_Y0;
const tGenerateMaps_eSwizzleComponent tGenerateMaps::eSwizzleComponent_Y1;
const tGenerateMaps_eSwizzleComponent tGenerateMaps::eSwizzleComponent_Z0;
const tGenerateMaps_eSwizzleComponent tGenerateMaps::eSwizzleComponent_Z1;
const tGenerateMaps_eSwizzleComponent tGenerateMaps::eSwizzleComponent_MIN;
const tGenerateMaps_eSwizzleComponent tGenerateMaps::eSwizzleComponent_MAX;
const int tGenerateMaps::eSwizzleComponent_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* tGenerateMaps_eHMNormalization_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tGenerateMaps_eHMNormalization_descriptor_;
}
bool tGenerateMaps_eHMNormalization_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tGenerateMaps_eHMNormalization tGenerateMaps::eHMNormalization_Interactive;
const tGenerateMaps_eHMNormalization tGenerateMaps::eHMNormalization_Manual;
const tGenerateMaps_eHMNormalization tGenerateMaps::eHMNormalization_Raw;
const tGenerateMaps_eHMNormalization tGenerateMaps::eHMNormalization_MIN;
const tGenerateMaps_eHMNormalization tGenerateMaps::eHMNormalization_MAX;
const int tGenerateMaps::eHMNormalization_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* tGenerateMaps_eRNMCoordSys_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tGenerateMaps_eRNMCoordSys_descriptor_;
}
bool tGenerateMaps_eRNMCoordSys_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tGenerateMaps_eRNMCoordSys tGenerateMaps::eRNMCoordSys_AliB;
const tGenerateMaps_eRNMCoordSys tGenerateMaps::eRNMCoordSys_Direct3D;
const tGenerateMaps_eRNMCoordSys tGenerateMaps::eRNMCoordSys_OpenGL;
const tGenerateMaps_eRNMCoordSys tGenerateMaps::eRNMCoordSys_MIN;
const tGenerateMaps_eRNMCoordSys tGenerateMaps::eRNMCoordSys_MAX;
const int tGenerateMaps::eRNMCoordSys_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* tGenerateMaps_eAntialiasing_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tGenerateMaps_eAntialiasing_descriptor_;
}
bool tGenerateMaps_eAntialiasing_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tGenerateMaps_eAntialiasing tGenerateMaps::eAntialiasing_1;
const tGenerateMaps_eAntialiasing tGenerateMaps::eAntialiasing_2;
const tGenerateMaps_eAntialiasing tGenerateMaps::eAntialiasing_4;
const tGenerateMaps_eAntialiasing tGenerateMaps::eAntialiasing_MIN;
const tGenerateMaps_eAntialiasing tGenerateMaps::eAntialiasing_MAX;
const int tGenerateMaps::eAntialiasing_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* tGenerateMaps_eCurvAlgorithm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tGenerateMaps_eCurvAlgorithm_descriptor_;
}
bool tGenerateMaps_eCurvAlgorithm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tGenerateMaps_eCurvAlgorithm tGenerateMaps::eCurvAlgorithm_Average;
const tGenerateMaps_eCurvAlgorithm tGenerateMaps::eCurvAlgorithm_Gaussian;
const tGenerateMaps_eCurvAlgorithm tGenerateMaps::eCurvAlgorithm_MIN;
const tGenerateMaps_eCurvAlgorithm tGenerateMaps::eCurvAlgorithm_MAX;
const int tGenerateMaps::eCurvAlgorithm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tGenerateMaps::kNMBackgroundColorFieldNumber;
const int tGenerateMaps::kHMBackgroundColorFieldNumber;
const int tGenerateMaps::kBakeHighpolyBaseTextureNoTexColFieldNumber;
const int tGenerateMaps::kBakeHighpolyBaseTextureBackgroundColorFieldNumber;
const int tGenerateMaps::kRenderWireframeBackgroundColorFieldNumber;
const int tGenerateMaps::kRenderWireframeColFieldNumber;
const int tGenerateMaps::kRenderCWColFieldNumber;
const int tGenerateMaps::kRenderSeamColFieldNumber;
const int tGenerateMaps::kRenderRayFailsColFieldNumber;
const int tGenerateMaps::kAOOccludedColorFieldNumber;
const int tGenerateMaps::kAOUnoccludedColorFieldNumber;
const int tGenerateMaps::kAOBackgroundColorFieldNumber;
const int tGenerateMaps::kBentBackgroundColorFieldNumber;
const int tGenerateMaps::kPRTBackgroundColorFieldNumber;
const int tGenerateMaps::kConvexityBackgroundColorFieldNumber;
const int tGenerateMaps::kThicknessBackgroundColorFieldNumber;
const int tGenerateMaps::kProximityBackgroundColorFieldNumber;
const int tGenerateMaps::kCavityBackgroundColorFieldNumber;
const int tGenerateMaps::kVDMBackgroundColorFieldNumber;
const int tGenerateMaps::kRadNMBackgroundColorFieldNumber;
const int tGenerateMaps::kCurvBackgroundColorFieldNumber;
const int tGenerateMaps::kDerivNMBackgroundColorFieldNumber;
const int tGenerateMaps::kTransluBackgroundColorFieldNumber;
const int tGenerateMaps::kBakeHighpolyVColsBackgroundColFieldNumber;
const int tGenerateMaps::kClosestIfFailsFieldNumber;
const int tGenerateMaps::kDirectionsTonemapMaxFieldNumber;
const int tGenerateMaps::kCurvMonocromeFieldNumber;
const int tGenerateMaps::kAOBiasFieldNumber;
const int tGenerateMaps::kBentTangentSpaceFieldNumber;
const int tGenerateMaps::kGenTransluFieldNumber;
const int tGenerateMaps::kAODistributionFieldNumber;
const int tGenerateMaps::kPRTThresholdFieldNumber;
const int tGenerateMaps::kDirectionsTonemapMinFieldNumber;
const int tGenerateMaps::kCurvDistributionFieldNumber;
const int tGenerateMaps::kBentJitterFieldNumber;
const int tGenerateMaps::kBentDistributionFieldNumber;
const int tGenerateMaps::kBakeHighpolyBaseTextureFieldNumber;
const int tGenerateMaps::kGenConvexityFieldNumber;
const int tGenerateMaps::kRadiosityNormalsAttenLinearFieldNumber;
const int tGenerateMaps::kTransluRaysPerSampleFieldNumber;
const int tGenerateMaps::kCurvSearchDistanceFieldNumber;
const int tGenerateMaps::kSwizzleZFieldNumber;
const int tGenerateMaps::kTransluBiasFieldNumber;
const int tGenerateMaps::kPRTLimitRayDistanceFieldNumber;
const int tGenerateMaps::kGenBentFieldNumber;
const int tGenerateMaps::kAOLimitRayDistanceFieldNumber;
const int tGenerateMaps::kCurvRaysPerSampleFieldNumber;
const int tGenerateMaps::kRadiosityNormalsDistributionFieldNumber;
const int tGenerateMaps::kRadiosityNormalsRaysPerSampleFieldNumber;
const int tGenerateMaps::kCurvJitterFieldNumber;
const int tGenerateMaps::kTangentSpaceFieldNumber;
const int tGenerateMaps::kRadiosityNormalsAllowPureOcclusionFieldNumber;
const int tGenerateMaps::kBentSwizzleXFieldNumber;
const int tGenerateMaps::kSwizzleYFieldNumber;
const int tGenerateMaps::kGenCurvFieldNumber;
const int tGenerateMaps::kPRTJitterFieldNumber;
const int tGenerateMaps::kAOAttenCuadraticFieldNumber;
const int tGenerateMaps::kBentConeAngleFieldNumber;
const int tGenerateMaps::kSwizzleXFieldNumber;
const int tGenerateMaps::kRenderRayFailsFieldNumber;
const int tGenerateMaps::kCavitySearchRadiusFieldNumber;
const int tGenerateMaps::kRadiosityNormalsEncodeAOFieldNumber;
const int tGenerateMaps::kTransluConeAngleFieldNumber;
const int tGenerateMaps::kBentRaysPerSampleFieldNumber;
const int tGenerateMaps::kConvexityScaleFieldNumber;
const int tGenerateMaps::kRadiosityNormalsConeAngleFieldNumber;
const int tGenerateMaps::kFileFieldNumber;
const int tGenerateMaps::kGenDerivNMFieldNumber;
const int tGenerateMaps::kBentLimitRayDistanceFieldNumber;
const int tGenerateMaps::kPRTBiasFieldNumber;
const int tGenerateMaps::kRenderWireframeFieldNumber;
const int tGenerateMaps::kPRTNormalizeFieldNumber;
const int tGenerateMaps::kGenAOFieldNumber;
const int tGenerateMaps::kPRTConeAngleFieldNumber;
const int tGenerateMaps::kHeightFieldNumber;
const int tGenerateMaps::kRadiosityNormalsAttenCuadraticFieldNumber;
const int tGenerateMaps::kDirectionsTonemapFieldNumber;
const int tGenerateMaps::kDirectionsTSFieldNumber;
const int tGenerateMaps::kPRTRaysPerSampleFieldNumber;
const int tGenerateMaps::kEdgePaddingFieldNumber;
const int tGenerateMaps::kDirectionsSwizzleZFieldNumber;
const int tGenerateMaps::kAOAllowPureOccludedFieldNumber;
const int tGenerateMaps::kAOIgnoreBackfaceHitsFieldNumber;
const int tGenerateMaps::kCavityRaysPerSampleFieldNumber;
const int tGenerateMaps::kAOAttenConstantFieldNumber;
const int tGenerateMaps::kCavityJitterFieldNumber;
const int tGenerateMaps::kHeightTonemapMaxFieldNumber;
const int tGenerateMaps::kGenDirectionsFieldNumber;
const int tGenerateMaps::kRadiosityNormalsLimitRayDistanceFieldNumber;
const int tGenerateMaps::kHeightTonemapMinFieldNumber;
const int tGenerateMaps::kRadiosityNormalsJitterFieldNumber;
const int tGenerateMaps::kDirectionsSwizzleYFieldNumber;
const int tGenerateMaps::kWidthFieldNumber;
const int tGenerateMaps::kBakeHighpolyBaseTextureDrawObjectIDIfNoTextureFieldNumber;
const int tGenerateMaps::kConcavityFieldNumber;
const int tGenerateMaps::kDirectionsSwizzleXFieldNumber;
const int tGenerateMaps::kGenNormalsFieldNumber;
const int tGenerateMaps::kProximityRaysPerSampleFieldNumber;
const int tGenerateMaps::kGenHeightsFieldNumber;
const int tGenerateMaps::kRadiosityNormalsAttenConstantFieldNumber;
const int tGenerateMaps::kGenProximityFieldNumber;
const int tGenerateMaps::kGenPRTFieldNumber;
const int tGenerateMaps::kCavityContrastFieldNumber;
const int tGenerateMaps::kRadiosityNormalsCoordSysFieldNumber;
const int tGenerateMaps::kTransluJitterFieldNumber;
const int tGenerateMaps::kAORaysPerSampleFieldNumber;
const int tGenerateMaps::kBentBiasFieldNumber;
const int tGenerateMaps::kDiscardRayBackFacesHitsFieldNumber;
const int tGenerateMaps::kAOConeAngleFieldNumber;
const int tGenerateMaps::kBentSwizzleYFieldNumber;
const int tGenerateMaps::kRadiosityNormalsBiasFieldNumber;
const int tGenerateMaps::kRadiosityNormalsContrastFieldNumber;
const int tGenerateMaps::kCavityStepsFieldNumber;
const int tGenerateMaps::kAAFieldNumber;
const int tGenerateMaps::kBentSwizzleZFieldNumber;
const int tGenerateMaps::kBucketSizeFieldNumber;
const int tGenerateMaps::kCurvConeAngleFieldNumber;
const int tGenerateMaps::kTransluDistFieldNumber;
const int tGenerateMaps::kAOJitterFieldNumber;
const int tGenerateMaps::kCurvBiasFieldNumber;
const int tGenerateMaps::kGenWireRaysFieldNumber;
const int tGenerateMaps::kCurvAlgorithmFieldNumber;
const int tGenerateMaps::kTransluDistributionFieldNumber;
const int tGenerateMaps::kAOAttenLinearFieldNumber;
const int tGenerateMaps::kProximityLimitRayDistanceFieldNumber;
const int tGenerateMaps::kGenRadiosityNormalsFieldNumber;
const int tGenerateMaps::kProximityConeAngleFieldNumber;
const int tGenerateMaps::kHeightTonemapFieldNumber;
const int tGenerateMaps::kGenCavityFieldNumber;
const int tGenerateMaps::kBakeHighpolyVColsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tGenerateMaps::tGenerateMaps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tGenerateMaps)
}

void tGenerateMaps::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  nmbackgroundcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  hmbackgroundcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  bakehighpolybasetexturenotexcol_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  bakehighpolybasetexturebackgroundcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  renderwireframebackgroundcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  renderwireframecol_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  rendercwcol_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  renderseamcol_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  renderrayfailscol_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  aooccludedcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  aounoccludedcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  aobackgroundcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  bentbackgroundcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  prtbackgroundcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  convexitybackgroundcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  thicknessbackgroundcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  proximitybackgroundcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  cavitybackgroundcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  vdmbackgroundcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  radnmbackgroundcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  curvbackgroundcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  derivnmbackgroundcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  translubackgroundcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  bakehighpolyvcolsbackgroundcol_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
}

tGenerateMaps::tGenerateMaps(const tGenerateMaps& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tGenerateMaps)
}

void tGenerateMaps::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nmbackgroundcolor_ = NULL;
  hmbackgroundcolor_ = NULL;
  bakehighpolybasetexturenotexcol_ = NULL;
  bakehighpolybasetexturebackgroundcolor_ = NULL;
  renderwireframebackgroundcolor_ = NULL;
  renderwireframecol_ = NULL;
  rendercwcol_ = NULL;
  renderseamcol_ = NULL;
  renderrayfailscol_ = NULL;
  aooccludedcolor_ = NULL;
  aounoccludedcolor_ = NULL;
  aobackgroundcolor_ = NULL;
  bentbackgroundcolor_ = NULL;
  prtbackgroundcolor_ = NULL;
  convexitybackgroundcolor_ = NULL;
  thicknessbackgroundcolor_ = NULL;
  proximitybackgroundcolor_ = NULL;
  cavitybackgroundcolor_ = NULL;
  vdmbackgroundcolor_ = NULL;
  radnmbackgroundcolor_ = NULL;
  curvbackgroundcolor_ = NULL;
  derivnmbackgroundcolor_ = NULL;
  translubackgroundcolor_ = NULL;
  bakehighpolyvcolsbackgroundcol_ = NULL;
  closestiffails_ = false;
  directionstonemapmax_ = 0;
  curvmonocrome_ = false;
  aobias_ = 0;
  benttangentspace_ = false;
  gentranslu_ = false;
  aodistribution_ = 0;
  prtthreshold_ = 0;
  directionstonemapmin_ = 0;
  curvdistribution_ = 0;
  bentjitter_ = false;
  bentdistribution_ = 0;
  bakehighpolybasetexture_ = false;
  genconvexity_ = false;
  radiositynormalsattenlinear_ = 0;
  translurayspersample_ = 0u;
  curvsearchdistance_ = 0;
  swizzlez_ = 0;
  translubias_ = 0;
  prtlimitraydistance_ = false;
  genbent_ = false;
  aolimitraydistance_ = false;
  curvrayspersample_ = 0u;
  radiositynormalsdistribution_ = 0;
  radiositynormalsrayspersample_ = 0u;
  curvjitter_ = false;
  tangentspace_ = false;
  radiositynormalsallowpureocclusion_ = false;
  bentswizzlex_ = 0;
  swizzley_ = 0;
  gencurv_ = false;
  prtjitter_ = false;
  aoattencuadratic_ = 0;
  bentconeangle_ = 0;
  swizzlex_ = 0;
  renderrayfails_ = false;
  cavitysearchradius_ = 0;
  radiositynormalsencodeao_ = false;
  transluconeangle_ = 0;
  bentrayspersample_ = 0u;
  convexityscale_ = 0;
  radiositynormalsconeangle_ = 0;
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genderivnm_ = false;
  bentlimitraydistance_ = false;
  prtbias_ = 0;
  renderwireframe_ = false;
  prtnormalize_ = false;
  genao_ = false;
  prtconeangle_ = 0;
  height_ = 0u;
  radiositynormalsattencuadratic_ = 0;
  directionstonemap_ = 0;
  directionsts_ = false;
  prtrayspersample_ = 0u;
  edgepadding_ = 0u;
  directionsswizzlez_ = 0;
  aoallowpureoccluded_ = false;
  aoignorebackfacehits_ = false;
  cavityrayspersample_ = 0u;
  aoattenconstant_ = 0;
  cavityjitter_ = false;
  heighttonemapmax_ = 0;
  gendirections_ = false;
  radiositynormalslimitraydistance_ = false;
  heighttonemapmin_ = 0;
  radiositynormalsjitter_ = false;
  directionsswizzley_ = 0;
  width_ = 0u;
  bakehighpolybasetexturedrawobjectidifnotexture_ = false;
  concavity_ = false;
  directionsswizzlex_ = 0;
  gennormals_ = false;
  proximityrayspersample_ = 0u;
  genheights_ = false;
  radiositynormalsattenconstant_ = 0;
  genproximity_ = false;
  genprt_ = false;
  cavitycontrast_ = 0;
  radiositynormalscoordsys_ = 0;
  translujitter_ = false;
  aorayspersample_ = 0u;
  bentbias_ = 0;
  discardraybackfaceshits_ = false;
  aoconeangle_ = 0;
  bentswizzley_ = 0;
  radiositynormalsbias_ = 0;
  radiositynormalscontrast_ = 0;
  cavitysteps_ = 0u;
  aa_ = 0;
  bentswizzlez_ = 0;
  bucketsize_ = 0u;
  curvconeangle_ = 0;
  transludist_ = 0;
  aojitter_ = false;
  curvbias_ = 0;
  genwirerays_ = false;
  curvalgorithm_ = 0;
  transludistribution_ = 0;
  aoattenlinear_ = 0;
  proximitylimitraydistance_ = false;
  genradiositynormals_ = false;
  proximityconeangle_ = 0;
  heighttonemap_ = 0;
  gencavity_ = false;
  bakehighpolyvcols_ = false;
}

tGenerateMaps::~tGenerateMaps() {
  // @@protoc_insertion_point(destructor:tGenerateMaps)
  SharedDtor();
}

void tGenerateMaps::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete nmbackgroundcolor_;
    delete hmbackgroundcolor_;
    delete bakehighpolybasetexturenotexcol_;
    delete bakehighpolybasetexturebackgroundcolor_;
    delete renderwireframebackgroundcolor_;
    delete renderwireframecol_;
    delete rendercwcol_;
    delete renderseamcol_;
    delete renderrayfailscol_;
    delete aooccludedcolor_;
    delete aounoccludedcolor_;
    delete aobackgroundcolor_;
    delete bentbackgroundcolor_;
    delete prtbackgroundcolor_;
    delete convexitybackgroundcolor_;
    delete thicknessbackgroundcolor_;
    delete proximitybackgroundcolor_;
    delete cavitybackgroundcolor_;
    delete vdmbackgroundcolor_;
    delete radnmbackgroundcolor_;
    delete curvbackgroundcolor_;
    delete derivnmbackgroundcolor_;
    delete translubackgroundcolor_;
    delete bakehighpolyvcolsbackgroundcol_;
  }
}

void tGenerateMaps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tGenerateMaps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tGenerateMaps_descriptor_;
}

const tGenerateMaps& tGenerateMaps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xnormal_2eproto();
  return *default_instance_;
}

tGenerateMaps* tGenerateMaps::default_instance_ = NULL;

tGenerateMaps* tGenerateMaps::New(::google::protobuf::Arena* arena) const {
  tGenerateMaps* n = new tGenerateMaps;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tGenerateMaps::Clear() {
// @@protoc_insertion_point(message_clear_start:tGenerateMaps)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(tGenerateMaps, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<tGenerateMaps*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (GetArenaNoVirtual() == NULL && nmbackgroundcolor_ != NULL) delete nmbackgroundcolor_;
  nmbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && hmbackgroundcolor_ != NULL) delete hmbackgroundcolor_;
  hmbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && bakehighpolybasetexturenotexcol_ != NULL) delete bakehighpolybasetexturenotexcol_;
  bakehighpolybasetexturenotexcol_ = NULL;
  if (GetArenaNoVirtual() == NULL && bakehighpolybasetexturebackgroundcolor_ != NULL) delete bakehighpolybasetexturebackgroundcolor_;
  bakehighpolybasetexturebackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && renderwireframebackgroundcolor_ != NULL) delete renderwireframebackgroundcolor_;
  renderwireframebackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && renderwireframecol_ != NULL) delete renderwireframecol_;
  renderwireframecol_ = NULL;
  if (GetArenaNoVirtual() == NULL && rendercwcol_ != NULL) delete rendercwcol_;
  rendercwcol_ = NULL;
  if (GetArenaNoVirtual() == NULL && renderseamcol_ != NULL) delete renderseamcol_;
  renderseamcol_ = NULL;
  if (GetArenaNoVirtual() == NULL && renderrayfailscol_ != NULL) delete renderrayfailscol_;
  renderrayfailscol_ = NULL;
  if (GetArenaNoVirtual() == NULL && aooccludedcolor_ != NULL) delete aooccludedcolor_;
  aooccludedcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && aounoccludedcolor_ != NULL) delete aounoccludedcolor_;
  aounoccludedcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && aobackgroundcolor_ != NULL) delete aobackgroundcolor_;
  aobackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && bentbackgroundcolor_ != NULL) delete bentbackgroundcolor_;
  bentbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && prtbackgroundcolor_ != NULL) delete prtbackgroundcolor_;
  prtbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && convexitybackgroundcolor_ != NULL) delete convexitybackgroundcolor_;
  convexitybackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && thicknessbackgroundcolor_ != NULL) delete thicknessbackgroundcolor_;
  thicknessbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && proximitybackgroundcolor_ != NULL) delete proximitybackgroundcolor_;
  proximitybackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && cavitybackgroundcolor_ != NULL) delete cavitybackgroundcolor_;
  cavitybackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && vdmbackgroundcolor_ != NULL) delete vdmbackgroundcolor_;
  vdmbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && radnmbackgroundcolor_ != NULL) delete radnmbackgroundcolor_;
  radnmbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && curvbackgroundcolor_ != NULL) delete curvbackgroundcolor_;
  curvbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && derivnmbackgroundcolor_ != NULL) delete derivnmbackgroundcolor_;
  derivnmbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && translubackgroundcolor_ != NULL) delete translubackgroundcolor_;
  translubackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && bakehighpolyvcolsbackgroundcol_ != NULL) delete bakehighpolyvcolsbackgroundcol_;
  bakehighpolyvcolsbackgroundcol_ = NULL;
  ZR_(directionstonemapmax_, prtthreshold_);
  ZR_(directionstonemapmin_, genconvexity_);
  ZR_(radiositynormalsattenlinear_, translurayspersample_);
  ZR_(curvsearchdistance_, aolimitraydistance_);
  prtlimitraydistance_ = false;
  ZR_(curvjitter_, prtjitter_);
  ZR_(renderrayfails_, bentrayspersample_);
  radiositynormalsencodeao_ = false;
  ZR_(genderivnm_, prtbias_);
  convexityscale_ = 0;
  radiositynormalsconeangle_ = 0;
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prtnormalize_ = false;
  ZR_(prtconeangle_, radiositynormalsattencuadratic_);
  ZR_(genao_, directionsts_);
  ZR_(directionstonemap_, edgepadding_);
  ZR_(directionsswizzlez_, gendirections_);
  aoallowpureoccluded_ = false;
  heighttonemapmax_ = 0;
  ZR_(heighttonemapmin_, concavity_);
  radiositynormalslimitraydistance_ = false;
  directionsswizzlex_ = 0;
  ZR_(proximityrayspersample_, genprt_);
  ZR_(cavitycontrast_, radiositynormalscoordsys_);
  gennormals_ = false;
  ZR_(aorayspersample_, radiositynormalscontrast_);
  translujitter_ = false;
  discardraybackfaceshits_ = false;
  ZR_(cavitysteps_, transludist_);
  aojitter_ = false;
  curvbias_ = 0;
  ZR_(genwirerays_, proximitylimitraydistance_);
  ZR_(curvalgorithm_, genradiositynormals_);
  ZR_(gencavity_, bakehighpolyvcols_);

#undef ZR_HELPER_
#undef ZR_

}

bool tGenerateMaps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tGenerateMaps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tRGB8 NMBackgroundColor = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nmbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_HMBackgroundColor;
        break;
      }

      // optional .tRGB8 HMBackgroundColor = 2;
      case 2: {
        if (tag == 18) {
         parse_HMBackgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hmbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BakeHighpolyBaseTextureNoTexCol;
        break;
      }

      // optional .tRGB8 BakeHighpolyBaseTextureNoTexCol = 3;
      case 3: {
        if (tag == 26) {
         parse_BakeHighpolyBaseTextureNoTexCol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bakehighpolybasetexturenotexcol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BakeHighpolyBaseTextureBackgroundColor;
        break;
      }

      // optional .tRGB8 BakeHighpolyBaseTextureBackgroundColor = 4;
      case 4: {
        if (tag == 34) {
         parse_BakeHighpolyBaseTextureBackgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bakehighpolybasetexturebackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RenderWireframeBackgroundColor;
        break;
      }

      // optional .tRGB8 RenderWireframeBackgroundColor = 5;
      case 5: {
        if (tag == 42) {
         parse_RenderWireframeBackgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renderwireframebackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_RenderWireframeCol;
        break;
      }

      // optional .tRGB8 RenderWireframeCol = 6;
      case 6: {
        if (tag == 50) {
         parse_RenderWireframeCol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renderwireframecol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_RenderCWCol;
        break;
      }

      // optional .tRGB8 RenderCWCol = 7;
      case 7: {
        if (tag == 58) {
         parse_RenderCWCol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rendercwcol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_RenderSeamCol;
        break;
      }

      // optional .tRGB8 RenderSeamCol = 8;
      case 8: {
        if (tag == 66) {
         parse_RenderSeamCol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renderseamcol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_RenderRayFailsCol;
        break;
      }

      // optional .tRGB8 RenderRayFailsCol = 9;
      case 9: {
        if (tag == 74) {
         parse_RenderRayFailsCol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renderrayfailscol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_AOOccludedColor;
        break;
      }

      // optional .tRGB8 AOOccludedColor = 10;
      case 10: {
        if (tag == 82) {
         parse_AOOccludedColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aooccludedcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_AOUnoccludedColor;
        break;
      }

      // optional .tRGB8 AOUnoccludedColor = 11;
      case 11: {
        if (tag == 90) {
         parse_AOUnoccludedColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aounoccludedcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_AOBackgroundColor;
        break;
      }

      // optional .tRGB8 AOBackgroundColor = 12;
      case 12: {
        if (tag == 98) {
         parse_AOBackgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aobackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_BentBackgroundColor;
        break;
      }

      // optional .tRGB8 BentBackgroundColor = 13;
      case 13: {
        if (tag == 106) {
         parse_BentBackgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bentbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_PRTBackgroundColor;
        break;
      }

      // optional .tRGB8 PRTBackgroundColor = 14;
      case 14: {
        if (tag == 114) {
         parse_PRTBackgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prtbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_ConvexityBackgroundColor;
        break;
      }

      // optional .tRGB8 ConvexityBackgroundColor = 15;
      case 15: {
        if (tag == 122) {
         parse_ConvexityBackgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convexitybackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_ThicknessBackgroundColor;
        break;
      }

      // optional .tRGB8 ThicknessBackgroundColor = 16;
      case 16: {
        if (tag == 130) {
         parse_ThicknessBackgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thicknessbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_ProximityBackgroundColor;
        break;
      }

      // optional .tRGB8 ProximityBackgroundColor = 17;
      case 17: {
        if (tag == 138) {
         parse_ProximityBackgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proximitybackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_CavityBackgroundColor;
        break;
      }

      // optional .tRGB8 CavityBackgroundColor = 18;
      case 18: {
        if (tag == 146) {
         parse_CavityBackgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cavitybackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_VDMBackgroundColor;
        break;
      }

      // optional .tRGB8 VDMBackgroundColor = 19;
      case 19: {
        if (tag == 154) {
         parse_VDMBackgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vdmbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_RadNMBackgroundColor;
        break;
      }

      // optional .tRGB8 RadNMBackgroundColor = 20;
      case 20: {
        if (tag == 162) {
         parse_RadNMBackgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radnmbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_CurvBackgroundColor;
        break;
      }

      // optional .tRGB8 CurvBackgroundColor = 21;
      case 21: {
        if (tag == 170) {
         parse_CurvBackgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curvbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_DerivNMBackgroundColor;
        break;
      }

      // optional .tRGB8 DerivNMBackgroundColor = 22;
      case 22: {
        if (tag == 178) {
         parse_DerivNMBackgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_derivnmbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_TransluBackgroundColor;
        break;
      }

      // optional .tRGB8 TransluBackgroundColor = 23;
      case 23: {
        if (tag == 186) {
         parse_TransluBackgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translubackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_BakeHighpolyVColsBackgroundCol;
        break;
      }

      // optional .tRGB8 BakeHighpolyVColsBackgroundCol = 24;
      case 24: {
        if (tag == 194) {
         parse_BakeHighpolyVColsBackgroundCol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bakehighpolyvcolsbackgroundcol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_ClosestIfFails;
        break;
      }

      // optional bool ClosestIfFails = 25;
      case 25: {
        if (tag == 200) {
         parse_ClosestIfFails:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &closestiffails_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(213)) goto parse_DirectionsTonemapMax;
        break;
      }

      // optional float DirectionsTonemapMax = 26;
      case 26: {
        if (tag == 213) {
         parse_DirectionsTonemapMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &directionstonemapmax_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_CurvMonocrome;
        break;
      }

      // optional bool CurvMonocrome = 27;
      case 27: {
        if (tag == 216) {
         parse_CurvMonocrome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &curvmonocrome_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(229)) goto parse_AOBias;
        break;
      }

      // optional float AOBias = 28;
      case 28: {
        if (tag == 229) {
         parse_AOBias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aobias_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_BentTangentSpace;
        break;
      }

      // optional bool BentTangentSpace = 29;
      case 29: {
        if (tag == 232) {
         parse_BentTangentSpace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &benttangentspace_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_GenTranslu;
        break;
      }

      // optional bool GenTranslu = 30;
      case 30: {
        if (tag == 240) {
         parse_GenTranslu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gentranslu_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_AODistribution;
        break;
      }

      // optional .tGenerateMaps.eAODistribution AODistribution = 31;
      case 31: {
        if (tag == 248) {
         parse_AODistribution:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_aodistribution(static_cast< ::tGenerateMaps_eAODistribution >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(261)) goto parse_PRTThreshold;
        break;
      }

      // optional float PRTThreshold = 32;
      case 32: {
        if (tag == 261) {
         parse_PRTThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prtthreshold_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(269)) goto parse_DirectionsTonemapMin;
        break;
      }

      // optional float DirectionsTonemapMin = 33;
      case 33: {
        if (tag == 269) {
         parse_DirectionsTonemapMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &directionstonemapmin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_CurvDistribution;
        break;
      }

      // optional .tGenerateMaps.eAODistribution CurvDistribution = 34;
      case 34: {
        if (tag == 272) {
         parse_CurvDistribution:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_curvdistribution(static_cast< ::tGenerateMaps_eAODistribution >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_BentJitter;
        break;
      }

      // optional bool BentJitter = 35;
      case 35: {
        if (tag == 280) {
         parse_BentJitter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bentjitter_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_BentDistribution;
        break;
      }

      // optional .tGenerateMaps.eAODistribution BentDistribution = 36;
      case 36: {
        if (tag == 288) {
         parse_BentDistribution:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bentdistribution(static_cast< ::tGenerateMaps_eAODistribution >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_BakeHighpolyBaseTexture;
        break;
      }

      // optional bool BakeHighpolyBaseTexture = 37;
      case 37: {
        if (tag == 296) {
         parse_BakeHighpolyBaseTexture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bakehighpolybasetexture_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_GenConvexity;
        break;
      }

      // optional bool GenConvexity = 38;
      case 38: {
        if (tag == 304) {
         parse_GenConvexity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genconvexity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(317)) goto parse_RadiosityNormalsAttenLinear;
        break;
      }

      // optional float RadiosityNormalsAttenLinear = 39;
      case 39: {
        if (tag == 317) {
         parse_RadiosityNormalsAttenLinear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radiositynormalsattenlinear_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_TransluRaysPerSample;
        break;
      }

      // optional uint32 TransluRaysPerSample = 40;
      case 40: {
        if (tag == 320) {
         parse_TransluRaysPerSample:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &translurayspersample_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(333)) goto parse_CurvSearchDistance;
        break;
      }

      // optional float CurvSearchDistance = 41;
      case 41: {
        if (tag == 333) {
         parse_CurvSearchDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curvsearchdistance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_SwizzleZ;
        break;
      }

      // optional .tGenerateMaps.eSwizzleComponent SwizzleZ = 42;
      case 42: {
        if (tag == 336) {
         parse_SwizzleZ:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_swizzlez(static_cast< ::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(349)) goto parse_TransluBias;
        break;
      }

      // optional float TransluBias = 43;
      case 43: {
        if (tag == 349) {
         parse_TransluBias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &translubias_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_PRTLimitRayDistance;
        break;
      }

      // optional bool PRTLimitRayDistance = 44;
      case 44: {
        if (tag == 352) {
         parse_PRTLimitRayDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prtlimitraydistance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_GenBent;
        break;
      }

      // optional bool GenBent = 45;
      case 45: {
        if (tag == 360) {
         parse_GenBent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genbent_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_AOLimitRayDistance;
        break;
      }

      // optional bool AOLimitRayDistance = 46;
      case 46: {
        if (tag == 368) {
         parse_AOLimitRayDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aolimitraydistance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_CurvRaysPerSample;
        break;
      }

      // optional uint32 CurvRaysPerSample = 47;
      case 47: {
        if (tag == 376) {
         parse_CurvRaysPerSample:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curvrayspersample_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_RadiosityNormalsDistribution;
        break;
      }

      // optional .tGenerateMaps.eAODistribution RadiosityNormalsDistribution = 48;
      case 48: {
        if (tag == 384) {
         parse_RadiosityNormalsDistribution:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_radiositynormalsdistribution(static_cast< ::tGenerateMaps_eAODistribution >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_RadiosityNormalsRaysPerSample;
        break;
      }

      // optional uint32 RadiosityNormalsRaysPerSample = 49;
      case 49: {
        if (tag == 392) {
         parse_RadiosityNormalsRaysPerSample:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiositynormalsrayspersample_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_CurvJitter;
        break;
      }

      // optional bool CurvJitter = 50;
      case 50: {
        if (tag == 400) {
         parse_CurvJitter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &curvjitter_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_TangentSpace;
        break;
      }

      // optional bool TangentSpace = 51;
      case 51: {
        if (tag == 408) {
         parse_TangentSpace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tangentspace_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_RadiosityNormalsAllowPureOcclusion;
        break;
      }

      // optional bool RadiosityNormalsAllowPureOcclusion = 52;
      case 52: {
        if (tag == 416) {
         parse_RadiosityNormalsAllowPureOcclusion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &radiositynormalsallowpureocclusion_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_BentSwizzleX;
        break;
      }

      // optional .tGenerateMaps.eSwizzleComponent BentSwizzleX = 53;
      case 53: {
        if (tag == 424) {
         parse_BentSwizzleX:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bentswizzlex(static_cast< ::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_SwizzleY;
        break;
      }

      // optional .tGenerateMaps.eSwizzleComponent SwizzleY = 54;
      case 54: {
        if (tag == 432) {
         parse_SwizzleY:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_swizzley(static_cast< ::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_GenCurv;
        break;
      }

      // optional bool GenCurv = 55;
      case 55: {
        if (tag == 440) {
         parse_GenCurv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gencurv_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_PRTJitter;
        break;
      }

      // optional bool PRTJitter = 56;
      case 56: {
        if (tag == 448) {
         parse_PRTJitter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prtjitter_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(461)) goto parse_AOAttenCuadratic;
        break;
      }

      // optional float AOAttenCuadratic = 57;
      case 57: {
        if (tag == 461) {
         parse_AOAttenCuadratic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aoattencuadratic_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(469)) goto parse_BentConeAngle;
        break;
      }

      // optional float BentConeAngle = 58;
      case 58: {
        if (tag == 469) {
         parse_BentConeAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bentconeangle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_SwizzleX;
        break;
      }

      // optional .tGenerateMaps.eSwizzleComponent SwizzleX = 59;
      case 59: {
        if (tag == 472) {
         parse_SwizzleX:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_swizzlex(static_cast< ::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_RenderRayFails;
        break;
      }

      // optional bool RenderRayFails = 60;
      case 60: {
        if (tag == 480) {
         parse_RenderRayFails:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &renderrayfails_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(493)) goto parse_CavitySearchRadius;
        break;
      }

      // optional float CavitySearchRadius = 61;
      case 61: {
        if (tag == 493) {
         parse_CavitySearchRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cavitysearchradius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_RadiosityNormalsEncodeAO;
        break;
      }

      // optional bool RadiosityNormalsEncodeAO = 62;
      case 62: {
        if (tag == 496) {
         parse_RadiosityNormalsEncodeAO:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &radiositynormalsencodeao_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(509)) goto parse_TransluConeAngle;
        break;
      }

      // optional float TransluConeAngle = 63;
      case 63: {
        if (tag == 509) {
         parse_TransluConeAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transluconeangle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_BentRaysPerSample;
        break;
      }

      // optional uint32 BentRaysPerSample = 64;
      case 64: {
        if (tag == 512) {
         parse_BentRaysPerSample:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bentrayspersample_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(525)) goto parse_ConvexityScale;
        break;
      }

      // optional float ConvexityScale = 65;
      case 65: {
        if (tag == 525) {
         parse_ConvexityScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &convexityscale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(533)) goto parse_RadiosityNormalsConeAngle;
        break;
      }

      // optional float RadiosityNormalsConeAngle = 66;
      case 66: {
        if (tag == 533) {
         parse_RadiosityNormalsConeAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radiositynormalsconeangle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(538)) goto parse_File;
        break;
      }

      // optional string File = 67;
      case 67: {
        if (tag == 538) {
         parse_File:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tGenerateMaps.File"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(544)) goto parse_GenDerivNM;
        break;
      }

      // optional bool GenDerivNM = 68;
      case 68: {
        if (tag == 544) {
         parse_GenDerivNM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genderivnm_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(552)) goto parse_BentLimitRayDistance;
        break;
      }

      // optional bool BentLimitRayDistance = 69;
      case 69: {
        if (tag == 552) {
         parse_BentLimitRayDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bentlimitraydistance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(565)) goto parse_PRTBias;
        break;
      }

      // optional float PRTBias = 70;
      case 70: {
        if (tag == 565) {
         parse_PRTBias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prtbias_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_RenderWireframe;
        break;
      }

      // optional bool RenderWireframe = 71;
      case 71: {
        if (tag == 568) {
         parse_RenderWireframe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &renderwireframe_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(576)) goto parse_PRTNormalize;
        break;
      }

      // optional bool PRTNormalize = 72;
      case 72: {
        if (tag == 576) {
         parse_PRTNormalize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prtnormalize_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_GenAO;
        break;
      }

      // optional bool GenAO = 73;
      case 73: {
        if (tag == 584) {
         parse_GenAO:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genao_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(597)) goto parse_PRTConeAngle;
        break;
      }

      // optional float PRTConeAngle = 74;
      case 74: {
        if (tag == 597) {
         parse_PRTConeAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prtconeangle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(600)) goto parse_Height;
        break;
      }

      // optional uint32 Height = 75;
      case 75: {
        if (tag == 600) {
         parse_Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(613)) goto parse_RadiosityNormalsAttenCuadratic;
        break;
      }

      // optional float RadiosityNormalsAttenCuadratic = 76;
      case 76: {
        if (tag == 613) {
         parse_RadiosityNormalsAttenCuadratic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radiositynormalsattencuadratic_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(616)) goto parse_DirectionsTonemap;
        break;
      }

      // optional .tGenerateMaps.eHMNormalization DirectionsTonemap = 77;
      case 77: {
        if (tag == 616) {
         parse_DirectionsTonemap:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_directionstonemap(static_cast< ::tGenerateMaps_eHMNormalization >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(624)) goto parse_DirectionsTS;
        break;
      }

      // optional bool DirectionsTS = 78;
      case 78: {
        if (tag == 624) {
         parse_DirectionsTS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &directionsts_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(632)) goto parse_PRTRaysPerSample;
        break;
      }

      // optional uint32 PRTRaysPerSample = 79;
      case 79: {
        if (tag == 632) {
         parse_PRTRaysPerSample:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prtrayspersample_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(640)) goto parse_EdgePadding;
        break;
      }

      // optional uint32 EdgePadding = 80;
      case 80: {
        if (tag == 640) {
         parse_EdgePadding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &edgepadding_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(648)) goto parse_DirectionsSwizzleZ;
        break;
      }

      // optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleZ = 81;
      case 81: {
        if (tag == 648) {
         parse_DirectionsSwizzleZ:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_directionsswizzlez(static_cast< ::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(656)) goto parse_AOAllowPureOccluded;
        break;
      }

      // optional bool AOAllowPureOccluded = 82;
      case 82: {
        if (tag == 656) {
         parse_AOAllowPureOccluded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aoallowpureoccluded_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(664)) goto parse_AOIgnoreBackfaceHits;
        break;
      }

      // optional bool AOIgnoreBackfaceHits = 83;
      case 83: {
        if (tag == 664) {
         parse_AOIgnoreBackfaceHits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aoignorebackfacehits_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(672)) goto parse_CavityRaysPerSample;
        break;
      }

      // optional uint32 CavityRaysPerSample = 84;
      case 84: {
        if (tag == 672) {
         parse_CavityRaysPerSample:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cavityrayspersample_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(685)) goto parse_AOAttenConstant;
        break;
      }

      // optional float AOAttenConstant = 85;
      case 85: {
        if (tag == 685) {
         parse_AOAttenConstant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aoattenconstant_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(688)) goto parse_CavityJitter;
        break;
      }

      // optional bool CavityJitter = 86;
      case 86: {
        if (tag == 688) {
         parse_CavityJitter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cavityjitter_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(701)) goto parse_HeightTonemapMax;
        break;
      }

      // optional float HeightTonemapMax = 87;
      case 87: {
        if (tag == 701) {
         parse_HeightTonemapMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heighttonemapmax_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(704)) goto parse_GenDirections;
        break;
      }

      // optional bool GenDirections = 88;
      case 88: {
        if (tag == 704) {
         parse_GenDirections:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gendirections_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(712)) goto parse_RadiosityNormalsLimitRayDistance;
        break;
      }

      // optional bool RadiosityNormalsLimitRayDistance = 89;
      case 89: {
        if (tag == 712) {
         parse_RadiosityNormalsLimitRayDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &radiositynormalslimitraydistance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(725)) goto parse_HeightTonemapMin;
        break;
      }

      // optional float HeightTonemapMin = 90;
      case 90: {
        if (tag == 725) {
         parse_HeightTonemapMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heighttonemapmin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(728)) goto parse_RadiosityNormalsJitter;
        break;
      }

      // optional bool RadiosityNormalsJitter = 91;
      case 91: {
        if (tag == 728) {
         parse_RadiosityNormalsJitter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &radiositynormalsjitter_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(736)) goto parse_DirectionsSwizzleY;
        break;
      }

      // optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleY = 92;
      case 92: {
        if (tag == 736) {
         parse_DirectionsSwizzleY:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_directionsswizzley(static_cast< ::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(744)) goto parse_Width;
        break;
      }

      // optional uint32 Width = 93;
      case 93: {
        if (tag == 744) {
         parse_Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(752)) goto parse_BakeHighpolyBaseTextureDrawObjectIDIfNoTexture;
        break;
      }

      // optional bool BakeHighpolyBaseTextureDrawObjectIDIfNoTexture = 94;
      case 94: {
        if (tag == 752) {
         parse_BakeHighpolyBaseTextureDrawObjectIDIfNoTexture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bakehighpolybasetexturedrawobjectidifnotexture_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(760)) goto parse_Concavity;
        break;
      }

      // optional bool Concavity = 95;
      case 95: {
        if (tag == 760) {
         parse_Concavity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &concavity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(768)) goto parse_DirectionsSwizzleX;
        break;
      }

      // optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleX = 96;
      case 96: {
        if (tag == 768) {
         parse_DirectionsSwizzleX:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_directionsswizzlex(static_cast< ::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(776)) goto parse_GenNormals;
        break;
      }

      // optional bool GenNormals = 97;
      case 97: {
        if (tag == 776) {
         parse_GenNormals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gennormals_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(784)) goto parse_ProximityRaysPerSample;
        break;
      }

      // optional uint32 ProximityRaysPerSample = 98;
      case 98: {
        if (tag == 784) {
         parse_ProximityRaysPerSample:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proximityrayspersample_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(792)) goto parse_GenHeights;
        break;
      }

      // optional bool GenHeights = 99;
      case 99: {
        if (tag == 792) {
         parse_GenHeights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genheights_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(805)) goto parse_RadiosityNormalsAttenConstant;
        break;
      }

      // optional float RadiosityNormalsAttenConstant = 100;
      case 100: {
        if (tag == 805) {
         parse_RadiosityNormalsAttenConstant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radiositynormalsattenconstant_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(808)) goto parse_GenProximity;
        break;
      }

      // optional bool GenProximity = 101;
      case 101: {
        if (tag == 808) {
         parse_GenProximity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genproximity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(816)) goto parse_GenPRT;
        break;
      }

      // optional bool GenPRT = 102;
      case 102: {
        if (tag == 816) {
         parse_GenPRT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genprt_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(829)) goto parse_CavityContrast;
        break;
      }

      // optional float CavityContrast = 103;
      case 103: {
        if (tag == 829) {
         parse_CavityContrast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cavitycontrast_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(832)) goto parse_RadiosityNormalsCoordSys;
        break;
      }

      // optional .tGenerateMaps.eRNMCoordSys RadiosityNormalsCoordSys = 104;
      case 104: {
        if (tag == 832) {
         parse_RadiosityNormalsCoordSys:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_radiositynormalscoordsys(static_cast< ::tGenerateMaps_eRNMCoordSys >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(840)) goto parse_TransluJitter;
        break;
      }

      // optional bool TransluJitter = 105;
      case 105: {
        if (tag == 840) {
         parse_TransluJitter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &translujitter_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(848)) goto parse_AORaysPerSample;
        break;
      }

      // optional uint32 AORaysPerSample = 106;
      case 106: {
        if (tag == 848) {
         parse_AORaysPerSample:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aorayspersample_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(861)) goto parse_BentBias;
        break;
      }

      // optional float BentBias = 107;
      case 107: {
        if (tag == 861) {
         parse_BentBias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bentbias_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(864)) goto parse_DiscardRayBackFacesHits;
        break;
      }

      // optional bool DiscardRayBackFacesHits = 108;
      case 108: {
        if (tag == 864) {
         parse_DiscardRayBackFacesHits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discardraybackfaceshits_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(877)) goto parse_AOConeAngle;
        break;
      }

      // optional float AOConeAngle = 109;
      case 109: {
        if (tag == 877) {
         parse_AOConeAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aoconeangle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(880)) goto parse_BentSwizzleY;
        break;
      }

      // optional .tGenerateMaps.eSwizzleComponent BentSwizzleY = 110;
      case 110: {
        if (tag == 880) {
         parse_BentSwizzleY:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bentswizzley(static_cast< ::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(893)) goto parse_RadiosityNormalsBias;
        break;
      }

      // optional float RadiosityNormalsBias = 111;
      case 111: {
        if (tag == 893) {
         parse_RadiosityNormalsBias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radiositynormalsbias_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(901)) goto parse_RadiosityNormalsContrast;
        break;
      }

      // optional float RadiosityNormalsContrast = 112;
      case 112: {
        if (tag == 901) {
         parse_RadiosityNormalsContrast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radiositynormalscontrast_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(904)) goto parse_CavitySteps;
        break;
      }

      // optional uint32 CavitySteps = 113;
      case 113: {
        if (tag == 904) {
         parse_CavitySteps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cavitysteps_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(912)) goto parse_AA;
        break;
      }

      // optional .tGenerateMaps.eAntialiasing AA = 114;
      case 114: {
        if (tag == 912) {
         parse_AA:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_aa(static_cast< ::tGenerateMaps_eAntialiasing >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(920)) goto parse_BentSwizzleZ;
        break;
      }

      // optional .tGenerateMaps.eSwizzleComponent BentSwizzleZ = 115;
      case 115: {
        if (tag == 920) {
         parse_BentSwizzleZ:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bentswizzlez(static_cast< ::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(928)) goto parse_BucketSize;
        break;
      }

      // optional uint32 BucketSize = 116;
      case 116: {
        if (tag == 928) {
         parse_BucketSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucketsize_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(941)) goto parse_CurvConeAngle;
        break;
      }

      // optional float CurvConeAngle = 117;
      case 117: {
        if (tag == 941) {
         parse_CurvConeAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curvconeangle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(949)) goto parse_TransluDist;
        break;
      }

      // optional float TransluDist = 118;
      case 118: {
        if (tag == 949) {
         parse_TransluDist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transludist_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(952)) goto parse_AOJitter;
        break;
      }

      // optional bool AOJitter = 119;
      case 119: {
        if (tag == 952) {
         parse_AOJitter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aojitter_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(965)) goto parse_CurvBias;
        break;
      }

      // optional float CurvBias = 120;
      case 120: {
        if (tag == 965) {
         parse_CurvBias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curvbias_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(968)) goto parse_GenWireRays;
        break;
      }

      // optional bool GenWireRays = 121;
      case 121: {
        if (tag == 968) {
         parse_GenWireRays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genwirerays_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(976)) goto parse_CurvAlgorithm;
        break;
      }

      // optional .tGenerateMaps.eCurvAlgorithm CurvAlgorithm = 122;
      case 122: {
        if (tag == 976) {
         parse_CurvAlgorithm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_curvalgorithm(static_cast< ::tGenerateMaps_eCurvAlgorithm >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(984)) goto parse_TransluDistribution;
        break;
      }

      // optional .tGenerateMaps.eAODistribution TransluDistribution = 123;
      case 123: {
        if (tag == 984) {
         parse_TransluDistribution:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_transludistribution(static_cast< ::tGenerateMaps_eAODistribution >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(997)) goto parse_AOAttenLinear;
        break;
      }

      // optional float AOAttenLinear = 124;
      case 124: {
        if (tag == 997) {
         parse_AOAttenLinear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aoattenlinear_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1000)) goto parse_ProximityLimitRayDistance;
        break;
      }

      // optional bool ProximityLimitRayDistance = 125;
      case 125: {
        if (tag == 1000) {
         parse_ProximityLimitRayDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &proximitylimitraydistance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1008)) goto parse_GenRadiosityNormals;
        break;
      }

      // optional bool GenRadiosityNormals = 126;
      case 126: {
        if (tag == 1008) {
         parse_GenRadiosityNormals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genradiositynormals_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1021)) goto parse_ProximityConeAngle;
        break;
      }

      // optional float ProximityConeAngle = 127;
      case 127: {
        if (tag == 1021) {
         parse_ProximityConeAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &proximityconeangle_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1024)) goto parse_HeightTonemap;
        break;
      }

      // optional .tGenerateMaps.eHMNormalization HeightTonemap = 128;
      case 128: {
        if (tag == 1024) {
         parse_HeightTonemap:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_heighttonemap(static_cast< ::tGenerateMaps_eHMNormalization >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1032)) goto parse_GenCavity;
        break;
      }

      // optional bool GenCavity = 129;
      case 129: {
        if (tag == 1032) {
         parse_GenCavity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gencavity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1040)) goto parse_BakeHighpolyVCols;
        break;
      }

      // optional bool BakeHighpolyVCols = 130;
      case 130: {
        if (tag == 1040) {
         parse_BakeHighpolyVCols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bakehighpolyvcols_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tGenerateMaps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tGenerateMaps)
  return false;
#undef DO_
}

void tGenerateMaps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tGenerateMaps)
  // optional .tRGB8 NMBackgroundColor = 1;
  if (this->has_nmbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->nmbackgroundcolor_, output);
  }

  // optional .tRGB8 HMBackgroundColor = 2;
  if (this->has_hmbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->hmbackgroundcolor_, output);
  }

  // optional .tRGB8 BakeHighpolyBaseTextureNoTexCol = 3;
  if (this->has_bakehighpolybasetexturenotexcol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->bakehighpolybasetexturenotexcol_, output);
  }

  // optional .tRGB8 BakeHighpolyBaseTextureBackgroundColor = 4;
  if (this->has_bakehighpolybasetexturebackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bakehighpolybasetexturebackgroundcolor_, output);
  }

  // optional .tRGB8 RenderWireframeBackgroundColor = 5;
  if (this->has_renderwireframebackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->renderwireframebackgroundcolor_, output);
  }

  // optional .tRGB8 RenderWireframeCol = 6;
  if (this->has_renderwireframecol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->renderwireframecol_, output);
  }

  // optional .tRGB8 RenderCWCol = 7;
  if (this->has_rendercwcol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->rendercwcol_, output);
  }

  // optional .tRGB8 RenderSeamCol = 8;
  if (this->has_renderseamcol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->renderseamcol_, output);
  }

  // optional .tRGB8 RenderRayFailsCol = 9;
  if (this->has_renderrayfailscol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->renderrayfailscol_, output);
  }

  // optional .tRGB8 AOOccludedColor = 10;
  if (this->has_aooccludedcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->aooccludedcolor_, output);
  }

  // optional .tRGB8 AOUnoccludedColor = 11;
  if (this->has_aounoccludedcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->aounoccludedcolor_, output);
  }

  // optional .tRGB8 AOBackgroundColor = 12;
  if (this->has_aobackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->aobackgroundcolor_, output);
  }

  // optional .tRGB8 BentBackgroundColor = 13;
  if (this->has_bentbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->bentbackgroundcolor_, output);
  }

  // optional .tRGB8 PRTBackgroundColor = 14;
  if (this->has_prtbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->prtbackgroundcolor_, output);
  }

  // optional .tRGB8 ConvexityBackgroundColor = 15;
  if (this->has_convexitybackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->convexitybackgroundcolor_, output);
  }

  // optional .tRGB8 ThicknessBackgroundColor = 16;
  if (this->has_thicknessbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->thicknessbackgroundcolor_, output);
  }

  // optional .tRGB8 ProximityBackgroundColor = 17;
  if (this->has_proximitybackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->proximitybackgroundcolor_, output);
  }

  // optional .tRGB8 CavityBackgroundColor = 18;
  if (this->has_cavitybackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->cavitybackgroundcolor_, output);
  }

  // optional .tRGB8 VDMBackgroundColor = 19;
  if (this->has_vdmbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->vdmbackgroundcolor_, output);
  }

  // optional .tRGB8 RadNMBackgroundColor = 20;
  if (this->has_radnmbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->radnmbackgroundcolor_, output);
  }

  // optional .tRGB8 CurvBackgroundColor = 21;
  if (this->has_curvbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->curvbackgroundcolor_, output);
  }

  // optional .tRGB8 DerivNMBackgroundColor = 22;
  if (this->has_derivnmbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->derivnmbackgroundcolor_, output);
  }

  // optional .tRGB8 TransluBackgroundColor = 23;
  if (this->has_translubackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->translubackgroundcolor_, output);
  }

  // optional .tRGB8 BakeHighpolyVColsBackgroundCol = 24;
  if (this->has_bakehighpolyvcolsbackgroundcol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->bakehighpolyvcolsbackgroundcol_, output);
  }

  // optional bool ClosestIfFails = 25;
  if (this->closestiffails() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->closestiffails(), output);
  }

  // optional float DirectionsTonemapMax = 26;
  if (this->directionstonemapmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->directionstonemapmax(), output);
  }

  // optional bool CurvMonocrome = 27;
  if (this->curvmonocrome() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->curvmonocrome(), output);
  }

  // optional float AOBias = 28;
  if (this->aobias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->aobias(), output);
  }

  // optional bool BentTangentSpace = 29;
  if (this->benttangentspace() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->benttangentspace(), output);
  }

  // optional bool GenTranslu = 30;
  if (this->gentranslu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->gentranslu(), output);
  }

  // optional .tGenerateMaps.eAODistribution AODistribution = 31;
  if (this->aodistribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->aodistribution(), output);
  }

  // optional float PRTThreshold = 32;
  if (this->prtthreshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->prtthreshold(), output);
  }

  // optional float DirectionsTonemapMin = 33;
  if (this->directionstonemapmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->directionstonemapmin(), output);
  }

  // optional .tGenerateMaps.eAODistribution CurvDistribution = 34;
  if (this->curvdistribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      34, this->curvdistribution(), output);
  }

  // optional bool BentJitter = 35;
  if (this->bentjitter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->bentjitter(), output);
  }

  // optional .tGenerateMaps.eAODistribution BentDistribution = 36;
  if (this->bentdistribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      36, this->bentdistribution(), output);
  }

  // optional bool BakeHighpolyBaseTexture = 37;
  if (this->bakehighpolybasetexture() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->bakehighpolybasetexture(), output);
  }

  // optional bool GenConvexity = 38;
  if (this->genconvexity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->genconvexity(), output);
  }

  // optional float RadiosityNormalsAttenLinear = 39;
  if (this->radiositynormalsattenlinear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->radiositynormalsattenlinear(), output);
  }

  // optional uint32 TransluRaysPerSample = 40;
  if (this->translurayspersample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->translurayspersample(), output);
  }

  // optional float CurvSearchDistance = 41;
  if (this->curvsearchdistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->curvsearchdistance(), output);
  }

  // optional .tGenerateMaps.eSwizzleComponent SwizzleZ = 42;
  if (this->swizzlez() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      42, this->swizzlez(), output);
  }

  // optional float TransluBias = 43;
  if (this->translubias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->translubias(), output);
  }

  // optional bool PRTLimitRayDistance = 44;
  if (this->prtlimitraydistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->prtlimitraydistance(), output);
  }

  // optional bool GenBent = 45;
  if (this->genbent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->genbent(), output);
  }

  // optional bool AOLimitRayDistance = 46;
  if (this->aolimitraydistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(46, this->aolimitraydistance(), output);
  }

  // optional uint32 CurvRaysPerSample = 47;
  if (this->curvrayspersample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->curvrayspersample(), output);
  }

  // optional .tGenerateMaps.eAODistribution RadiosityNormalsDistribution = 48;
  if (this->radiositynormalsdistribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      48, this->radiositynormalsdistribution(), output);
  }

  // optional uint32 RadiosityNormalsRaysPerSample = 49;
  if (this->radiositynormalsrayspersample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->radiositynormalsrayspersample(), output);
  }

  // optional bool CurvJitter = 50;
  if (this->curvjitter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->curvjitter(), output);
  }

  // optional bool TangentSpace = 51;
  if (this->tangentspace() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->tangentspace(), output);
  }

  // optional bool RadiosityNormalsAllowPureOcclusion = 52;
  if (this->radiositynormalsallowpureocclusion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(52, this->radiositynormalsallowpureocclusion(), output);
  }

  // optional .tGenerateMaps.eSwizzleComponent BentSwizzleX = 53;
  if (this->bentswizzlex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      53, this->bentswizzlex(), output);
  }

  // optional .tGenerateMaps.eSwizzleComponent SwizzleY = 54;
  if (this->swizzley() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      54, this->swizzley(), output);
  }

  // optional bool GenCurv = 55;
  if (this->gencurv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->gencurv(), output);
  }

  // optional bool PRTJitter = 56;
  if (this->prtjitter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->prtjitter(), output);
  }

  // optional float AOAttenCuadratic = 57;
  if (this->aoattencuadratic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(57, this->aoattencuadratic(), output);
  }

  // optional float BentConeAngle = 58;
  if (this->bentconeangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(58, this->bentconeangle(), output);
  }

  // optional .tGenerateMaps.eSwizzleComponent SwizzleX = 59;
  if (this->swizzlex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      59, this->swizzlex(), output);
  }

  // optional bool RenderRayFails = 60;
  if (this->renderrayfails() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->renderrayfails(), output);
  }

  // optional float CavitySearchRadius = 61;
  if (this->cavitysearchradius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(61, this->cavitysearchradius(), output);
  }

  // optional bool RadiosityNormalsEncodeAO = 62;
  if (this->radiositynormalsencodeao() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(62, this->radiositynormalsencodeao(), output);
  }

  // optional float TransluConeAngle = 63;
  if (this->transluconeangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(63, this->transluconeangle(), output);
  }

  // optional uint32 BentRaysPerSample = 64;
  if (this->bentrayspersample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->bentrayspersample(), output);
  }

  // optional float ConvexityScale = 65;
  if (this->convexityscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(65, this->convexityscale(), output);
  }

  // optional float RadiosityNormalsConeAngle = 66;
  if (this->radiositynormalsconeangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(66, this->radiositynormalsconeangle(), output);
  }

  // optional string File = 67;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tGenerateMaps.File");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      67, this->file(), output);
  }

  // optional bool GenDerivNM = 68;
  if (this->genderivnm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(68, this->genderivnm(), output);
  }

  // optional bool BentLimitRayDistance = 69;
  if (this->bentlimitraydistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(69, this->bentlimitraydistance(), output);
  }

  // optional float PRTBias = 70;
  if (this->prtbias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(70, this->prtbias(), output);
  }

  // optional bool RenderWireframe = 71;
  if (this->renderwireframe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(71, this->renderwireframe(), output);
  }

  // optional bool PRTNormalize = 72;
  if (this->prtnormalize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(72, this->prtnormalize(), output);
  }

  // optional bool GenAO = 73;
  if (this->genao() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(73, this->genao(), output);
  }

  // optional float PRTConeAngle = 74;
  if (this->prtconeangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(74, this->prtconeangle(), output);
  }

  // optional uint32 Height = 75;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(75, this->height(), output);
  }

  // optional float RadiosityNormalsAttenCuadratic = 76;
  if (this->radiositynormalsattencuadratic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(76, this->radiositynormalsattencuadratic(), output);
  }

  // optional .tGenerateMaps.eHMNormalization DirectionsTonemap = 77;
  if (this->directionstonemap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      77, this->directionstonemap(), output);
  }

  // optional bool DirectionsTS = 78;
  if (this->directionsts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(78, this->directionsts(), output);
  }

  // optional uint32 PRTRaysPerSample = 79;
  if (this->prtrayspersample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(79, this->prtrayspersample(), output);
  }

  // optional uint32 EdgePadding = 80;
  if (this->edgepadding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(80, this->edgepadding(), output);
  }

  // optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleZ = 81;
  if (this->directionsswizzlez() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      81, this->directionsswizzlez(), output);
  }

  // optional bool AOAllowPureOccluded = 82;
  if (this->aoallowpureoccluded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(82, this->aoallowpureoccluded(), output);
  }

  // optional bool AOIgnoreBackfaceHits = 83;
  if (this->aoignorebackfacehits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->aoignorebackfacehits(), output);
  }

  // optional uint32 CavityRaysPerSample = 84;
  if (this->cavityrayspersample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(84, this->cavityrayspersample(), output);
  }

  // optional float AOAttenConstant = 85;
  if (this->aoattenconstant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(85, this->aoattenconstant(), output);
  }

  // optional bool CavityJitter = 86;
  if (this->cavityjitter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(86, this->cavityjitter(), output);
  }

  // optional float HeightTonemapMax = 87;
  if (this->heighttonemapmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(87, this->heighttonemapmax(), output);
  }

  // optional bool GenDirections = 88;
  if (this->gendirections() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(88, this->gendirections(), output);
  }

  // optional bool RadiosityNormalsLimitRayDistance = 89;
  if (this->radiositynormalslimitraydistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(89, this->radiositynormalslimitraydistance(), output);
  }

  // optional float HeightTonemapMin = 90;
  if (this->heighttonemapmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(90, this->heighttonemapmin(), output);
  }

  // optional bool RadiosityNormalsJitter = 91;
  if (this->radiositynormalsjitter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(91, this->radiositynormalsjitter(), output);
  }

  // optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleY = 92;
  if (this->directionsswizzley() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      92, this->directionsswizzley(), output);
  }

  // optional uint32 Width = 93;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(93, this->width(), output);
  }

  // optional bool BakeHighpolyBaseTextureDrawObjectIDIfNoTexture = 94;
  if (this->bakehighpolybasetexturedrawobjectidifnotexture() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(94, this->bakehighpolybasetexturedrawobjectidifnotexture(), output);
  }

  // optional bool Concavity = 95;
  if (this->concavity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(95, this->concavity(), output);
  }

  // optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleX = 96;
  if (this->directionsswizzlex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      96, this->directionsswizzlex(), output);
  }

  // optional bool GenNormals = 97;
  if (this->gennormals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(97, this->gennormals(), output);
  }

  // optional uint32 ProximityRaysPerSample = 98;
  if (this->proximityrayspersample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(98, this->proximityrayspersample(), output);
  }

  // optional bool GenHeights = 99;
  if (this->genheights() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(99, this->genheights(), output);
  }

  // optional float RadiosityNormalsAttenConstant = 100;
  if (this->radiositynormalsattenconstant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(100, this->radiositynormalsattenconstant(), output);
  }

  // optional bool GenProximity = 101;
  if (this->genproximity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(101, this->genproximity(), output);
  }

  // optional bool GenPRT = 102;
  if (this->genprt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->genprt(), output);
  }

  // optional float CavityContrast = 103;
  if (this->cavitycontrast() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(103, this->cavitycontrast(), output);
  }

  // optional .tGenerateMaps.eRNMCoordSys RadiosityNormalsCoordSys = 104;
  if (this->radiositynormalscoordsys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      104, this->radiositynormalscoordsys(), output);
  }

  // optional bool TransluJitter = 105;
  if (this->translujitter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(105, this->translujitter(), output);
  }

  // optional uint32 AORaysPerSample = 106;
  if (this->aorayspersample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(106, this->aorayspersample(), output);
  }

  // optional float BentBias = 107;
  if (this->bentbias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(107, this->bentbias(), output);
  }

  // optional bool DiscardRayBackFacesHits = 108;
  if (this->discardraybackfaceshits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(108, this->discardraybackfaceshits(), output);
  }

  // optional float AOConeAngle = 109;
  if (this->aoconeangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(109, this->aoconeangle(), output);
  }

  // optional .tGenerateMaps.eSwizzleComponent BentSwizzleY = 110;
  if (this->bentswizzley() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      110, this->bentswizzley(), output);
  }

  // optional float RadiosityNormalsBias = 111;
  if (this->radiositynormalsbias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(111, this->radiositynormalsbias(), output);
  }

  // optional float RadiosityNormalsContrast = 112;
  if (this->radiositynormalscontrast() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(112, this->radiositynormalscontrast(), output);
  }

  // optional uint32 CavitySteps = 113;
  if (this->cavitysteps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(113, this->cavitysteps(), output);
  }

  // optional .tGenerateMaps.eAntialiasing AA = 114;
  if (this->aa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      114, this->aa(), output);
  }

  // optional .tGenerateMaps.eSwizzleComponent BentSwizzleZ = 115;
  if (this->bentswizzlez() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      115, this->bentswizzlez(), output);
  }

  // optional uint32 BucketSize = 116;
  if (this->bucketsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(116, this->bucketsize(), output);
  }

  // optional float CurvConeAngle = 117;
  if (this->curvconeangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(117, this->curvconeangle(), output);
  }

  // optional float TransluDist = 118;
  if (this->transludist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(118, this->transludist(), output);
  }

  // optional bool AOJitter = 119;
  if (this->aojitter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(119, this->aojitter(), output);
  }

  // optional float CurvBias = 120;
  if (this->curvbias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(120, this->curvbias(), output);
  }

  // optional bool GenWireRays = 121;
  if (this->genwirerays() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(121, this->genwirerays(), output);
  }

  // optional .tGenerateMaps.eCurvAlgorithm CurvAlgorithm = 122;
  if (this->curvalgorithm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      122, this->curvalgorithm(), output);
  }

  // optional .tGenerateMaps.eAODistribution TransluDistribution = 123;
  if (this->transludistribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      123, this->transludistribution(), output);
  }

  // optional float AOAttenLinear = 124;
  if (this->aoattenlinear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(124, this->aoattenlinear(), output);
  }

  // optional bool ProximityLimitRayDistance = 125;
  if (this->proximitylimitraydistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(125, this->proximitylimitraydistance(), output);
  }

  // optional bool GenRadiosityNormals = 126;
  if (this->genradiositynormals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(126, this->genradiositynormals(), output);
  }

  // optional float ProximityConeAngle = 127;
  if (this->proximityconeangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(127, this->proximityconeangle(), output);
  }

  // optional .tGenerateMaps.eHMNormalization HeightTonemap = 128;
  if (this->heighttonemap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      128, this->heighttonemap(), output);
  }

  // optional bool GenCavity = 129;
  if (this->gencavity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(129, this->gencavity(), output);
  }

  // optional bool BakeHighpolyVCols = 130;
  if (this->bakehighpolyvcols() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(130, this->bakehighpolyvcols(), output);
  }

  // @@protoc_insertion_point(serialize_end:tGenerateMaps)
}

::google::protobuf::uint8* tGenerateMaps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tGenerateMaps)
  // optional .tRGB8 NMBackgroundColor = 1;
  if (this->has_nmbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->nmbackgroundcolor_, false, target);
  }

  // optional .tRGB8 HMBackgroundColor = 2;
  if (this->has_hmbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->hmbackgroundcolor_, false, target);
  }

  // optional .tRGB8 BakeHighpolyBaseTextureNoTexCol = 3;
  if (this->has_bakehighpolybasetexturenotexcol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->bakehighpolybasetexturenotexcol_, false, target);
  }

  // optional .tRGB8 BakeHighpolyBaseTextureBackgroundColor = 4;
  if (this->has_bakehighpolybasetexturebackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bakehighpolybasetexturebackgroundcolor_, false, target);
  }

  // optional .tRGB8 RenderWireframeBackgroundColor = 5;
  if (this->has_renderwireframebackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->renderwireframebackgroundcolor_, false, target);
  }

  // optional .tRGB8 RenderWireframeCol = 6;
  if (this->has_renderwireframecol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->renderwireframecol_, false, target);
  }

  // optional .tRGB8 RenderCWCol = 7;
  if (this->has_rendercwcol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->rendercwcol_, false, target);
  }

  // optional .tRGB8 RenderSeamCol = 8;
  if (this->has_renderseamcol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->renderseamcol_, false, target);
  }

  // optional .tRGB8 RenderRayFailsCol = 9;
  if (this->has_renderrayfailscol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->renderrayfailscol_, false, target);
  }

  // optional .tRGB8 AOOccludedColor = 10;
  if (this->has_aooccludedcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->aooccludedcolor_, false, target);
  }

  // optional .tRGB8 AOUnoccludedColor = 11;
  if (this->has_aounoccludedcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->aounoccludedcolor_, false, target);
  }

  // optional .tRGB8 AOBackgroundColor = 12;
  if (this->has_aobackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->aobackgroundcolor_, false, target);
  }

  // optional .tRGB8 BentBackgroundColor = 13;
  if (this->has_bentbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->bentbackgroundcolor_, false, target);
  }

  // optional .tRGB8 PRTBackgroundColor = 14;
  if (this->has_prtbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->prtbackgroundcolor_, false, target);
  }

  // optional .tRGB8 ConvexityBackgroundColor = 15;
  if (this->has_convexitybackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->convexitybackgroundcolor_, false, target);
  }

  // optional .tRGB8 ThicknessBackgroundColor = 16;
  if (this->has_thicknessbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->thicknessbackgroundcolor_, false, target);
  }

  // optional .tRGB8 ProximityBackgroundColor = 17;
  if (this->has_proximitybackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->proximitybackgroundcolor_, false, target);
  }

  // optional .tRGB8 CavityBackgroundColor = 18;
  if (this->has_cavitybackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->cavitybackgroundcolor_, false, target);
  }

  // optional .tRGB8 VDMBackgroundColor = 19;
  if (this->has_vdmbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->vdmbackgroundcolor_, false, target);
  }

  // optional .tRGB8 RadNMBackgroundColor = 20;
  if (this->has_radnmbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->radnmbackgroundcolor_, false, target);
  }

  // optional .tRGB8 CurvBackgroundColor = 21;
  if (this->has_curvbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->curvbackgroundcolor_, false, target);
  }

  // optional .tRGB8 DerivNMBackgroundColor = 22;
  if (this->has_derivnmbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->derivnmbackgroundcolor_, false, target);
  }

  // optional .tRGB8 TransluBackgroundColor = 23;
  if (this->has_translubackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->translubackgroundcolor_, false, target);
  }

  // optional .tRGB8 BakeHighpolyVColsBackgroundCol = 24;
  if (this->has_bakehighpolyvcolsbackgroundcol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->bakehighpolyvcolsbackgroundcol_, false, target);
  }

  // optional bool ClosestIfFails = 25;
  if (this->closestiffails() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->closestiffails(), target);
  }

  // optional float DirectionsTonemapMax = 26;
  if (this->directionstonemapmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->directionstonemapmax(), target);
  }

  // optional bool CurvMonocrome = 27;
  if (this->curvmonocrome() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->curvmonocrome(), target);
  }

  // optional float AOBias = 28;
  if (this->aobias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->aobias(), target);
  }

  // optional bool BentTangentSpace = 29;
  if (this->benttangentspace() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->benttangentspace(), target);
  }

  // optional bool GenTranslu = 30;
  if (this->gentranslu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->gentranslu(), target);
  }

  // optional .tGenerateMaps.eAODistribution AODistribution = 31;
  if (this->aodistribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->aodistribution(), target);
  }

  // optional float PRTThreshold = 32;
  if (this->prtthreshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->prtthreshold(), target);
  }

  // optional float DirectionsTonemapMin = 33;
  if (this->directionstonemapmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->directionstonemapmin(), target);
  }

  // optional .tGenerateMaps.eAODistribution CurvDistribution = 34;
  if (this->curvdistribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      34, this->curvdistribution(), target);
  }

  // optional bool BentJitter = 35;
  if (this->bentjitter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->bentjitter(), target);
  }

  // optional .tGenerateMaps.eAODistribution BentDistribution = 36;
  if (this->bentdistribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      36, this->bentdistribution(), target);
  }

  // optional bool BakeHighpolyBaseTexture = 37;
  if (this->bakehighpolybasetexture() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->bakehighpolybasetexture(), target);
  }

  // optional bool GenConvexity = 38;
  if (this->genconvexity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->genconvexity(), target);
  }

  // optional float RadiosityNormalsAttenLinear = 39;
  if (this->radiositynormalsattenlinear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->radiositynormalsattenlinear(), target);
  }

  // optional uint32 TransluRaysPerSample = 40;
  if (this->translurayspersample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->translurayspersample(), target);
  }

  // optional float CurvSearchDistance = 41;
  if (this->curvsearchdistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->curvsearchdistance(), target);
  }

  // optional .tGenerateMaps.eSwizzleComponent SwizzleZ = 42;
  if (this->swizzlez() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      42, this->swizzlez(), target);
  }

  // optional float TransluBias = 43;
  if (this->translubias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(43, this->translubias(), target);
  }

  // optional bool PRTLimitRayDistance = 44;
  if (this->prtlimitraydistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->prtlimitraydistance(), target);
  }

  // optional bool GenBent = 45;
  if (this->genbent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->genbent(), target);
  }

  // optional bool AOLimitRayDistance = 46;
  if (this->aolimitraydistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(46, this->aolimitraydistance(), target);
  }

  // optional uint32 CurvRaysPerSample = 47;
  if (this->curvrayspersample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->curvrayspersample(), target);
  }

  // optional .tGenerateMaps.eAODistribution RadiosityNormalsDistribution = 48;
  if (this->radiositynormalsdistribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      48, this->radiositynormalsdistribution(), target);
  }

  // optional uint32 RadiosityNormalsRaysPerSample = 49;
  if (this->radiositynormalsrayspersample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->radiositynormalsrayspersample(), target);
  }

  // optional bool CurvJitter = 50;
  if (this->curvjitter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->curvjitter(), target);
  }

  // optional bool TangentSpace = 51;
  if (this->tangentspace() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->tangentspace(), target);
  }

  // optional bool RadiosityNormalsAllowPureOcclusion = 52;
  if (this->radiositynormalsallowpureocclusion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(52, this->radiositynormalsallowpureocclusion(), target);
  }

  // optional .tGenerateMaps.eSwizzleComponent BentSwizzleX = 53;
  if (this->bentswizzlex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      53, this->bentswizzlex(), target);
  }

  // optional .tGenerateMaps.eSwizzleComponent SwizzleY = 54;
  if (this->swizzley() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      54, this->swizzley(), target);
  }

  // optional bool GenCurv = 55;
  if (this->gencurv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->gencurv(), target);
  }

  // optional bool PRTJitter = 56;
  if (this->prtjitter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->prtjitter(), target);
  }

  // optional float AOAttenCuadratic = 57;
  if (this->aoattencuadratic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(57, this->aoattencuadratic(), target);
  }

  // optional float BentConeAngle = 58;
  if (this->bentconeangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(58, this->bentconeangle(), target);
  }

  // optional .tGenerateMaps.eSwizzleComponent SwizzleX = 59;
  if (this->swizzlex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      59, this->swizzlex(), target);
  }

  // optional bool RenderRayFails = 60;
  if (this->renderrayfails() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->renderrayfails(), target);
  }

  // optional float CavitySearchRadius = 61;
  if (this->cavitysearchradius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(61, this->cavitysearchradius(), target);
  }

  // optional bool RadiosityNormalsEncodeAO = 62;
  if (this->radiositynormalsencodeao() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(62, this->radiositynormalsencodeao(), target);
  }

  // optional float TransluConeAngle = 63;
  if (this->transluconeangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(63, this->transluconeangle(), target);
  }

  // optional uint32 BentRaysPerSample = 64;
  if (this->bentrayspersample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->bentrayspersample(), target);
  }

  // optional float ConvexityScale = 65;
  if (this->convexityscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(65, this->convexityscale(), target);
  }

  // optional float RadiosityNormalsConeAngle = 66;
  if (this->radiositynormalsconeangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(66, this->radiositynormalsconeangle(), target);
  }

  // optional string File = 67;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tGenerateMaps.File");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        67, this->file(), target);
  }

  // optional bool GenDerivNM = 68;
  if (this->genderivnm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(68, this->genderivnm(), target);
  }

  // optional bool BentLimitRayDistance = 69;
  if (this->bentlimitraydistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(69, this->bentlimitraydistance(), target);
  }

  // optional float PRTBias = 70;
  if (this->prtbias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(70, this->prtbias(), target);
  }

  // optional bool RenderWireframe = 71;
  if (this->renderwireframe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(71, this->renderwireframe(), target);
  }

  // optional bool PRTNormalize = 72;
  if (this->prtnormalize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(72, this->prtnormalize(), target);
  }

  // optional bool GenAO = 73;
  if (this->genao() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(73, this->genao(), target);
  }

  // optional float PRTConeAngle = 74;
  if (this->prtconeangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(74, this->prtconeangle(), target);
  }

  // optional uint32 Height = 75;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(75, this->height(), target);
  }

  // optional float RadiosityNormalsAttenCuadratic = 76;
  if (this->radiositynormalsattencuadratic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(76, this->radiositynormalsattencuadratic(), target);
  }

  // optional .tGenerateMaps.eHMNormalization DirectionsTonemap = 77;
  if (this->directionstonemap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      77, this->directionstonemap(), target);
  }

  // optional bool DirectionsTS = 78;
  if (this->directionsts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(78, this->directionsts(), target);
  }

  // optional uint32 PRTRaysPerSample = 79;
  if (this->prtrayspersample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(79, this->prtrayspersample(), target);
  }

  // optional uint32 EdgePadding = 80;
  if (this->edgepadding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(80, this->edgepadding(), target);
  }

  // optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleZ = 81;
  if (this->directionsswizzlez() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      81, this->directionsswizzlez(), target);
  }

  // optional bool AOAllowPureOccluded = 82;
  if (this->aoallowpureoccluded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(82, this->aoallowpureoccluded(), target);
  }

  // optional bool AOIgnoreBackfaceHits = 83;
  if (this->aoignorebackfacehits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(83, this->aoignorebackfacehits(), target);
  }

  // optional uint32 CavityRaysPerSample = 84;
  if (this->cavityrayspersample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(84, this->cavityrayspersample(), target);
  }

  // optional float AOAttenConstant = 85;
  if (this->aoattenconstant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(85, this->aoattenconstant(), target);
  }

  // optional bool CavityJitter = 86;
  if (this->cavityjitter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(86, this->cavityjitter(), target);
  }

  // optional float HeightTonemapMax = 87;
  if (this->heighttonemapmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(87, this->heighttonemapmax(), target);
  }

  // optional bool GenDirections = 88;
  if (this->gendirections() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(88, this->gendirections(), target);
  }

  // optional bool RadiosityNormalsLimitRayDistance = 89;
  if (this->radiositynormalslimitraydistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(89, this->radiositynormalslimitraydistance(), target);
  }

  // optional float HeightTonemapMin = 90;
  if (this->heighttonemapmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(90, this->heighttonemapmin(), target);
  }

  // optional bool RadiosityNormalsJitter = 91;
  if (this->radiositynormalsjitter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(91, this->radiositynormalsjitter(), target);
  }

  // optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleY = 92;
  if (this->directionsswizzley() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      92, this->directionsswizzley(), target);
  }

  // optional uint32 Width = 93;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(93, this->width(), target);
  }

  // optional bool BakeHighpolyBaseTextureDrawObjectIDIfNoTexture = 94;
  if (this->bakehighpolybasetexturedrawobjectidifnotexture() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(94, this->bakehighpolybasetexturedrawobjectidifnotexture(), target);
  }

  // optional bool Concavity = 95;
  if (this->concavity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(95, this->concavity(), target);
  }

  // optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleX = 96;
  if (this->directionsswizzlex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      96, this->directionsswizzlex(), target);
  }

  // optional bool GenNormals = 97;
  if (this->gennormals() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(97, this->gennormals(), target);
  }

  // optional uint32 ProximityRaysPerSample = 98;
  if (this->proximityrayspersample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(98, this->proximityrayspersample(), target);
  }

  // optional bool GenHeights = 99;
  if (this->genheights() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(99, this->genheights(), target);
  }

  // optional float RadiosityNormalsAttenConstant = 100;
  if (this->radiositynormalsattenconstant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(100, this->radiositynormalsattenconstant(), target);
  }

  // optional bool GenProximity = 101;
  if (this->genproximity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(101, this->genproximity(), target);
  }

  // optional bool GenPRT = 102;
  if (this->genprt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->genprt(), target);
  }

  // optional float CavityContrast = 103;
  if (this->cavitycontrast() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(103, this->cavitycontrast(), target);
  }

  // optional .tGenerateMaps.eRNMCoordSys RadiosityNormalsCoordSys = 104;
  if (this->radiositynormalscoordsys() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      104, this->radiositynormalscoordsys(), target);
  }

  // optional bool TransluJitter = 105;
  if (this->translujitter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(105, this->translujitter(), target);
  }

  // optional uint32 AORaysPerSample = 106;
  if (this->aorayspersample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(106, this->aorayspersample(), target);
  }

  // optional float BentBias = 107;
  if (this->bentbias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(107, this->bentbias(), target);
  }

  // optional bool DiscardRayBackFacesHits = 108;
  if (this->discardraybackfaceshits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(108, this->discardraybackfaceshits(), target);
  }

  // optional float AOConeAngle = 109;
  if (this->aoconeangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(109, this->aoconeangle(), target);
  }

  // optional .tGenerateMaps.eSwizzleComponent BentSwizzleY = 110;
  if (this->bentswizzley() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      110, this->bentswizzley(), target);
  }

  // optional float RadiosityNormalsBias = 111;
  if (this->radiositynormalsbias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(111, this->radiositynormalsbias(), target);
  }

  // optional float RadiosityNormalsContrast = 112;
  if (this->radiositynormalscontrast() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(112, this->radiositynormalscontrast(), target);
  }

  // optional uint32 CavitySteps = 113;
  if (this->cavitysteps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(113, this->cavitysteps(), target);
  }

  // optional .tGenerateMaps.eAntialiasing AA = 114;
  if (this->aa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      114, this->aa(), target);
  }

  // optional .tGenerateMaps.eSwizzleComponent BentSwizzleZ = 115;
  if (this->bentswizzlez() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      115, this->bentswizzlez(), target);
  }

  // optional uint32 BucketSize = 116;
  if (this->bucketsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(116, this->bucketsize(), target);
  }

  // optional float CurvConeAngle = 117;
  if (this->curvconeangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(117, this->curvconeangle(), target);
  }

  // optional float TransluDist = 118;
  if (this->transludist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(118, this->transludist(), target);
  }

  // optional bool AOJitter = 119;
  if (this->aojitter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(119, this->aojitter(), target);
  }

  // optional float CurvBias = 120;
  if (this->curvbias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(120, this->curvbias(), target);
  }

  // optional bool GenWireRays = 121;
  if (this->genwirerays() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(121, this->genwirerays(), target);
  }

  // optional .tGenerateMaps.eCurvAlgorithm CurvAlgorithm = 122;
  if (this->curvalgorithm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      122, this->curvalgorithm(), target);
  }

  // optional .tGenerateMaps.eAODistribution TransluDistribution = 123;
  if (this->transludistribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      123, this->transludistribution(), target);
  }

  // optional float AOAttenLinear = 124;
  if (this->aoattenlinear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(124, this->aoattenlinear(), target);
  }

  // optional bool ProximityLimitRayDistance = 125;
  if (this->proximitylimitraydistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(125, this->proximitylimitraydistance(), target);
  }

  // optional bool GenRadiosityNormals = 126;
  if (this->genradiositynormals() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(126, this->genradiositynormals(), target);
  }

  // optional float ProximityConeAngle = 127;
  if (this->proximityconeangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(127, this->proximityconeangle(), target);
  }

  // optional .tGenerateMaps.eHMNormalization HeightTonemap = 128;
  if (this->heighttonemap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      128, this->heighttonemap(), target);
  }

  // optional bool GenCavity = 129;
  if (this->gencavity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(129, this->gencavity(), target);
  }

  // optional bool BakeHighpolyVCols = 130;
  if (this->bakehighpolyvcols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(130, this->bakehighpolyvcols(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tGenerateMaps)
  return target;
}

int tGenerateMaps::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tGenerateMaps)
  int total_size = 0;

  // optional .tRGB8 NMBackgroundColor = 1;
  if (this->has_nmbackgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nmbackgroundcolor_);
  }

  // optional .tRGB8 HMBackgroundColor = 2;
  if (this->has_hmbackgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hmbackgroundcolor_);
  }

  // optional .tRGB8 BakeHighpolyBaseTextureNoTexCol = 3;
  if (this->has_bakehighpolybasetexturenotexcol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bakehighpolybasetexturenotexcol_);
  }

  // optional .tRGB8 BakeHighpolyBaseTextureBackgroundColor = 4;
  if (this->has_bakehighpolybasetexturebackgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bakehighpolybasetexturebackgroundcolor_);
  }

  // optional .tRGB8 RenderWireframeBackgroundColor = 5;
  if (this->has_renderwireframebackgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->renderwireframebackgroundcolor_);
  }

  // optional .tRGB8 RenderWireframeCol = 6;
  if (this->has_renderwireframecol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->renderwireframecol_);
  }

  // optional .tRGB8 RenderCWCol = 7;
  if (this->has_rendercwcol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rendercwcol_);
  }

  // optional .tRGB8 RenderSeamCol = 8;
  if (this->has_renderseamcol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->renderseamcol_);
  }

  // optional .tRGB8 RenderRayFailsCol = 9;
  if (this->has_renderrayfailscol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->renderrayfailscol_);
  }

  // optional .tRGB8 AOOccludedColor = 10;
  if (this->has_aooccludedcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aooccludedcolor_);
  }

  // optional .tRGB8 AOUnoccludedColor = 11;
  if (this->has_aounoccludedcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aounoccludedcolor_);
  }

  // optional .tRGB8 AOBackgroundColor = 12;
  if (this->has_aobackgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aobackgroundcolor_);
  }

  // optional .tRGB8 BentBackgroundColor = 13;
  if (this->has_bentbackgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bentbackgroundcolor_);
  }

  // optional .tRGB8 PRTBackgroundColor = 14;
  if (this->has_prtbackgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prtbackgroundcolor_);
  }

  // optional .tRGB8 ConvexityBackgroundColor = 15;
  if (this->has_convexitybackgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->convexitybackgroundcolor_);
  }

  // optional .tRGB8 ThicknessBackgroundColor = 16;
  if (this->has_thicknessbackgroundcolor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thicknessbackgroundcolor_);
  }

  // optional .tRGB8 ProximityBackgroundColor = 17;
  if (this->has_proximitybackgroundcolor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->proximitybackgroundcolor_);
  }

  // optional .tRGB8 CavityBackgroundColor = 18;
  if (this->has_cavitybackgroundcolor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cavitybackgroundcolor_);
  }

  // optional .tRGB8 VDMBackgroundColor = 19;
  if (this->has_vdmbackgroundcolor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vdmbackgroundcolor_);
  }

  // optional .tRGB8 RadNMBackgroundColor = 20;
  if (this->has_radnmbackgroundcolor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->radnmbackgroundcolor_);
  }

  // optional .tRGB8 CurvBackgroundColor = 21;
  if (this->has_curvbackgroundcolor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->curvbackgroundcolor_);
  }

  // optional .tRGB8 DerivNMBackgroundColor = 22;
  if (this->has_derivnmbackgroundcolor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->derivnmbackgroundcolor_);
  }

  // optional .tRGB8 TransluBackgroundColor = 23;
  if (this->has_translubackgroundcolor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->translubackgroundcolor_);
  }

  // optional .tRGB8 BakeHighpolyVColsBackgroundCol = 24;
  if (this->has_bakehighpolyvcolsbackgroundcol()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bakehighpolyvcolsbackgroundcol_);
  }

  // optional bool ClosestIfFails = 25;
  if (this->closestiffails() != 0) {
    total_size += 2 + 1;
  }

  // optional float DirectionsTonemapMax = 26;
  if (this->directionstonemapmax() != 0) {
    total_size += 2 + 4;
  }

  // optional bool CurvMonocrome = 27;
  if (this->curvmonocrome() != 0) {
    total_size += 2 + 1;
  }

  // optional float AOBias = 28;
  if (this->aobias() != 0) {
    total_size += 2 + 4;
  }

  // optional bool BentTangentSpace = 29;
  if (this->benttangentspace() != 0) {
    total_size += 2 + 1;
  }

  // optional bool GenTranslu = 30;
  if (this->gentranslu() != 0) {
    total_size += 2 + 1;
  }

  // optional .tGenerateMaps.eAODistribution AODistribution = 31;
  if (this->aodistribution() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->aodistribution());
  }

  // optional float PRTThreshold = 32;
  if (this->prtthreshold() != 0) {
    total_size += 2 + 4;
  }

  // optional float DirectionsTonemapMin = 33;
  if (this->directionstonemapmin() != 0) {
    total_size += 2 + 4;
  }

  // optional .tGenerateMaps.eAODistribution CurvDistribution = 34;
  if (this->curvdistribution() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->curvdistribution());
  }

  // optional bool BentJitter = 35;
  if (this->bentjitter() != 0) {
    total_size += 2 + 1;
  }

  // optional .tGenerateMaps.eAODistribution BentDistribution = 36;
  if (this->bentdistribution() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bentdistribution());
  }

  // optional bool BakeHighpolyBaseTexture = 37;
  if (this->bakehighpolybasetexture() != 0) {
    total_size += 2 + 1;
  }

  // optional bool GenConvexity = 38;
  if (this->genconvexity() != 0) {
    total_size += 2 + 1;
  }

  // optional float RadiosityNormalsAttenLinear = 39;
  if (this->radiositynormalsattenlinear() != 0) {
    total_size += 2 + 4;
  }

  // optional uint32 TransluRaysPerSample = 40;
  if (this->translurayspersample() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->translurayspersample());
  }

  // optional float CurvSearchDistance = 41;
  if (this->curvsearchdistance() != 0) {
    total_size += 2 + 4;
  }

  // optional .tGenerateMaps.eSwizzleComponent SwizzleZ = 42;
  if (this->swizzlez() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->swizzlez());
  }

  // optional float TransluBias = 43;
  if (this->translubias() != 0) {
    total_size += 2 + 4;
  }

  // optional bool PRTLimitRayDistance = 44;
  if (this->prtlimitraydistance() != 0) {
    total_size += 2 + 1;
  }

  // optional bool GenBent = 45;
  if (this->genbent() != 0) {
    total_size += 2 + 1;
  }

  // optional bool AOLimitRayDistance = 46;
  if (this->aolimitraydistance() != 0) {
    total_size += 2 + 1;
  }

  // optional uint32 CurvRaysPerSample = 47;
  if (this->curvrayspersample() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curvrayspersample());
  }

  // optional .tGenerateMaps.eAODistribution RadiosityNormalsDistribution = 48;
  if (this->radiositynormalsdistribution() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->radiositynormalsdistribution());
  }

  // optional uint32 RadiosityNormalsRaysPerSample = 49;
  if (this->radiositynormalsrayspersample() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->radiositynormalsrayspersample());
  }

  // optional bool CurvJitter = 50;
  if (this->curvjitter() != 0) {
    total_size += 2 + 1;
  }

  // optional bool TangentSpace = 51;
  if (this->tangentspace() != 0) {
    total_size += 2 + 1;
  }

  // optional bool RadiosityNormalsAllowPureOcclusion = 52;
  if (this->radiositynormalsallowpureocclusion() != 0) {
    total_size += 2 + 1;
  }

  // optional .tGenerateMaps.eSwizzleComponent BentSwizzleX = 53;
  if (this->bentswizzlex() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bentswizzlex());
  }

  // optional .tGenerateMaps.eSwizzleComponent SwizzleY = 54;
  if (this->swizzley() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->swizzley());
  }

  // optional bool GenCurv = 55;
  if (this->gencurv() != 0) {
    total_size += 2 + 1;
  }

  // optional bool PRTJitter = 56;
  if (this->prtjitter() != 0) {
    total_size += 2 + 1;
  }

  // optional float AOAttenCuadratic = 57;
  if (this->aoattencuadratic() != 0) {
    total_size += 2 + 4;
  }

  // optional float BentConeAngle = 58;
  if (this->bentconeangle() != 0) {
    total_size += 2 + 4;
  }

  // optional .tGenerateMaps.eSwizzleComponent SwizzleX = 59;
  if (this->swizzlex() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->swizzlex());
  }

  // optional bool RenderRayFails = 60;
  if (this->renderrayfails() != 0) {
    total_size += 2 + 1;
  }

  // optional float CavitySearchRadius = 61;
  if (this->cavitysearchradius() != 0) {
    total_size += 2 + 4;
  }

  // optional bool RadiosityNormalsEncodeAO = 62;
  if (this->radiositynormalsencodeao() != 0) {
    total_size += 2 + 1;
  }

  // optional float TransluConeAngle = 63;
  if (this->transluconeangle() != 0) {
    total_size += 2 + 4;
  }

  // optional uint32 BentRaysPerSample = 64;
  if (this->bentrayspersample() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bentrayspersample());
  }

  // optional float ConvexityScale = 65;
  if (this->convexityscale() != 0) {
    total_size += 2 + 4;
  }

  // optional float RadiosityNormalsConeAngle = 66;
  if (this->radiositynormalsconeangle() != 0) {
    total_size += 2 + 4;
  }

  // optional string File = 67;
  if (this->file().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // optional bool GenDerivNM = 68;
  if (this->genderivnm() != 0) {
    total_size += 2 + 1;
  }

  // optional bool BentLimitRayDistance = 69;
  if (this->bentlimitraydistance() != 0) {
    total_size += 2 + 1;
  }

  // optional float PRTBias = 70;
  if (this->prtbias() != 0) {
    total_size += 2 + 4;
  }

  // optional bool RenderWireframe = 71;
  if (this->renderwireframe() != 0) {
    total_size += 2 + 1;
  }

  // optional bool PRTNormalize = 72;
  if (this->prtnormalize() != 0) {
    total_size += 2 + 1;
  }

  // optional bool GenAO = 73;
  if (this->genao() != 0) {
    total_size += 2 + 1;
  }

  // optional float PRTConeAngle = 74;
  if (this->prtconeangle() != 0) {
    total_size += 2 + 4;
  }

  // optional uint32 Height = 75;
  if (this->height() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // optional float RadiosityNormalsAttenCuadratic = 76;
  if (this->radiositynormalsattencuadratic() != 0) {
    total_size += 2 + 4;
  }

  // optional .tGenerateMaps.eHMNormalization DirectionsTonemap = 77;
  if (this->directionstonemap() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->directionstonemap());
  }

  // optional bool DirectionsTS = 78;
  if (this->directionsts() != 0) {
    total_size += 2 + 1;
  }

  // optional uint32 PRTRaysPerSample = 79;
  if (this->prtrayspersample() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prtrayspersample());
  }

  // optional uint32 EdgePadding = 80;
  if (this->edgepadding() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->edgepadding());
  }

  // optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleZ = 81;
  if (this->directionsswizzlez() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->directionsswizzlez());
  }

  // optional bool AOAllowPureOccluded = 82;
  if (this->aoallowpureoccluded() != 0) {
    total_size += 2 + 1;
  }

  // optional bool AOIgnoreBackfaceHits = 83;
  if (this->aoignorebackfacehits() != 0) {
    total_size += 2 + 1;
  }

  // optional uint32 CavityRaysPerSample = 84;
  if (this->cavityrayspersample() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cavityrayspersample());
  }

  // optional float AOAttenConstant = 85;
  if (this->aoattenconstant() != 0) {
    total_size += 2 + 4;
  }

  // optional bool CavityJitter = 86;
  if (this->cavityjitter() != 0) {
    total_size += 2 + 1;
  }

  // optional float HeightTonemapMax = 87;
  if (this->heighttonemapmax() != 0) {
    total_size += 2 + 4;
  }

  // optional bool GenDirections = 88;
  if (this->gendirections() != 0) {
    total_size += 2 + 1;
  }

  // optional bool RadiosityNormalsLimitRayDistance = 89;
  if (this->radiositynormalslimitraydistance() != 0) {
    total_size += 2 + 1;
  }

  // optional float HeightTonemapMin = 90;
  if (this->heighttonemapmin() != 0) {
    total_size += 2 + 4;
  }

  // optional bool RadiosityNormalsJitter = 91;
  if (this->radiositynormalsjitter() != 0) {
    total_size += 2 + 1;
  }

  // optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleY = 92;
  if (this->directionsswizzley() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->directionsswizzley());
  }

  // optional uint32 Width = 93;
  if (this->width() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // optional bool BakeHighpolyBaseTextureDrawObjectIDIfNoTexture = 94;
  if (this->bakehighpolybasetexturedrawobjectidifnotexture() != 0) {
    total_size += 2 + 1;
  }

  // optional bool Concavity = 95;
  if (this->concavity() != 0) {
    total_size += 2 + 1;
  }

  // optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleX = 96;
  if (this->directionsswizzlex() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->directionsswizzlex());
  }

  // optional bool GenNormals = 97;
  if (this->gennormals() != 0) {
    total_size += 2 + 1;
  }

  // optional uint32 ProximityRaysPerSample = 98;
  if (this->proximityrayspersample() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proximityrayspersample());
  }

  // optional bool GenHeights = 99;
  if (this->genheights() != 0) {
    total_size += 2 + 1;
  }

  // optional float RadiosityNormalsAttenConstant = 100;
  if (this->radiositynormalsattenconstant() != 0) {
    total_size += 2 + 4;
  }

  // optional bool GenProximity = 101;
  if (this->genproximity() != 0) {
    total_size += 2 + 1;
  }

  // optional bool GenPRT = 102;
  if (this->genprt() != 0) {
    total_size += 2 + 1;
  }

  // optional float CavityContrast = 103;
  if (this->cavitycontrast() != 0) {
    total_size += 2 + 4;
  }

  // optional .tGenerateMaps.eRNMCoordSys RadiosityNormalsCoordSys = 104;
  if (this->radiositynormalscoordsys() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->radiositynormalscoordsys());
  }

  // optional bool TransluJitter = 105;
  if (this->translujitter() != 0) {
    total_size += 2 + 1;
  }

  // optional uint32 AORaysPerSample = 106;
  if (this->aorayspersample() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aorayspersample());
  }

  // optional float BentBias = 107;
  if (this->bentbias() != 0) {
    total_size += 2 + 4;
  }

  // optional bool DiscardRayBackFacesHits = 108;
  if (this->discardraybackfaceshits() != 0) {
    total_size += 2 + 1;
  }

  // optional float AOConeAngle = 109;
  if (this->aoconeangle() != 0) {
    total_size += 2 + 4;
  }

  // optional .tGenerateMaps.eSwizzleComponent BentSwizzleY = 110;
  if (this->bentswizzley() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bentswizzley());
  }

  // optional float RadiosityNormalsBias = 111;
  if (this->radiositynormalsbias() != 0) {
    total_size += 2 + 4;
  }

  // optional float RadiosityNormalsContrast = 112;
  if (this->radiositynormalscontrast() != 0) {
    total_size += 2 + 4;
  }

  // optional uint32 CavitySteps = 113;
  if (this->cavitysteps() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cavitysteps());
  }

  // optional .tGenerateMaps.eAntialiasing AA = 114;
  if (this->aa() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->aa());
  }

  // optional .tGenerateMaps.eSwizzleComponent BentSwizzleZ = 115;
  if (this->bentswizzlez() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bentswizzlez());
  }

  // optional uint32 BucketSize = 116;
  if (this->bucketsize() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bucketsize());
  }

  // optional float CurvConeAngle = 117;
  if (this->curvconeangle() != 0) {
    total_size += 2 + 4;
  }

  // optional float TransluDist = 118;
  if (this->transludist() != 0) {
    total_size += 2 + 4;
  }

  // optional bool AOJitter = 119;
  if (this->aojitter() != 0) {
    total_size += 2 + 1;
  }

  // optional float CurvBias = 120;
  if (this->curvbias() != 0) {
    total_size += 2 + 4;
  }

  // optional bool GenWireRays = 121;
  if (this->genwirerays() != 0) {
    total_size += 2 + 1;
  }

  // optional .tGenerateMaps.eCurvAlgorithm CurvAlgorithm = 122;
  if (this->curvalgorithm() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->curvalgorithm());
  }

  // optional .tGenerateMaps.eAODistribution TransluDistribution = 123;
  if (this->transludistribution() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->transludistribution());
  }

  // optional float AOAttenLinear = 124;
  if (this->aoattenlinear() != 0) {
    total_size += 2 + 4;
  }

  // optional bool ProximityLimitRayDistance = 125;
  if (this->proximitylimitraydistance() != 0) {
    total_size += 2 + 1;
  }

  // optional bool GenRadiosityNormals = 126;
  if (this->genradiositynormals() != 0) {
    total_size += 2 + 1;
  }

  // optional float ProximityConeAngle = 127;
  if (this->proximityconeangle() != 0) {
    total_size += 2 + 4;
  }

  // optional .tGenerateMaps.eHMNormalization HeightTonemap = 128;
  if (this->heighttonemap() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->heighttonemap());
  }

  // optional bool GenCavity = 129;
  if (this->gencavity() != 0) {
    total_size += 2 + 1;
  }

  // optional bool BakeHighpolyVCols = 130;
  if (this->bakehighpolyvcols() != 0) {
    total_size += 2 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tGenerateMaps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tGenerateMaps)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const tGenerateMaps* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const tGenerateMaps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tGenerateMaps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tGenerateMaps)
    MergeFrom(*source);
  }
}

void tGenerateMaps::MergeFrom(const tGenerateMaps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tGenerateMaps)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_nmbackgroundcolor()) {
    mutable_nmbackgroundcolor()->::tRGB8::MergeFrom(from.nmbackgroundcolor());
  }
  if (from.has_hmbackgroundcolor()) {
    mutable_hmbackgroundcolor()->::tRGB8::MergeFrom(from.hmbackgroundcolor());
  }
  if (from.has_bakehighpolybasetexturenotexcol()) {
    mutable_bakehighpolybasetexturenotexcol()->::tRGB8::MergeFrom(from.bakehighpolybasetexturenotexcol());
  }
  if (from.has_bakehighpolybasetexturebackgroundcolor()) {
    mutable_bakehighpolybasetexturebackgroundcolor()->::tRGB8::MergeFrom(from.bakehighpolybasetexturebackgroundcolor());
  }
  if (from.has_renderwireframebackgroundcolor()) {
    mutable_renderwireframebackgroundcolor()->::tRGB8::MergeFrom(from.renderwireframebackgroundcolor());
  }
  if (from.has_renderwireframecol()) {
    mutable_renderwireframecol()->::tRGB8::MergeFrom(from.renderwireframecol());
  }
  if (from.has_rendercwcol()) {
    mutable_rendercwcol()->::tRGB8::MergeFrom(from.rendercwcol());
  }
  if (from.has_renderseamcol()) {
    mutable_renderseamcol()->::tRGB8::MergeFrom(from.renderseamcol());
  }
  if (from.has_renderrayfailscol()) {
    mutable_renderrayfailscol()->::tRGB8::MergeFrom(from.renderrayfailscol());
  }
  if (from.has_aooccludedcolor()) {
    mutable_aooccludedcolor()->::tRGB8::MergeFrom(from.aooccludedcolor());
  }
  if (from.has_aounoccludedcolor()) {
    mutable_aounoccludedcolor()->::tRGB8::MergeFrom(from.aounoccludedcolor());
  }
  if (from.has_aobackgroundcolor()) {
    mutable_aobackgroundcolor()->::tRGB8::MergeFrom(from.aobackgroundcolor());
  }
  if (from.has_bentbackgroundcolor()) {
    mutable_bentbackgroundcolor()->::tRGB8::MergeFrom(from.bentbackgroundcolor());
  }
  if (from.has_prtbackgroundcolor()) {
    mutable_prtbackgroundcolor()->::tRGB8::MergeFrom(from.prtbackgroundcolor());
  }
  if (from.has_convexitybackgroundcolor()) {
    mutable_convexitybackgroundcolor()->::tRGB8::MergeFrom(from.convexitybackgroundcolor());
  }
  if (from.has_thicknessbackgroundcolor()) {
    mutable_thicknessbackgroundcolor()->::tRGB8::MergeFrom(from.thicknessbackgroundcolor());
  }
  if (from.has_proximitybackgroundcolor()) {
    mutable_proximitybackgroundcolor()->::tRGB8::MergeFrom(from.proximitybackgroundcolor());
  }
  if (from.has_cavitybackgroundcolor()) {
    mutable_cavitybackgroundcolor()->::tRGB8::MergeFrom(from.cavitybackgroundcolor());
  }
  if (from.has_vdmbackgroundcolor()) {
    mutable_vdmbackgroundcolor()->::tRGB8::MergeFrom(from.vdmbackgroundcolor());
  }
  if (from.has_radnmbackgroundcolor()) {
    mutable_radnmbackgroundcolor()->::tRGB8::MergeFrom(from.radnmbackgroundcolor());
  }
  if (from.has_curvbackgroundcolor()) {
    mutable_curvbackgroundcolor()->::tRGB8::MergeFrom(from.curvbackgroundcolor());
  }
  if (from.has_derivnmbackgroundcolor()) {
    mutable_derivnmbackgroundcolor()->::tRGB8::MergeFrom(from.derivnmbackgroundcolor());
  }
  if (from.has_translubackgroundcolor()) {
    mutable_translubackgroundcolor()->::tRGB8::MergeFrom(from.translubackgroundcolor());
  }
  if (from.has_bakehighpolyvcolsbackgroundcol()) {
    mutable_bakehighpolyvcolsbackgroundcol()->::tRGB8::MergeFrom(from.bakehighpolyvcolsbackgroundcol());
  }
  if (from.closestiffails() != 0) {
    set_closestiffails(from.closestiffails());
  }
  if (from.directionstonemapmax() != 0) {
    set_directionstonemapmax(from.directionstonemapmax());
  }
  if (from.curvmonocrome() != 0) {
    set_curvmonocrome(from.curvmonocrome());
  }
  if (from.aobias() != 0) {
    set_aobias(from.aobias());
  }
  if (from.benttangentspace() != 0) {
    set_benttangentspace(from.benttangentspace());
  }
  if (from.gentranslu() != 0) {
    set_gentranslu(from.gentranslu());
  }
  if (from.aodistribution() != 0) {
    set_aodistribution(from.aodistribution());
  }
  if (from.prtthreshold() != 0) {
    set_prtthreshold(from.prtthreshold());
  }
  if (from.directionstonemapmin() != 0) {
    set_directionstonemapmin(from.directionstonemapmin());
  }
  if (from.curvdistribution() != 0) {
    set_curvdistribution(from.curvdistribution());
  }
  if (from.bentjitter() != 0) {
    set_bentjitter(from.bentjitter());
  }
  if (from.bentdistribution() != 0) {
    set_bentdistribution(from.bentdistribution());
  }
  if (from.bakehighpolybasetexture() != 0) {
    set_bakehighpolybasetexture(from.bakehighpolybasetexture());
  }
  if (from.genconvexity() != 0) {
    set_genconvexity(from.genconvexity());
  }
  if (from.radiositynormalsattenlinear() != 0) {
    set_radiositynormalsattenlinear(from.radiositynormalsattenlinear());
  }
  if (from.translurayspersample() != 0) {
    set_translurayspersample(from.translurayspersample());
  }
  if (from.curvsearchdistance() != 0) {
    set_curvsearchdistance(from.curvsearchdistance());
  }
  if (from.swizzlez() != 0) {
    set_swizzlez(from.swizzlez());
  }
  if (from.translubias() != 0) {
    set_translubias(from.translubias());
  }
  if (from.prtlimitraydistance() != 0) {
    set_prtlimitraydistance(from.prtlimitraydistance());
  }
  if (from.genbent() != 0) {
    set_genbent(from.genbent());
  }
  if (from.aolimitraydistance() != 0) {
    set_aolimitraydistance(from.aolimitraydistance());
  }
  if (from.curvrayspersample() != 0) {
    set_curvrayspersample(from.curvrayspersample());
  }
  if (from.radiositynormalsdistribution() != 0) {
    set_radiositynormalsdistribution(from.radiositynormalsdistribution());
  }
  if (from.radiositynormalsrayspersample() != 0) {
    set_radiositynormalsrayspersample(from.radiositynormalsrayspersample());
  }
  if (from.curvjitter() != 0) {
    set_curvjitter(from.curvjitter());
  }
  if (from.tangentspace() != 0) {
    set_tangentspace(from.tangentspace());
  }
  if (from.radiositynormalsallowpureocclusion() != 0) {
    set_radiositynormalsallowpureocclusion(from.radiositynormalsallowpureocclusion());
  }
  if (from.bentswizzlex() != 0) {
    set_bentswizzlex(from.bentswizzlex());
  }
  if (from.swizzley() != 0) {
    set_swizzley(from.swizzley());
  }
  if (from.gencurv() != 0) {
    set_gencurv(from.gencurv());
  }
  if (from.prtjitter() != 0) {
    set_prtjitter(from.prtjitter());
  }
  if (from.aoattencuadratic() != 0) {
    set_aoattencuadratic(from.aoattencuadratic());
  }
  if (from.bentconeangle() != 0) {
    set_bentconeangle(from.bentconeangle());
  }
  if (from.swizzlex() != 0) {
    set_swizzlex(from.swizzlex());
  }
  if (from.renderrayfails() != 0) {
    set_renderrayfails(from.renderrayfails());
  }
  if (from.cavitysearchradius() != 0) {
    set_cavitysearchradius(from.cavitysearchradius());
  }
  if (from.radiositynormalsencodeao() != 0) {
    set_radiositynormalsencodeao(from.radiositynormalsencodeao());
  }
  if (from.transluconeangle() != 0) {
    set_transluconeangle(from.transluconeangle());
  }
  if (from.bentrayspersample() != 0) {
    set_bentrayspersample(from.bentrayspersample());
  }
  if (from.convexityscale() != 0) {
    set_convexityscale(from.convexityscale());
  }
  if (from.radiositynormalsconeangle() != 0) {
    set_radiositynormalsconeangle(from.radiositynormalsconeangle());
  }
  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.genderivnm() != 0) {
    set_genderivnm(from.genderivnm());
  }
  if (from.bentlimitraydistance() != 0) {
    set_bentlimitraydistance(from.bentlimitraydistance());
  }
  if (from.prtbias() != 0) {
    set_prtbias(from.prtbias());
  }
  if (from.renderwireframe() != 0) {
    set_renderwireframe(from.renderwireframe());
  }
  if (from.prtnormalize() != 0) {
    set_prtnormalize(from.prtnormalize());
  }
  if (from.genao() != 0) {
    set_genao(from.genao());
  }
  if (from.prtconeangle() != 0) {
    set_prtconeangle(from.prtconeangle());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.radiositynormalsattencuadratic() != 0) {
    set_radiositynormalsattencuadratic(from.radiositynormalsattencuadratic());
  }
  if (from.directionstonemap() != 0) {
    set_directionstonemap(from.directionstonemap());
  }
  if (from.directionsts() != 0) {
    set_directionsts(from.directionsts());
  }
  if (from.prtrayspersample() != 0) {
    set_prtrayspersample(from.prtrayspersample());
  }
  if (from.edgepadding() != 0) {
    set_edgepadding(from.edgepadding());
  }
  if (from.directionsswizzlez() != 0) {
    set_directionsswizzlez(from.directionsswizzlez());
  }
  if (from.aoallowpureoccluded() != 0) {
    set_aoallowpureoccluded(from.aoallowpureoccluded());
  }
  if (from.aoignorebackfacehits() != 0) {
    set_aoignorebackfacehits(from.aoignorebackfacehits());
  }
  if (from.cavityrayspersample() != 0) {
    set_cavityrayspersample(from.cavityrayspersample());
  }
  if (from.aoattenconstant() != 0) {
    set_aoattenconstant(from.aoattenconstant());
  }
  if (from.cavityjitter() != 0) {
    set_cavityjitter(from.cavityjitter());
  }
  if (from.heighttonemapmax() != 0) {
    set_heighttonemapmax(from.heighttonemapmax());
  }
  if (from.gendirections() != 0) {
    set_gendirections(from.gendirections());
  }
  if (from.radiositynormalslimitraydistance() != 0) {
    set_radiositynormalslimitraydistance(from.radiositynormalslimitraydistance());
  }
  if (from.heighttonemapmin() != 0) {
    set_heighttonemapmin(from.heighttonemapmin());
  }
  if (from.radiositynormalsjitter() != 0) {
    set_radiositynormalsjitter(from.radiositynormalsjitter());
  }
  if (from.directionsswizzley() != 0) {
    set_directionsswizzley(from.directionsswizzley());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.bakehighpolybasetexturedrawobjectidifnotexture() != 0) {
    set_bakehighpolybasetexturedrawobjectidifnotexture(from.bakehighpolybasetexturedrawobjectidifnotexture());
  }
  if (from.concavity() != 0) {
    set_concavity(from.concavity());
  }
  if (from.directionsswizzlex() != 0) {
    set_directionsswizzlex(from.directionsswizzlex());
  }
  if (from.gennormals() != 0) {
    set_gennormals(from.gennormals());
  }
  if (from.proximityrayspersample() != 0) {
    set_proximityrayspersample(from.proximityrayspersample());
  }
  if (from.genheights() != 0) {
    set_genheights(from.genheights());
  }
  if (from.radiositynormalsattenconstant() != 0) {
    set_radiositynormalsattenconstant(from.radiositynormalsattenconstant());
  }
  if (from.genproximity() != 0) {
    set_genproximity(from.genproximity());
  }
  if (from.genprt() != 0) {
    set_genprt(from.genprt());
  }
  if (from.cavitycontrast() != 0) {
    set_cavitycontrast(from.cavitycontrast());
  }
  if (from.radiositynormalscoordsys() != 0) {
    set_radiositynormalscoordsys(from.radiositynormalscoordsys());
  }
  if (from.translujitter() != 0) {
    set_translujitter(from.translujitter());
  }
  if (from.aorayspersample() != 0) {
    set_aorayspersample(from.aorayspersample());
  }
  if (from.bentbias() != 0) {
    set_bentbias(from.bentbias());
  }
  if (from.discardraybackfaceshits() != 0) {
    set_discardraybackfaceshits(from.discardraybackfaceshits());
  }
  if (from.aoconeangle() != 0) {
    set_aoconeangle(from.aoconeangle());
  }
  if (from.bentswizzley() != 0) {
    set_bentswizzley(from.bentswizzley());
  }
  if (from.radiositynormalsbias() != 0) {
    set_radiositynormalsbias(from.radiositynormalsbias());
  }
  if (from.radiositynormalscontrast() != 0) {
    set_radiositynormalscontrast(from.radiositynormalscontrast());
  }
  if (from.cavitysteps() != 0) {
    set_cavitysteps(from.cavitysteps());
  }
  if (from.aa() != 0) {
    set_aa(from.aa());
  }
  if (from.bentswizzlez() != 0) {
    set_bentswizzlez(from.bentswizzlez());
  }
  if (from.bucketsize() != 0) {
    set_bucketsize(from.bucketsize());
  }
  if (from.curvconeangle() != 0) {
    set_curvconeangle(from.curvconeangle());
  }
  if (from.transludist() != 0) {
    set_transludist(from.transludist());
  }
  if (from.aojitter() != 0) {
    set_aojitter(from.aojitter());
  }
  if (from.curvbias() != 0) {
    set_curvbias(from.curvbias());
  }
  if (from.genwirerays() != 0) {
    set_genwirerays(from.genwirerays());
  }
  if (from.curvalgorithm() != 0) {
    set_curvalgorithm(from.curvalgorithm());
  }
  if (from.transludistribution() != 0) {
    set_transludistribution(from.transludistribution());
  }
  if (from.aoattenlinear() != 0) {
    set_aoattenlinear(from.aoattenlinear());
  }
  if (from.proximitylimitraydistance() != 0) {
    set_proximitylimitraydistance(from.proximitylimitraydistance());
  }
  if (from.genradiositynormals() != 0) {
    set_genradiositynormals(from.genradiositynormals());
  }
  if (from.proximityconeangle() != 0) {
    set_proximityconeangle(from.proximityconeangle());
  }
  if (from.heighttonemap() != 0) {
    set_heighttonemap(from.heighttonemap());
  }
  if (from.gencavity() != 0) {
    set_gencavity(from.gencavity());
  }
  if (from.bakehighpolyvcols() != 0) {
    set_bakehighpolyvcols(from.bakehighpolyvcols());
  }
}

void tGenerateMaps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tGenerateMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tGenerateMaps::CopyFrom(const tGenerateMaps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tGenerateMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tGenerateMaps::IsInitialized() const {

  return true;
}

void tGenerateMaps::Swap(tGenerateMaps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tGenerateMaps::InternalSwap(tGenerateMaps* other) {
  std::swap(nmbackgroundcolor_, other->nmbackgroundcolor_);
  std::swap(hmbackgroundcolor_, other->hmbackgroundcolor_);
  std::swap(bakehighpolybasetexturenotexcol_, other->bakehighpolybasetexturenotexcol_);
  std::swap(bakehighpolybasetexturebackgroundcolor_, other->bakehighpolybasetexturebackgroundcolor_);
  std::swap(renderwireframebackgroundcolor_, other->renderwireframebackgroundcolor_);
  std::swap(renderwireframecol_, other->renderwireframecol_);
  std::swap(rendercwcol_, other->rendercwcol_);
  std::swap(renderseamcol_, other->renderseamcol_);
  std::swap(renderrayfailscol_, other->renderrayfailscol_);
  std::swap(aooccludedcolor_, other->aooccludedcolor_);
  std::swap(aounoccludedcolor_, other->aounoccludedcolor_);
  std::swap(aobackgroundcolor_, other->aobackgroundcolor_);
  std::swap(bentbackgroundcolor_, other->bentbackgroundcolor_);
  std::swap(prtbackgroundcolor_, other->prtbackgroundcolor_);
  std::swap(convexitybackgroundcolor_, other->convexitybackgroundcolor_);
  std::swap(thicknessbackgroundcolor_, other->thicknessbackgroundcolor_);
  std::swap(proximitybackgroundcolor_, other->proximitybackgroundcolor_);
  std::swap(cavitybackgroundcolor_, other->cavitybackgroundcolor_);
  std::swap(vdmbackgroundcolor_, other->vdmbackgroundcolor_);
  std::swap(radnmbackgroundcolor_, other->radnmbackgroundcolor_);
  std::swap(curvbackgroundcolor_, other->curvbackgroundcolor_);
  std::swap(derivnmbackgroundcolor_, other->derivnmbackgroundcolor_);
  std::swap(translubackgroundcolor_, other->translubackgroundcolor_);
  std::swap(bakehighpolyvcolsbackgroundcol_, other->bakehighpolyvcolsbackgroundcol_);
  std::swap(closestiffails_, other->closestiffails_);
  std::swap(directionstonemapmax_, other->directionstonemapmax_);
  std::swap(curvmonocrome_, other->curvmonocrome_);
  std::swap(aobias_, other->aobias_);
  std::swap(benttangentspace_, other->benttangentspace_);
  std::swap(gentranslu_, other->gentranslu_);
  std::swap(aodistribution_, other->aodistribution_);
  std::swap(prtthreshold_, other->prtthreshold_);
  std::swap(directionstonemapmin_, other->directionstonemapmin_);
  std::swap(curvdistribution_, other->curvdistribution_);
  std::swap(bentjitter_, other->bentjitter_);
  std::swap(bentdistribution_, other->bentdistribution_);
  std::swap(bakehighpolybasetexture_, other->bakehighpolybasetexture_);
  std::swap(genconvexity_, other->genconvexity_);
  std::swap(radiositynormalsattenlinear_, other->radiositynormalsattenlinear_);
  std::swap(translurayspersample_, other->translurayspersample_);
  std::swap(curvsearchdistance_, other->curvsearchdistance_);
  std::swap(swizzlez_, other->swizzlez_);
  std::swap(translubias_, other->translubias_);
  std::swap(prtlimitraydistance_, other->prtlimitraydistance_);
  std::swap(genbent_, other->genbent_);
  std::swap(aolimitraydistance_, other->aolimitraydistance_);
  std::swap(curvrayspersample_, other->curvrayspersample_);
  std::swap(radiositynormalsdistribution_, other->radiositynormalsdistribution_);
  std::swap(radiositynormalsrayspersample_, other->radiositynormalsrayspersample_);
  std::swap(curvjitter_, other->curvjitter_);
  std::swap(tangentspace_, other->tangentspace_);
  std::swap(radiositynormalsallowpureocclusion_, other->radiositynormalsallowpureocclusion_);
  std::swap(bentswizzlex_, other->bentswizzlex_);
  std::swap(swizzley_, other->swizzley_);
  std::swap(gencurv_, other->gencurv_);
  std::swap(prtjitter_, other->prtjitter_);
  std::swap(aoattencuadratic_, other->aoattencuadratic_);
  std::swap(bentconeangle_, other->bentconeangle_);
  std::swap(swizzlex_, other->swizzlex_);
  std::swap(renderrayfails_, other->renderrayfails_);
  std::swap(cavitysearchradius_, other->cavitysearchradius_);
  std::swap(radiositynormalsencodeao_, other->radiositynormalsencodeao_);
  std::swap(transluconeangle_, other->transluconeangle_);
  std::swap(bentrayspersample_, other->bentrayspersample_);
  std::swap(convexityscale_, other->convexityscale_);
  std::swap(radiositynormalsconeangle_, other->radiositynormalsconeangle_);
  file_.Swap(&other->file_);
  std::swap(genderivnm_, other->genderivnm_);
  std::swap(bentlimitraydistance_, other->bentlimitraydistance_);
  std::swap(prtbias_, other->prtbias_);
  std::swap(renderwireframe_, other->renderwireframe_);
  std::swap(prtnormalize_, other->prtnormalize_);
  std::swap(genao_, other->genao_);
  std::swap(prtconeangle_, other->prtconeangle_);
  std::swap(height_, other->height_);
  std::swap(radiositynormalsattencuadratic_, other->radiositynormalsattencuadratic_);
  std::swap(directionstonemap_, other->directionstonemap_);
  std::swap(directionsts_, other->directionsts_);
  std::swap(prtrayspersample_, other->prtrayspersample_);
  std::swap(edgepadding_, other->edgepadding_);
  std::swap(directionsswizzlez_, other->directionsswizzlez_);
  std::swap(aoallowpureoccluded_, other->aoallowpureoccluded_);
  std::swap(aoignorebackfacehits_, other->aoignorebackfacehits_);
  std::swap(cavityrayspersample_, other->cavityrayspersample_);
  std::swap(aoattenconstant_, other->aoattenconstant_);
  std::swap(cavityjitter_, other->cavityjitter_);
  std::swap(heighttonemapmax_, other->heighttonemapmax_);
  std::swap(gendirections_, other->gendirections_);
  std::swap(radiositynormalslimitraydistance_, other->radiositynormalslimitraydistance_);
  std::swap(heighttonemapmin_, other->heighttonemapmin_);
  std::swap(radiositynormalsjitter_, other->radiositynormalsjitter_);
  std::swap(directionsswizzley_, other->directionsswizzley_);
  std::swap(width_, other->width_);
  std::swap(bakehighpolybasetexturedrawobjectidifnotexture_, other->bakehighpolybasetexturedrawobjectidifnotexture_);
  std::swap(concavity_, other->concavity_);
  std::swap(directionsswizzlex_, other->directionsswizzlex_);
  std::swap(gennormals_, other->gennormals_);
  std::swap(proximityrayspersample_, other->proximityrayspersample_);
  std::swap(genheights_, other->genheights_);
  std::swap(radiositynormalsattenconstant_, other->radiositynormalsattenconstant_);
  std::swap(genproximity_, other->genproximity_);
  std::swap(genprt_, other->genprt_);
  std::swap(cavitycontrast_, other->cavitycontrast_);
  std::swap(radiositynormalscoordsys_, other->radiositynormalscoordsys_);
  std::swap(translujitter_, other->translujitter_);
  std::swap(aorayspersample_, other->aorayspersample_);
  std::swap(bentbias_, other->bentbias_);
  std::swap(discardraybackfaceshits_, other->discardraybackfaceshits_);
  std::swap(aoconeangle_, other->aoconeangle_);
  std::swap(bentswizzley_, other->bentswizzley_);
  std::swap(radiositynormalsbias_, other->radiositynormalsbias_);
  std::swap(radiositynormalscontrast_, other->radiositynormalscontrast_);
  std::swap(cavitysteps_, other->cavitysteps_);
  std::swap(aa_, other->aa_);
  std::swap(bentswizzlez_, other->bentswizzlez_);
  std::swap(bucketsize_, other->bucketsize_);
  std::swap(curvconeangle_, other->curvconeangle_);
  std::swap(transludist_, other->transludist_);
  std::swap(aojitter_, other->aojitter_);
  std::swap(curvbias_, other->curvbias_);
  std::swap(genwirerays_, other->genwirerays_);
  std::swap(curvalgorithm_, other->curvalgorithm_);
  std::swap(transludistribution_, other->transludistribution_);
  std::swap(aoattenlinear_, other->aoattenlinear_);
  std::swap(proximitylimitraydistance_, other->proximitylimitraydistance_);
  std::swap(genradiositynormals_, other->genradiositynormals_);
  std::swap(proximityconeangle_, other->proximityconeangle_);
  std::swap(heighttonemap_, other->heighttonemap_);
  std::swap(gencavity_, other->gencavity_);
  std::swap(bakehighpolyvcols_, other->bakehighpolyvcols_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tGenerateMaps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tGenerateMaps_descriptor_;
  metadata.reflection = tGenerateMaps_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tGenerateMaps

// optional .tRGB8 NMBackgroundColor = 1;
bool tGenerateMaps::has_nmbackgroundcolor() const {
  return !_is_default_instance_ && nmbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_nmbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && nmbackgroundcolor_ != NULL) delete nmbackgroundcolor_;
  nmbackgroundcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::nmbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.NMBackgroundColor)
  return nmbackgroundcolor_ != NULL ? *nmbackgroundcolor_ : *default_instance_->nmbackgroundcolor_;
}
::tRGB8* tGenerateMaps::mutable_nmbackgroundcolor() {
  
  if (nmbackgroundcolor_ == NULL) {
    nmbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.NMBackgroundColor)
  return nmbackgroundcolor_;
}
::tRGB8* tGenerateMaps::release_nmbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.NMBackgroundColor)
  
  ::tRGB8* temp = nmbackgroundcolor_;
  nmbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_nmbackgroundcolor(::tRGB8* nmbackgroundcolor) {
  delete nmbackgroundcolor_;
  nmbackgroundcolor_ = nmbackgroundcolor;
  if (nmbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.NMBackgroundColor)
}

// optional .tRGB8 HMBackgroundColor = 2;
bool tGenerateMaps::has_hmbackgroundcolor() const {
  return !_is_default_instance_ && hmbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_hmbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && hmbackgroundcolor_ != NULL) delete hmbackgroundcolor_;
  hmbackgroundcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::hmbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.HMBackgroundColor)
  return hmbackgroundcolor_ != NULL ? *hmbackgroundcolor_ : *default_instance_->hmbackgroundcolor_;
}
::tRGB8* tGenerateMaps::mutable_hmbackgroundcolor() {
  
  if (hmbackgroundcolor_ == NULL) {
    hmbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.HMBackgroundColor)
  return hmbackgroundcolor_;
}
::tRGB8* tGenerateMaps::release_hmbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.HMBackgroundColor)
  
  ::tRGB8* temp = hmbackgroundcolor_;
  hmbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_hmbackgroundcolor(::tRGB8* hmbackgroundcolor) {
  delete hmbackgroundcolor_;
  hmbackgroundcolor_ = hmbackgroundcolor;
  if (hmbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.HMBackgroundColor)
}

// optional .tRGB8 BakeHighpolyBaseTextureNoTexCol = 3;
bool tGenerateMaps::has_bakehighpolybasetexturenotexcol() const {
  return !_is_default_instance_ && bakehighpolybasetexturenotexcol_ != NULL;
}
void tGenerateMaps::clear_bakehighpolybasetexturenotexcol() {
  if (GetArenaNoVirtual() == NULL && bakehighpolybasetexturenotexcol_ != NULL) delete bakehighpolybasetexturenotexcol_;
  bakehighpolybasetexturenotexcol_ = NULL;
}
const ::tRGB8& tGenerateMaps::bakehighpolybasetexturenotexcol() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BakeHighpolyBaseTextureNoTexCol)
  return bakehighpolybasetexturenotexcol_ != NULL ? *bakehighpolybasetexturenotexcol_ : *default_instance_->bakehighpolybasetexturenotexcol_;
}
::tRGB8* tGenerateMaps::mutable_bakehighpolybasetexturenotexcol() {
  
  if (bakehighpolybasetexturenotexcol_ == NULL) {
    bakehighpolybasetexturenotexcol_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.BakeHighpolyBaseTextureNoTexCol)
  return bakehighpolybasetexturenotexcol_;
}
::tRGB8* tGenerateMaps::release_bakehighpolybasetexturenotexcol() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.BakeHighpolyBaseTextureNoTexCol)
  
  ::tRGB8* temp = bakehighpolybasetexturenotexcol_;
  bakehighpolybasetexturenotexcol_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_bakehighpolybasetexturenotexcol(::tRGB8* bakehighpolybasetexturenotexcol) {
  delete bakehighpolybasetexturenotexcol_;
  bakehighpolybasetexturenotexcol_ = bakehighpolybasetexturenotexcol;
  if (bakehighpolybasetexturenotexcol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.BakeHighpolyBaseTextureNoTexCol)
}

// optional .tRGB8 BakeHighpolyBaseTextureBackgroundColor = 4;
bool tGenerateMaps::has_bakehighpolybasetexturebackgroundcolor() const {
  return !_is_default_instance_ && bakehighpolybasetexturebackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_bakehighpolybasetexturebackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && bakehighpolybasetexturebackgroundcolor_ != NULL) delete bakehighpolybasetexturebackgroundcolor_;
  bakehighpolybasetexturebackgroundcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::bakehighpolybasetexturebackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BakeHighpolyBaseTextureBackgroundColor)
  return bakehighpolybasetexturebackgroundcolor_ != NULL ? *bakehighpolybasetexturebackgroundcolor_ : *default_instance_->bakehighpolybasetexturebackgroundcolor_;
}
::tRGB8* tGenerateMaps::mutable_bakehighpolybasetexturebackgroundcolor() {
  
  if (bakehighpolybasetexturebackgroundcolor_ == NULL) {
    bakehighpolybasetexturebackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.BakeHighpolyBaseTextureBackgroundColor)
  return bakehighpolybasetexturebackgroundcolor_;
}
::tRGB8* tGenerateMaps::release_bakehighpolybasetexturebackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.BakeHighpolyBaseTextureBackgroundColor)
  
  ::tRGB8* temp = bakehighpolybasetexturebackgroundcolor_;
  bakehighpolybasetexturebackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_bakehighpolybasetexturebackgroundcolor(::tRGB8* bakehighpolybasetexturebackgroundcolor) {
  delete bakehighpolybasetexturebackgroundcolor_;
  bakehighpolybasetexturebackgroundcolor_ = bakehighpolybasetexturebackgroundcolor;
  if (bakehighpolybasetexturebackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.BakeHighpolyBaseTextureBackgroundColor)
}

// optional .tRGB8 RenderWireframeBackgroundColor = 5;
bool tGenerateMaps::has_renderwireframebackgroundcolor() const {
  return !_is_default_instance_ && renderwireframebackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_renderwireframebackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && renderwireframebackgroundcolor_ != NULL) delete renderwireframebackgroundcolor_;
  renderwireframebackgroundcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::renderwireframebackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RenderWireframeBackgroundColor)
  return renderwireframebackgroundcolor_ != NULL ? *renderwireframebackgroundcolor_ : *default_instance_->renderwireframebackgroundcolor_;
}
::tRGB8* tGenerateMaps::mutable_renderwireframebackgroundcolor() {
  
  if (renderwireframebackgroundcolor_ == NULL) {
    renderwireframebackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.RenderWireframeBackgroundColor)
  return renderwireframebackgroundcolor_;
}
::tRGB8* tGenerateMaps::release_renderwireframebackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.RenderWireframeBackgroundColor)
  
  ::tRGB8* temp = renderwireframebackgroundcolor_;
  renderwireframebackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_renderwireframebackgroundcolor(::tRGB8* renderwireframebackgroundcolor) {
  delete renderwireframebackgroundcolor_;
  renderwireframebackgroundcolor_ = renderwireframebackgroundcolor;
  if (renderwireframebackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.RenderWireframeBackgroundColor)
}

// optional .tRGB8 RenderWireframeCol = 6;
bool tGenerateMaps::has_renderwireframecol() const {
  return !_is_default_instance_ && renderwireframecol_ != NULL;
}
void tGenerateMaps::clear_renderwireframecol() {
  if (GetArenaNoVirtual() == NULL && renderwireframecol_ != NULL) delete renderwireframecol_;
  renderwireframecol_ = NULL;
}
const ::tRGB8& tGenerateMaps::renderwireframecol() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RenderWireframeCol)
  return renderwireframecol_ != NULL ? *renderwireframecol_ : *default_instance_->renderwireframecol_;
}
::tRGB8* tGenerateMaps::mutable_renderwireframecol() {
  
  if (renderwireframecol_ == NULL) {
    renderwireframecol_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.RenderWireframeCol)
  return renderwireframecol_;
}
::tRGB8* tGenerateMaps::release_renderwireframecol() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.RenderWireframeCol)
  
  ::tRGB8* temp = renderwireframecol_;
  renderwireframecol_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_renderwireframecol(::tRGB8* renderwireframecol) {
  delete renderwireframecol_;
  renderwireframecol_ = renderwireframecol;
  if (renderwireframecol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.RenderWireframeCol)
}

// optional .tRGB8 RenderCWCol = 7;
bool tGenerateMaps::has_rendercwcol() const {
  return !_is_default_instance_ && rendercwcol_ != NULL;
}
void tGenerateMaps::clear_rendercwcol() {
  if (GetArenaNoVirtual() == NULL && rendercwcol_ != NULL) delete rendercwcol_;
  rendercwcol_ = NULL;
}
const ::tRGB8& tGenerateMaps::rendercwcol() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RenderCWCol)
  return rendercwcol_ != NULL ? *rendercwcol_ : *default_instance_->rendercwcol_;
}
::tRGB8* tGenerateMaps::mutable_rendercwcol() {
  
  if (rendercwcol_ == NULL) {
    rendercwcol_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.RenderCWCol)
  return rendercwcol_;
}
::tRGB8* tGenerateMaps::release_rendercwcol() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.RenderCWCol)
  
  ::tRGB8* temp = rendercwcol_;
  rendercwcol_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_rendercwcol(::tRGB8* rendercwcol) {
  delete rendercwcol_;
  rendercwcol_ = rendercwcol;
  if (rendercwcol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.RenderCWCol)
}

// optional .tRGB8 RenderSeamCol = 8;
bool tGenerateMaps::has_renderseamcol() const {
  return !_is_default_instance_ && renderseamcol_ != NULL;
}
void tGenerateMaps::clear_renderseamcol() {
  if (GetArenaNoVirtual() == NULL && renderseamcol_ != NULL) delete renderseamcol_;
  renderseamcol_ = NULL;
}
const ::tRGB8& tGenerateMaps::renderseamcol() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RenderSeamCol)
  return renderseamcol_ != NULL ? *renderseamcol_ : *default_instance_->renderseamcol_;
}
::tRGB8* tGenerateMaps::mutable_renderseamcol() {
  
  if (renderseamcol_ == NULL) {
    renderseamcol_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.RenderSeamCol)
  return renderseamcol_;
}
::tRGB8* tGenerateMaps::release_renderseamcol() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.RenderSeamCol)
  
  ::tRGB8* temp = renderseamcol_;
  renderseamcol_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_renderseamcol(::tRGB8* renderseamcol) {
  delete renderseamcol_;
  renderseamcol_ = renderseamcol;
  if (renderseamcol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.RenderSeamCol)
}

// optional .tRGB8 RenderRayFailsCol = 9;
bool tGenerateMaps::has_renderrayfailscol() const {
  return !_is_default_instance_ && renderrayfailscol_ != NULL;
}
void tGenerateMaps::clear_renderrayfailscol() {
  if (GetArenaNoVirtual() == NULL && renderrayfailscol_ != NULL) delete renderrayfailscol_;
  renderrayfailscol_ = NULL;
}
const ::tRGB8& tGenerateMaps::renderrayfailscol() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RenderRayFailsCol)
  return renderrayfailscol_ != NULL ? *renderrayfailscol_ : *default_instance_->renderrayfailscol_;
}
::tRGB8* tGenerateMaps::mutable_renderrayfailscol() {
  
  if (renderrayfailscol_ == NULL) {
    renderrayfailscol_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.RenderRayFailsCol)
  return renderrayfailscol_;
}
::tRGB8* tGenerateMaps::release_renderrayfailscol() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.RenderRayFailsCol)
  
  ::tRGB8* temp = renderrayfailscol_;
  renderrayfailscol_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_renderrayfailscol(::tRGB8* renderrayfailscol) {
  delete renderrayfailscol_;
  renderrayfailscol_ = renderrayfailscol;
  if (renderrayfailscol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.RenderRayFailsCol)
}

// optional .tRGB8 AOOccludedColor = 10;
bool tGenerateMaps::has_aooccludedcolor() const {
  return !_is_default_instance_ && aooccludedcolor_ != NULL;
}
void tGenerateMaps::clear_aooccludedcolor() {
  if (GetArenaNoVirtual() == NULL && aooccludedcolor_ != NULL) delete aooccludedcolor_;
  aooccludedcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::aooccludedcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOOccludedColor)
  return aooccludedcolor_ != NULL ? *aooccludedcolor_ : *default_instance_->aooccludedcolor_;
}
::tRGB8* tGenerateMaps::mutable_aooccludedcolor() {
  
  if (aooccludedcolor_ == NULL) {
    aooccludedcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.AOOccludedColor)
  return aooccludedcolor_;
}
::tRGB8* tGenerateMaps::release_aooccludedcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.AOOccludedColor)
  
  ::tRGB8* temp = aooccludedcolor_;
  aooccludedcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_aooccludedcolor(::tRGB8* aooccludedcolor) {
  delete aooccludedcolor_;
  aooccludedcolor_ = aooccludedcolor;
  if (aooccludedcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.AOOccludedColor)
}

// optional .tRGB8 AOUnoccludedColor = 11;
bool tGenerateMaps::has_aounoccludedcolor() const {
  return !_is_default_instance_ && aounoccludedcolor_ != NULL;
}
void tGenerateMaps::clear_aounoccludedcolor() {
  if (GetArenaNoVirtual() == NULL && aounoccludedcolor_ != NULL) delete aounoccludedcolor_;
  aounoccludedcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::aounoccludedcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOUnoccludedColor)
  return aounoccludedcolor_ != NULL ? *aounoccludedcolor_ : *default_instance_->aounoccludedcolor_;
}
::tRGB8* tGenerateMaps::mutable_aounoccludedcolor() {
  
  if (aounoccludedcolor_ == NULL) {
    aounoccludedcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.AOUnoccludedColor)
  return aounoccludedcolor_;
}
::tRGB8* tGenerateMaps::release_aounoccludedcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.AOUnoccludedColor)
  
  ::tRGB8* temp = aounoccludedcolor_;
  aounoccludedcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_aounoccludedcolor(::tRGB8* aounoccludedcolor) {
  delete aounoccludedcolor_;
  aounoccludedcolor_ = aounoccludedcolor;
  if (aounoccludedcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.AOUnoccludedColor)
}

// optional .tRGB8 AOBackgroundColor = 12;
bool tGenerateMaps::has_aobackgroundcolor() const {
  return !_is_default_instance_ && aobackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_aobackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && aobackgroundcolor_ != NULL) delete aobackgroundcolor_;
  aobackgroundcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::aobackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOBackgroundColor)
  return aobackgroundcolor_ != NULL ? *aobackgroundcolor_ : *default_instance_->aobackgroundcolor_;
}
::tRGB8* tGenerateMaps::mutable_aobackgroundcolor() {
  
  if (aobackgroundcolor_ == NULL) {
    aobackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.AOBackgroundColor)
  return aobackgroundcolor_;
}
::tRGB8* tGenerateMaps::release_aobackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.AOBackgroundColor)
  
  ::tRGB8* temp = aobackgroundcolor_;
  aobackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_aobackgroundcolor(::tRGB8* aobackgroundcolor) {
  delete aobackgroundcolor_;
  aobackgroundcolor_ = aobackgroundcolor;
  if (aobackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.AOBackgroundColor)
}

// optional .tRGB8 BentBackgroundColor = 13;
bool tGenerateMaps::has_bentbackgroundcolor() const {
  return !_is_default_instance_ && bentbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_bentbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && bentbackgroundcolor_ != NULL) delete bentbackgroundcolor_;
  bentbackgroundcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::bentbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentBackgroundColor)
  return bentbackgroundcolor_ != NULL ? *bentbackgroundcolor_ : *default_instance_->bentbackgroundcolor_;
}
::tRGB8* tGenerateMaps::mutable_bentbackgroundcolor() {
  
  if (bentbackgroundcolor_ == NULL) {
    bentbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.BentBackgroundColor)
  return bentbackgroundcolor_;
}
::tRGB8* tGenerateMaps::release_bentbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.BentBackgroundColor)
  
  ::tRGB8* temp = bentbackgroundcolor_;
  bentbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_bentbackgroundcolor(::tRGB8* bentbackgroundcolor) {
  delete bentbackgroundcolor_;
  bentbackgroundcolor_ = bentbackgroundcolor;
  if (bentbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.BentBackgroundColor)
}

// optional .tRGB8 PRTBackgroundColor = 14;
bool tGenerateMaps::has_prtbackgroundcolor() const {
  return !_is_default_instance_ && prtbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_prtbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && prtbackgroundcolor_ != NULL) delete prtbackgroundcolor_;
  prtbackgroundcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::prtbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.PRTBackgroundColor)
  return prtbackgroundcolor_ != NULL ? *prtbackgroundcolor_ : *default_instance_->prtbackgroundcolor_;
}
::tRGB8* tGenerateMaps::mutable_prtbackgroundcolor() {
  
  if (prtbackgroundcolor_ == NULL) {
    prtbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.PRTBackgroundColor)
  return prtbackgroundcolor_;
}
::tRGB8* tGenerateMaps::release_prtbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.PRTBackgroundColor)
  
  ::tRGB8* temp = prtbackgroundcolor_;
  prtbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_prtbackgroundcolor(::tRGB8* prtbackgroundcolor) {
  delete prtbackgroundcolor_;
  prtbackgroundcolor_ = prtbackgroundcolor;
  if (prtbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.PRTBackgroundColor)
}

// optional .tRGB8 ConvexityBackgroundColor = 15;
bool tGenerateMaps::has_convexitybackgroundcolor() const {
  return !_is_default_instance_ && convexitybackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_convexitybackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && convexitybackgroundcolor_ != NULL) delete convexitybackgroundcolor_;
  convexitybackgroundcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::convexitybackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.ConvexityBackgroundColor)
  return convexitybackgroundcolor_ != NULL ? *convexitybackgroundcolor_ : *default_instance_->convexitybackgroundcolor_;
}
::tRGB8* tGenerateMaps::mutable_convexitybackgroundcolor() {
  
  if (convexitybackgroundcolor_ == NULL) {
    convexitybackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.ConvexityBackgroundColor)
  return convexitybackgroundcolor_;
}
::tRGB8* tGenerateMaps::release_convexitybackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.ConvexityBackgroundColor)
  
  ::tRGB8* temp = convexitybackgroundcolor_;
  convexitybackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_convexitybackgroundcolor(::tRGB8* convexitybackgroundcolor) {
  delete convexitybackgroundcolor_;
  convexitybackgroundcolor_ = convexitybackgroundcolor;
  if (convexitybackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.ConvexityBackgroundColor)
}

// optional .tRGB8 ThicknessBackgroundColor = 16;
bool tGenerateMaps::has_thicknessbackgroundcolor() const {
  return !_is_default_instance_ && thicknessbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_thicknessbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && thicknessbackgroundcolor_ != NULL) delete thicknessbackgroundcolor_;
  thicknessbackgroundcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::thicknessbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.ThicknessBackgroundColor)
  return thicknessbackgroundcolor_ != NULL ? *thicknessbackgroundcolor_ : *default_instance_->thicknessbackgroundcolor_;
}
::tRGB8* tGenerateMaps::mutable_thicknessbackgroundcolor() {
  
  if (thicknessbackgroundcolor_ == NULL) {
    thicknessbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.ThicknessBackgroundColor)
  return thicknessbackgroundcolor_;
}
::tRGB8* tGenerateMaps::release_thicknessbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.ThicknessBackgroundColor)
  
  ::tRGB8* temp = thicknessbackgroundcolor_;
  thicknessbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_thicknessbackgroundcolor(::tRGB8* thicknessbackgroundcolor) {
  delete thicknessbackgroundcolor_;
  thicknessbackgroundcolor_ = thicknessbackgroundcolor;
  if (thicknessbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.ThicknessBackgroundColor)
}

// optional .tRGB8 ProximityBackgroundColor = 17;
bool tGenerateMaps::has_proximitybackgroundcolor() const {
  return !_is_default_instance_ && proximitybackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_proximitybackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && proximitybackgroundcolor_ != NULL) delete proximitybackgroundcolor_;
  proximitybackgroundcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::proximitybackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.ProximityBackgroundColor)
  return proximitybackgroundcolor_ != NULL ? *proximitybackgroundcolor_ : *default_instance_->proximitybackgroundcolor_;
}
::tRGB8* tGenerateMaps::mutable_proximitybackgroundcolor() {
  
  if (proximitybackgroundcolor_ == NULL) {
    proximitybackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.ProximityBackgroundColor)
  return proximitybackgroundcolor_;
}
::tRGB8* tGenerateMaps::release_proximitybackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.ProximityBackgroundColor)
  
  ::tRGB8* temp = proximitybackgroundcolor_;
  proximitybackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_proximitybackgroundcolor(::tRGB8* proximitybackgroundcolor) {
  delete proximitybackgroundcolor_;
  proximitybackgroundcolor_ = proximitybackgroundcolor;
  if (proximitybackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.ProximityBackgroundColor)
}

// optional .tRGB8 CavityBackgroundColor = 18;
bool tGenerateMaps::has_cavitybackgroundcolor() const {
  return !_is_default_instance_ && cavitybackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_cavitybackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && cavitybackgroundcolor_ != NULL) delete cavitybackgroundcolor_;
  cavitybackgroundcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::cavitybackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CavityBackgroundColor)
  return cavitybackgroundcolor_ != NULL ? *cavitybackgroundcolor_ : *default_instance_->cavitybackgroundcolor_;
}
::tRGB8* tGenerateMaps::mutable_cavitybackgroundcolor() {
  
  if (cavitybackgroundcolor_ == NULL) {
    cavitybackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.CavityBackgroundColor)
  return cavitybackgroundcolor_;
}
::tRGB8* tGenerateMaps::release_cavitybackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.CavityBackgroundColor)
  
  ::tRGB8* temp = cavitybackgroundcolor_;
  cavitybackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_cavitybackgroundcolor(::tRGB8* cavitybackgroundcolor) {
  delete cavitybackgroundcolor_;
  cavitybackgroundcolor_ = cavitybackgroundcolor;
  if (cavitybackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.CavityBackgroundColor)
}

// optional .tRGB8 VDMBackgroundColor = 19;
bool tGenerateMaps::has_vdmbackgroundcolor() const {
  return !_is_default_instance_ && vdmbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_vdmbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && vdmbackgroundcolor_ != NULL) delete vdmbackgroundcolor_;
  vdmbackgroundcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::vdmbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.VDMBackgroundColor)
  return vdmbackgroundcolor_ != NULL ? *vdmbackgroundcolor_ : *default_instance_->vdmbackgroundcolor_;
}
::tRGB8* tGenerateMaps::mutable_vdmbackgroundcolor() {
  
  if (vdmbackgroundcolor_ == NULL) {
    vdmbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.VDMBackgroundColor)
  return vdmbackgroundcolor_;
}
::tRGB8* tGenerateMaps::release_vdmbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.VDMBackgroundColor)
  
  ::tRGB8* temp = vdmbackgroundcolor_;
  vdmbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_vdmbackgroundcolor(::tRGB8* vdmbackgroundcolor) {
  delete vdmbackgroundcolor_;
  vdmbackgroundcolor_ = vdmbackgroundcolor;
  if (vdmbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.VDMBackgroundColor)
}

// optional .tRGB8 RadNMBackgroundColor = 20;
bool tGenerateMaps::has_radnmbackgroundcolor() const {
  return !_is_default_instance_ && radnmbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_radnmbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && radnmbackgroundcolor_ != NULL) delete radnmbackgroundcolor_;
  radnmbackgroundcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::radnmbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadNMBackgroundColor)
  return radnmbackgroundcolor_ != NULL ? *radnmbackgroundcolor_ : *default_instance_->radnmbackgroundcolor_;
}
::tRGB8* tGenerateMaps::mutable_radnmbackgroundcolor() {
  
  if (radnmbackgroundcolor_ == NULL) {
    radnmbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.RadNMBackgroundColor)
  return radnmbackgroundcolor_;
}
::tRGB8* tGenerateMaps::release_radnmbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.RadNMBackgroundColor)
  
  ::tRGB8* temp = radnmbackgroundcolor_;
  radnmbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_radnmbackgroundcolor(::tRGB8* radnmbackgroundcolor) {
  delete radnmbackgroundcolor_;
  radnmbackgroundcolor_ = radnmbackgroundcolor;
  if (radnmbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.RadNMBackgroundColor)
}

// optional .tRGB8 CurvBackgroundColor = 21;
bool tGenerateMaps::has_curvbackgroundcolor() const {
  return !_is_default_instance_ && curvbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_curvbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && curvbackgroundcolor_ != NULL) delete curvbackgroundcolor_;
  curvbackgroundcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::curvbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvBackgroundColor)
  return curvbackgroundcolor_ != NULL ? *curvbackgroundcolor_ : *default_instance_->curvbackgroundcolor_;
}
::tRGB8* tGenerateMaps::mutable_curvbackgroundcolor() {
  
  if (curvbackgroundcolor_ == NULL) {
    curvbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.CurvBackgroundColor)
  return curvbackgroundcolor_;
}
::tRGB8* tGenerateMaps::release_curvbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.CurvBackgroundColor)
  
  ::tRGB8* temp = curvbackgroundcolor_;
  curvbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_curvbackgroundcolor(::tRGB8* curvbackgroundcolor) {
  delete curvbackgroundcolor_;
  curvbackgroundcolor_ = curvbackgroundcolor;
  if (curvbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.CurvBackgroundColor)
}

// optional .tRGB8 DerivNMBackgroundColor = 22;
bool tGenerateMaps::has_derivnmbackgroundcolor() const {
  return !_is_default_instance_ && derivnmbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_derivnmbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && derivnmbackgroundcolor_ != NULL) delete derivnmbackgroundcolor_;
  derivnmbackgroundcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::derivnmbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DerivNMBackgroundColor)
  return derivnmbackgroundcolor_ != NULL ? *derivnmbackgroundcolor_ : *default_instance_->derivnmbackgroundcolor_;
}
::tRGB8* tGenerateMaps::mutable_derivnmbackgroundcolor() {
  
  if (derivnmbackgroundcolor_ == NULL) {
    derivnmbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.DerivNMBackgroundColor)
  return derivnmbackgroundcolor_;
}
::tRGB8* tGenerateMaps::release_derivnmbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.DerivNMBackgroundColor)
  
  ::tRGB8* temp = derivnmbackgroundcolor_;
  derivnmbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_derivnmbackgroundcolor(::tRGB8* derivnmbackgroundcolor) {
  delete derivnmbackgroundcolor_;
  derivnmbackgroundcolor_ = derivnmbackgroundcolor;
  if (derivnmbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.DerivNMBackgroundColor)
}

// optional .tRGB8 TransluBackgroundColor = 23;
bool tGenerateMaps::has_translubackgroundcolor() const {
  return !_is_default_instance_ && translubackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_translubackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && translubackgroundcolor_ != NULL) delete translubackgroundcolor_;
  translubackgroundcolor_ = NULL;
}
const ::tRGB8& tGenerateMaps::translubackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.TransluBackgroundColor)
  return translubackgroundcolor_ != NULL ? *translubackgroundcolor_ : *default_instance_->translubackgroundcolor_;
}
::tRGB8* tGenerateMaps::mutable_translubackgroundcolor() {
  
  if (translubackgroundcolor_ == NULL) {
    translubackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.TransluBackgroundColor)
  return translubackgroundcolor_;
}
::tRGB8* tGenerateMaps::release_translubackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.TransluBackgroundColor)
  
  ::tRGB8* temp = translubackgroundcolor_;
  translubackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_translubackgroundcolor(::tRGB8* translubackgroundcolor) {
  delete translubackgroundcolor_;
  translubackgroundcolor_ = translubackgroundcolor;
  if (translubackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.TransluBackgroundColor)
}

// optional .tRGB8 BakeHighpolyVColsBackgroundCol = 24;
bool tGenerateMaps::has_bakehighpolyvcolsbackgroundcol() const {
  return !_is_default_instance_ && bakehighpolyvcolsbackgroundcol_ != NULL;
}
void tGenerateMaps::clear_bakehighpolyvcolsbackgroundcol() {
  if (GetArenaNoVirtual() == NULL && bakehighpolyvcolsbackgroundcol_ != NULL) delete bakehighpolyvcolsbackgroundcol_;
  bakehighpolyvcolsbackgroundcol_ = NULL;
}
const ::tRGB8& tGenerateMaps::bakehighpolyvcolsbackgroundcol() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BakeHighpolyVColsBackgroundCol)
  return bakehighpolyvcolsbackgroundcol_ != NULL ? *bakehighpolyvcolsbackgroundcol_ : *default_instance_->bakehighpolyvcolsbackgroundcol_;
}
::tRGB8* tGenerateMaps::mutable_bakehighpolyvcolsbackgroundcol() {
  
  if (bakehighpolyvcolsbackgroundcol_ == NULL) {
    bakehighpolyvcolsbackgroundcol_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.BakeHighpolyVColsBackgroundCol)
  return bakehighpolyvcolsbackgroundcol_;
}
::tRGB8* tGenerateMaps::release_bakehighpolyvcolsbackgroundcol() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.BakeHighpolyVColsBackgroundCol)
  
  ::tRGB8* temp = bakehighpolyvcolsbackgroundcol_;
  bakehighpolyvcolsbackgroundcol_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_bakehighpolyvcolsbackgroundcol(::tRGB8* bakehighpolyvcolsbackgroundcol) {
  delete bakehighpolyvcolsbackgroundcol_;
  bakehighpolyvcolsbackgroundcol_ = bakehighpolyvcolsbackgroundcol;
  if (bakehighpolyvcolsbackgroundcol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.BakeHighpolyVColsBackgroundCol)
}

// optional bool ClosestIfFails = 25;
void tGenerateMaps::clear_closestiffails() {
  closestiffails_ = false;
}
 bool tGenerateMaps::closestiffails() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.ClosestIfFails)
  return closestiffails_;
}
 void tGenerateMaps::set_closestiffails(bool value) {
  
  closestiffails_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.ClosestIfFails)
}

// optional float DirectionsTonemapMax = 26;
void tGenerateMaps::clear_directionstonemapmax() {
  directionstonemapmax_ = 0;
}
 float tGenerateMaps::directionstonemapmax() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DirectionsTonemapMax)
  return directionstonemapmax_;
}
 void tGenerateMaps::set_directionstonemapmax(float value) {
  
  directionstonemapmax_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.DirectionsTonemapMax)
}

// optional bool CurvMonocrome = 27;
void tGenerateMaps::clear_curvmonocrome() {
  curvmonocrome_ = false;
}
 bool tGenerateMaps::curvmonocrome() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvMonocrome)
  return curvmonocrome_;
}
 void tGenerateMaps::set_curvmonocrome(bool value) {
  
  curvmonocrome_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CurvMonocrome)
}

// optional float AOBias = 28;
void tGenerateMaps::clear_aobias() {
  aobias_ = 0;
}
 float tGenerateMaps::aobias() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOBias)
  return aobias_;
}
 void tGenerateMaps::set_aobias(float value) {
  
  aobias_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOBias)
}

// optional bool BentTangentSpace = 29;
void tGenerateMaps::clear_benttangentspace() {
  benttangentspace_ = false;
}
 bool tGenerateMaps::benttangentspace() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentTangentSpace)
  return benttangentspace_;
}
 void tGenerateMaps::set_benttangentspace(bool value) {
  
  benttangentspace_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentTangentSpace)
}

// optional bool GenTranslu = 30;
void tGenerateMaps::clear_gentranslu() {
  gentranslu_ = false;
}
 bool tGenerateMaps::gentranslu() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenTranslu)
  return gentranslu_;
}
 void tGenerateMaps::set_gentranslu(bool value) {
  
  gentranslu_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenTranslu)
}

// optional .tGenerateMaps.eAODistribution AODistribution = 31;
void tGenerateMaps::clear_aodistribution() {
  aodistribution_ = 0;
}
 ::tGenerateMaps_eAODistribution tGenerateMaps::aodistribution() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AODistribution)
  return static_cast< ::tGenerateMaps_eAODistribution >(aodistribution_);
}
 void tGenerateMaps::set_aodistribution(::tGenerateMaps_eAODistribution value) {
  
  aodistribution_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AODistribution)
}

// optional float PRTThreshold = 32;
void tGenerateMaps::clear_prtthreshold() {
  prtthreshold_ = 0;
}
 float tGenerateMaps::prtthreshold() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.PRTThreshold)
  return prtthreshold_;
}
 void tGenerateMaps::set_prtthreshold(float value) {
  
  prtthreshold_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.PRTThreshold)
}

// optional float DirectionsTonemapMin = 33;
void tGenerateMaps::clear_directionstonemapmin() {
  directionstonemapmin_ = 0;
}
 float tGenerateMaps::directionstonemapmin() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DirectionsTonemapMin)
  return directionstonemapmin_;
}
 void tGenerateMaps::set_directionstonemapmin(float value) {
  
  directionstonemapmin_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.DirectionsTonemapMin)
}

// optional .tGenerateMaps.eAODistribution CurvDistribution = 34;
void tGenerateMaps::clear_curvdistribution() {
  curvdistribution_ = 0;
}
 ::tGenerateMaps_eAODistribution tGenerateMaps::curvdistribution() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvDistribution)
  return static_cast< ::tGenerateMaps_eAODistribution >(curvdistribution_);
}
 void tGenerateMaps::set_curvdistribution(::tGenerateMaps_eAODistribution value) {
  
  curvdistribution_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CurvDistribution)
}

// optional bool BentJitter = 35;
void tGenerateMaps::clear_bentjitter() {
  bentjitter_ = false;
}
 bool tGenerateMaps::bentjitter() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentJitter)
  return bentjitter_;
}
 void tGenerateMaps::set_bentjitter(bool value) {
  
  bentjitter_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentJitter)
}

// optional .tGenerateMaps.eAODistribution BentDistribution = 36;
void tGenerateMaps::clear_bentdistribution() {
  bentdistribution_ = 0;
}
 ::tGenerateMaps_eAODistribution tGenerateMaps::bentdistribution() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentDistribution)
  return static_cast< ::tGenerateMaps_eAODistribution >(bentdistribution_);
}
 void tGenerateMaps::set_bentdistribution(::tGenerateMaps_eAODistribution value) {
  
  bentdistribution_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentDistribution)
}

// optional bool BakeHighpolyBaseTexture = 37;
void tGenerateMaps::clear_bakehighpolybasetexture() {
  bakehighpolybasetexture_ = false;
}
 bool tGenerateMaps::bakehighpolybasetexture() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BakeHighpolyBaseTexture)
  return bakehighpolybasetexture_;
}
 void tGenerateMaps::set_bakehighpolybasetexture(bool value) {
  
  bakehighpolybasetexture_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BakeHighpolyBaseTexture)
}

// optional bool GenConvexity = 38;
void tGenerateMaps::clear_genconvexity() {
  genconvexity_ = false;
}
 bool tGenerateMaps::genconvexity() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenConvexity)
  return genconvexity_;
}
 void tGenerateMaps::set_genconvexity(bool value) {
  
  genconvexity_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenConvexity)
}

// optional float RadiosityNormalsAttenLinear = 39;
void tGenerateMaps::clear_radiositynormalsattenlinear() {
  radiositynormalsattenlinear_ = 0;
}
 float tGenerateMaps::radiositynormalsattenlinear() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsAttenLinear)
  return radiositynormalsattenlinear_;
}
 void tGenerateMaps::set_radiositynormalsattenlinear(float value) {
  
  radiositynormalsattenlinear_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsAttenLinear)
}

// optional uint32 TransluRaysPerSample = 40;
void tGenerateMaps::clear_translurayspersample() {
  translurayspersample_ = 0u;
}
 ::google::protobuf::uint32 tGenerateMaps::translurayspersample() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.TransluRaysPerSample)
  return translurayspersample_;
}
 void tGenerateMaps::set_translurayspersample(::google::protobuf::uint32 value) {
  
  translurayspersample_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.TransluRaysPerSample)
}

// optional float CurvSearchDistance = 41;
void tGenerateMaps::clear_curvsearchdistance() {
  curvsearchdistance_ = 0;
}
 float tGenerateMaps::curvsearchdistance() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvSearchDistance)
  return curvsearchdistance_;
}
 void tGenerateMaps::set_curvsearchdistance(float value) {
  
  curvsearchdistance_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CurvSearchDistance)
}

// optional .tGenerateMaps.eSwizzleComponent SwizzleZ = 42;
void tGenerateMaps::clear_swizzlez() {
  swizzlez_ = 0;
}
 ::tGenerateMaps_eSwizzleComponent tGenerateMaps::swizzlez() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.SwizzleZ)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(swizzlez_);
}
 void tGenerateMaps::set_swizzlez(::tGenerateMaps_eSwizzleComponent value) {
  
  swizzlez_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.SwizzleZ)
}

// optional float TransluBias = 43;
void tGenerateMaps::clear_translubias() {
  translubias_ = 0;
}
 float tGenerateMaps::translubias() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.TransluBias)
  return translubias_;
}
 void tGenerateMaps::set_translubias(float value) {
  
  translubias_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.TransluBias)
}

// optional bool PRTLimitRayDistance = 44;
void tGenerateMaps::clear_prtlimitraydistance() {
  prtlimitraydistance_ = false;
}
 bool tGenerateMaps::prtlimitraydistance() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.PRTLimitRayDistance)
  return prtlimitraydistance_;
}
 void tGenerateMaps::set_prtlimitraydistance(bool value) {
  
  prtlimitraydistance_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.PRTLimitRayDistance)
}

// optional bool GenBent = 45;
void tGenerateMaps::clear_genbent() {
  genbent_ = false;
}
 bool tGenerateMaps::genbent() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenBent)
  return genbent_;
}
 void tGenerateMaps::set_genbent(bool value) {
  
  genbent_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenBent)
}

// optional bool AOLimitRayDistance = 46;
void tGenerateMaps::clear_aolimitraydistance() {
  aolimitraydistance_ = false;
}
 bool tGenerateMaps::aolimitraydistance() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOLimitRayDistance)
  return aolimitraydistance_;
}
 void tGenerateMaps::set_aolimitraydistance(bool value) {
  
  aolimitraydistance_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOLimitRayDistance)
}

// optional uint32 CurvRaysPerSample = 47;
void tGenerateMaps::clear_curvrayspersample() {
  curvrayspersample_ = 0u;
}
 ::google::protobuf::uint32 tGenerateMaps::curvrayspersample() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvRaysPerSample)
  return curvrayspersample_;
}
 void tGenerateMaps::set_curvrayspersample(::google::protobuf::uint32 value) {
  
  curvrayspersample_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CurvRaysPerSample)
}

// optional .tGenerateMaps.eAODistribution RadiosityNormalsDistribution = 48;
void tGenerateMaps::clear_radiositynormalsdistribution() {
  radiositynormalsdistribution_ = 0;
}
 ::tGenerateMaps_eAODistribution tGenerateMaps::radiositynormalsdistribution() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsDistribution)
  return static_cast< ::tGenerateMaps_eAODistribution >(radiositynormalsdistribution_);
}
 void tGenerateMaps::set_radiositynormalsdistribution(::tGenerateMaps_eAODistribution value) {
  
  radiositynormalsdistribution_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsDistribution)
}

// optional uint32 RadiosityNormalsRaysPerSample = 49;
void tGenerateMaps::clear_radiositynormalsrayspersample() {
  radiositynormalsrayspersample_ = 0u;
}
 ::google::protobuf::uint32 tGenerateMaps::radiositynormalsrayspersample() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsRaysPerSample)
  return radiositynormalsrayspersample_;
}
 void tGenerateMaps::set_radiositynormalsrayspersample(::google::protobuf::uint32 value) {
  
  radiositynormalsrayspersample_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsRaysPerSample)
}

// optional bool CurvJitter = 50;
void tGenerateMaps::clear_curvjitter() {
  curvjitter_ = false;
}
 bool tGenerateMaps::curvjitter() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvJitter)
  return curvjitter_;
}
 void tGenerateMaps::set_curvjitter(bool value) {
  
  curvjitter_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CurvJitter)
}

// optional bool TangentSpace = 51;
void tGenerateMaps::clear_tangentspace() {
  tangentspace_ = false;
}
 bool tGenerateMaps::tangentspace() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.TangentSpace)
  return tangentspace_;
}
 void tGenerateMaps::set_tangentspace(bool value) {
  
  tangentspace_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.TangentSpace)
}

// optional bool RadiosityNormalsAllowPureOcclusion = 52;
void tGenerateMaps::clear_radiositynormalsallowpureocclusion() {
  radiositynormalsallowpureocclusion_ = false;
}
 bool tGenerateMaps::radiositynormalsallowpureocclusion() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsAllowPureOcclusion)
  return radiositynormalsallowpureocclusion_;
}
 void tGenerateMaps::set_radiositynormalsallowpureocclusion(bool value) {
  
  radiositynormalsallowpureocclusion_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsAllowPureOcclusion)
}

// optional .tGenerateMaps.eSwizzleComponent BentSwizzleX = 53;
void tGenerateMaps::clear_bentswizzlex() {
  bentswizzlex_ = 0;
}
 ::tGenerateMaps_eSwizzleComponent tGenerateMaps::bentswizzlex() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentSwizzleX)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(bentswizzlex_);
}
 void tGenerateMaps::set_bentswizzlex(::tGenerateMaps_eSwizzleComponent value) {
  
  bentswizzlex_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentSwizzleX)
}

// optional .tGenerateMaps.eSwizzleComponent SwizzleY = 54;
void tGenerateMaps::clear_swizzley() {
  swizzley_ = 0;
}
 ::tGenerateMaps_eSwizzleComponent tGenerateMaps::swizzley() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.SwizzleY)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(swizzley_);
}
 void tGenerateMaps::set_swizzley(::tGenerateMaps_eSwizzleComponent value) {
  
  swizzley_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.SwizzleY)
}

// optional bool GenCurv = 55;
void tGenerateMaps::clear_gencurv() {
  gencurv_ = false;
}
 bool tGenerateMaps::gencurv() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenCurv)
  return gencurv_;
}
 void tGenerateMaps::set_gencurv(bool value) {
  
  gencurv_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenCurv)
}

// optional bool PRTJitter = 56;
void tGenerateMaps::clear_prtjitter() {
  prtjitter_ = false;
}
 bool tGenerateMaps::prtjitter() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.PRTJitter)
  return prtjitter_;
}
 void tGenerateMaps::set_prtjitter(bool value) {
  
  prtjitter_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.PRTJitter)
}

// optional float AOAttenCuadratic = 57;
void tGenerateMaps::clear_aoattencuadratic() {
  aoattencuadratic_ = 0;
}
 float tGenerateMaps::aoattencuadratic() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOAttenCuadratic)
  return aoattencuadratic_;
}
 void tGenerateMaps::set_aoattencuadratic(float value) {
  
  aoattencuadratic_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOAttenCuadratic)
}

// optional float BentConeAngle = 58;
void tGenerateMaps::clear_bentconeangle() {
  bentconeangle_ = 0;
}
 float tGenerateMaps::bentconeangle() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentConeAngle)
  return bentconeangle_;
}
 void tGenerateMaps::set_bentconeangle(float value) {
  
  bentconeangle_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentConeAngle)
}

// optional .tGenerateMaps.eSwizzleComponent SwizzleX = 59;
void tGenerateMaps::clear_swizzlex() {
  swizzlex_ = 0;
}
 ::tGenerateMaps_eSwizzleComponent tGenerateMaps::swizzlex() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.SwizzleX)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(swizzlex_);
}
 void tGenerateMaps::set_swizzlex(::tGenerateMaps_eSwizzleComponent value) {
  
  swizzlex_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.SwizzleX)
}

// optional bool RenderRayFails = 60;
void tGenerateMaps::clear_renderrayfails() {
  renderrayfails_ = false;
}
 bool tGenerateMaps::renderrayfails() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RenderRayFails)
  return renderrayfails_;
}
 void tGenerateMaps::set_renderrayfails(bool value) {
  
  renderrayfails_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RenderRayFails)
}

// optional float CavitySearchRadius = 61;
void tGenerateMaps::clear_cavitysearchradius() {
  cavitysearchradius_ = 0;
}
 float tGenerateMaps::cavitysearchradius() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CavitySearchRadius)
  return cavitysearchradius_;
}
 void tGenerateMaps::set_cavitysearchradius(float value) {
  
  cavitysearchradius_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CavitySearchRadius)
}

// optional bool RadiosityNormalsEncodeAO = 62;
void tGenerateMaps::clear_radiositynormalsencodeao() {
  radiositynormalsencodeao_ = false;
}
 bool tGenerateMaps::radiositynormalsencodeao() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsEncodeAO)
  return radiositynormalsencodeao_;
}
 void tGenerateMaps::set_radiositynormalsencodeao(bool value) {
  
  radiositynormalsencodeao_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsEncodeAO)
}

// optional float TransluConeAngle = 63;
void tGenerateMaps::clear_transluconeangle() {
  transluconeangle_ = 0;
}
 float tGenerateMaps::transluconeangle() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.TransluConeAngle)
  return transluconeangle_;
}
 void tGenerateMaps::set_transluconeangle(float value) {
  
  transluconeangle_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.TransluConeAngle)
}

// optional uint32 BentRaysPerSample = 64;
void tGenerateMaps::clear_bentrayspersample() {
  bentrayspersample_ = 0u;
}
 ::google::protobuf::uint32 tGenerateMaps::bentrayspersample() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentRaysPerSample)
  return bentrayspersample_;
}
 void tGenerateMaps::set_bentrayspersample(::google::protobuf::uint32 value) {
  
  bentrayspersample_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentRaysPerSample)
}

// optional float ConvexityScale = 65;
void tGenerateMaps::clear_convexityscale() {
  convexityscale_ = 0;
}
 float tGenerateMaps::convexityscale() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.ConvexityScale)
  return convexityscale_;
}
 void tGenerateMaps::set_convexityscale(float value) {
  
  convexityscale_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.ConvexityScale)
}

// optional float RadiosityNormalsConeAngle = 66;
void tGenerateMaps::clear_radiositynormalsconeangle() {
  radiositynormalsconeangle_ = 0;
}
 float tGenerateMaps::radiositynormalsconeangle() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsConeAngle)
  return radiositynormalsconeangle_;
}
 void tGenerateMaps::set_radiositynormalsconeangle(float value) {
  
  radiositynormalsconeangle_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsConeAngle)
}

// optional string File = 67;
void tGenerateMaps::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tGenerateMaps::file() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.File)
  return file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tGenerateMaps::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tGenerateMaps.File)
}
 void tGenerateMaps::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tGenerateMaps.File)
}
 void tGenerateMaps::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tGenerateMaps.File)
}
 ::std::string* tGenerateMaps::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.File)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tGenerateMaps::release_file() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.File)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tGenerateMaps::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.File)
}

// optional bool GenDerivNM = 68;
void tGenerateMaps::clear_genderivnm() {
  genderivnm_ = false;
}
 bool tGenerateMaps::genderivnm() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenDerivNM)
  return genderivnm_;
}
 void tGenerateMaps::set_genderivnm(bool value) {
  
  genderivnm_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenDerivNM)
}

// optional bool BentLimitRayDistance = 69;
void tGenerateMaps::clear_bentlimitraydistance() {
  bentlimitraydistance_ = false;
}
 bool tGenerateMaps::bentlimitraydistance() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentLimitRayDistance)
  return bentlimitraydistance_;
}
 void tGenerateMaps::set_bentlimitraydistance(bool value) {
  
  bentlimitraydistance_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentLimitRayDistance)
}

// optional float PRTBias = 70;
void tGenerateMaps::clear_prtbias() {
  prtbias_ = 0;
}
 float tGenerateMaps::prtbias() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.PRTBias)
  return prtbias_;
}
 void tGenerateMaps::set_prtbias(float value) {
  
  prtbias_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.PRTBias)
}

// optional bool RenderWireframe = 71;
void tGenerateMaps::clear_renderwireframe() {
  renderwireframe_ = false;
}
 bool tGenerateMaps::renderwireframe() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RenderWireframe)
  return renderwireframe_;
}
 void tGenerateMaps::set_renderwireframe(bool value) {
  
  renderwireframe_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RenderWireframe)
}

// optional bool PRTNormalize = 72;
void tGenerateMaps::clear_prtnormalize() {
  prtnormalize_ = false;
}
 bool tGenerateMaps::prtnormalize() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.PRTNormalize)
  return prtnormalize_;
}
 void tGenerateMaps::set_prtnormalize(bool value) {
  
  prtnormalize_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.PRTNormalize)
}

// optional bool GenAO = 73;
void tGenerateMaps::clear_genao() {
  genao_ = false;
}
 bool tGenerateMaps::genao() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenAO)
  return genao_;
}
 void tGenerateMaps::set_genao(bool value) {
  
  genao_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenAO)
}

// optional float PRTConeAngle = 74;
void tGenerateMaps::clear_prtconeangle() {
  prtconeangle_ = 0;
}
 float tGenerateMaps::prtconeangle() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.PRTConeAngle)
  return prtconeangle_;
}
 void tGenerateMaps::set_prtconeangle(float value) {
  
  prtconeangle_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.PRTConeAngle)
}

// optional uint32 Height = 75;
void tGenerateMaps::clear_height() {
  height_ = 0u;
}
 ::google::protobuf::uint32 tGenerateMaps::height() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.Height)
  return height_;
}
 void tGenerateMaps::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.Height)
}

// optional float RadiosityNormalsAttenCuadratic = 76;
void tGenerateMaps::clear_radiositynormalsattencuadratic() {
  radiositynormalsattencuadratic_ = 0;
}
 float tGenerateMaps::radiositynormalsattencuadratic() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsAttenCuadratic)
  return radiositynormalsattencuadratic_;
}
 void tGenerateMaps::set_radiositynormalsattencuadratic(float value) {
  
  radiositynormalsattencuadratic_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsAttenCuadratic)
}

// optional .tGenerateMaps.eHMNormalization DirectionsTonemap = 77;
void tGenerateMaps::clear_directionstonemap() {
  directionstonemap_ = 0;
}
 ::tGenerateMaps_eHMNormalization tGenerateMaps::directionstonemap() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DirectionsTonemap)
  return static_cast< ::tGenerateMaps_eHMNormalization >(directionstonemap_);
}
 void tGenerateMaps::set_directionstonemap(::tGenerateMaps_eHMNormalization value) {
  
  directionstonemap_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.DirectionsTonemap)
}

// optional bool DirectionsTS = 78;
void tGenerateMaps::clear_directionsts() {
  directionsts_ = false;
}
 bool tGenerateMaps::directionsts() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DirectionsTS)
  return directionsts_;
}
 void tGenerateMaps::set_directionsts(bool value) {
  
  directionsts_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.DirectionsTS)
}

// optional uint32 PRTRaysPerSample = 79;
void tGenerateMaps::clear_prtrayspersample() {
  prtrayspersample_ = 0u;
}
 ::google::protobuf::uint32 tGenerateMaps::prtrayspersample() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.PRTRaysPerSample)
  return prtrayspersample_;
}
 void tGenerateMaps::set_prtrayspersample(::google::protobuf::uint32 value) {
  
  prtrayspersample_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.PRTRaysPerSample)
}

// optional uint32 EdgePadding = 80;
void tGenerateMaps::clear_edgepadding() {
  edgepadding_ = 0u;
}
 ::google::protobuf::uint32 tGenerateMaps::edgepadding() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.EdgePadding)
  return edgepadding_;
}
 void tGenerateMaps::set_edgepadding(::google::protobuf::uint32 value) {
  
  edgepadding_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.EdgePadding)
}

// optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleZ = 81;
void tGenerateMaps::clear_directionsswizzlez() {
  directionsswizzlez_ = 0;
}
 ::tGenerateMaps_eSwizzleComponent tGenerateMaps::directionsswizzlez() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DirectionsSwizzleZ)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(directionsswizzlez_);
}
 void tGenerateMaps::set_directionsswizzlez(::tGenerateMaps_eSwizzleComponent value) {
  
  directionsswizzlez_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.DirectionsSwizzleZ)
}

// optional bool AOAllowPureOccluded = 82;
void tGenerateMaps::clear_aoallowpureoccluded() {
  aoallowpureoccluded_ = false;
}
 bool tGenerateMaps::aoallowpureoccluded() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOAllowPureOccluded)
  return aoallowpureoccluded_;
}
 void tGenerateMaps::set_aoallowpureoccluded(bool value) {
  
  aoallowpureoccluded_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOAllowPureOccluded)
}

// optional bool AOIgnoreBackfaceHits = 83;
void tGenerateMaps::clear_aoignorebackfacehits() {
  aoignorebackfacehits_ = false;
}
 bool tGenerateMaps::aoignorebackfacehits() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOIgnoreBackfaceHits)
  return aoignorebackfacehits_;
}
 void tGenerateMaps::set_aoignorebackfacehits(bool value) {
  
  aoignorebackfacehits_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOIgnoreBackfaceHits)
}

// optional uint32 CavityRaysPerSample = 84;
void tGenerateMaps::clear_cavityrayspersample() {
  cavityrayspersample_ = 0u;
}
 ::google::protobuf::uint32 tGenerateMaps::cavityrayspersample() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CavityRaysPerSample)
  return cavityrayspersample_;
}
 void tGenerateMaps::set_cavityrayspersample(::google::protobuf::uint32 value) {
  
  cavityrayspersample_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CavityRaysPerSample)
}

// optional float AOAttenConstant = 85;
void tGenerateMaps::clear_aoattenconstant() {
  aoattenconstant_ = 0;
}
 float tGenerateMaps::aoattenconstant() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOAttenConstant)
  return aoattenconstant_;
}
 void tGenerateMaps::set_aoattenconstant(float value) {
  
  aoattenconstant_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOAttenConstant)
}

// optional bool CavityJitter = 86;
void tGenerateMaps::clear_cavityjitter() {
  cavityjitter_ = false;
}
 bool tGenerateMaps::cavityjitter() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CavityJitter)
  return cavityjitter_;
}
 void tGenerateMaps::set_cavityjitter(bool value) {
  
  cavityjitter_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CavityJitter)
}

// optional float HeightTonemapMax = 87;
void tGenerateMaps::clear_heighttonemapmax() {
  heighttonemapmax_ = 0;
}
 float tGenerateMaps::heighttonemapmax() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.HeightTonemapMax)
  return heighttonemapmax_;
}
 void tGenerateMaps::set_heighttonemapmax(float value) {
  
  heighttonemapmax_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.HeightTonemapMax)
}

// optional bool GenDirections = 88;
void tGenerateMaps::clear_gendirections() {
  gendirections_ = false;
}
 bool tGenerateMaps::gendirections() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenDirections)
  return gendirections_;
}
 void tGenerateMaps::set_gendirections(bool value) {
  
  gendirections_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenDirections)
}

// optional bool RadiosityNormalsLimitRayDistance = 89;
void tGenerateMaps::clear_radiositynormalslimitraydistance() {
  radiositynormalslimitraydistance_ = false;
}
 bool tGenerateMaps::radiositynormalslimitraydistance() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsLimitRayDistance)
  return radiositynormalslimitraydistance_;
}
 void tGenerateMaps::set_radiositynormalslimitraydistance(bool value) {
  
  radiositynormalslimitraydistance_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsLimitRayDistance)
}

// optional float HeightTonemapMin = 90;
void tGenerateMaps::clear_heighttonemapmin() {
  heighttonemapmin_ = 0;
}
 float tGenerateMaps::heighttonemapmin() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.HeightTonemapMin)
  return heighttonemapmin_;
}
 void tGenerateMaps::set_heighttonemapmin(float value) {
  
  heighttonemapmin_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.HeightTonemapMin)
}

// optional bool RadiosityNormalsJitter = 91;
void tGenerateMaps::clear_radiositynormalsjitter() {
  radiositynormalsjitter_ = false;
}
 bool tGenerateMaps::radiositynormalsjitter() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsJitter)
  return radiositynormalsjitter_;
}
 void tGenerateMaps::set_radiositynormalsjitter(bool value) {
  
  radiositynormalsjitter_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsJitter)
}

// optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleY = 92;
void tGenerateMaps::clear_directionsswizzley() {
  directionsswizzley_ = 0;
}
 ::tGenerateMaps_eSwizzleComponent tGenerateMaps::directionsswizzley() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DirectionsSwizzleY)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(directionsswizzley_);
}
 void tGenerateMaps::set_directionsswizzley(::tGenerateMaps_eSwizzleComponent value) {
  
  directionsswizzley_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.DirectionsSwizzleY)
}

// optional uint32 Width = 93;
void tGenerateMaps::clear_width() {
  width_ = 0u;
}
 ::google::protobuf::uint32 tGenerateMaps::width() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.Width)
  return width_;
}
 void tGenerateMaps::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.Width)
}

// optional bool BakeHighpolyBaseTextureDrawObjectIDIfNoTexture = 94;
void tGenerateMaps::clear_bakehighpolybasetexturedrawobjectidifnotexture() {
  bakehighpolybasetexturedrawobjectidifnotexture_ = false;
}
 bool tGenerateMaps::bakehighpolybasetexturedrawobjectidifnotexture() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BakeHighpolyBaseTextureDrawObjectIDIfNoTexture)
  return bakehighpolybasetexturedrawobjectidifnotexture_;
}
 void tGenerateMaps::set_bakehighpolybasetexturedrawobjectidifnotexture(bool value) {
  
  bakehighpolybasetexturedrawobjectidifnotexture_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BakeHighpolyBaseTextureDrawObjectIDIfNoTexture)
}

// optional bool Concavity = 95;
void tGenerateMaps::clear_concavity() {
  concavity_ = false;
}
 bool tGenerateMaps::concavity() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.Concavity)
  return concavity_;
}
 void tGenerateMaps::set_concavity(bool value) {
  
  concavity_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.Concavity)
}

// optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleX = 96;
void tGenerateMaps::clear_directionsswizzlex() {
  directionsswizzlex_ = 0;
}
 ::tGenerateMaps_eSwizzleComponent tGenerateMaps::directionsswizzlex() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DirectionsSwizzleX)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(directionsswizzlex_);
}
 void tGenerateMaps::set_directionsswizzlex(::tGenerateMaps_eSwizzleComponent value) {
  
  directionsswizzlex_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.DirectionsSwizzleX)
}

// optional bool GenNormals = 97;
void tGenerateMaps::clear_gennormals() {
  gennormals_ = false;
}
 bool tGenerateMaps::gennormals() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenNormals)
  return gennormals_;
}
 void tGenerateMaps::set_gennormals(bool value) {
  
  gennormals_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenNormals)
}

// optional uint32 ProximityRaysPerSample = 98;
void tGenerateMaps::clear_proximityrayspersample() {
  proximityrayspersample_ = 0u;
}
 ::google::protobuf::uint32 tGenerateMaps::proximityrayspersample() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.ProximityRaysPerSample)
  return proximityrayspersample_;
}
 void tGenerateMaps::set_proximityrayspersample(::google::protobuf::uint32 value) {
  
  proximityrayspersample_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.ProximityRaysPerSample)
}

// optional bool GenHeights = 99;
void tGenerateMaps::clear_genheights() {
  genheights_ = false;
}
 bool tGenerateMaps::genheights() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenHeights)
  return genheights_;
}
 void tGenerateMaps::set_genheights(bool value) {
  
  genheights_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenHeights)
}

// optional float RadiosityNormalsAttenConstant = 100;
void tGenerateMaps::clear_radiositynormalsattenconstant() {
  radiositynormalsattenconstant_ = 0;
}
 float tGenerateMaps::radiositynormalsattenconstant() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsAttenConstant)
  return radiositynormalsattenconstant_;
}
 void tGenerateMaps::set_radiositynormalsattenconstant(float value) {
  
  radiositynormalsattenconstant_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsAttenConstant)
}

// optional bool GenProximity = 101;
void tGenerateMaps::clear_genproximity() {
  genproximity_ = false;
}
 bool tGenerateMaps::genproximity() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenProximity)
  return genproximity_;
}
 void tGenerateMaps::set_genproximity(bool value) {
  
  genproximity_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenProximity)
}

// optional bool GenPRT = 102;
void tGenerateMaps::clear_genprt() {
  genprt_ = false;
}
 bool tGenerateMaps::genprt() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenPRT)
  return genprt_;
}
 void tGenerateMaps::set_genprt(bool value) {
  
  genprt_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenPRT)
}

// optional float CavityContrast = 103;
void tGenerateMaps::clear_cavitycontrast() {
  cavitycontrast_ = 0;
}
 float tGenerateMaps::cavitycontrast() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CavityContrast)
  return cavitycontrast_;
}
 void tGenerateMaps::set_cavitycontrast(float value) {
  
  cavitycontrast_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CavityContrast)
}

// optional .tGenerateMaps.eRNMCoordSys RadiosityNormalsCoordSys = 104;
void tGenerateMaps::clear_radiositynormalscoordsys() {
  radiositynormalscoordsys_ = 0;
}
 ::tGenerateMaps_eRNMCoordSys tGenerateMaps::radiositynormalscoordsys() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsCoordSys)
  return static_cast< ::tGenerateMaps_eRNMCoordSys >(radiositynormalscoordsys_);
}
 void tGenerateMaps::set_radiositynormalscoordsys(::tGenerateMaps_eRNMCoordSys value) {
  
  radiositynormalscoordsys_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsCoordSys)
}

// optional bool TransluJitter = 105;
void tGenerateMaps::clear_translujitter() {
  translujitter_ = false;
}
 bool tGenerateMaps::translujitter() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.TransluJitter)
  return translujitter_;
}
 void tGenerateMaps::set_translujitter(bool value) {
  
  translujitter_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.TransluJitter)
}

// optional uint32 AORaysPerSample = 106;
void tGenerateMaps::clear_aorayspersample() {
  aorayspersample_ = 0u;
}
 ::google::protobuf::uint32 tGenerateMaps::aorayspersample() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AORaysPerSample)
  return aorayspersample_;
}
 void tGenerateMaps::set_aorayspersample(::google::protobuf::uint32 value) {
  
  aorayspersample_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AORaysPerSample)
}

// optional float BentBias = 107;
void tGenerateMaps::clear_bentbias() {
  bentbias_ = 0;
}
 float tGenerateMaps::bentbias() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentBias)
  return bentbias_;
}
 void tGenerateMaps::set_bentbias(float value) {
  
  bentbias_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentBias)
}

// optional bool DiscardRayBackFacesHits = 108;
void tGenerateMaps::clear_discardraybackfaceshits() {
  discardraybackfaceshits_ = false;
}
 bool tGenerateMaps::discardraybackfaceshits() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DiscardRayBackFacesHits)
  return discardraybackfaceshits_;
}
 void tGenerateMaps::set_discardraybackfaceshits(bool value) {
  
  discardraybackfaceshits_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.DiscardRayBackFacesHits)
}

// optional float AOConeAngle = 109;
void tGenerateMaps::clear_aoconeangle() {
  aoconeangle_ = 0;
}
 float tGenerateMaps::aoconeangle() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOConeAngle)
  return aoconeangle_;
}
 void tGenerateMaps::set_aoconeangle(float value) {
  
  aoconeangle_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOConeAngle)
}

// optional .tGenerateMaps.eSwizzleComponent BentSwizzleY = 110;
void tGenerateMaps::clear_bentswizzley() {
  bentswizzley_ = 0;
}
 ::tGenerateMaps_eSwizzleComponent tGenerateMaps::bentswizzley() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentSwizzleY)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(bentswizzley_);
}
 void tGenerateMaps::set_bentswizzley(::tGenerateMaps_eSwizzleComponent value) {
  
  bentswizzley_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentSwizzleY)
}

// optional float RadiosityNormalsBias = 111;
void tGenerateMaps::clear_radiositynormalsbias() {
  radiositynormalsbias_ = 0;
}
 float tGenerateMaps::radiositynormalsbias() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsBias)
  return radiositynormalsbias_;
}
 void tGenerateMaps::set_radiositynormalsbias(float value) {
  
  radiositynormalsbias_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsBias)
}

// optional float RadiosityNormalsContrast = 112;
void tGenerateMaps::clear_radiositynormalscontrast() {
  radiositynormalscontrast_ = 0;
}
 float tGenerateMaps::radiositynormalscontrast() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsContrast)
  return radiositynormalscontrast_;
}
 void tGenerateMaps::set_radiositynormalscontrast(float value) {
  
  radiositynormalscontrast_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsContrast)
}

// optional uint32 CavitySteps = 113;
void tGenerateMaps::clear_cavitysteps() {
  cavitysteps_ = 0u;
}
 ::google::protobuf::uint32 tGenerateMaps::cavitysteps() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CavitySteps)
  return cavitysteps_;
}
 void tGenerateMaps::set_cavitysteps(::google::protobuf::uint32 value) {
  
  cavitysteps_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CavitySteps)
}

// optional .tGenerateMaps.eAntialiasing AA = 114;
void tGenerateMaps::clear_aa() {
  aa_ = 0;
}
 ::tGenerateMaps_eAntialiasing tGenerateMaps::aa() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AA)
  return static_cast< ::tGenerateMaps_eAntialiasing >(aa_);
}
 void tGenerateMaps::set_aa(::tGenerateMaps_eAntialiasing value) {
  
  aa_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AA)
}

// optional .tGenerateMaps.eSwizzleComponent BentSwizzleZ = 115;
void tGenerateMaps::clear_bentswizzlez() {
  bentswizzlez_ = 0;
}
 ::tGenerateMaps_eSwizzleComponent tGenerateMaps::bentswizzlez() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentSwizzleZ)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(bentswizzlez_);
}
 void tGenerateMaps::set_bentswizzlez(::tGenerateMaps_eSwizzleComponent value) {
  
  bentswizzlez_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentSwizzleZ)
}

// optional uint32 BucketSize = 116;
void tGenerateMaps::clear_bucketsize() {
  bucketsize_ = 0u;
}
 ::google::protobuf::uint32 tGenerateMaps::bucketsize() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BucketSize)
  return bucketsize_;
}
 void tGenerateMaps::set_bucketsize(::google::protobuf::uint32 value) {
  
  bucketsize_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BucketSize)
}

// optional float CurvConeAngle = 117;
void tGenerateMaps::clear_curvconeangle() {
  curvconeangle_ = 0;
}
 float tGenerateMaps::curvconeangle() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvConeAngle)
  return curvconeangle_;
}
 void tGenerateMaps::set_curvconeangle(float value) {
  
  curvconeangle_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CurvConeAngle)
}

// optional float TransluDist = 118;
void tGenerateMaps::clear_transludist() {
  transludist_ = 0;
}
 float tGenerateMaps::transludist() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.TransluDist)
  return transludist_;
}
 void tGenerateMaps::set_transludist(float value) {
  
  transludist_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.TransluDist)
}

// optional bool AOJitter = 119;
void tGenerateMaps::clear_aojitter() {
  aojitter_ = false;
}
 bool tGenerateMaps::aojitter() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOJitter)
  return aojitter_;
}
 void tGenerateMaps::set_aojitter(bool value) {
  
  aojitter_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOJitter)
}

// optional float CurvBias = 120;
void tGenerateMaps::clear_curvbias() {
  curvbias_ = 0;
}
 float tGenerateMaps::curvbias() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvBias)
  return curvbias_;
}
 void tGenerateMaps::set_curvbias(float value) {
  
  curvbias_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CurvBias)
}

// optional bool GenWireRays = 121;
void tGenerateMaps::clear_genwirerays() {
  genwirerays_ = false;
}
 bool tGenerateMaps::genwirerays() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenWireRays)
  return genwirerays_;
}
 void tGenerateMaps::set_genwirerays(bool value) {
  
  genwirerays_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenWireRays)
}

// optional .tGenerateMaps.eCurvAlgorithm CurvAlgorithm = 122;
void tGenerateMaps::clear_curvalgorithm() {
  curvalgorithm_ = 0;
}
 ::tGenerateMaps_eCurvAlgorithm tGenerateMaps::curvalgorithm() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvAlgorithm)
  return static_cast< ::tGenerateMaps_eCurvAlgorithm >(curvalgorithm_);
}
 void tGenerateMaps::set_curvalgorithm(::tGenerateMaps_eCurvAlgorithm value) {
  
  curvalgorithm_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CurvAlgorithm)
}

// optional .tGenerateMaps.eAODistribution TransluDistribution = 123;
void tGenerateMaps::clear_transludistribution() {
  transludistribution_ = 0;
}
 ::tGenerateMaps_eAODistribution tGenerateMaps::transludistribution() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.TransluDistribution)
  return static_cast< ::tGenerateMaps_eAODistribution >(transludistribution_);
}
 void tGenerateMaps::set_transludistribution(::tGenerateMaps_eAODistribution value) {
  
  transludistribution_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.TransluDistribution)
}

// optional float AOAttenLinear = 124;
void tGenerateMaps::clear_aoattenlinear() {
  aoattenlinear_ = 0;
}
 float tGenerateMaps::aoattenlinear() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOAttenLinear)
  return aoattenlinear_;
}
 void tGenerateMaps::set_aoattenlinear(float value) {
  
  aoattenlinear_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOAttenLinear)
}

// optional bool ProximityLimitRayDistance = 125;
void tGenerateMaps::clear_proximitylimitraydistance() {
  proximitylimitraydistance_ = false;
}
 bool tGenerateMaps::proximitylimitraydistance() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.ProximityLimitRayDistance)
  return proximitylimitraydistance_;
}
 void tGenerateMaps::set_proximitylimitraydistance(bool value) {
  
  proximitylimitraydistance_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.ProximityLimitRayDistance)
}

// optional bool GenRadiosityNormals = 126;
void tGenerateMaps::clear_genradiositynormals() {
  genradiositynormals_ = false;
}
 bool tGenerateMaps::genradiositynormals() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenRadiosityNormals)
  return genradiositynormals_;
}
 void tGenerateMaps::set_genradiositynormals(bool value) {
  
  genradiositynormals_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenRadiosityNormals)
}

// optional float ProximityConeAngle = 127;
void tGenerateMaps::clear_proximityconeangle() {
  proximityconeangle_ = 0;
}
 float tGenerateMaps::proximityconeangle() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.ProximityConeAngle)
  return proximityconeangle_;
}
 void tGenerateMaps::set_proximityconeangle(float value) {
  
  proximityconeangle_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.ProximityConeAngle)
}

// optional .tGenerateMaps.eHMNormalization HeightTonemap = 128;
void tGenerateMaps::clear_heighttonemap() {
  heighttonemap_ = 0;
}
 ::tGenerateMaps_eHMNormalization tGenerateMaps::heighttonemap() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.HeightTonemap)
  return static_cast< ::tGenerateMaps_eHMNormalization >(heighttonemap_);
}
 void tGenerateMaps::set_heighttonemap(::tGenerateMaps_eHMNormalization value) {
  
  heighttonemap_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.HeightTonemap)
}

// optional bool GenCavity = 129;
void tGenerateMaps::clear_gencavity() {
  gencavity_ = false;
}
 bool tGenerateMaps::gencavity() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenCavity)
  return gencavity_;
}
 void tGenerateMaps::set_gencavity(bool value) {
  
  gencavity_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenCavity)
}

// optional bool BakeHighpolyVCols = 130;
void tGenerateMaps::clear_bakehighpolyvcols() {
  bakehighpolyvcols_ = false;
}
 bool tGenerateMaps::bakehighpolyvcols() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BakeHighpolyVCols)
  return bakehighpolyvcols_;
}
 void tGenerateMaps::set_bakehighpolyvcols(bool value) {
  
  bakehighpolyvcols_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BakeHighpolyVCols)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tHighPolyModel::kMeshFieldNumber;
const int tHighPolyModel::kBaseTexFieldNumber;
const int tHighPolyModel::kDefaultMeshScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tHighPolyModel::tHighPolyModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tHighPolyModel)
}

void tHighPolyModel::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

tHighPolyModel::tHighPolyModel(const tHighPolyModel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tHighPolyModel)
}

void tHighPolyModel::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  basetex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defaultmeshscale_ = 0;
}

tHighPolyModel::~tHighPolyModel() {
  // @@protoc_insertion_point(destructor:tHighPolyModel)
  SharedDtor();
}

void tHighPolyModel::SharedDtor() {
  basetex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void tHighPolyModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tHighPolyModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tHighPolyModel_descriptor_;
}

const tHighPolyModel& tHighPolyModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xnormal_2eproto();
  return *default_instance_;
}

tHighPolyModel* tHighPolyModel::default_instance_ = NULL;

tHighPolyModel* tHighPolyModel::New(::google::protobuf::Arena* arena) const {
  tHighPolyModel* n = new tHighPolyModel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tHighPolyModel::Clear() {
// @@protoc_insertion_point(message_clear_start:tHighPolyModel)
  basetex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defaultmeshscale_ = 0;
  mesh_.Clear();
}

bool tHighPolyModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tHighPolyModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tHighPolyMesh Mesh = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Mesh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mesh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Mesh;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_BaseTex;
        break;
      }

      // optional string BaseTex = 2;
      case 2: {
        if (tag == 18) {
         parse_BaseTex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basetex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->basetex().data(), this->basetex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tHighPolyModel.BaseTex"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_DefaultMeshScale;
        break;
      }

      // optional float DefaultMeshScale = 3;
      case 3: {
        if (tag == 29) {
         parse_DefaultMeshScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &defaultmeshscale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tHighPolyModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tHighPolyModel)
  return false;
#undef DO_
}

void tHighPolyModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tHighPolyModel)
  // repeated .tHighPolyMesh Mesh = 1;
  for (unsigned int i = 0, n = this->mesh_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mesh(i), output);
  }

  // optional string BaseTex = 2;
  if (this->basetex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basetex().data(), this->basetex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tHighPolyModel.BaseTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->basetex(), output);
  }

  // optional float DefaultMeshScale = 3;
  if (this->defaultmeshscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->defaultmeshscale(), output);
  }

  // @@protoc_insertion_point(serialize_end:tHighPolyModel)
}

::google::protobuf::uint8* tHighPolyModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tHighPolyModel)
  // repeated .tHighPolyMesh Mesh = 1;
  for (unsigned int i = 0, n = this->mesh_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mesh(i), false, target);
  }

  // optional string BaseTex = 2;
  if (this->basetex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basetex().data(), this->basetex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tHighPolyModel.BaseTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->basetex(), target);
  }

  // optional float DefaultMeshScale = 3;
  if (this->defaultmeshscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->defaultmeshscale(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tHighPolyModel)
  return target;
}

int tHighPolyModel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tHighPolyModel)
  int total_size = 0;

  // optional string BaseTex = 2;
  if (this->basetex().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->basetex());
  }

  // optional float DefaultMeshScale = 3;
  if (this->defaultmeshscale() != 0) {
    total_size += 1 + 4;
  }

  // repeated .tHighPolyMesh Mesh = 1;
  total_size += 1 * this->mesh_size();
  for (int i = 0; i < this->mesh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mesh(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tHighPolyModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tHighPolyModel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const tHighPolyModel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const tHighPolyModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tHighPolyModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tHighPolyModel)
    MergeFrom(*source);
  }
}

void tHighPolyModel::MergeFrom(const tHighPolyModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tHighPolyModel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mesh_.MergeFrom(from.mesh_);
  if (from.basetex().size() > 0) {

    basetex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basetex_);
  }
  if (from.defaultmeshscale() != 0) {
    set_defaultmeshscale(from.defaultmeshscale());
  }
}

void tHighPolyModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tHighPolyModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tHighPolyModel::CopyFrom(const tHighPolyModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tHighPolyModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tHighPolyModel::IsInitialized() const {

  return true;
}

void tHighPolyModel::Swap(tHighPolyModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tHighPolyModel::InternalSwap(tHighPolyModel* other) {
  mesh_.UnsafeArenaSwap(&other->mesh_);
  basetex_.Swap(&other->basetex_);
  std::swap(defaultmeshscale_, other->defaultmeshscale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tHighPolyModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tHighPolyModel_descriptor_;
  metadata.reflection = tHighPolyModel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tHighPolyModel

// repeated .tHighPolyMesh Mesh = 1;
int tHighPolyModel::mesh_size() const {
  return mesh_.size();
}
void tHighPolyModel::clear_mesh() {
  mesh_.Clear();
}
const ::tHighPolyMesh& tHighPolyModel::mesh(int index) const {
  // @@protoc_insertion_point(field_get:tHighPolyModel.Mesh)
  return mesh_.Get(index);
}
::tHighPolyMesh* tHighPolyModel::mutable_mesh(int index) {
  // @@protoc_insertion_point(field_mutable:tHighPolyModel.Mesh)
  return mesh_.Mutable(index);
}
::tHighPolyMesh* tHighPolyModel::add_mesh() {
  // @@protoc_insertion_point(field_add:tHighPolyModel.Mesh)
  return mesh_.Add();
}
::google::protobuf::RepeatedPtrField< ::tHighPolyMesh >*
tHighPolyModel::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable_list:tHighPolyModel.Mesh)
  return &mesh_;
}
const ::google::protobuf::RepeatedPtrField< ::tHighPolyMesh >&
tHighPolyModel::mesh() const {
  // @@protoc_insertion_point(field_list:tHighPolyModel.Mesh)
  return mesh_;
}

// optional string BaseTex = 2;
void tHighPolyModel::clear_basetex() {
  basetex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& tHighPolyModel::basetex() const {
  // @@protoc_insertion_point(field_get:tHighPolyModel.BaseTex)
  return basetex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tHighPolyModel::set_basetex(const ::std::string& value) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tHighPolyModel.BaseTex)
}
 void tHighPolyModel::set_basetex(const char* value) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tHighPolyModel.BaseTex)
}
 void tHighPolyModel::set_basetex(const char* value, size_t size) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tHighPolyModel.BaseTex)
}
 ::std::string* tHighPolyModel::mutable_basetex() {
  
  // @@protoc_insertion_point(field_mutable:tHighPolyModel.BaseTex)
  return basetex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* tHighPolyModel::release_basetex() {
  // @@protoc_insertion_point(field_release:tHighPolyModel.BaseTex)
  
  return basetex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void tHighPolyModel::set_allocated_basetex(::std::string* basetex) {
  if (basetex != NULL) {
    
  } else {
    
  }
  basetex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basetex);
  // @@protoc_insertion_point(field_set_allocated:tHighPolyModel.BaseTex)
}

// optional float DefaultMeshScale = 3;
void tHighPolyModel::clear_defaultmeshscale() {
  defaultmeshscale_ = 0;
}
 float tHighPolyModel::defaultmeshscale() const {
  // @@protoc_insertion_point(field_get:tHighPolyModel.DefaultMeshScale)
  return defaultmeshscale_;
}
 void tHighPolyModel::set_defaultmeshscale(float value) {
  
  defaultmeshscale_ = value;
  // @@protoc_insertion_point(field_set:tHighPolyModel.DefaultMeshScale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tLowPolyModel::kMeshFieldNumber;
const int tLowPolyModel::kDefaultMeshScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tLowPolyModel::tLowPolyModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tLowPolyModel)
}

void tLowPolyModel::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

tLowPolyModel::tLowPolyModel(const tLowPolyModel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tLowPolyModel)
}

void tLowPolyModel::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  defaultmeshscale_ = 0;
}

tLowPolyModel::~tLowPolyModel() {
  // @@protoc_insertion_point(destructor:tLowPolyModel)
  SharedDtor();
}

void tLowPolyModel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tLowPolyModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tLowPolyModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tLowPolyModel_descriptor_;
}

const tLowPolyModel& tLowPolyModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xnormal_2eproto();
  return *default_instance_;
}

tLowPolyModel* tLowPolyModel::default_instance_ = NULL;

tLowPolyModel* tLowPolyModel::New(::google::protobuf::Arena* arena) const {
  tLowPolyModel* n = new tLowPolyModel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tLowPolyModel::Clear() {
// @@protoc_insertion_point(message_clear_start:tLowPolyModel)
  defaultmeshscale_ = 0;
  mesh_.Clear();
}

bool tLowPolyModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tLowPolyModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tLowPolyMesh Mesh = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_Mesh:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mesh()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_Mesh;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(21)) goto parse_DefaultMeshScale;
        break;
      }

      // optional float DefaultMeshScale = 2;
      case 2: {
        if (tag == 21) {
         parse_DefaultMeshScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &defaultmeshscale_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tLowPolyModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tLowPolyModel)
  return false;
#undef DO_
}

void tLowPolyModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tLowPolyModel)
  // repeated .tLowPolyMesh Mesh = 1;
  for (unsigned int i = 0, n = this->mesh_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mesh(i), output);
  }

  // optional float DefaultMeshScale = 2;
  if (this->defaultmeshscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->defaultmeshscale(), output);
  }

  // @@protoc_insertion_point(serialize_end:tLowPolyModel)
}

::google::protobuf::uint8* tLowPolyModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tLowPolyModel)
  // repeated .tLowPolyMesh Mesh = 1;
  for (unsigned int i = 0, n = this->mesh_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mesh(i), false, target);
  }

  // optional float DefaultMeshScale = 2;
  if (this->defaultmeshscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->defaultmeshscale(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tLowPolyModel)
  return target;
}

int tLowPolyModel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tLowPolyModel)
  int total_size = 0;

  // optional float DefaultMeshScale = 2;
  if (this->defaultmeshscale() != 0) {
    total_size += 1 + 4;
  }

  // repeated .tLowPolyMesh Mesh = 1;
  total_size += 1 * this->mesh_size();
  for (int i = 0; i < this->mesh_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mesh(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tLowPolyModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tLowPolyModel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const tLowPolyModel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const tLowPolyModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tLowPolyModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tLowPolyModel)
    MergeFrom(*source);
  }
}

void tLowPolyModel::MergeFrom(const tLowPolyModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tLowPolyModel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mesh_.MergeFrom(from.mesh_);
  if (from.defaultmeshscale() != 0) {
    set_defaultmeshscale(from.defaultmeshscale());
  }
}

void tLowPolyModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tLowPolyModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tLowPolyModel::CopyFrom(const tLowPolyModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tLowPolyModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tLowPolyModel::IsInitialized() const {

  return true;
}

void tLowPolyModel::Swap(tLowPolyModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tLowPolyModel::InternalSwap(tLowPolyModel* other) {
  mesh_.UnsafeArenaSwap(&other->mesh_);
  std::swap(defaultmeshscale_, other->defaultmeshscale_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tLowPolyModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tLowPolyModel_descriptor_;
  metadata.reflection = tLowPolyModel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tLowPolyModel

// repeated .tLowPolyMesh Mesh = 1;
int tLowPolyModel::mesh_size() const {
  return mesh_.size();
}
void tLowPolyModel::clear_mesh() {
  mesh_.Clear();
}
const ::tLowPolyMesh& tLowPolyModel::mesh(int index) const {
  // @@protoc_insertion_point(field_get:tLowPolyModel.Mesh)
  return mesh_.Get(index);
}
::tLowPolyMesh* tLowPolyModel::mutable_mesh(int index) {
  // @@protoc_insertion_point(field_mutable:tLowPolyModel.Mesh)
  return mesh_.Mutable(index);
}
::tLowPolyMesh* tLowPolyModel::add_mesh() {
  // @@protoc_insertion_point(field_add:tLowPolyModel.Mesh)
  return mesh_.Add();
}
::google::protobuf::RepeatedPtrField< ::tLowPolyMesh >*
tLowPolyModel::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable_list:tLowPolyModel.Mesh)
  return &mesh_;
}
const ::google::protobuf::RepeatedPtrField< ::tLowPolyMesh >&
tLowPolyModel::mesh() const {
  // @@protoc_insertion_point(field_list:tLowPolyModel.Mesh)
  return mesh_;
}

// optional float DefaultMeshScale = 2;
void tLowPolyModel::clear_defaultmeshscale() {
  defaultmeshscale_ = 0;
}
 float tLowPolyModel::defaultmeshscale() const {
  // @@protoc_insertion_point(field_get:tLowPolyModel.DefaultMeshScale)
  return defaultmeshscale_;
}
 void tLowPolyModel::set_defaultmeshscale(float value) {
  
  defaultmeshscale_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyModel.DefaultMeshScale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tViewer3D::kLightAmbientColorFieldNumber;
const int tViewer3D::kLightDiffuseColorFieldNumber;
const int tViewer3D::kLightSpecularColorFieldNumber;
const int tViewer3D::kLightSecondaryColorFieldNumber;
const int tViewer3D::kLightTertiaryColorFieldNumber;
const int tViewer3D::kBackgroundColorFieldNumber;
const int tViewer3D::kGridColorFieldNumber;
const int tViewer3D::kCageColorFieldNumber;
const int tViewer3D::kCameraRotationFieldNumber;
const int tViewer3D::kCameraPositionFieldNumber;
const int tViewer3D::kLightPositionFieldNumber;
const int tViewer3D::kAxisSclFieldNumber;
const int tViewer3D::kXemakosExampleFieldNumber;
const int tViewer3D::kShowWireframeFieldNumber;
const int tViewer3D::kCageOpacityFieldNumber;
const int tViewer3D::kDiffuseGIIntensityFieldNumber;
const int tViewer3D::kShowAOFieldNumber;
const int tViewer3D::kSSAOContrastFieldNumber;
const int tViewer3D::kShadowAreaFieldNumber;
const int tViewer3D::kLightIndiretIntensityFieldNumber;
const int tViewer3D::kShowHighpolysFieldNumber;
const int tViewer3D::kShowStarfieldFieldNumber;
const int tViewer3D::kShowBlockersFieldNumber;
const int tViewer3D::kHDRThresholdFieldNumber;
const int tViewer3D::kSSAOBrightFieldNumber;
const int tViewer3D::kSSAOBlurRadiusFieldNumber;
const int tViewer3D::kShowGridFieldNumber;
const int tViewer3D::kParallaxStrengthFieldNumber;
const int tViewer3D::kSSAOAttenFieldNumber;
const int tViewer3D::kCameraOrbitDistanceFieldNumber;
const int tViewer3D::kUseGlowFieldNumber;
const int tViewer3D::kSSAOEnabledFieldNumber;
const int tViewer3D::kShadowBiasFieldNumber;
const int tViewer3D::kSSAORadiusFieldNumber;
const int tViewer3D::kLightIntensityFieldNumber;
const int tViewer3D::kExposureFieldNumber;
const int tViewer3D::kCameraOrbitAutoCenterFieldNumber;
const int tViewer3D::kCastShadowsFieldNumber;
const int tViewer3D::kShowNormalsFieldNumber;
const int tViewer3D::kMaxTessellationLevelFieldNumber;
const int tViewer3D::kShowTangentsFieldNumber;
const int tViewer3D::kGlowIntensityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tViewer3D::tViewer3D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tViewer3D)
}

void tViewer3D::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  lightambientcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  lightdiffusecolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  lightspecularcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  lightsecondarycolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  lighttertiarycolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  backgroundcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  gridcolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  cagecolor_ = const_cast< ::tRGB8*>(&::tRGB8::default_instance());
  camerarotation_ = const_cast< ::tMatrix*>(&::tMatrix::default_instance());
  cameraposition_ = const_cast< ::tVector3*>(&::tVector3::default_instance());
  lightposition_ = const_cast< ::tVector3*>(&::tVector3::default_instance());
}

tViewer3D::tViewer3D(const tViewer3D& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tViewer3D)
}

void tViewer3D::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  lightambientcolor_ = NULL;
  lightdiffusecolor_ = NULL;
  lightspecularcolor_ = NULL;
  lightsecondarycolor_ = NULL;
  lighttertiarycolor_ = NULL;
  backgroundcolor_ = NULL;
  gridcolor_ = NULL;
  cagecolor_ = NULL;
  camerarotation_ = NULL;
  cameraposition_ = NULL;
  lightposition_ = NULL;
  axisscl_ = 0;
  xemakosexample_ = false;
  showwireframe_ = false;
  cageopacity_ = 0;
  diffusegiintensity_ = 0;
  showao_ = false;
  ssaocontrast_ = 0;
  shadowarea_ = 0;
  lightindiretintensity_ = 0;
  showhighpolys_ = false;
  showstarfield_ = false;
  showblockers_ = false;
  hdrthreshold_ = 0;
  ssaobright_ = 0;
  ssaoblurradius_ = 0;
  showgrid_ = false;
  parallaxstrength_ = 0;
  ssaoatten_ = 0;
  cameraorbitdistance_ = 0;
  useglow_ = false;
  ssaoenabled_ = false;
  shadowbias_ = 0;
  ssaoradius_ = 0;
  lightintensity_ = 0;
  exposure_ = 0;
  cameraorbitautocenter_ = false;
  castshadows_ = false;
  shownormals_ = false;
  maxtessellationlevel_ = GOOGLE_LONGLONG(0);
  showtangents_ = false;
  glowintensity_ = 0;
}

tViewer3D::~tViewer3D() {
  // @@protoc_insertion_point(destructor:tViewer3D)
  SharedDtor();
}

void tViewer3D::SharedDtor() {
  if (this != default_instance_) {
    delete lightambientcolor_;
    delete lightdiffusecolor_;
    delete lightspecularcolor_;
    delete lightsecondarycolor_;
    delete lighttertiarycolor_;
    delete backgroundcolor_;
    delete gridcolor_;
    delete cagecolor_;
    delete camerarotation_;
    delete cameraposition_;
    delete lightposition_;
  }
}

void tViewer3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tViewer3D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tViewer3D_descriptor_;
}

const tViewer3D& tViewer3D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xnormal_2eproto();
  return *default_instance_;
}

tViewer3D* tViewer3D::default_instance_ = NULL;

tViewer3D* tViewer3D::New(::google::protobuf::Arena* arena) const {
  tViewer3D* n = new tViewer3D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tViewer3D::Clear() {
// @@protoc_insertion_point(message_clear_start:tViewer3D)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(tViewer3D, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<tViewer3D*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (GetArenaNoVirtual() == NULL && lightambientcolor_ != NULL) delete lightambientcolor_;
  lightambientcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && lightdiffusecolor_ != NULL) delete lightdiffusecolor_;
  lightdiffusecolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && lightspecularcolor_ != NULL) delete lightspecularcolor_;
  lightspecularcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && lightsecondarycolor_ != NULL) delete lightsecondarycolor_;
  lightsecondarycolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && lighttertiarycolor_ != NULL) delete lighttertiarycolor_;
  lighttertiarycolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && backgroundcolor_ != NULL) delete backgroundcolor_;
  backgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && gridcolor_ != NULL) delete gridcolor_;
  gridcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && cagecolor_ != NULL) delete cagecolor_;
  cagecolor_ = NULL;
  ZR_(axisscl_, showwireframe_);
  if (GetArenaNoVirtual() == NULL && camerarotation_ != NULL) delete camerarotation_;
  camerarotation_ = NULL;
  if (GetArenaNoVirtual() == NULL && cameraposition_ != NULL) delete cameraposition_;
  cameraposition_ = NULL;
  if (GetArenaNoVirtual() == NULL && lightposition_ != NULL) delete lightposition_;
  lightposition_ = NULL;
  ZR_(showao_, hdrthreshold_);
  ZR_(showstarfield_, showblockers_);
  ZR_(showgrid_, cameraorbitdistance_);
  ssaobright_ = 0;
  ssaoenabled_ = false;
  ZR_(shadowbias_, exposure_);
  ZR_(cameraorbitautocenter_, shownormals_);
  maxtessellationlevel_ = GOOGLE_LONGLONG(0);
  showtangents_ = false;
  glowintensity_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool tViewer3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tViewer3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tRGB8 LightAmbientColor = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lightambientcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_LightDiffuseColor;
        break;
      }

      // optional .tRGB8 LightDiffuseColor = 2;
      case 2: {
        if (tag == 18) {
         parse_LightDiffuseColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lightdiffusecolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_LightSpecularColor;
        break;
      }

      // optional .tRGB8 LightSpecularColor = 3;
      case 3: {
        if (tag == 26) {
         parse_LightSpecularColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lightspecularcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_LightSecondaryColor;
        break;
      }

      // optional .tRGB8 LightSecondaryColor = 4;
      case 4: {
        if (tag == 34) {
         parse_LightSecondaryColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lightsecondarycolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_LightTertiaryColor;
        break;
      }

      // optional .tRGB8 LightTertiaryColor = 5;
      case 5: {
        if (tag == 42) {
         parse_LightTertiaryColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lighttertiarycolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_BackgroundColor;
        break;
      }

      // optional .tRGB8 BackgroundColor = 6;
      case 6: {
        if (tag == 50) {
         parse_BackgroundColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backgroundcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_GridColor;
        break;
      }

      // optional .tRGB8 GridColor = 7;
      case 7: {
        if (tag == 58) {
         parse_GridColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gridcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_CageColor;
        break;
      }

      // optional .tRGB8 CageColor = 8;
      case 8: {
        if (tag == 66) {
         parse_CageColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cagecolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_CameraRotation;
        break;
      }

      // optional .tMatrix CameraRotation = 9;
      case 9: {
        if (tag == 74) {
         parse_CameraRotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camerarotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_CameraPosition;
        break;
      }

      // optional .tVector3 CameraPosition = 10;
      case 10: {
        if (tag == 82) {
         parse_CameraPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameraposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_LightPosition;
        break;
      }

      // optional .tVector3 LightPosition = 11;
      case 11: {
        if (tag == 90) {
         parse_LightPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lightposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_AxisScl;
        break;
      }

      // optional float AxisScl = 12;
      case 12: {
        if (tag == 101) {
         parse_AxisScl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &axisscl_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_XemakosExample;
        break;
      }

      // optional bool XemakosExample = 13;
      case 13: {
        if (tag == 104) {
         parse_XemakosExample:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xemakosexample_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ShowWireframe;
        break;
      }

      // optional bool ShowWireframe = 14;
      case 14: {
        if (tag == 112) {
         parse_ShowWireframe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showwireframe_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_CageOpacity;
        break;
      }

      // optional float CageOpacity = 15;
      case 15: {
        if (tag == 125) {
         parse_CageOpacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cageopacity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_DiffuseGIIntensity;
        break;
      }

      // optional float DiffuseGIIntensity = 16;
      case 16: {
        if (tag == 133) {
         parse_DiffuseGIIntensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &diffusegiintensity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_ShowAO;
        break;
      }

      // optional bool ShowAO = 17;
      case 17: {
        if (tag == 136) {
         parse_ShowAO:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showao_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_SSAOContrast;
        break;
      }

      // optional float SSAOContrast = 18;
      case 18: {
        if (tag == 149) {
         parse_SSAOContrast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ssaocontrast_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_ShadowArea;
        break;
      }

      // optional float ShadowArea = 19;
      case 19: {
        if (tag == 157) {
         parse_ShadowArea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shadowarea_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_LightIndiretIntensity;
        break;
      }

      // optional float LightIndiretIntensity = 20;
      case 20: {
        if (tag == 165) {
         parse_LightIndiretIntensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lightindiretintensity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_ShowHighpolys;
        break;
      }

      // optional bool ShowHighpolys = 21;
      case 21: {
        if (tag == 168) {
         parse_ShowHighpolys:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showhighpolys_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_ShowStarfield;
        break;
      }

      // optional bool ShowStarfield = 22;
      case 22: {
        if (tag == 176) {
         parse_ShowStarfield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showstarfield_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_ShowBlockers;
        break;
      }

      // optional bool ShowBlockers = 23;
      case 23: {
        if (tag == 184) {
         parse_ShowBlockers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showblockers_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_HDRThreshold;
        break;
      }

      // optional float HDRThreshold = 24;
      case 24: {
        if (tag == 197) {
         parse_HDRThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hdrthreshold_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_SSAOBright;
        break;
      }

      // optional float SSAOBright = 25;
      case 25: {
        if (tag == 205) {
         parse_SSAOBright:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ssaobright_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(213)) goto parse_SSAOBlurRadius;
        break;
      }

      // optional float SSAOBlurRadius = 26;
      case 26: {
        if (tag == 213) {
         parse_SSAOBlurRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ssaoblurradius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_ShowGrid;
        break;
      }

      // optional bool ShowGrid = 27;
      case 27: {
        if (tag == 216) {
         parse_ShowGrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showgrid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(229)) goto parse_ParallaxStrength;
        break;
      }

      // optional float ParallaxStrength = 28;
      case 28: {
        if (tag == 229) {
         parse_ParallaxStrength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &parallaxstrength_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(237)) goto parse_SSAOAtten;
        break;
      }

      // optional float SSAOAtten = 29;
      case 29: {
        if (tag == 237) {
         parse_SSAOAtten:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ssaoatten_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_CameraOrbitDistance;
        break;
      }

      // optional float CameraOrbitDistance = 30;
      case 30: {
        if (tag == 245) {
         parse_CameraOrbitDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cameraorbitdistance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_UseGlow;
        break;
      }

      // optional bool UseGlow = 31;
      case 31: {
        if (tag == 248) {
         parse_UseGlow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useglow_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_SSAOEnabled;
        break;
      }

      // optional bool SSAOEnabled = 32;
      case 32: {
        if (tag == 256) {
         parse_SSAOEnabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ssaoenabled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(269)) goto parse_ShadowBias;
        break;
      }

      // optional float ShadowBias = 33;
      case 33: {
        if (tag == 269) {
         parse_ShadowBias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shadowbias_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(277)) goto parse_SSAORadius;
        break;
      }

      // optional float SSAORadius = 34;
      case 34: {
        if (tag == 277) {
         parse_SSAORadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ssaoradius_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(285)) goto parse_LightIntensity;
        break;
      }

      // optional float LightIntensity = 35;
      case 35: {
        if (tag == 285) {
         parse_LightIntensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lightintensity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(293)) goto parse_Exposure;
        break;
      }

      // optional float Exposure = 36;
      case 36: {
        if (tag == 293) {
         parse_Exposure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exposure_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_CameraOrbitAutoCenter;
        break;
      }

      // optional bool CameraOrbitAutoCenter = 37;
      case 37: {
        if (tag == 296) {
         parse_CameraOrbitAutoCenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cameraorbitautocenter_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_CastShadows;
        break;
      }

      // optional bool CastShadows = 38;
      case 38: {
        if (tag == 304) {
         parse_CastShadows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &castshadows_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_ShowNormals;
        break;
      }

      // optional bool ShowNormals = 39;
      case 39: {
        if (tag == 312) {
         parse_ShowNormals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shownormals_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_MaxTessellationLevel;
        break;
      }

      // optional int64 MaxTessellationLevel = 40;
      case 40: {
        if (tag == 320) {
         parse_MaxTessellationLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxtessellationlevel_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_ShowTangents;
        break;
      }

      // optional bool ShowTangents = 41;
      case 41: {
        if (tag == 328) {
         parse_ShowTangents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showtangents_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(341)) goto parse_GlowIntensity;
        break;
      }

      // optional float GlowIntensity = 42;
      case 42: {
        if (tag == 341) {
         parse_GlowIntensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &glowintensity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tViewer3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tViewer3D)
  return false;
#undef DO_
}

void tViewer3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tViewer3D)
  // optional .tRGB8 LightAmbientColor = 1;
  if (this->has_lightambientcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->lightambientcolor_, output);
  }

  // optional .tRGB8 LightDiffuseColor = 2;
  if (this->has_lightdiffusecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lightdiffusecolor_, output);
  }

  // optional .tRGB8 LightSpecularColor = 3;
  if (this->has_lightspecularcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->lightspecularcolor_, output);
  }

  // optional .tRGB8 LightSecondaryColor = 4;
  if (this->has_lightsecondarycolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->lightsecondarycolor_, output);
  }

  // optional .tRGB8 LightTertiaryColor = 5;
  if (this->has_lighttertiarycolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->lighttertiarycolor_, output);
  }

  // optional .tRGB8 BackgroundColor = 6;
  if (this->has_backgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->backgroundcolor_, output);
  }

  // optional .tRGB8 GridColor = 7;
  if (this->has_gridcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->gridcolor_, output);
  }

  // optional .tRGB8 CageColor = 8;
  if (this->has_cagecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->cagecolor_, output);
  }

  // optional .tMatrix CameraRotation = 9;
  if (this->has_camerarotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->camerarotation_, output);
  }

  // optional .tVector3 CameraPosition = 10;
  if (this->has_cameraposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->cameraposition_, output);
  }

  // optional .tVector3 LightPosition = 11;
  if (this->has_lightposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->lightposition_, output);
  }

  // optional float AxisScl = 12;
  if (this->axisscl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->axisscl(), output);
  }

  // optional bool XemakosExample = 13;
  if (this->xemakosexample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->xemakosexample(), output);
  }

  // optional bool ShowWireframe = 14;
  if (this->showwireframe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->showwireframe(), output);
  }

  // optional float CageOpacity = 15;
  if (this->cageopacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->cageopacity(), output);
  }

  // optional float DiffuseGIIntensity = 16;
  if (this->diffusegiintensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->diffusegiintensity(), output);
  }

  // optional bool ShowAO = 17;
  if (this->showao() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->showao(), output);
  }

  // optional float SSAOContrast = 18;
  if (this->ssaocontrast() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->ssaocontrast(), output);
  }

  // optional float ShadowArea = 19;
  if (this->shadowarea() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->shadowarea(), output);
  }

  // optional float LightIndiretIntensity = 20;
  if (this->lightindiretintensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->lightindiretintensity(), output);
  }

  // optional bool ShowHighpolys = 21;
  if (this->showhighpolys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->showhighpolys(), output);
  }

  // optional bool ShowStarfield = 22;
  if (this->showstarfield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->showstarfield(), output);
  }

  // optional bool ShowBlockers = 23;
  if (this->showblockers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->showblockers(), output);
  }

  // optional float HDRThreshold = 24;
  if (this->hdrthreshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->hdrthreshold(), output);
  }

  // optional float SSAOBright = 25;
  if (this->ssaobright() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->ssaobright(), output);
  }

  // optional float SSAOBlurRadius = 26;
  if (this->ssaoblurradius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->ssaoblurradius(), output);
  }

  // optional bool ShowGrid = 27;
  if (this->showgrid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->showgrid(), output);
  }

  // optional float ParallaxStrength = 28;
  if (this->parallaxstrength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->parallaxstrength(), output);
  }

  // optional float SSAOAtten = 29;
  if (this->ssaoatten() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->ssaoatten(), output);
  }

  // optional float CameraOrbitDistance = 30;
  if (this->cameraorbitdistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->cameraorbitdistance(), output);
  }

  // optional bool UseGlow = 31;
  if (this->useglow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->useglow(), output);
  }

  // optional bool SSAOEnabled = 32;
  if (this->ssaoenabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->ssaoenabled(), output);
  }

  // optional float ShadowBias = 33;
  if (this->shadowbias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->shadowbias(), output);
  }

  // optional float SSAORadius = 34;
  if (this->ssaoradius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->ssaoradius(), output);
  }

  // optional float LightIntensity = 35;
  if (this->lightintensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->lightintensity(), output);
  }

  // optional float Exposure = 36;
  if (this->exposure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->exposure(), output);
  }

  // optional bool CameraOrbitAutoCenter = 37;
  if (this->cameraorbitautocenter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->cameraorbitautocenter(), output);
  }

  // optional bool CastShadows = 38;
  if (this->castshadows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->castshadows(), output);
  }

  // optional bool ShowNormals = 39;
  if (this->shownormals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->shownormals(), output);
  }

  // optional int64 MaxTessellationLevel = 40;
  if (this->maxtessellationlevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->maxtessellationlevel(), output);
  }

  // optional bool ShowTangents = 41;
  if (this->showtangents() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->showtangents(), output);
  }

  // optional float GlowIntensity = 42;
  if (this->glowintensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->glowintensity(), output);
  }

  // @@protoc_insertion_point(serialize_end:tViewer3D)
}

::google::protobuf::uint8* tViewer3D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tViewer3D)
  // optional .tRGB8 LightAmbientColor = 1;
  if (this->has_lightambientcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->lightambientcolor_, false, target);
  }

  // optional .tRGB8 LightDiffuseColor = 2;
  if (this->has_lightdiffusecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->lightdiffusecolor_, false, target);
  }

  // optional .tRGB8 LightSpecularColor = 3;
  if (this->has_lightspecularcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->lightspecularcolor_, false, target);
  }

  // optional .tRGB8 LightSecondaryColor = 4;
  if (this->has_lightsecondarycolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->lightsecondarycolor_, false, target);
  }

  // optional .tRGB8 LightTertiaryColor = 5;
  if (this->has_lighttertiarycolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->lighttertiarycolor_, false, target);
  }

  // optional .tRGB8 BackgroundColor = 6;
  if (this->has_backgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->backgroundcolor_, false, target);
  }

  // optional .tRGB8 GridColor = 7;
  if (this->has_gridcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->gridcolor_, false, target);
  }

  // optional .tRGB8 CageColor = 8;
  if (this->has_cagecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->cagecolor_, false, target);
  }

  // optional .tMatrix CameraRotation = 9;
  if (this->has_camerarotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->camerarotation_, false, target);
  }

  // optional .tVector3 CameraPosition = 10;
  if (this->has_cameraposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->cameraposition_, false, target);
  }

  // optional .tVector3 LightPosition = 11;
  if (this->has_lightposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->lightposition_, false, target);
  }

  // optional float AxisScl = 12;
  if (this->axisscl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->axisscl(), target);
  }

  // optional bool XemakosExample = 13;
  if (this->xemakosexample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->xemakosexample(), target);
  }

  // optional bool ShowWireframe = 14;
  if (this->showwireframe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->showwireframe(), target);
  }

  // optional float CageOpacity = 15;
  if (this->cageopacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->cageopacity(), target);
  }

  // optional float DiffuseGIIntensity = 16;
  if (this->diffusegiintensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->diffusegiintensity(), target);
  }

  // optional bool ShowAO = 17;
  if (this->showao() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->showao(), target);
  }

  // optional float SSAOContrast = 18;
  if (this->ssaocontrast() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->ssaocontrast(), target);
  }

  // optional float ShadowArea = 19;
  if (this->shadowarea() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->shadowarea(), target);
  }

  // optional float LightIndiretIntensity = 20;
  if (this->lightindiretintensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->lightindiretintensity(), target);
  }

  // optional bool ShowHighpolys = 21;
  if (this->showhighpolys() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->showhighpolys(), target);
  }

  // optional bool ShowStarfield = 22;
  if (this->showstarfield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->showstarfield(), target);
  }

  // optional bool ShowBlockers = 23;
  if (this->showblockers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->showblockers(), target);
  }

  // optional float HDRThreshold = 24;
  if (this->hdrthreshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->hdrthreshold(), target);
  }

  // optional float SSAOBright = 25;
  if (this->ssaobright() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->ssaobright(), target);
  }

  // optional float SSAOBlurRadius = 26;
  if (this->ssaoblurradius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->ssaoblurradius(), target);
  }

  // optional bool ShowGrid = 27;
  if (this->showgrid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->showgrid(), target);
  }

  // optional float ParallaxStrength = 28;
  if (this->parallaxstrength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->parallaxstrength(), target);
  }

  // optional float SSAOAtten = 29;
  if (this->ssaoatten() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->ssaoatten(), target);
  }

  // optional float CameraOrbitDistance = 30;
  if (this->cameraorbitdistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->cameraorbitdistance(), target);
  }

  // optional bool UseGlow = 31;
  if (this->useglow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->useglow(), target);
  }

  // optional bool SSAOEnabled = 32;
  if (this->ssaoenabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->ssaoenabled(), target);
  }

  // optional float ShadowBias = 33;
  if (this->shadowbias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->shadowbias(), target);
  }

  // optional float SSAORadius = 34;
  if (this->ssaoradius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->ssaoradius(), target);
  }

  // optional float LightIntensity = 35;
  if (this->lightintensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->lightintensity(), target);
  }

  // optional float Exposure = 36;
  if (this->exposure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->exposure(), target);
  }

  // optional bool CameraOrbitAutoCenter = 37;
  if (this->cameraorbitautocenter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->cameraorbitautocenter(), target);
  }

  // optional bool CastShadows = 38;
  if (this->castshadows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->castshadows(), target);
  }

  // optional bool ShowNormals = 39;
  if (this->shownormals() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->shownormals(), target);
  }

  // optional int64 MaxTessellationLevel = 40;
  if (this->maxtessellationlevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->maxtessellationlevel(), target);
  }

  // optional bool ShowTangents = 41;
  if (this->showtangents() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->showtangents(), target);
  }

  // optional float GlowIntensity = 42;
  if (this->glowintensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->glowintensity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tViewer3D)
  return target;
}

int tViewer3D::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tViewer3D)
  int total_size = 0;

  // optional .tRGB8 LightAmbientColor = 1;
  if (this->has_lightambientcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lightambientcolor_);
  }

  // optional .tRGB8 LightDiffuseColor = 2;
  if (this->has_lightdiffusecolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lightdiffusecolor_);
  }

  // optional .tRGB8 LightSpecularColor = 3;
  if (this->has_lightspecularcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lightspecularcolor_);
  }

  // optional .tRGB8 LightSecondaryColor = 4;
  if (this->has_lightsecondarycolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lightsecondarycolor_);
  }

  // optional .tRGB8 LightTertiaryColor = 5;
  if (this->has_lighttertiarycolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lighttertiarycolor_);
  }

  // optional .tRGB8 BackgroundColor = 6;
  if (this->has_backgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->backgroundcolor_);
  }

  // optional .tRGB8 GridColor = 7;
  if (this->has_gridcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gridcolor_);
  }

  // optional .tRGB8 CageColor = 8;
  if (this->has_cagecolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cagecolor_);
  }

  // optional .tMatrix CameraRotation = 9;
  if (this->has_camerarotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->camerarotation_);
  }

  // optional .tVector3 CameraPosition = 10;
  if (this->has_cameraposition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cameraposition_);
  }

  // optional .tVector3 LightPosition = 11;
  if (this->has_lightposition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lightposition_);
  }

  // optional float AxisScl = 12;
  if (this->axisscl() != 0) {
    total_size += 1 + 4;
  }

  // optional bool XemakosExample = 13;
  if (this->xemakosexample() != 0) {
    total_size += 1 + 1;
  }

  // optional bool ShowWireframe = 14;
  if (this->showwireframe() != 0) {
    total_size += 1 + 1;
  }

  // optional float CageOpacity = 15;
  if (this->cageopacity() != 0) {
    total_size += 1 + 4;
  }

  // optional float DiffuseGIIntensity = 16;
  if (this->diffusegiintensity() != 0) {
    total_size += 2 + 4;
  }

  // optional bool ShowAO = 17;
  if (this->showao() != 0) {
    total_size += 2 + 1;
  }

  // optional float SSAOContrast = 18;
  if (this->ssaocontrast() != 0) {
    total_size += 2 + 4;
  }

  // optional float ShadowArea = 19;
  if (this->shadowarea() != 0) {
    total_size += 2 + 4;
  }

  // optional float LightIndiretIntensity = 20;
  if (this->lightindiretintensity() != 0) {
    total_size += 2 + 4;
  }

  // optional bool ShowHighpolys = 21;
  if (this->showhighpolys() != 0) {
    total_size += 2 + 1;
  }

  // optional bool ShowStarfield = 22;
  if (this->showstarfield() != 0) {
    total_size += 2 + 1;
  }

  // optional bool ShowBlockers = 23;
  if (this->showblockers() != 0) {
    total_size += 2 + 1;
  }

  // optional float HDRThreshold = 24;
  if (this->hdrthreshold() != 0) {
    total_size += 2 + 4;
  }

  // optional float SSAOBright = 25;
  if (this->ssaobright() != 0) {
    total_size += 2 + 4;
  }

  // optional float SSAOBlurRadius = 26;
  if (this->ssaoblurradius() != 0) {
    total_size += 2 + 4;
  }

  // optional bool ShowGrid = 27;
  if (this->showgrid() != 0) {
    total_size += 2 + 1;
  }

  // optional float ParallaxStrength = 28;
  if (this->parallaxstrength() != 0) {
    total_size += 2 + 4;
  }

  // optional float SSAOAtten = 29;
  if (this->ssaoatten() != 0) {
    total_size += 2 + 4;
  }

  // optional float CameraOrbitDistance = 30;
  if (this->cameraorbitdistance() != 0) {
    total_size += 2 + 4;
  }

  // optional bool UseGlow = 31;
  if (this->useglow() != 0) {
    total_size += 2 + 1;
  }

  // optional bool SSAOEnabled = 32;
  if (this->ssaoenabled() != 0) {
    total_size += 2 + 1;
  }

  // optional float ShadowBias = 33;
  if (this->shadowbias() != 0) {
    total_size += 2 + 4;
  }

  // optional float SSAORadius = 34;
  if (this->ssaoradius() != 0) {
    total_size += 2 + 4;
  }

  // optional float LightIntensity = 35;
  if (this->lightintensity() != 0) {
    total_size += 2 + 4;
  }

  // optional float Exposure = 36;
  if (this->exposure() != 0) {
    total_size += 2 + 4;
  }

  // optional bool CameraOrbitAutoCenter = 37;
  if (this->cameraorbitautocenter() != 0) {
    total_size += 2 + 1;
  }

  // optional bool CastShadows = 38;
  if (this->castshadows() != 0) {
    total_size += 2 + 1;
  }

  // optional bool ShowNormals = 39;
  if (this->shownormals() != 0) {
    total_size += 2 + 1;
  }

  // optional int64 MaxTessellationLevel = 40;
  if (this->maxtessellationlevel() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->maxtessellationlevel());
  }

  // optional bool ShowTangents = 41;
  if (this->showtangents() != 0) {
    total_size += 2 + 1;
  }

  // optional float GlowIntensity = 42;
  if (this->glowintensity() != 0) {
    total_size += 2 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tViewer3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tViewer3D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const tViewer3D* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const tViewer3D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tViewer3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tViewer3D)
    MergeFrom(*source);
  }
}

void tViewer3D::MergeFrom(const tViewer3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tViewer3D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_lightambientcolor()) {
    mutable_lightambientcolor()->::tRGB8::MergeFrom(from.lightambientcolor());
  }
  if (from.has_lightdiffusecolor()) {
    mutable_lightdiffusecolor()->::tRGB8::MergeFrom(from.lightdiffusecolor());
  }
  if (from.has_lightspecularcolor()) {
    mutable_lightspecularcolor()->::tRGB8::MergeFrom(from.lightspecularcolor());
  }
  if (from.has_lightsecondarycolor()) {
    mutable_lightsecondarycolor()->::tRGB8::MergeFrom(from.lightsecondarycolor());
  }
  if (from.has_lighttertiarycolor()) {
    mutable_lighttertiarycolor()->::tRGB8::MergeFrom(from.lighttertiarycolor());
  }
  if (from.has_backgroundcolor()) {
    mutable_backgroundcolor()->::tRGB8::MergeFrom(from.backgroundcolor());
  }
  if (from.has_gridcolor()) {
    mutable_gridcolor()->::tRGB8::MergeFrom(from.gridcolor());
  }
  if (from.has_cagecolor()) {
    mutable_cagecolor()->::tRGB8::MergeFrom(from.cagecolor());
  }
  if (from.has_camerarotation()) {
    mutable_camerarotation()->::tMatrix::MergeFrom(from.camerarotation());
  }
  if (from.has_cameraposition()) {
    mutable_cameraposition()->::tVector3::MergeFrom(from.cameraposition());
  }
  if (from.has_lightposition()) {
    mutable_lightposition()->::tVector3::MergeFrom(from.lightposition());
  }
  if (from.axisscl() != 0) {
    set_axisscl(from.axisscl());
  }
  if (from.xemakosexample() != 0) {
    set_xemakosexample(from.xemakosexample());
  }
  if (from.showwireframe() != 0) {
    set_showwireframe(from.showwireframe());
  }
  if (from.cageopacity() != 0) {
    set_cageopacity(from.cageopacity());
  }
  if (from.diffusegiintensity() != 0) {
    set_diffusegiintensity(from.diffusegiintensity());
  }
  if (from.showao() != 0) {
    set_showao(from.showao());
  }
  if (from.ssaocontrast() != 0) {
    set_ssaocontrast(from.ssaocontrast());
  }
  if (from.shadowarea() != 0) {
    set_shadowarea(from.shadowarea());
  }
  if (from.lightindiretintensity() != 0) {
    set_lightindiretintensity(from.lightindiretintensity());
  }
  if (from.showhighpolys() != 0) {
    set_showhighpolys(from.showhighpolys());
  }
  if (from.showstarfield() != 0) {
    set_showstarfield(from.showstarfield());
  }
  if (from.showblockers() != 0) {
    set_showblockers(from.showblockers());
  }
  if (from.hdrthreshold() != 0) {
    set_hdrthreshold(from.hdrthreshold());
  }
  if (from.ssaobright() != 0) {
    set_ssaobright(from.ssaobright());
  }
  if (from.ssaoblurradius() != 0) {
    set_ssaoblurradius(from.ssaoblurradius());
  }
  if (from.showgrid() != 0) {
    set_showgrid(from.showgrid());
  }
  if (from.parallaxstrength() != 0) {
    set_parallaxstrength(from.parallaxstrength());
  }
  if (from.ssaoatten() != 0) {
    set_ssaoatten(from.ssaoatten());
  }
  if (from.cameraorbitdistance() != 0) {
    set_cameraorbitdistance(from.cameraorbitdistance());
  }
  if (from.useglow() != 0) {
    set_useglow(from.useglow());
  }
  if (from.ssaoenabled() != 0) {
    set_ssaoenabled(from.ssaoenabled());
  }
  if (from.shadowbias() != 0) {
    set_shadowbias(from.shadowbias());
  }
  if (from.ssaoradius() != 0) {
    set_ssaoradius(from.ssaoradius());
  }
  if (from.lightintensity() != 0) {
    set_lightintensity(from.lightintensity());
  }
  if (from.exposure() != 0) {
    set_exposure(from.exposure());
  }
  if (from.cameraorbitautocenter() != 0) {
    set_cameraorbitautocenter(from.cameraorbitautocenter());
  }
  if (from.castshadows() != 0) {
    set_castshadows(from.castshadows());
  }
  if (from.shownormals() != 0) {
    set_shownormals(from.shownormals());
  }
  if (from.maxtessellationlevel() != 0) {
    set_maxtessellationlevel(from.maxtessellationlevel());
  }
  if (from.showtangents() != 0) {
    set_showtangents(from.showtangents());
  }
  if (from.glowintensity() != 0) {
    set_glowintensity(from.glowintensity());
  }
}

void tViewer3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tViewer3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tViewer3D::CopyFrom(const tViewer3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tViewer3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tViewer3D::IsInitialized() const {

  return true;
}

void tViewer3D::Swap(tViewer3D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tViewer3D::InternalSwap(tViewer3D* other) {
  std::swap(lightambientcolor_, other->lightambientcolor_);
  std::swap(lightdiffusecolor_, other->lightdiffusecolor_);
  std::swap(lightspecularcolor_, other->lightspecularcolor_);
  std::swap(lightsecondarycolor_, other->lightsecondarycolor_);
  std::swap(lighttertiarycolor_, other->lighttertiarycolor_);
  std::swap(backgroundcolor_, other->backgroundcolor_);
  std::swap(gridcolor_, other->gridcolor_);
  std::swap(cagecolor_, other->cagecolor_);
  std::swap(camerarotation_, other->camerarotation_);
  std::swap(cameraposition_, other->cameraposition_);
  std::swap(lightposition_, other->lightposition_);
  std::swap(axisscl_, other->axisscl_);
  std::swap(xemakosexample_, other->xemakosexample_);
  std::swap(showwireframe_, other->showwireframe_);
  std::swap(cageopacity_, other->cageopacity_);
  std::swap(diffusegiintensity_, other->diffusegiintensity_);
  std::swap(showao_, other->showao_);
  std::swap(ssaocontrast_, other->ssaocontrast_);
  std::swap(shadowarea_, other->shadowarea_);
  std::swap(lightindiretintensity_, other->lightindiretintensity_);
  std::swap(showhighpolys_, other->showhighpolys_);
  std::swap(showstarfield_, other->showstarfield_);
  std::swap(showblockers_, other->showblockers_);
  std::swap(hdrthreshold_, other->hdrthreshold_);
  std::swap(ssaobright_, other->ssaobright_);
  std::swap(ssaoblurradius_, other->ssaoblurradius_);
  std::swap(showgrid_, other->showgrid_);
  std::swap(parallaxstrength_, other->parallaxstrength_);
  std::swap(ssaoatten_, other->ssaoatten_);
  std::swap(cameraorbitdistance_, other->cameraorbitdistance_);
  std::swap(useglow_, other->useglow_);
  std::swap(ssaoenabled_, other->ssaoenabled_);
  std::swap(shadowbias_, other->shadowbias_);
  std::swap(ssaoradius_, other->ssaoradius_);
  std::swap(lightintensity_, other->lightintensity_);
  std::swap(exposure_, other->exposure_);
  std::swap(cameraorbitautocenter_, other->cameraorbitautocenter_);
  std::swap(castshadows_, other->castshadows_);
  std::swap(shownormals_, other->shownormals_);
  std::swap(maxtessellationlevel_, other->maxtessellationlevel_);
  std::swap(showtangents_, other->showtangents_);
  std::swap(glowintensity_, other->glowintensity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tViewer3D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tViewer3D_descriptor_;
  metadata.reflection = tViewer3D_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tViewer3D

// optional .tRGB8 LightAmbientColor = 1;
bool tViewer3D::has_lightambientcolor() const {
  return !_is_default_instance_ && lightambientcolor_ != NULL;
}
void tViewer3D::clear_lightambientcolor() {
  if (GetArenaNoVirtual() == NULL && lightambientcolor_ != NULL) delete lightambientcolor_;
  lightambientcolor_ = NULL;
}
const ::tRGB8& tViewer3D::lightambientcolor() const {
  // @@protoc_insertion_point(field_get:tViewer3D.LightAmbientColor)
  return lightambientcolor_ != NULL ? *lightambientcolor_ : *default_instance_->lightambientcolor_;
}
::tRGB8* tViewer3D::mutable_lightambientcolor() {
  
  if (lightambientcolor_ == NULL) {
    lightambientcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.LightAmbientColor)
  return lightambientcolor_;
}
::tRGB8* tViewer3D::release_lightambientcolor() {
  // @@protoc_insertion_point(field_release:tViewer3D.LightAmbientColor)
  
  ::tRGB8* temp = lightambientcolor_;
  lightambientcolor_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_lightambientcolor(::tRGB8* lightambientcolor) {
  delete lightambientcolor_;
  lightambientcolor_ = lightambientcolor;
  if (lightambientcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.LightAmbientColor)
}

// optional .tRGB8 LightDiffuseColor = 2;
bool tViewer3D::has_lightdiffusecolor() const {
  return !_is_default_instance_ && lightdiffusecolor_ != NULL;
}
void tViewer3D::clear_lightdiffusecolor() {
  if (GetArenaNoVirtual() == NULL && lightdiffusecolor_ != NULL) delete lightdiffusecolor_;
  lightdiffusecolor_ = NULL;
}
const ::tRGB8& tViewer3D::lightdiffusecolor() const {
  // @@protoc_insertion_point(field_get:tViewer3D.LightDiffuseColor)
  return lightdiffusecolor_ != NULL ? *lightdiffusecolor_ : *default_instance_->lightdiffusecolor_;
}
::tRGB8* tViewer3D::mutable_lightdiffusecolor() {
  
  if (lightdiffusecolor_ == NULL) {
    lightdiffusecolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.LightDiffuseColor)
  return lightdiffusecolor_;
}
::tRGB8* tViewer3D::release_lightdiffusecolor() {
  // @@protoc_insertion_point(field_release:tViewer3D.LightDiffuseColor)
  
  ::tRGB8* temp = lightdiffusecolor_;
  lightdiffusecolor_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_lightdiffusecolor(::tRGB8* lightdiffusecolor) {
  delete lightdiffusecolor_;
  lightdiffusecolor_ = lightdiffusecolor;
  if (lightdiffusecolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.LightDiffuseColor)
}

// optional .tRGB8 LightSpecularColor = 3;
bool tViewer3D::has_lightspecularcolor() const {
  return !_is_default_instance_ && lightspecularcolor_ != NULL;
}
void tViewer3D::clear_lightspecularcolor() {
  if (GetArenaNoVirtual() == NULL && lightspecularcolor_ != NULL) delete lightspecularcolor_;
  lightspecularcolor_ = NULL;
}
const ::tRGB8& tViewer3D::lightspecularcolor() const {
  // @@protoc_insertion_point(field_get:tViewer3D.LightSpecularColor)
  return lightspecularcolor_ != NULL ? *lightspecularcolor_ : *default_instance_->lightspecularcolor_;
}
::tRGB8* tViewer3D::mutable_lightspecularcolor() {
  
  if (lightspecularcolor_ == NULL) {
    lightspecularcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.LightSpecularColor)
  return lightspecularcolor_;
}
::tRGB8* tViewer3D::release_lightspecularcolor() {
  // @@protoc_insertion_point(field_release:tViewer3D.LightSpecularColor)
  
  ::tRGB8* temp = lightspecularcolor_;
  lightspecularcolor_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_lightspecularcolor(::tRGB8* lightspecularcolor) {
  delete lightspecularcolor_;
  lightspecularcolor_ = lightspecularcolor;
  if (lightspecularcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.LightSpecularColor)
}

// optional .tRGB8 LightSecondaryColor = 4;
bool tViewer3D::has_lightsecondarycolor() const {
  return !_is_default_instance_ && lightsecondarycolor_ != NULL;
}
void tViewer3D::clear_lightsecondarycolor() {
  if (GetArenaNoVirtual() == NULL && lightsecondarycolor_ != NULL) delete lightsecondarycolor_;
  lightsecondarycolor_ = NULL;
}
const ::tRGB8& tViewer3D::lightsecondarycolor() const {
  // @@protoc_insertion_point(field_get:tViewer3D.LightSecondaryColor)
  return lightsecondarycolor_ != NULL ? *lightsecondarycolor_ : *default_instance_->lightsecondarycolor_;
}
::tRGB8* tViewer3D::mutable_lightsecondarycolor() {
  
  if (lightsecondarycolor_ == NULL) {
    lightsecondarycolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.LightSecondaryColor)
  return lightsecondarycolor_;
}
::tRGB8* tViewer3D::release_lightsecondarycolor() {
  // @@protoc_insertion_point(field_release:tViewer3D.LightSecondaryColor)
  
  ::tRGB8* temp = lightsecondarycolor_;
  lightsecondarycolor_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_lightsecondarycolor(::tRGB8* lightsecondarycolor) {
  delete lightsecondarycolor_;
  lightsecondarycolor_ = lightsecondarycolor;
  if (lightsecondarycolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.LightSecondaryColor)
}

// optional .tRGB8 LightTertiaryColor = 5;
bool tViewer3D::has_lighttertiarycolor() const {
  return !_is_default_instance_ && lighttertiarycolor_ != NULL;
}
void tViewer3D::clear_lighttertiarycolor() {
  if (GetArenaNoVirtual() == NULL && lighttertiarycolor_ != NULL) delete lighttertiarycolor_;
  lighttertiarycolor_ = NULL;
}
const ::tRGB8& tViewer3D::lighttertiarycolor() const {
  // @@protoc_insertion_point(field_get:tViewer3D.LightTertiaryColor)
  return lighttertiarycolor_ != NULL ? *lighttertiarycolor_ : *default_instance_->lighttertiarycolor_;
}
::tRGB8* tViewer3D::mutable_lighttertiarycolor() {
  
  if (lighttertiarycolor_ == NULL) {
    lighttertiarycolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.LightTertiaryColor)
  return lighttertiarycolor_;
}
::tRGB8* tViewer3D::release_lighttertiarycolor() {
  // @@protoc_insertion_point(field_release:tViewer3D.LightTertiaryColor)
  
  ::tRGB8* temp = lighttertiarycolor_;
  lighttertiarycolor_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_lighttertiarycolor(::tRGB8* lighttertiarycolor) {
  delete lighttertiarycolor_;
  lighttertiarycolor_ = lighttertiarycolor;
  if (lighttertiarycolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.LightTertiaryColor)
}

// optional .tRGB8 BackgroundColor = 6;
bool tViewer3D::has_backgroundcolor() const {
  return !_is_default_instance_ && backgroundcolor_ != NULL;
}
void tViewer3D::clear_backgroundcolor() {
  if (GetArenaNoVirtual() == NULL && backgroundcolor_ != NULL) delete backgroundcolor_;
  backgroundcolor_ = NULL;
}
const ::tRGB8& tViewer3D::backgroundcolor() const {
  // @@protoc_insertion_point(field_get:tViewer3D.BackgroundColor)
  return backgroundcolor_ != NULL ? *backgroundcolor_ : *default_instance_->backgroundcolor_;
}
::tRGB8* tViewer3D::mutable_backgroundcolor() {
  
  if (backgroundcolor_ == NULL) {
    backgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.BackgroundColor)
  return backgroundcolor_;
}
::tRGB8* tViewer3D::release_backgroundcolor() {
  // @@protoc_insertion_point(field_release:tViewer3D.BackgroundColor)
  
  ::tRGB8* temp = backgroundcolor_;
  backgroundcolor_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_backgroundcolor(::tRGB8* backgroundcolor) {
  delete backgroundcolor_;
  backgroundcolor_ = backgroundcolor;
  if (backgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.BackgroundColor)
}

// optional .tRGB8 GridColor = 7;
bool tViewer3D::has_gridcolor() const {
  return !_is_default_instance_ && gridcolor_ != NULL;
}
void tViewer3D::clear_gridcolor() {
  if (GetArenaNoVirtual() == NULL && gridcolor_ != NULL) delete gridcolor_;
  gridcolor_ = NULL;
}
const ::tRGB8& tViewer3D::gridcolor() const {
  // @@protoc_insertion_point(field_get:tViewer3D.GridColor)
  return gridcolor_ != NULL ? *gridcolor_ : *default_instance_->gridcolor_;
}
::tRGB8* tViewer3D::mutable_gridcolor() {
  
  if (gridcolor_ == NULL) {
    gridcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.GridColor)
  return gridcolor_;
}
::tRGB8* tViewer3D::release_gridcolor() {
  // @@protoc_insertion_point(field_release:tViewer3D.GridColor)
  
  ::tRGB8* temp = gridcolor_;
  gridcolor_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_gridcolor(::tRGB8* gridcolor) {
  delete gridcolor_;
  gridcolor_ = gridcolor;
  if (gridcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.GridColor)
}

// optional .tRGB8 CageColor = 8;
bool tViewer3D::has_cagecolor() const {
  return !_is_default_instance_ && cagecolor_ != NULL;
}
void tViewer3D::clear_cagecolor() {
  if (GetArenaNoVirtual() == NULL && cagecolor_ != NULL) delete cagecolor_;
  cagecolor_ = NULL;
}
const ::tRGB8& tViewer3D::cagecolor() const {
  // @@protoc_insertion_point(field_get:tViewer3D.CageColor)
  return cagecolor_ != NULL ? *cagecolor_ : *default_instance_->cagecolor_;
}
::tRGB8* tViewer3D::mutable_cagecolor() {
  
  if (cagecolor_ == NULL) {
    cagecolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.CageColor)
  return cagecolor_;
}
::tRGB8* tViewer3D::release_cagecolor() {
  // @@protoc_insertion_point(field_release:tViewer3D.CageColor)
  
  ::tRGB8* temp = cagecolor_;
  cagecolor_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_cagecolor(::tRGB8* cagecolor) {
  delete cagecolor_;
  cagecolor_ = cagecolor;
  if (cagecolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.CageColor)
}

// optional .tMatrix CameraRotation = 9;
bool tViewer3D::has_camerarotation() const {
  return !_is_default_instance_ && camerarotation_ != NULL;
}
void tViewer3D::clear_camerarotation() {
  if (GetArenaNoVirtual() == NULL && camerarotation_ != NULL) delete camerarotation_;
  camerarotation_ = NULL;
}
const ::tMatrix& tViewer3D::camerarotation() const {
  // @@protoc_insertion_point(field_get:tViewer3D.CameraRotation)
  return camerarotation_ != NULL ? *camerarotation_ : *default_instance_->camerarotation_;
}
::tMatrix* tViewer3D::mutable_camerarotation() {
  
  if (camerarotation_ == NULL) {
    camerarotation_ = new ::tMatrix;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.CameraRotation)
  return camerarotation_;
}
::tMatrix* tViewer3D::release_camerarotation() {
  // @@protoc_insertion_point(field_release:tViewer3D.CameraRotation)
  
  ::tMatrix* temp = camerarotation_;
  camerarotation_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_camerarotation(::tMatrix* camerarotation) {
  delete camerarotation_;
  camerarotation_ = camerarotation;
  if (camerarotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.CameraRotation)
}

// optional .tVector3 CameraPosition = 10;
bool tViewer3D::has_cameraposition() const {
  return !_is_default_instance_ && cameraposition_ != NULL;
}
void tViewer3D::clear_cameraposition() {
  if (GetArenaNoVirtual() == NULL && cameraposition_ != NULL) delete cameraposition_;
  cameraposition_ = NULL;
}
const ::tVector3& tViewer3D::cameraposition() const {
  // @@protoc_insertion_point(field_get:tViewer3D.CameraPosition)
  return cameraposition_ != NULL ? *cameraposition_ : *default_instance_->cameraposition_;
}
::tVector3* tViewer3D::mutable_cameraposition() {
  
  if (cameraposition_ == NULL) {
    cameraposition_ = new ::tVector3;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.CameraPosition)
  return cameraposition_;
}
::tVector3* tViewer3D::release_cameraposition() {
  // @@protoc_insertion_point(field_release:tViewer3D.CameraPosition)
  
  ::tVector3* temp = cameraposition_;
  cameraposition_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_cameraposition(::tVector3* cameraposition) {
  delete cameraposition_;
  cameraposition_ = cameraposition;
  if (cameraposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.CameraPosition)
}

// optional .tVector3 LightPosition = 11;
bool tViewer3D::has_lightposition() const {
  return !_is_default_instance_ && lightposition_ != NULL;
}
void tViewer3D::clear_lightposition() {
  if (GetArenaNoVirtual() == NULL && lightposition_ != NULL) delete lightposition_;
  lightposition_ = NULL;
}
const ::tVector3& tViewer3D::lightposition() const {
  // @@protoc_insertion_point(field_get:tViewer3D.LightPosition)
  return lightposition_ != NULL ? *lightposition_ : *default_instance_->lightposition_;
}
::tVector3* tViewer3D::mutable_lightposition() {
  
  if (lightposition_ == NULL) {
    lightposition_ = new ::tVector3;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.LightPosition)
  return lightposition_;
}
::tVector3* tViewer3D::release_lightposition() {
  // @@protoc_insertion_point(field_release:tViewer3D.LightPosition)
  
  ::tVector3* temp = lightposition_;
  lightposition_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_lightposition(::tVector3* lightposition) {
  delete lightposition_;
  lightposition_ = lightposition;
  if (lightposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.LightPosition)
}

// optional float AxisScl = 12;
void tViewer3D::clear_axisscl() {
  axisscl_ = 0;
}
 float tViewer3D::axisscl() const {
  // @@protoc_insertion_point(field_get:tViewer3D.AxisScl)
  return axisscl_;
}
 void tViewer3D::set_axisscl(float value) {
  
  axisscl_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.AxisScl)
}

// optional bool XemakosExample = 13;
void tViewer3D::clear_xemakosexample() {
  xemakosexample_ = false;
}
 bool tViewer3D::xemakosexample() const {
  // @@protoc_insertion_point(field_get:tViewer3D.XemakosExample)
  return xemakosexample_;
}
 void tViewer3D::set_xemakosexample(bool value) {
  
  xemakosexample_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.XemakosExample)
}

// optional bool ShowWireframe = 14;
void tViewer3D::clear_showwireframe() {
  showwireframe_ = false;
}
 bool tViewer3D::showwireframe() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShowWireframe)
  return showwireframe_;
}
 void tViewer3D::set_showwireframe(bool value) {
  
  showwireframe_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShowWireframe)
}

// optional float CageOpacity = 15;
void tViewer3D::clear_cageopacity() {
  cageopacity_ = 0;
}
 float tViewer3D::cageopacity() const {
  // @@protoc_insertion_point(field_get:tViewer3D.CageOpacity)
  return cageopacity_;
}
 void tViewer3D::set_cageopacity(float value) {
  
  cageopacity_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.CageOpacity)
}

// optional float DiffuseGIIntensity = 16;
void tViewer3D::clear_diffusegiintensity() {
  diffusegiintensity_ = 0;
}
 float tViewer3D::diffusegiintensity() const {
  // @@protoc_insertion_point(field_get:tViewer3D.DiffuseGIIntensity)
  return diffusegiintensity_;
}
 void tViewer3D::set_diffusegiintensity(float value) {
  
  diffusegiintensity_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.DiffuseGIIntensity)
}

// optional bool ShowAO = 17;
void tViewer3D::clear_showao() {
  showao_ = false;
}
 bool tViewer3D::showao() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShowAO)
  return showao_;
}
 void tViewer3D::set_showao(bool value) {
  
  showao_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShowAO)
}

// optional float SSAOContrast = 18;
void tViewer3D::clear_ssaocontrast() {
  ssaocontrast_ = 0;
}
 float tViewer3D::ssaocontrast() const {
  // @@protoc_insertion_point(field_get:tViewer3D.SSAOContrast)
  return ssaocontrast_;
}
 void tViewer3D::set_ssaocontrast(float value) {
  
  ssaocontrast_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.SSAOContrast)
}

// optional float ShadowArea = 19;
void tViewer3D::clear_shadowarea() {
  shadowarea_ = 0;
}
 float tViewer3D::shadowarea() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShadowArea)
  return shadowarea_;
}
 void tViewer3D::set_shadowarea(float value) {
  
  shadowarea_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShadowArea)
}

// optional float LightIndiretIntensity = 20;
void tViewer3D::clear_lightindiretintensity() {
  lightindiretintensity_ = 0;
}
 float tViewer3D::lightindiretintensity() const {
  // @@protoc_insertion_point(field_get:tViewer3D.LightIndiretIntensity)
  return lightindiretintensity_;
}
 void tViewer3D::set_lightindiretintensity(float value) {
  
  lightindiretintensity_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.LightIndiretIntensity)
}

// optional bool ShowHighpolys = 21;
void tViewer3D::clear_showhighpolys() {
  showhighpolys_ = false;
}
 bool tViewer3D::showhighpolys() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShowHighpolys)
  return showhighpolys_;
}
 void tViewer3D::set_showhighpolys(bool value) {
  
  showhighpolys_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShowHighpolys)
}

// optional bool ShowStarfield = 22;
void tViewer3D::clear_showstarfield() {
  showstarfield_ = false;
}
 bool tViewer3D::showstarfield() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShowStarfield)
  return showstarfield_;
}
 void tViewer3D::set_showstarfield(bool value) {
  
  showstarfield_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShowStarfield)
}

// optional bool ShowBlockers = 23;
void tViewer3D::clear_showblockers() {
  showblockers_ = false;
}
 bool tViewer3D::showblockers() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShowBlockers)
  return showblockers_;
}
 void tViewer3D::set_showblockers(bool value) {
  
  showblockers_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShowBlockers)
}

// optional float HDRThreshold = 24;
void tViewer3D::clear_hdrthreshold() {
  hdrthreshold_ = 0;
}
 float tViewer3D::hdrthreshold() const {
  // @@protoc_insertion_point(field_get:tViewer3D.HDRThreshold)
  return hdrthreshold_;
}
 void tViewer3D::set_hdrthreshold(float value) {
  
  hdrthreshold_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.HDRThreshold)
}

// optional float SSAOBright = 25;
void tViewer3D::clear_ssaobright() {
  ssaobright_ = 0;
}
 float tViewer3D::ssaobright() const {
  // @@protoc_insertion_point(field_get:tViewer3D.SSAOBright)
  return ssaobright_;
}
 void tViewer3D::set_ssaobright(float value) {
  
  ssaobright_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.SSAOBright)
}

// optional float SSAOBlurRadius = 26;
void tViewer3D::clear_ssaoblurradius() {
  ssaoblurradius_ = 0;
}
 float tViewer3D::ssaoblurradius() const {
  // @@protoc_insertion_point(field_get:tViewer3D.SSAOBlurRadius)
  return ssaoblurradius_;
}
 void tViewer3D::set_ssaoblurradius(float value) {
  
  ssaoblurradius_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.SSAOBlurRadius)
}

// optional bool ShowGrid = 27;
void tViewer3D::clear_showgrid() {
  showgrid_ = false;
}
 bool tViewer3D::showgrid() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShowGrid)
  return showgrid_;
}
 void tViewer3D::set_showgrid(bool value) {
  
  showgrid_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShowGrid)
}

// optional float ParallaxStrength = 28;
void tViewer3D::clear_parallaxstrength() {
  parallaxstrength_ = 0;
}
 float tViewer3D::parallaxstrength() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ParallaxStrength)
  return parallaxstrength_;
}
 void tViewer3D::set_parallaxstrength(float value) {
  
  parallaxstrength_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ParallaxStrength)
}

// optional float SSAOAtten = 29;
void tViewer3D::clear_ssaoatten() {
  ssaoatten_ = 0;
}
 float tViewer3D::ssaoatten() const {
  // @@protoc_insertion_point(field_get:tViewer3D.SSAOAtten)
  return ssaoatten_;
}
 void tViewer3D::set_ssaoatten(float value) {
  
  ssaoatten_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.SSAOAtten)
}

// optional float CameraOrbitDistance = 30;
void tViewer3D::clear_cameraorbitdistance() {
  cameraorbitdistance_ = 0;
}
 float tViewer3D::cameraorbitdistance() const {
  // @@protoc_insertion_point(field_get:tViewer3D.CameraOrbitDistance)
  return cameraorbitdistance_;
}
 void tViewer3D::set_cameraorbitdistance(float value) {
  
  cameraorbitdistance_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.CameraOrbitDistance)
}

// optional bool UseGlow = 31;
void tViewer3D::clear_useglow() {
  useglow_ = false;
}
 bool tViewer3D::useglow() const {
  // @@protoc_insertion_point(field_get:tViewer3D.UseGlow)
  return useglow_;
}
 void tViewer3D::set_useglow(bool value) {
  
  useglow_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.UseGlow)
}

// optional bool SSAOEnabled = 32;
void tViewer3D::clear_ssaoenabled() {
  ssaoenabled_ = false;
}
 bool tViewer3D::ssaoenabled() const {
  // @@protoc_insertion_point(field_get:tViewer3D.SSAOEnabled)
  return ssaoenabled_;
}
 void tViewer3D::set_ssaoenabled(bool value) {
  
  ssaoenabled_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.SSAOEnabled)
}

// optional float ShadowBias = 33;
void tViewer3D::clear_shadowbias() {
  shadowbias_ = 0;
}
 float tViewer3D::shadowbias() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShadowBias)
  return shadowbias_;
}
 void tViewer3D::set_shadowbias(float value) {
  
  shadowbias_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShadowBias)
}

// optional float SSAORadius = 34;
void tViewer3D::clear_ssaoradius() {
  ssaoradius_ = 0;
}
 float tViewer3D::ssaoradius() const {
  // @@protoc_insertion_point(field_get:tViewer3D.SSAORadius)
  return ssaoradius_;
}
 void tViewer3D::set_ssaoradius(float value) {
  
  ssaoradius_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.SSAORadius)
}

// optional float LightIntensity = 35;
void tViewer3D::clear_lightintensity() {
  lightintensity_ = 0;
}
 float tViewer3D::lightintensity() const {
  // @@protoc_insertion_point(field_get:tViewer3D.LightIntensity)
  return lightintensity_;
}
 void tViewer3D::set_lightintensity(float value) {
  
  lightintensity_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.LightIntensity)
}

// optional float Exposure = 36;
void tViewer3D::clear_exposure() {
  exposure_ = 0;
}
 float tViewer3D::exposure() const {
  // @@protoc_insertion_point(field_get:tViewer3D.Exposure)
  return exposure_;
}
 void tViewer3D::set_exposure(float value) {
  
  exposure_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.Exposure)
}

// optional bool CameraOrbitAutoCenter = 37;
void tViewer3D::clear_cameraorbitautocenter() {
  cameraorbitautocenter_ = false;
}
 bool tViewer3D::cameraorbitautocenter() const {
  // @@protoc_insertion_point(field_get:tViewer3D.CameraOrbitAutoCenter)
  return cameraorbitautocenter_;
}
 void tViewer3D::set_cameraorbitautocenter(bool value) {
  
  cameraorbitautocenter_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.CameraOrbitAutoCenter)
}

// optional bool CastShadows = 38;
void tViewer3D::clear_castshadows() {
  castshadows_ = false;
}
 bool tViewer3D::castshadows() const {
  // @@protoc_insertion_point(field_get:tViewer3D.CastShadows)
  return castshadows_;
}
 void tViewer3D::set_castshadows(bool value) {
  
  castshadows_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.CastShadows)
}

// optional bool ShowNormals = 39;
void tViewer3D::clear_shownormals() {
  shownormals_ = false;
}
 bool tViewer3D::shownormals() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShowNormals)
  return shownormals_;
}
 void tViewer3D::set_shownormals(bool value) {
  
  shownormals_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShowNormals)
}

// optional int64 MaxTessellationLevel = 40;
void tViewer3D::clear_maxtessellationlevel() {
  maxtessellationlevel_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 tViewer3D::maxtessellationlevel() const {
  // @@protoc_insertion_point(field_get:tViewer3D.MaxTessellationLevel)
  return maxtessellationlevel_;
}
 void tViewer3D::set_maxtessellationlevel(::google::protobuf::int64 value) {
  
  maxtessellationlevel_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.MaxTessellationLevel)
}

// optional bool ShowTangents = 41;
void tViewer3D::clear_showtangents() {
  showtangents_ = false;
}
 bool tViewer3D::showtangents() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShowTangents)
  return showtangents_;
}
 void tViewer3D::set_showtangents(bool value) {
  
  showtangents_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShowTangents)
}

// optional float GlowIntensity = 42;
void tViewer3D::clear_glowintensity() {
  glowintensity_ = 0;
}
 float tViewer3D::glowintensity() const {
  // @@protoc_insertion_point(field_get:tViewer3D.GlowIntensity)
  return glowintensity_;
}
 void tViewer3D::set_glowintensity(float value) {
  
  glowintensity_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.GlowIntensity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Settings::kHighPolyModelFieldNumber;
const int Settings::kLowPolyModelFieldNumber;
const int Settings::kGenerateMapsFieldNumber;
const int Settings::kDetailFieldNumber;
const int Settings::kViewer3DFieldNumber;
const int Settings::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Settings::Settings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Settings)
}

void Settings::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  highpolymodel_ = const_cast< ::tHighPolyModel*>(&::tHighPolyModel::default_instance());
  lowpolymodel_ = const_cast< ::tLowPolyModel*>(&::tLowPolyModel::default_instance());
  generatemaps_ = const_cast< ::tGenerateMaps*>(&::tGenerateMaps::default_instance());
  detail_ = const_cast< ::tDetail*>(&::tDetail::default_instance());
  viewer3d_ = const_cast< ::tViewer3D*>(&::tViewer3D::default_instance());
}

Settings::Settings(const Settings& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Settings)
}

void Settings::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  highpolymodel_ = NULL;
  lowpolymodel_ = NULL;
  generatemaps_ = NULL;
  detail_ = NULL;
  viewer3d_ = NULL;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Settings::~Settings() {
  // @@protoc_insertion_point(destructor:Settings)
  SharedDtor();
}

void Settings::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete highpolymodel_;
    delete lowpolymodel_;
    delete generatemaps_;
    delete detail_;
    delete viewer3d_;
  }
}

void Settings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Settings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Settings_descriptor_;
}

const Settings& Settings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xnormal_2eproto();
  return *default_instance_;
}

Settings* Settings::default_instance_ = NULL;

Settings* Settings::New(::google::protobuf::Arena* arena) const {
  Settings* n = new Settings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:Settings)
  if (GetArenaNoVirtual() == NULL && highpolymodel_ != NULL) delete highpolymodel_;
  highpolymodel_ = NULL;
  if (GetArenaNoVirtual() == NULL && lowpolymodel_ != NULL) delete lowpolymodel_;
  lowpolymodel_ = NULL;
  if (GetArenaNoVirtual() == NULL && generatemaps_ != NULL) delete generatemaps_;
  generatemaps_ = NULL;
  if (GetArenaNoVirtual() == NULL && detail_ != NULL) delete detail_;
  detail_ = NULL;
  if (GetArenaNoVirtual() == NULL && viewer3d_ != NULL) delete viewer3d_;
  viewer3d_ = NULL;
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Settings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Settings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tHighPolyModel HighPolyModel = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_highpolymodel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_LowPolyModel;
        break;
      }

      // optional .tLowPolyModel LowPolyModel = 2;
      case 2: {
        if (tag == 18) {
         parse_LowPolyModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lowpolymodel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GenerateMaps;
        break;
      }

      // optional .tGenerateMaps GenerateMaps = 3;
      case 3: {
        if (tag == 26) {
         parse_GenerateMaps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generatemaps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Detail;
        break;
      }

      // optional .tDetail Detail = 4;
      case 4: {
        if (tag == 34) {
         parse_Detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Viewer3D;
        break;
      }

      // optional .tViewer3D Viewer3D = 5;
      case 5: {
        if (tag == 42) {
         parse_Viewer3D:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viewer3d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Version;
        break;
      }

      // optional string Version = 6;
      case 6: {
        if (tag == 50) {
         parse_Version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Settings.Version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Settings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Settings)
  return false;
#undef DO_
}

void Settings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Settings)
  // optional .tHighPolyModel HighPolyModel = 1;
  if (this->has_highpolymodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->highpolymodel_, output);
  }

  // optional .tLowPolyModel LowPolyModel = 2;
  if (this->has_lowpolymodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lowpolymodel_, output);
  }

  // optional .tGenerateMaps GenerateMaps = 3;
  if (this->has_generatemaps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->generatemaps_, output);
  }

  // optional .tDetail Detail = 4;
  if (this->has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->detail_, output);
  }

  // optional .tViewer3D Viewer3D = 5;
  if (this->has_viewer3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->viewer3d_, output);
  }

  // optional string Version = 6;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Settings.Version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:Settings)
}

::google::protobuf::uint8* Settings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Settings)
  // optional .tHighPolyModel HighPolyModel = 1;
  if (this->has_highpolymodel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->highpolymodel_, false, target);
  }

  // optional .tLowPolyModel LowPolyModel = 2;
  if (this->has_lowpolymodel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->lowpolymodel_, false, target);
  }

  // optional .tGenerateMaps GenerateMaps = 3;
  if (this->has_generatemaps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->generatemaps_, false, target);
  }

  // optional .tDetail Detail = 4;
  if (this->has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->detail_, false, target);
  }

  // optional .tViewer3D Viewer3D = 5;
  if (this->has_viewer3d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->viewer3d_, false, target);
  }

  // optional string Version = 6;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Settings.Version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Settings)
  return target;
}

int Settings::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Settings)
  int total_size = 0;

  // optional .tHighPolyModel HighPolyModel = 1;
  if (this->has_highpolymodel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->highpolymodel_);
  }

  // optional .tLowPolyModel LowPolyModel = 2;
  if (this->has_lowpolymodel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lowpolymodel_);
  }

  // optional .tGenerateMaps GenerateMaps = 3;
  if (this->has_generatemaps()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->generatemaps_);
  }

  // optional .tDetail Detail = 4;
  if (this->has_detail()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->detail_);
  }

  // optional .tViewer3D Viewer3D = 5;
  if (this->has_viewer3d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->viewer3d_);
  }

  // optional string Version = 6;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Settings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Settings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Settings* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Settings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Settings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Settings)
    MergeFrom(*source);
  }
}

void Settings::MergeFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Settings)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_highpolymodel()) {
    mutable_highpolymodel()->::tHighPolyModel::MergeFrom(from.highpolymodel());
  }
  if (from.has_lowpolymodel()) {
    mutable_lowpolymodel()->::tLowPolyModel::MergeFrom(from.lowpolymodel());
  }
  if (from.has_generatemaps()) {
    mutable_generatemaps()->::tGenerateMaps::MergeFrom(from.generatemaps());
  }
  if (from.has_detail()) {
    mutable_detail()->::tDetail::MergeFrom(from.detail());
  }
  if (from.has_viewer3d()) {
    mutable_viewer3d()->::tViewer3D::MergeFrom(from.viewer3d());
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
}

void Settings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Settings::CopyFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settings::IsInitialized() const {

  return true;
}

void Settings::Swap(Settings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Settings::InternalSwap(Settings* other) {
  std::swap(highpolymodel_, other->highpolymodel_);
  std::swap(lowpolymodel_, other->lowpolymodel_);
  std::swap(generatemaps_, other->generatemaps_);
  std::swap(detail_, other->detail_);
  std::swap(viewer3d_, other->viewer3d_);
  version_.Swap(&other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Settings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Settings_descriptor_;
  metadata.reflection = Settings_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Settings

// optional .tHighPolyModel HighPolyModel = 1;
bool Settings::has_highpolymodel() const {
  return !_is_default_instance_ && highpolymodel_ != NULL;
}
void Settings::clear_highpolymodel() {
  if (GetArenaNoVirtual() == NULL && highpolymodel_ != NULL) delete highpolymodel_;
  highpolymodel_ = NULL;
}
const ::tHighPolyModel& Settings::highpolymodel() const {
  // @@protoc_insertion_point(field_get:Settings.HighPolyModel)
  return highpolymodel_ != NULL ? *highpolymodel_ : *default_instance_->highpolymodel_;
}
::tHighPolyModel* Settings::mutable_highpolymodel() {
  
  if (highpolymodel_ == NULL) {
    highpolymodel_ = new ::tHighPolyModel;
  }
  // @@protoc_insertion_point(field_mutable:Settings.HighPolyModel)
  return highpolymodel_;
}
::tHighPolyModel* Settings::release_highpolymodel() {
  // @@protoc_insertion_point(field_release:Settings.HighPolyModel)
  
  ::tHighPolyModel* temp = highpolymodel_;
  highpolymodel_ = NULL;
  return temp;
}
void Settings::set_allocated_highpolymodel(::tHighPolyModel* highpolymodel) {
  delete highpolymodel_;
  highpolymodel_ = highpolymodel;
  if (highpolymodel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Settings.HighPolyModel)
}

// optional .tLowPolyModel LowPolyModel = 2;
bool Settings::has_lowpolymodel() const {
  return !_is_default_instance_ && lowpolymodel_ != NULL;
}
void Settings::clear_lowpolymodel() {
  if (GetArenaNoVirtual() == NULL && lowpolymodel_ != NULL) delete lowpolymodel_;
  lowpolymodel_ = NULL;
}
const ::tLowPolyModel& Settings::lowpolymodel() const {
  // @@protoc_insertion_point(field_get:Settings.LowPolyModel)
  return lowpolymodel_ != NULL ? *lowpolymodel_ : *default_instance_->lowpolymodel_;
}
::tLowPolyModel* Settings::mutable_lowpolymodel() {
  
  if (lowpolymodel_ == NULL) {
    lowpolymodel_ = new ::tLowPolyModel;
  }
  // @@protoc_insertion_point(field_mutable:Settings.LowPolyModel)
  return lowpolymodel_;
}
::tLowPolyModel* Settings::release_lowpolymodel() {
  // @@protoc_insertion_point(field_release:Settings.LowPolyModel)
  
  ::tLowPolyModel* temp = lowpolymodel_;
  lowpolymodel_ = NULL;
  return temp;
}
void Settings::set_allocated_lowpolymodel(::tLowPolyModel* lowpolymodel) {
  delete lowpolymodel_;
  lowpolymodel_ = lowpolymodel;
  if (lowpolymodel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Settings.LowPolyModel)
}

// optional .tGenerateMaps GenerateMaps = 3;
bool Settings::has_generatemaps() const {
  return !_is_default_instance_ && generatemaps_ != NULL;
}
void Settings::clear_generatemaps() {
  if (GetArenaNoVirtual() == NULL && generatemaps_ != NULL) delete generatemaps_;
  generatemaps_ = NULL;
}
const ::tGenerateMaps& Settings::generatemaps() const {
  // @@protoc_insertion_point(field_get:Settings.GenerateMaps)
  return generatemaps_ != NULL ? *generatemaps_ : *default_instance_->generatemaps_;
}
::tGenerateMaps* Settings::mutable_generatemaps() {
  
  if (generatemaps_ == NULL) {
    generatemaps_ = new ::tGenerateMaps;
  }
  // @@protoc_insertion_point(field_mutable:Settings.GenerateMaps)
  return generatemaps_;
}
::tGenerateMaps* Settings::release_generatemaps() {
  // @@protoc_insertion_point(field_release:Settings.GenerateMaps)
  
  ::tGenerateMaps* temp = generatemaps_;
  generatemaps_ = NULL;
  return temp;
}
void Settings::set_allocated_generatemaps(::tGenerateMaps* generatemaps) {
  delete generatemaps_;
  generatemaps_ = generatemaps;
  if (generatemaps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Settings.GenerateMaps)
}

// optional .tDetail Detail = 4;
bool Settings::has_detail() const {
  return !_is_default_instance_ && detail_ != NULL;
}
void Settings::clear_detail() {
  if (GetArenaNoVirtual() == NULL && detail_ != NULL) delete detail_;
  detail_ = NULL;
}
const ::tDetail& Settings::detail() const {
  // @@protoc_insertion_point(field_get:Settings.Detail)
  return detail_ != NULL ? *detail_ : *default_instance_->detail_;
}
::tDetail* Settings::mutable_detail() {
  
  if (detail_ == NULL) {
    detail_ = new ::tDetail;
  }
  // @@protoc_insertion_point(field_mutable:Settings.Detail)
  return detail_;
}
::tDetail* Settings::release_detail() {
  // @@protoc_insertion_point(field_release:Settings.Detail)
  
  ::tDetail* temp = detail_;
  detail_ = NULL;
  return temp;
}
void Settings::set_allocated_detail(::tDetail* detail) {
  delete detail_;
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Settings.Detail)
}

// optional .tViewer3D Viewer3D = 5;
bool Settings::has_viewer3d() const {
  return !_is_default_instance_ && viewer3d_ != NULL;
}
void Settings::clear_viewer3d() {
  if (GetArenaNoVirtual() == NULL && viewer3d_ != NULL) delete viewer3d_;
  viewer3d_ = NULL;
}
const ::tViewer3D& Settings::viewer3d() const {
  // @@protoc_insertion_point(field_get:Settings.Viewer3D)
  return viewer3d_ != NULL ? *viewer3d_ : *default_instance_->viewer3d_;
}
::tViewer3D* Settings::mutable_viewer3d() {
  
  if (viewer3d_ == NULL) {
    viewer3d_ = new ::tViewer3D;
  }
  // @@protoc_insertion_point(field_mutable:Settings.Viewer3D)
  return viewer3d_;
}
::tViewer3D* Settings::release_viewer3d() {
  // @@protoc_insertion_point(field_release:Settings.Viewer3D)
  
  ::tViewer3D* temp = viewer3d_;
  viewer3d_ = NULL;
  return temp;
}
void Settings::set_allocated_viewer3d(::tViewer3D* viewer3d) {
  delete viewer3d_;
  viewer3d_ = viewer3d;
  if (viewer3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Settings.Viewer3D)
}

// optional string Version = 6;
void Settings::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Settings::version() const {
  // @@protoc_insertion_point(field_get:Settings.Version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Settings::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Settings.Version)
}
 void Settings::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Settings.Version)
}
 void Settings::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Settings.Version)
}
 ::std::string* Settings::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:Settings.Version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Settings::release_version() {
  // @@protoc_insertion_point(field_release:Settings.Version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Settings::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:Settings.Version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
const ::std::string my_eHM2NMMethod_option_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  my_eHM2NMMethod_option(kMyEHM2NMMethodOptionFieldNumber, my_eHM2NMMethod_option_default);
const ::std::string my_eSmoothNormals_option_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  my_eSmoothNormals_option(kMyESmoothNormalsOptionFieldNumber, my_eSmoothNormals_option_default);
const ::std::string my_eSwizzleComponent_option_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  my_eSwizzleComponent_option(kMyESwizzleComponentOptionFieldNumber, my_eSwizzleComponent_option_default);
const ::std::string my_eNormalMapType_option_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  my_eNormalMapType_option(kMyENormalMapTypeOptionFieldNumber, my_eNormalMapType_option_default);
const ::std::string my_eTransparencyMode_option_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  my_eTransparencyMode_option(kMyETransparencyModeOptionFieldNumber, my_eTransparencyMode_option_default);
const ::std::string my_eAODistribution_option_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  my_eAODistribution_option(kMyEAODistributionOptionFieldNumber, my_eAODistribution_option_default);
const ::std::string my_eSwizzleComponent2_option_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  my_eSwizzleComponent2_option(kMyESwizzleComponent2OptionFieldNumber, my_eSwizzleComponent2_option_default);
const ::std::string my_eHMNormalization_option_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  my_eHMNormalization_option(kMyEHMNormalizationOptionFieldNumber, my_eHMNormalization_option_default);
const ::std::string my_eRNMCoordSys_option_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  my_eRNMCoordSys_option(kMyERNMCoordSysOptionFieldNumber, my_eRNMCoordSys_option_default);
const ::std::string my_eAntialiasing_option_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  my_eAntialiasing_option(kMyEAntialiasingOptionFieldNumber, my_eAntialiasing_option_default);
const ::std::string my_eCurvAlgorithm_option_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::EnumValueOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  my_eCurvAlgorithm_option(kMyECurvAlgorithmOptionFieldNumber, my_eCurvAlgorithm_option_default);

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
