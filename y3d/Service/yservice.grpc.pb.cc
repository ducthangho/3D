// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: yservice.proto

#include "yservice.pb.h"
#include "yservice.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace y3d {

static const char* Tools_method_names[] = {
  "/y3d.Tools/RenameObject",
};

std::unique_ptr< Tools::Stub> Tools::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Tools::Stub> stub(new Tools::Stub(channel));
  return stub;
}

Tools::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RenameObject_(Tools_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Tools::Stub::RenameObject(::grpc::ClientContext* context, const ::y3d::RenameParam& request, ::y3d::ResultReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RenameObject_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* Tools::Stub::AsyncRenameObjectRaw(::grpc::ClientContext* context, const ::y3d::RenameParam& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>(channel_.get(), cq, rpcmethod_RenameObject_, context, request);
}

Tools::Service::Service() {
  (void)Tools_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::RenameParam, ::y3d::ResultReply>(
          std::mem_fn(&Tools::Service::RenameObject), this)));
}

Tools::Service::~Service() {
}

::grpc::Status Tools::Service::RenameObject(::grpc::ServerContext* context, const ::y3d::RenameParam* request, ::y3d::ResultReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace y3d

