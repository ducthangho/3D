// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xnormal.proto

#ifndef PROTOBUF_xnormal_2eproto__INCLUDED
#define PROTOBUF_xnormal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_xnormal_2eproto();
void protobuf_AssignDesc_xnormal_2eproto();
void protobuf_ShutdownFile_xnormal_2eproto();

class SettingsType;
class UnspecifiedType;
class tDetail;
class tGenerateMaps;
class tHighPolyMesh;
class tHighPolyModel;
class tLowPolyMesh;
class tLowPolyModel;
class tMatrix;
class tRGB8;
class tVector3;
class tViewer3D;

enum tDetail_eHM2NMMethod {
  tDetail_eHM2NMMethod_eHM2NMMethod_3x3 = 0,
  tDetail_eHM2NMMethod_eHM2NMMethod_4Samples = 1,
  tDetail_eHM2NMMethod_eHM2NMMethod_5x5 = 2,
  tDetail_eHM2NMMethod_eHM2NMMethod_PRE3x3 = 3,
  tDetail_eHM2NMMethod_eHM2NMMethod_PRE5x5 = 4,
  tDetail_eHM2NMMethod_eHM2NMMethod_SO3x3 = 5,
  tDetail_eHM2NMMethod_eHM2NMMethod_SO5x5 = 6,
  tDetail_eHM2NMMethod_tDetail_eHM2NMMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  tDetail_eHM2NMMethod_tDetail_eHM2NMMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool tDetail_eHM2NMMethod_IsValid(int value);
const tDetail_eHM2NMMethod tDetail_eHM2NMMethod_eHM2NMMethod_MIN = tDetail_eHM2NMMethod_eHM2NMMethod_3x3;
const tDetail_eHM2NMMethod tDetail_eHM2NMMethod_eHM2NMMethod_MAX = tDetail_eHM2NMMethod_eHM2NMMethod_SO5x5;
const int tDetail_eHM2NMMethod_eHM2NMMethod_ARRAYSIZE = tDetail_eHM2NMMethod_eHM2NMMethod_MAX + 1;

const ::google::protobuf::EnumDescriptor* tDetail_eHM2NMMethod_descriptor();
inline const ::std::string& tDetail_eHM2NMMethod_Name(tDetail_eHM2NMMethod value) {
  return ::google::protobuf::internal::NameOfEnum(
    tDetail_eHM2NMMethod_descriptor(), value);
}
inline bool tDetail_eHM2NMMethod_Parse(
    const ::std::string& name, tDetail_eHM2NMMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<tDetail_eHM2NMMethod>(
    tDetail_eHM2NMMethod_descriptor(), name, value);
}
enum tHighPolyMesh_eSmoothNormals {
  tHighPolyMesh_eSmoothNormals_eSmoothNormals_AverageNormals = 0,
  tHighPolyMesh_eSmoothNormals_eSmoothNormals_HardenNormals = 1,
  tHighPolyMesh_eSmoothNormals_eSmoothNormals_UseExportedNormals = 2,
  tHighPolyMesh_eSmoothNormals_tHighPolyMesh_eSmoothNormals_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  tHighPolyMesh_eSmoothNormals_tHighPolyMesh_eSmoothNormals_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool tHighPolyMesh_eSmoothNormals_IsValid(int value);
const tHighPolyMesh_eSmoothNormals tHighPolyMesh_eSmoothNormals_eSmoothNormals_MIN = tHighPolyMesh_eSmoothNormals_eSmoothNormals_AverageNormals;
const tHighPolyMesh_eSmoothNormals tHighPolyMesh_eSmoothNormals_eSmoothNormals_MAX = tHighPolyMesh_eSmoothNormals_eSmoothNormals_UseExportedNormals;
const int tHighPolyMesh_eSmoothNormals_eSmoothNormals_ARRAYSIZE = tHighPolyMesh_eSmoothNormals_eSmoothNormals_MAX + 1;

const ::google::protobuf::EnumDescriptor* tHighPolyMesh_eSmoothNormals_descriptor();
inline const ::std::string& tHighPolyMesh_eSmoothNormals_Name(tHighPolyMesh_eSmoothNormals value) {
  return ::google::protobuf::internal::NameOfEnum(
    tHighPolyMesh_eSmoothNormals_descriptor(), value);
}
inline bool tHighPolyMesh_eSmoothNormals_Parse(
    const ::std::string& name, tHighPolyMesh_eSmoothNormals* value) {
  return ::google::protobuf::internal::ParseNamedEnum<tHighPolyMesh_eSmoothNormals>(
    tHighPolyMesh_eSmoothNormals_descriptor(), name, value);
}
enum tLowPolyMesh_eSwizzleComponent {
  tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_X = 0,
  tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_X_ = 1,
  tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_Y = 2,
  tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_Y_ = 3,
  tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_Z = 4,
  tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_Z_ = 5,
  tLowPolyMesh_eSwizzleComponent_tLowPolyMesh_eSwizzleComponent_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  tLowPolyMesh_eSwizzleComponent_tLowPolyMesh_eSwizzleComponent_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool tLowPolyMesh_eSwizzleComponent_IsValid(int value);
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_MIN = tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_X;
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_MAX = tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_Z_;
const int tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_ARRAYSIZE = tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_MAX + 1;

const ::google::protobuf::EnumDescriptor* tLowPolyMesh_eSwizzleComponent_descriptor();
inline const ::std::string& tLowPolyMesh_eSwizzleComponent_Name(tLowPolyMesh_eSwizzleComponent value) {
  return ::google::protobuf::internal::NameOfEnum(
    tLowPolyMesh_eSwizzleComponent_descriptor(), value);
}
inline bool tLowPolyMesh_eSwizzleComponent_Parse(
    const ::std::string& name, tLowPolyMesh_eSwizzleComponent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<tLowPolyMesh_eSwizzleComponent>(
    tLowPolyMesh_eSwizzleComponent_descriptor(), name, value);
}
enum tLowPolyMesh_eTransparencyMode {
  tLowPolyMesh_eTransparencyMode_eTransparencyMode_1Bit = 0,
  tLowPolyMesh_eTransparencyMode_eTransparencyMode_AdditiveGlow = 1,
  tLowPolyMesh_eTransparencyMode_eTransparencyMode_Blend = 2,
  tLowPolyMesh_eTransparencyMode_eTransparencyMode_None = 3,
  tLowPolyMesh_eTransparencyMode_eTransparencyMode_ScreenGlass = 4,
  tLowPolyMesh_eTransparencyMode_tLowPolyMesh_eTransparencyMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  tLowPolyMesh_eTransparencyMode_tLowPolyMesh_eTransparencyMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool tLowPolyMesh_eTransparencyMode_IsValid(int value);
const tLowPolyMesh_eTransparencyMode tLowPolyMesh_eTransparencyMode_eTransparencyMode_MIN = tLowPolyMesh_eTransparencyMode_eTransparencyMode_1Bit;
const tLowPolyMesh_eTransparencyMode tLowPolyMesh_eTransparencyMode_eTransparencyMode_MAX = tLowPolyMesh_eTransparencyMode_eTransparencyMode_ScreenGlass;
const int tLowPolyMesh_eTransparencyMode_eTransparencyMode_ARRAYSIZE = tLowPolyMesh_eTransparencyMode_eTransparencyMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* tLowPolyMesh_eTransparencyMode_descriptor();
inline const ::std::string& tLowPolyMesh_eTransparencyMode_Name(tLowPolyMesh_eTransparencyMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    tLowPolyMesh_eTransparencyMode_descriptor(), value);
}
inline bool tLowPolyMesh_eTransparencyMode_Parse(
    const ::std::string& name, tLowPolyMesh_eTransparencyMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<tLowPolyMesh_eTransparencyMode>(
    tLowPolyMesh_eTransparencyMode_descriptor(), name, value);
}
enum tLowPolyMesh_eNormalMapType {
  tLowPolyMesh_eNormalMapType_eNormalMapType_Derivative = 0,
  tLowPolyMesh_eNormalMapType_eNormalMapType_Object_space = 1,
  tLowPolyMesh_eNormalMapType_eNormalMapType_Tangent_space = 2,
  tLowPolyMesh_eNormalMapType_tLowPolyMesh_eNormalMapType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  tLowPolyMesh_eNormalMapType_tLowPolyMesh_eNormalMapType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool tLowPolyMesh_eNormalMapType_IsValid(int value);
const tLowPolyMesh_eNormalMapType tLowPolyMesh_eNormalMapType_eNormalMapType_MIN = tLowPolyMesh_eNormalMapType_eNormalMapType_Derivative;
const tLowPolyMesh_eNormalMapType tLowPolyMesh_eNormalMapType_eNormalMapType_MAX = tLowPolyMesh_eNormalMapType_eNormalMapType_Tangent_space;
const int tLowPolyMesh_eNormalMapType_eNormalMapType_ARRAYSIZE = tLowPolyMesh_eNormalMapType_eNormalMapType_MAX + 1;

const ::google::protobuf::EnumDescriptor* tLowPolyMesh_eNormalMapType_descriptor();
inline const ::std::string& tLowPolyMesh_eNormalMapType_Name(tLowPolyMesh_eNormalMapType value) {
  return ::google::protobuf::internal::NameOfEnum(
    tLowPolyMesh_eNormalMapType_descriptor(), value);
}
inline bool tLowPolyMesh_eNormalMapType_Parse(
    const ::std::string& name, tLowPolyMesh_eNormalMapType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<tLowPolyMesh_eNormalMapType>(
    tLowPolyMesh_eNormalMapType_descriptor(), name, value);
}
enum tGenerateMaps_eAODistribution {
  tGenerateMaps_eAODistribution_eAODistribution_Cosine = 0,
  tGenerateMaps_eAODistribution_eAODistribution_CosineSq = 1,
  tGenerateMaps_eAODistribution_eAODistribution_Uniform = 2,
  tGenerateMaps_eAODistribution_tGenerateMaps_eAODistribution_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  tGenerateMaps_eAODistribution_tGenerateMaps_eAODistribution_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool tGenerateMaps_eAODistribution_IsValid(int value);
const tGenerateMaps_eAODistribution tGenerateMaps_eAODistribution_eAODistribution_MIN = tGenerateMaps_eAODistribution_eAODistribution_Cosine;
const tGenerateMaps_eAODistribution tGenerateMaps_eAODistribution_eAODistribution_MAX = tGenerateMaps_eAODistribution_eAODistribution_Uniform;
const int tGenerateMaps_eAODistribution_eAODistribution_ARRAYSIZE = tGenerateMaps_eAODistribution_eAODistribution_MAX + 1;

const ::google::protobuf::EnumDescriptor* tGenerateMaps_eAODistribution_descriptor();
inline const ::std::string& tGenerateMaps_eAODistribution_Name(tGenerateMaps_eAODistribution value) {
  return ::google::protobuf::internal::NameOfEnum(
    tGenerateMaps_eAODistribution_descriptor(), value);
}
inline bool tGenerateMaps_eAODistribution_Parse(
    const ::std::string& name, tGenerateMaps_eAODistribution* value) {
  return ::google::protobuf::internal::ParseNamedEnum<tGenerateMaps_eAODistribution>(
    tGenerateMaps_eAODistribution_descriptor(), name, value);
}
enum tGenerateMaps_eSwizzleComponent {
  tGenerateMaps_eSwizzleComponent_eSwizzleComponent_X = 0,
  tGenerateMaps_eSwizzleComponent_eSwizzleComponent_X_ = 1,
  tGenerateMaps_eSwizzleComponent_eSwizzleComponent_Y = 2,
  tGenerateMaps_eSwizzleComponent_eSwizzleComponent_Y_ = 3,
  tGenerateMaps_eSwizzleComponent_eSwizzleComponent_Z = 4,
  tGenerateMaps_eSwizzleComponent_eSwizzleComponent_Z_ = 5,
  tGenerateMaps_eSwizzleComponent_tGenerateMaps_eSwizzleComponent_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  tGenerateMaps_eSwizzleComponent_tGenerateMaps_eSwizzleComponent_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool tGenerateMaps_eSwizzleComponent_IsValid(int value);
const tGenerateMaps_eSwizzleComponent tGenerateMaps_eSwizzleComponent_eSwizzleComponent_MIN = tGenerateMaps_eSwizzleComponent_eSwizzleComponent_X;
const tGenerateMaps_eSwizzleComponent tGenerateMaps_eSwizzleComponent_eSwizzleComponent_MAX = tGenerateMaps_eSwizzleComponent_eSwizzleComponent_Z_;
const int tGenerateMaps_eSwizzleComponent_eSwizzleComponent_ARRAYSIZE = tGenerateMaps_eSwizzleComponent_eSwizzleComponent_MAX + 1;

const ::google::protobuf::EnumDescriptor* tGenerateMaps_eSwizzleComponent_descriptor();
inline const ::std::string& tGenerateMaps_eSwizzleComponent_Name(tGenerateMaps_eSwizzleComponent value) {
  return ::google::protobuf::internal::NameOfEnum(
    tGenerateMaps_eSwizzleComponent_descriptor(), value);
}
inline bool tGenerateMaps_eSwizzleComponent_Parse(
    const ::std::string& name, tGenerateMaps_eSwizzleComponent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<tGenerateMaps_eSwizzleComponent>(
    tGenerateMaps_eSwizzleComponent_descriptor(), name, value);
}
enum tGenerateMaps_eHMNormalization {
  tGenerateMaps_eHMNormalization_eHMNormalization_Interactive = 0,
  tGenerateMaps_eHMNormalization_eHMNormalization_Manual = 1,
  tGenerateMaps_eHMNormalization_eHMNormalization_Raw = 2,
  tGenerateMaps_eHMNormalization_tGenerateMaps_eHMNormalization_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  tGenerateMaps_eHMNormalization_tGenerateMaps_eHMNormalization_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool tGenerateMaps_eHMNormalization_IsValid(int value);
const tGenerateMaps_eHMNormalization tGenerateMaps_eHMNormalization_eHMNormalization_MIN = tGenerateMaps_eHMNormalization_eHMNormalization_Interactive;
const tGenerateMaps_eHMNormalization tGenerateMaps_eHMNormalization_eHMNormalization_MAX = tGenerateMaps_eHMNormalization_eHMNormalization_Raw;
const int tGenerateMaps_eHMNormalization_eHMNormalization_ARRAYSIZE = tGenerateMaps_eHMNormalization_eHMNormalization_MAX + 1;

const ::google::protobuf::EnumDescriptor* tGenerateMaps_eHMNormalization_descriptor();
inline const ::std::string& tGenerateMaps_eHMNormalization_Name(tGenerateMaps_eHMNormalization value) {
  return ::google::protobuf::internal::NameOfEnum(
    tGenerateMaps_eHMNormalization_descriptor(), value);
}
inline bool tGenerateMaps_eHMNormalization_Parse(
    const ::std::string& name, tGenerateMaps_eHMNormalization* value) {
  return ::google::protobuf::internal::ParseNamedEnum<tGenerateMaps_eHMNormalization>(
    tGenerateMaps_eHMNormalization_descriptor(), name, value);
}
enum tGenerateMaps_eRNMCoordSys {
  tGenerateMaps_eRNMCoordSys_eRNMCoordSys_AliB = 0,
  tGenerateMaps_eRNMCoordSys_eRNMCoordSys_Direct3D = 1,
  tGenerateMaps_eRNMCoordSys_eRNMCoordSys_OpenGL = 2,
  tGenerateMaps_eRNMCoordSys_tGenerateMaps_eRNMCoordSys_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  tGenerateMaps_eRNMCoordSys_tGenerateMaps_eRNMCoordSys_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool tGenerateMaps_eRNMCoordSys_IsValid(int value);
const tGenerateMaps_eRNMCoordSys tGenerateMaps_eRNMCoordSys_eRNMCoordSys_MIN = tGenerateMaps_eRNMCoordSys_eRNMCoordSys_AliB;
const tGenerateMaps_eRNMCoordSys tGenerateMaps_eRNMCoordSys_eRNMCoordSys_MAX = tGenerateMaps_eRNMCoordSys_eRNMCoordSys_OpenGL;
const int tGenerateMaps_eRNMCoordSys_eRNMCoordSys_ARRAYSIZE = tGenerateMaps_eRNMCoordSys_eRNMCoordSys_MAX + 1;

const ::google::protobuf::EnumDescriptor* tGenerateMaps_eRNMCoordSys_descriptor();
inline const ::std::string& tGenerateMaps_eRNMCoordSys_Name(tGenerateMaps_eRNMCoordSys value) {
  return ::google::protobuf::internal::NameOfEnum(
    tGenerateMaps_eRNMCoordSys_descriptor(), value);
}
inline bool tGenerateMaps_eRNMCoordSys_Parse(
    const ::std::string& name, tGenerateMaps_eRNMCoordSys* value) {
  return ::google::protobuf::internal::ParseNamedEnum<tGenerateMaps_eRNMCoordSys>(
    tGenerateMaps_eRNMCoordSys_descriptor(), name, value);
}
enum tGenerateMaps_eAntialiasing {
  tGenerateMaps_eAntialiasing_eAntialiasing_1 = 0,
  tGenerateMaps_eAntialiasing_eAntialiasing_2 = 1,
  tGenerateMaps_eAntialiasing_eAntialiasing_4 = 2,
  tGenerateMaps_eAntialiasing_tGenerateMaps_eAntialiasing_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  tGenerateMaps_eAntialiasing_tGenerateMaps_eAntialiasing_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool tGenerateMaps_eAntialiasing_IsValid(int value);
const tGenerateMaps_eAntialiasing tGenerateMaps_eAntialiasing_eAntialiasing_MIN = tGenerateMaps_eAntialiasing_eAntialiasing_1;
const tGenerateMaps_eAntialiasing tGenerateMaps_eAntialiasing_eAntialiasing_MAX = tGenerateMaps_eAntialiasing_eAntialiasing_4;
const int tGenerateMaps_eAntialiasing_eAntialiasing_ARRAYSIZE = tGenerateMaps_eAntialiasing_eAntialiasing_MAX + 1;

const ::google::protobuf::EnumDescriptor* tGenerateMaps_eAntialiasing_descriptor();
inline const ::std::string& tGenerateMaps_eAntialiasing_Name(tGenerateMaps_eAntialiasing value) {
  return ::google::protobuf::internal::NameOfEnum(
    tGenerateMaps_eAntialiasing_descriptor(), value);
}
inline bool tGenerateMaps_eAntialiasing_Parse(
    const ::std::string& name, tGenerateMaps_eAntialiasing* value) {
  return ::google::protobuf::internal::ParseNamedEnum<tGenerateMaps_eAntialiasing>(
    tGenerateMaps_eAntialiasing_descriptor(), name, value);
}
enum tGenerateMaps_eCurvAlgorithm {
  tGenerateMaps_eCurvAlgorithm_eCurvAlgorithm_Average = 0,
  tGenerateMaps_eCurvAlgorithm_eCurvAlgorithm_Gaussian = 1,
  tGenerateMaps_eCurvAlgorithm_tGenerateMaps_eCurvAlgorithm_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  tGenerateMaps_eCurvAlgorithm_tGenerateMaps_eCurvAlgorithm_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool tGenerateMaps_eCurvAlgorithm_IsValid(int value);
const tGenerateMaps_eCurvAlgorithm tGenerateMaps_eCurvAlgorithm_eCurvAlgorithm_MIN = tGenerateMaps_eCurvAlgorithm_eCurvAlgorithm_Average;
const tGenerateMaps_eCurvAlgorithm tGenerateMaps_eCurvAlgorithm_eCurvAlgorithm_MAX = tGenerateMaps_eCurvAlgorithm_eCurvAlgorithm_Gaussian;
const int tGenerateMaps_eCurvAlgorithm_eCurvAlgorithm_ARRAYSIZE = tGenerateMaps_eCurvAlgorithm_eCurvAlgorithm_MAX + 1;

const ::google::protobuf::EnumDescriptor* tGenerateMaps_eCurvAlgorithm_descriptor();
inline const ::std::string& tGenerateMaps_eCurvAlgorithm_Name(tGenerateMaps_eCurvAlgorithm value) {
  return ::google::protobuf::internal::NameOfEnum(
    tGenerateMaps_eCurvAlgorithm_descriptor(), value);
}
inline bool tGenerateMaps_eCurvAlgorithm_Parse(
    const ::std::string& name, tGenerateMaps_eCurvAlgorithm* value) {
  return ::google::protobuf::internal::ParseNamedEnum<tGenerateMaps_eCurvAlgorithm>(
    tGenerateMaps_eCurvAlgorithm_descriptor(), name, value);
}
// ===================================================================

class UnspecifiedType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UnspecifiedType) */ {
 public:
  UnspecifiedType();
  virtual ~UnspecifiedType();

  UnspecifiedType(const UnspecifiedType& from);

  inline UnspecifiedType& operator=(const UnspecifiedType& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnspecifiedType& default_instance();

  void Swap(UnspecifiedType* other);

  // implements Message ----------------------------------------------

  inline UnspecifiedType* New() const { return New(NULL); }

  UnspecifiedType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnspecifiedType& from);
  void MergeFrom(const UnspecifiedType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnspecifiedType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string baseObjectType = 1;
  void clear_baseobjecttype();
  static const int kBaseObjectTypeFieldNumber = 1;
  const ::std::string& baseobjecttype() const;
  void set_baseobjecttype(const ::std::string& value);
  void set_baseobjecttype(const char* value);
  void set_baseobjecttype(const char* value, size_t size);
  ::std::string* mutable_baseobjecttype();
  ::std::string* release_baseobjecttype();
  void set_allocated_baseobjecttype(::std::string* baseobjecttype);

  // optional bytes object = 2;
  void clear_object();
  static const int kObjectFieldNumber = 2;
  const ::std::string& object() const;
  void set_object(const ::std::string& value);
  void set_object(const char* value);
  void set_object(const void* value, size_t size);
  ::std::string* mutable_object();
  ::std::string* release_object();
  void set_allocated_object(::std::string* object);

  // @@protoc_insertion_point(class_scope:UnspecifiedType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr baseobjecttype_;
  ::google::protobuf::internal::ArenaStringPtr object_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_xnormal_2eproto();
  friend void protobuf_AssignDesc_xnormal_2eproto();
  friend void protobuf_ShutdownFile_xnormal_2eproto();

  void InitAsDefaultInstance();
  static UnspecifiedType* default_instance_;
};
// -------------------------------------------------------------------

class tMatrix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tMatrix) */ {
 public:
  tMatrix();
  virtual ~tMatrix();

  tMatrix(const tMatrix& from);

  inline tMatrix& operator=(const tMatrix& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tMatrix& default_instance();

  void Swap(tMatrix* other);

  // implements Message ----------------------------------------------

  inline tMatrix* New() const { return New(NULL); }

  tMatrix* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tMatrix& from);
  void MergeFrom(const tMatrix& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tMatrix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float e13 = 1;
  void clear_e13();
  static const int kE13FieldNumber = 1;
  float e13() const;
  void set_e13(float value);

  // optional float e12 = 2;
  void clear_e12();
  static const int kE12FieldNumber = 2;
  float e12() const;
  void set_e12(float value);

  // optional float e23 = 3;
  void clear_e23();
  static const int kE23FieldNumber = 3;
  float e23() const;
  void set_e23(float value);

  // optional float e31 = 4;
  void clear_e31();
  static const int kE31FieldNumber = 4;
  float e31() const;
  void set_e31(float value);

  // optional float e11 = 5;
  void clear_e11();
  static const int kE11FieldNumber = 5;
  float e11() const;
  void set_e11(float value);

  // optional float e22 = 6;
  void clear_e22();
  static const int kE22FieldNumber = 6;
  float e22() const;
  void set_e22(float value);

  // optional float e33 = 7;
  void clear_e33();
  static const int kE33FieldNumber = 7;
  float e33() const;
  void set_e33(float value);

  // optional float e21 = 8;
  void clear_e21();
  static const int kE21FieldNumber = 8;
  float e21() const;
  void set_e21(float value);

  // optional float e32 = 9;
  void clear_e32();
  static const int kE32FieldNumber = 9;
  float e32() const;
  void set_e32(float value);

  // @@protoc_insertion_point(class_scope:tMatrix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float e13_;
  float e12_;
  float e23_;
  float e31_;
  float e11_;
  float e22_;
  float e33_;
  float e21_;
  float e32_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_xnormal_2eproto();
  friend void protobuf_AssignDesc_xnormal_2eproto();
  friend void protobuf_ShutdownFile_xnormal_2eproto();

  void InitAsDefaultInstance();
  static tMatrix* default_instance_;
};
// -------------------------------------------------------------------

class tDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tDetail) */ {
 public:
  tDetail();
  virtual ~tDetail();

  tDetail(const tDetail& from);

  inline tDetail& operator=(const tDetail& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tDetail& default_instance();

  void Swap(tDetail* other);

  // implements Message ----------------------------------------------

  inline tDetail* New() const { return New(NULL); }

  tDetail* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tDetail& from);
  void MergeFrom(const tDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef tDetail_eHM2NMMethod eHM2NMMethod;
  static const eHM2NMMethod eHM2NMMethod_3x3 =
    tDetail_eHM2NMMethod_eHM2NMMethod_3x3;
  static const eHM2NMMethod eHM2NMMethod_4Samples =
    tDetail_eHM2NMMethod_eHM2NMMethod_4Samples;
  static const eHM2NMMethod eHM2NMMethod_5x5 =
    tDetail_eHM2NMMethod_eHM2NMMethod_5x5;
  static const eHM2NMMethod eHM2NMMethod_PRE3x3 =
    tDetail_eHM2NMMethod_eHM2NMMethod_PRE3x3;
  static const eHM2NMMethod eHM2NMMethod_PRE5x5 =
    tDetail_eHM2NMMethod_eHM2NMMethod_PRE5x5;
  static const eHM2NMMethod eHM2NMMethod_SO3x3 =
    tDetail_eHM2NMMethod_eHM2NMMethod_SO3x3;
  static const eHM2NMMethod eHM2NMMethod_SO5x5 =
    tDetail_eHM2NMMethod_eHM2NMMethod_SO5x5;
  static inline bool eHM2NMMethod_IsValid(int value) {
    return tDetail_eHM2NMMethod_IsValid(value);
  }
  static const eHM2NMMethod eHM2NMMethod_MIN =
    tDetail_eHM2NMMethod_eHM2NMMethod_MIN;
  static const eHM2NMMethod eHM2NMMethod_MAX =
    tDetail_eHM2NMMethod_eHM2NMMethod_MAX;
  static const int eHM2NMMethod_ARRAYSIZE =
    tDetail_eHM2NMMethod_eHM2NMMethod_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eHM2NMMethod_descriptor() {
    return tDetail_eHM2NMMethod_descriptor();
  }
  static inline const ::std::string& eHM2NMMethod_Name(eHM2NMMethod value) {
    return tDetail_eHM2NMMethod_Name(value);
  }
  static inline bool eHM2NMMethod_Parse(const ::std::string& name,
      eHM2NMMethod* value) {
    return tDetail_eHM2NMMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .tDetail.eHM2NMMethod Method = 1;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  ::tDetail_eHM2NMMethod method() const;
  void set_method(::tDetail_eHM2NMMethod value);

  // optional float Scale = 2;
  void clear_scale();
  static const int kScaleFieldNumber = 2;
  float scale() const;
  void set_scale(float value);

  // optional string File = 3;
  void clear_file();
  static const int kFileFieldNumber = 3;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // @@protoc_insertion_point(class_scope:tDetail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int method_;
  float scale_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_xnormal_2eproto();
  friend void protobuf_AssignDesc_xnormal_2eproto();
  friend void protobuf_ShutdownFile_xnormal_2eproto();

  void InitAsDefaultInstance();
  static tDetail* default_instance_;
};
// -------------------------------------------------------------------

class tRGB8 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tRGB8) */ {
 public:
  tRGB8();
  virtual ~tRGB8();

  tRGB8(const tRGB8& from);

  inline tRGB8& operator=(const tRGB8& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tRGB8& default_instance();

  void Swap(tRGB8* other);

  // implements Message ----------------------------------------------

  inline tRGB8* New() const { return New(NULL); }

  tRGB8* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tRGB8& from);
  void MergeFrom(const tRGB8& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tRGB8* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 G = 1;
  void clear_g();
  static const int kGFieldNumber = 1;
  ::google::protobuf::uint32 g() const;
  void set_g(::google::protobuf::uint32 value);

  // optional uint32 R = 2;
  void clear_r();
  static const int kRFieldNumber = 2;
  ::google::protobuf::uint32 r() const;
  void set_r(::google::protobuf::uint32 value);

  // optional uint32 B = 3;
  void clear_b();
  static const int kBFieldNumber = 3;
  ::google::protobuf::uint32 b() const;
  void set_b(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tRGB8)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 g_;
  ::google::protobuf::uint32 r_;
  ::google::protobuf::uint32 b_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_xnormal_2eproto();
  friend void protobuf_AssignDesc_xnormal_2eproto();
  friend void protobuf_ShutdownFile_xnormal_2eproto();

  void InitAsDefaultInstance();
  static tRGB8* default_instance_;
};
// -------------------------------------------------------------------

class tHighPolyMesh : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tHighPolyMesh) */ {
 public:
  tHighPolyMesh();
  virtual ~tHighPolyMesh();

  tHighPolyMesh(const tHighPolyMesh& from);

  inline tHighPolyMesh& operator=(const tHighPolyMesh& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tHighPolyMesh& default_instance();

  void Swap(tHighPolyMesh* other);

  // implements Message ----------------------------------------------

  inline tHighPolyMesh* New() const { return New(NULL); }

  tHighPolyMesh* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tHighPolyMesh& from);
  void MergeFrom(const tHighPolyMesh& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tHighPolyMesh* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef tHighPolyMesh_eSmoothNormals eSmoothNormals;
  static const eSmoothNormals eSmoothNormals_AverageNormals =
    tHighPolyMesh_eSmoothNormals_eSmoothNormals_AverageNormals;
  static const eSmoothNormals eSmoothNormals_HardenNormals =
    tHighPolyMesh_eSmoothNormals_eSmoothNormals_HardenNormals;
  static const eSmoothNormals eSmoothNormals_UseExportedNormals =
    tHighPolyMesh_eSmoothNormals_eSmoothNormals_UseExportedNormals;
  static inline bool eSmoothNormals_IsValid(int value) {
    return tHighPolyMesh_eSmoothNormals_IsValid(value);
  }
  static const eSmoothNormals eSmoothNormals_MIN =
    tHighPolyMesh_eSmoothNormals_eSmoothNormals_MIN;
  static const eSmoothNormals eSmoothNormals_MAX =
    tHighPolyMesh_eSmoothNormals_eSmoothNormals_MAX;
  static const int eSmoothNormals_ARRAYSIZE =
    tHighPolyMesh_eSmoothNormals_eSmoothNormals_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eSmoothNormals_descriptor() {
    return tHighPolyMesh_eSmoothNormals_descriptor();
  }
  static inline const ::std::string& eSmoothNormals_Name(eSmoothNormals value) {
    return tHighPolyMesh_eSmoothNormals_Name(value);
  }
  static inline bool eSmoothNormals_Parse(const ::std::string& name,
      eSmoothNormals* value) {
    return tHighPolyMesh_eSmoothNormals_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string File = 1;
  void clear_file();
  static const int kFileFieldNumber = 1;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // optional string PositionOffset = 2;
  void clear_positionoffset();
  static const int kPositionOffsetFieldNumber = 2;
  const ::std::string& positionoffset() const;
  void set_positionoffset(const ::std::string& value);
  void set_positionoffset(const char* value);
  void set_positionoffset(const char* value, size_t size);
  ::std::string* mutable_positionoffset();
  ::std::string* release_positionoffset();
  void set_allocated_positionoffset(::std::string* positionoffset);

  // optional bool IgnorePerVertexColor = 3;
  void clear_ignorepervertexcolor();
  static const int kIgnorePerVertexColorFieldNumber = 3;
  bool ignorepervertexcolor() const;
  void set_ignorepervertexcolor(bool value);

  // optional .tHighPolyMesh.eSmoothNormals AverageNormals = 4;
  void clear_averagenormals();
  static const int kAverageNormalsFieldNumber = 4;
  ::tHighPolyMesh_eSmoothNormals averagenormals() const;
  void set_averagenormals(::tHighPolyMesh_eSmoothNormals value);

  // optional bool Visible = 5;
  void clear_visible();
  static const int kVisibleFieldNumber = 5;
  bool visible() const;
  void set_visible(bool value);

  // optional bool BaseTexIsTSNM = 6;
  void clear_basetexistsnm();
  static const int kBaseTexIsTSNMFieldNumber = 6;
  bool basetexistsnm() const;
  void set_basetexistsnm(bool value);

  // optional float Scale = 7;
  void clear_scale();
  static const int kScaleFieldNumber = 7;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:tHighPolyMesh)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::internal::ArenaStringPtr positionoffset_;
  int averagenormals_;
  bool ignorepervertexcolor_;
  bool visible_;
  bool basetexistsnm_;
  float scale_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_xnormal_2eproto();
  friend void protobuf_AssignDesc_xnormal_2eproto();
  friend void protobuf_ShutdownFile_xnormal_2eproto();

  void InitAsDefaultInstance();
  static tHighPolyMesh* default_instance_;
};
// -------------------------------------------------------------------

class tLowPolyMesh : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tLowPolyMesh) */ {
 public:
  tLowPolyMesh();
  virtual ~tLowPolyMesh();

  tLowPolyMesh(const tLowPolyMesh& from);

  inline tLowPolyMesh& operator=(const tLowPolyMesh& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tLowPolyMesh& default_instance();

  void Swap(tLowPolyMesh* other);

  // implements Message ----------------------------------------------

  inline tLowPolyMesh* New() const { return New(NULL); }

  tLowPolyMesh* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tLowPolyMesh& from);
  void MergeFrom(const tLowPolyMesh& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tLowPolyMesh* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef tLowPolyMesh_eSwizzleComponent eSwizzleComponent;
  static const eSwizzleComponent eSwizzleComponent_X =
    tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_X;
  static const eSwizzleComponent eSwizzleComponent_X_ =
    tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_X_;
  static const eSwizzleComponent eSwizzleComponent_Y =
    tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_Y;
  static const eSwizzleComponent eSwizzleComponent_Y_ =
    tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_Y_;
  static const eSwizzleComponent eSwizzleComponent_Z =
    tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_Z;
  static const eSwizzleComponent eSwizzleComponent_Z_ =
    tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_Z_;
  static inline bool eSwizzleComponent_IsValid(int value) {
    return tLowPolyMesh_eSwizzleComponent_IsValid(value);
  }
  static const eSwizzleComponent eSwizzleComponent_MIN =
    tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_MIN;
  static const eSwizzleComponent eSwizzleComponent_MAX =
    tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_MAX;
  static const int eSwizzleComponent_ARRAYSIZE =
    tLowPolyMesh_eSwizzleComponent_eSwizzleComponent_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eSwizzleComponent_descriptor() {
    return tLowPolyMesh_eSwizzleComponent_descriptor();
  }
  static inline const ::std::string& eSwizzleComponent_Name(eSwizzleComponent value) {
    return tLowPolyMesh_eSwizzleComponent_Name(value);
  }
  static inline bool eSwizzleComponent_Parse(const ::std::string& name,
      eSwizzleComponent* value) {
    return tLowPolyMesh_eSwizzleComponent_Parse(name, value);
  }

  typedef tLowPolyMesh_eTransparencyMode eTransparencyMode;
  static const eTransparencyMode eTransparencyMode_1Bit =
    tLowPolyMesh_eTransparencyMode_eTransparencyMode_1Bit;
  static const eTransparencyMode eTransparencyMode_AdditiveGlow =
    tLowPolyMesh_eTransparencyMode_eTransparencyMode_AdditiveGlow;
  static const eTransparencyMode eTransparencyMode_Blend =
    tLowPolyMesh_eTransparencyMode_eTransparencyMode_Blend;
  static const eTransparencyMode eTransparencyMode_None =
    tLowPolyMesh_eTransparencyMode_eTransparencyMode_None;
  static const eTransparencyMode eTransparencyMode_ScreenGlass =
    tLowPolyMesh_eTransparencyMode_eTransparencyMode_ScreenGlass;
  static inline bool eTransparencyMode_IsValid(int value) {
    return tLowPolyMesh_eTransparencyMode_IsValid(value);
  }
  static const eTransparencyMode eTransparencyMode_MIN =
    tLowPolyMesh_eTransparencyMode_eTransparencyMode_MIN;
  static const eTransparencyMode eTransparencyMode_MAX =
    tLowPolyMesh_eTransparencyMode_eTransparencyMode_MAX;
  static const int eTransparencyMode_ARRAYSIZE =
    tLowPolyMesh_eTransparencyMode_eTransparencyMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eTransparencyMode_descriptor() {
    return tLowPolyMesh_eTransparencyMode_descriptor();
  }
  static inline const ::std::string& eTransparencyMode_Name(eTransparencyMode value) {
    return tLowPolyMesh_eTransparencyMode_Name(value);
  }
  static inline bool eTransparencyMode_Parse(const ::std::string& name,
      eTransparencyMode* value) {
    return tLowPolyMesh_eTransparencyMode_Parse(name, value);
  }

  typedef tLowPolyMesh_eNormalMapType eNormalMapType;
  static const eNormalMapType eNormalMapType_Derivative =
    tLowPolyMesh_eNormalMapType_eNormalMapType_Derivative;
  static const eNormalMapType eNormalMapType_Object_space =
    tLowPolyMesh_eNormalMapType_eNormalMapType_Object_space;
  static const eNormalMapType eNormalMapType_Tangent_space =
    tLowPolyMesh_eNormalMapType_eNormalMapType_Tangent_space;
  static inline bool eNormalMapType_IsValid(int value) {
    return tLowPolyMesh_eNormalMapType_IsValid(value);
  }
  static const eNormalMapType eNormalMapType_MIN =
    tLowPolyMesh_eNormalMapType_eNormalMapType_MIN;
  static const eNormalMapType eNormalMapType_MAX =
    tLowPolyMesh_eNormalMapType_eNormalMapType_MAX;
  static const int eNormalMapType_ARRAYSIZE =
    tLowPolyMesh_eNormalMapType_eNormalMapType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eNormalMapType_descriptor() {
    return tLowPolyMesh_eNormalMapType_descriptor();
  }
  static inline const ::std::string& eNormalMapType_Name(eNormalMapType value) {
    return tLowPolyMesh_eNormalMapType_Name(value);
  }
  static inline bool eNormalMapType_Parse(const ::std::string& name,
      eNormalMapType* value) {
    return tLowPolyMesh_eNormalMapType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string BaseTex = 1;
  void clear_basetex();
  static const int kBaseTexFieldNumber = 1;
  const ::std::string& basetex() const;
  void set_basetex(const ::std::string& value);
  void set_basetex(const char* value);
  void set_basetex(const char* value, size_t size);
  ::std::string* mutable_basetex();
  ::std::string* release_basetex();
  void set_allocated_basetex(::std::string* basetex);

  // optional string BlockersFile = 2;
  void clear_blockersfile();
  static const int kBlockersFileFieldNumber = 2;
  const ::std::string& blockersfile() const;
  void set_blockersfile(const ::std::string& value);
  void set_blockersfile(const char* value);
  void set_blockersfile(const char* value, size_t size);
  ::std::string* mutable_blockersfile();
  ::std::string* release_blockersfile();
  void set_allocated_blockersfile(::std::string* blockersfile);

  // optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleZ = 3;
  void clear_vvdmswizzlez();
  static const int kVVDMSwizzleZFieldNumber = 3;
  ::tLowPolyMesh_eSwizzleComponent vvdmswizzlez() const;
  void set_vvdmswizzlez(::tLowPolyMesh_eSwizzleComponent value);

  // optional float FresnelRefractiveIndex = 4;
  void clear_fresnelrefractiveindex();
  static const int kFresnelRefractiveIndexFieldNumber = 4;
  float fresnelrefractiveindex() const;
  void set_fresnelrefractiveindex(float value);

  // optional float UOffset = 5;
  void clear_uoffset();
  static const int kUOffsetFieldNumber = 5;
  float uoffset() const;
  void set_uoffset(float value);

  // optional float ReflectHDRMult = 6;
  void clear_reflecthdrmult();
  static const int kReflectHDRMultFieldNumber = 6;
  float reflecthdrmult() const;
  void set_reflecthdrmult(float value);

  // optional .tLowPolyMesh.eTransparencyMode TransparencyMode = 7;
  void clear_transparencymode();
  static const int kTransparencyModeFieldNumber = 7;
  ::tLowPolyMesh_eTransparencyMode transparencymode() const;
  void set_transparencymode(::tLowPolyMesh_eTransparencyMode value);

  // optional float VOffset = 8;
  void clear_voffset();
  static const int kVOffsetFieldNumber = 8;
  float voffset() const;
  void set_voffset(float value);

  // optional string ReflectTex = 9;
  void clear_reflecttex();
  static const int kReflectTexFieldNumber = 9;
  const ::std::string& reflecttex() const;
  void set_reflecttex(const ::std::string& value);
  void set_reflecttex(const char* value);
  void set_reflecttex(const char* value, size_t size);
  ::std::string* mutable_reflecttex();
  ::std::string* release_reflecttex();
  void set_allocated_reflecttex(::std::string* reflecttex);

  // optional float MaxRayDistanceFront = 10;
  void clear_maxraydistancefront();
  static const int kMaxRayDistanceFrontFieldNumber = 10;
  float maxraydistancefront() const;
  void set_maxraydistancefront(float value);

  // optional string DiffuseGITex = 11;
  void clear_diffusegitex();
  static const int kDiffuseGITexFieldNumber = 11;
  const ::std::string& diffusegitex() const;
  void set_diffusegitex(const ::std::string& value);
  void set_diffusegitex(const char* value);
  void set_diffusegitex(const char* value, size_t size);
  ::std::string* mutable_diffusegitex();
  ::std::string* release_diffusegitex();
  void set_allocated_diffusegitex(::std::string* diffusegitex);

  // optional .tLowPolyMesh.eNormalMapType NormapMapType = 12;
  void clear_normapmaptype();
  static const int kNormapMapTypeFieldNumber = 12;
  ::tLowPolyMesh_eNormalMapType normapmaptype() const;
  void set_normapmaptype(::tLowPolyMesh_eNormalMapType value);

  // optional string File = 13;
  void clear_file();
  static const int kFileFieldNumber = 13;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleY = 14;
  void clear_vvdmswizzley();
  static const int kVVDMSwizzleYFieldNumber = 14;
  ::tLowPolyMesh_eSwizzleComponent vvdmswizzley() const;
  void set_vvdmswizzley(::tLowPolyMesh_eSwizzleComponent value);

  // optional string CageFile = 15;
  void clear_cagefile();
  static const int kCageFileFieldNumber = 15;
  const ::std::string& cagefile() const;
  void set_cagefile(const ::std::string& value);
  void set_cagefile(const char* value);
  void set_cagefile(const char* value, size_t size);
  ::std::string* mutable_cagefile();
  ::std::string* release_cagefile();
  void set_allocated_cagefile(::std::string* cagefile);

  // optional string HeightTex = 16;
  void clear_heighttex();
  static const int kHeightTexFieldNumber = 16;
  const ::std::string& heighttex() const;
  void set_heighttex(const ::std::string& value);
  void set_heighttex(const char* value);
  void set_heighttex(const char* value, size_t size);
  ::std::string* mutable_heighttex();
  ::std::string* release_heighttex();
  void set_allocated_heighttex(::std::string* heighttex);

  // optional .tLowPolyMesh.eSwizzleComponent NMSwizzleY = 17;
  void clear_nmswizzley();
  static const int kNMSwizzleYFieldNumber = 17;
  ::tLowPolyMesh_eSwizzleComponent nmswizzley() const;
  void set_nmswizzley(::tLowPolyMesh_eSwizzleComponent value);

  // optional bool BatchProtect = 18;
  void clear_batchprotect();
  static const int kBatchProtectFieldNumber = 18;
  bool batchprotect() const;
  void set_batchprotect(bool value);

  // optional bytes AlphaTestValue = 19;
  void clear_alphatestvalue();
  static const int kAlphaTestValueFieldNumber = 19;
  const ::std::string& alphatestvalue() const;
  void set_alphatestvalue(const ::std::string& value);
  void set_alphatestvalue(const char* value);
  void set_alphatestvalue(const void* value, size_t size);
  ::std::string* mutable_alphatestvalue();
  ::std::string* release_alphatestvalue();
  void set_allocated_alphatestvalue(::std::string* alphatestvalue);

  // optional uint32 Subdivisions = 20;
  void clear_subdivisions();
  static const int kSubdivisionsFieldNumber = 20;
  ::google::protobuf::uint32 subdivisions() const;
  void set_subdivisions(::google::protobuf::uint32 value);

  // optional bool Matte = 21;
  void clear_matte();
  static const int kMatteFieldNumber = 21;
  bool matte() const;
  void set_matte(bool value);

  // optional bool AverageNormals = 22;
  void clear_averagenormals();
  static const int kAverageNormalsFieldNumber = 22;
  bool averagenormals() const;
  void set_averagenormals(bool value);

  // optional bool VectorDisplacementTS = 23;
  void clear_vectordisplacementts();
  static const int kVectorDisplacementTSFieldNumber = 23;
  bool vectordisplacementts() const;
  void set_vectordisplacementts(bool value);

  // optional bool UseCage = 24;
  void clear_usecage();
  static const int kUseCageFieldNumber = 24;
  bool usecage() const;
  void set_usecage(bool value);

  // optional bool Visible = 25;
  void clear_visible();
  static const int kVisibleFieldNumber = 25;
  bool visible() const;
  void set_visible(bool value);

  // optional .tLowPolyMesh.eSwizzleComponent NMSwizzleX = 26;
  void clear_nmswizzlex();
  static const int kNMSwizzleXFieldNumber = 26;
  ::tLowPolyMesh_eSwizzleComponent nmswizzlex() const;
  void set_nmswizzlex(::tLowPolyMesh_eSwizzleComponent value);

  // optional string GlossTex = 27;
  void clear_glosstex();
  static const int kGlossTexFieldNumber = 27;
  const ::std::string& glosstex() const;
  void set_glosstex(const ::std::string& value);
  void set_glosstex(const char* value);
  void set_glosstex(const char* value, size_t size);
  ::std::string* mutable_glosstex();
  ::std::string* release_glosstex();
  void set_allocated_glosstex(::std::string* glosstex);

  // optional float Scale = 28;
  void clear_scale();
  static const int kScaleFieldNumber = 28;
  float scale() const;
  void set_scale(float value);

  // optional .tLowPolyMesh.eSwizzleComponent NMSwizzleZ = 29;
  void clear_nmswizzlez();
  static const int kNMSwizzleZFieldNumber = 29;
  ::tLowPolyMesh_eSwizzleComponent nmswizzlez() const;
  void set_nmswizzlez(::tLowPolyMesh_eSwizzleComponent value);

  // optional string VectorDisplacementTex = 30;
  void clear_vectordisplacementtex();
  static const int kVectorDisplacementTexFieldNumber = 30;
  const ::std::string& vectordisplacementtex() const;
  void set_vectordisplacementtex(const ::std::string& value);
  void set_vectordisplacementtex(const char* value);
  void set_vectordisplacementtex(const char* value, size_t size);
  ::std::string* mutable_vectordisplacementtex();
  ::std::string* release_vectordisplacementtex();
  void set_allocated_vectordisplacementtex(::std::string* vectordisplacementtex);

  // optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleX = 31;
  void clear_vvdmswizzlex();
  static const int kVVDMSwizzleXFieldNumber = 31;
  ::tLowPolyMesh_eSwizzleComponent vvdmswizzlex() const;
  void set_vvdmswizzlex(::tLowPolyMesh_eSwizzleComponent value);

  // optional bool UsePerVertexColors = 32;
  void clear_usepervertexcolors();
  static const int kUsePerVertexColorsFieldNumber = 32;
  bool usepervertexcolors() const;
  void set_usepervertexcolors(bool value);

  // optional bool HighpolyNormalsOverrideTangentSpace = 33;
  void clear_highpolynormalsoverridetangentspace();
  static const int kHighpolyNormalsOverrideTangentSpaceFieldNumber = 33;
  bool highpolynormalsoverridetangentspace() const;
  void set_highpolynormalsoverridetangentspace(bool value);

  // optional string LMAOTex = 34;
  void clear_lmaotex();
  static const int kLMAOTexFieldNumber = 34;
  const ::std::string& lmaotex() const;
  void set_lmaotex(const ::std::string& value);
  void set_lmaotex(const char* value);
  void set_lmaotex(const char* value, size_t size);
  ::std::string* mutable_lmaotex();
  ::std::string* release_lmaotex();
  void set_allocated_lmaotex(::std::string* lmaotex);

  // optional string SpecTex = 35;
  void clear_spectex();
  static const int kSpecTexFieldNumber = 35;
  const ::std::string& spectex() const;
  void set_spectex(const ::std::string& value);
  void set_spectex(const char* value);
  void set_spectex(const char* value, size_t size);
  ::std::string* mutable_spectex();
  ::std::string* release_spectex();
  void set_allocated_spectex(::std::string* spectex);

  // optional string NormTex = 36;
  void clear_normtex();
  static const int kNormTexFieldNumber = 36;
  const ::std::string& normtex() const;
  void set_normtex(const ::std::string& value);
  void set_normtex(const char* value);
  void set_normtex(const char* value, size_t size);
  ::std::string* mutable_normtex();
  ::std::string* release_normtex();
  void set_allocated_normtex(::std::string* normtex);

  // optional .UnspecifiedType HighpolyNormalOverride = 37;
  bool has_highpolynormaloverride() const;
  void clear_highpolynormaloverride();
  static const int kHighpolyNormalOverrideFieldNumber = 37;
  const ::UnspecifiedType& highpolynormaloverride() const;
  ::UnspecifiedType* mutable_highpolynormaloverride();
  ::UnspecifiedType* release_highpolynormaloverride();
  void set_allocated_highpolynormaloverride(::UnspecifiedType* highpolynormaloverride);

  // optional string PositionOffset = 38;
  void clear_positionoffset();
  static const int kPositionOffsetFieldNumber = 38;
  const ::std::string& positionoffset() const;
  void set_positionoffset(const ::std::string& value);
  void set_positionoffset(const char* value);
  void set_positionoffset(const char* value, size_t size);
  ::std::string* mutable_positionoffset();
  ::std::string* release_positionoffset();
  void set_allocated_positionoffset(::std::string* positionoffset);

  // optional float MaxRayDistanceBack = 39;
  void clear_maxraydistanceback();
  static const int kMaxRayDistanceBackFieldNumber = 39;
  float maxraydistanceback() const;
  void set_maxraydistanceback(float value);

  // optional bool UseFresnel = 40;
  void clear_usefresnel();
  static const int kUseFresnelFieldNumber = 40;
  bool usefresnel() const;
  void set_usefresnel(bool value);

  // optional bool ReceiveShadows = 41;
  void clear_receiveshadows();
  static const int kReceiveShadowsFieldNumber = 41;
  bool receiveshadows() const;
  void set_receiveshadows(bool value);

  // optional string EmissiveTex = 42;
  void clear_emissivetex();
  static const int kEmissiveTexFieldNumber = 42;
  const ::std::string& emissivetex() const;
  void set_emissivetex(const ::std::string& value);
  void set_emissivetex(const char* value);
  void set_emissivetex(const char* value, size_t size);
  ::std::string* mutable_emissivetex();
  ::std::string* release_emissivetex();
  void set_allocated_emissivetex(::std::string* emissivetex);

  // optional bool BackfaceCull = 43;
  void clear_backfacecull();
  static const int kBackfaceCullFieldNumber = 43;
  bool backfacecull() const;
  void set_backfacecull(bool value);

  // optional bool CastShadows = 44;
  void clear_castshadows();
  static const int kCastShadowsFieldNumber = 44;
  bool castshadows() const;
  void set_castshadows(bool value);

  // optional bool MatchUVs = 45;
  void clear_matchuvs();
  static const int kMatchUVsFieldNumber = 45;
  bool matchuvs() const;
  void set_matchuvs(bool value);

  // @@protoc_insertion_point(class_scope:tLowPolyMesh)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr basetex_;
  ::google::protobuf::internal::ArenaStringPtr blockersfile_;
  int vvdmswizzlez_;
  float fresnelrefractiveindex_;
  float uoffset_;
  float reflecthdrmult_;
  int transparencymode_;
  float voffset_;
  ::google::protobuf::internal::ArenaStringPtr reflecttex_;
  ::google::protobuf::internal::ArenaStringPtr diffusegitex_;
  float maxraydistancefront_;
  int normapmaptype_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::internal::ArenaStringPtr cagefile_;
  int vvdmswizzley_;
  int nmswizzley_;
  ::google::protobuf::internal::ArenaStringPtr heighttex_;
  ::google::protobuf::internal::ArenaStringPtr alphatestvalue_;
  ::google::protobuf::uint32 subdivisions_;
  bool batchprotect_;
  bool matte_;
  bool averagenormals_;
  bool vectordisplacementts_;
  ::google::protobuf::internal::ArenaStringPtr glosstex_;
  int nmswizzlex_;
  float scale_;
  bool usecage_;
  bool visible_;
  bool usepervertexcolors_;
  bool highpolynormalsoverridetangentspace_;
  int nmswizzlez_;
  ::google::protobuf::internal::ArenaStringPtr vectordisplacementtex_;
  ::google::protobuf::internal::ArenaStringPtr lmaotex_;
  ::google::protobuf::internal::ArenaStringPtr spectex_;
  int vvdmswizzlex_;
  float maxraydistanceback_;
  ::google::protobuf::internal::ArenaStringPtr normtex_;
  ::UnspecifiedType* highpolynormaloverride_;
  ::google::protobuf::internal::ArenaStringPtr positionoffset_;
  ::google::protobuf::internal::ArenaStringPtr emissivetex_;
  bool usefresnel_;
  bool receiveshadows_;
  bool backfacecull_;
  bool castshadows_;
  bool matchuvs_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_xnormal_2eproto();
  friend void protobuf_AssignDesc_xnormal_2eproto();
  friend void protobuf_ShutdownFile_xnormal_2eproto();

  void InitAsDefaultInstance();
  static tLowPolyMesh* default_instance_;
};
// -------------------------------------------------------------------

class tVector3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tVector3) */ {
 public:
  tVector3();
  virtual ~tVector3();

  tVector3(const tVector3& from);

  inline tVector3& operator=(const tVector3& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tVector3& default_instance();

  void Swap(tVector3* other);

  // implements Message ----------------------------------------------

  inline tVector3* New() const { return New(NULL); }

  tVector3* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tVector3& from);
  void MergeFrom(const tVector3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tVector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float y = 1;
  void clear_y();
  static const int kYFieldNumber = 1;
  float y() const;
  void set_y(float value);

  // optional float x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // optional float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:tVector3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float y_;
  float x_;
  float z_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_xnormal_2eproto();
  friend void protobuf_AssignDesc_xnormal_2eproto();
  friend void protobuf_ShutdownFile_xnormal_2eproto();

  void InitAsDefaultInstance();
  static tVector3* default_instance_;
};
// -------------------------------------------------------------------

class tGenerateMaps : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tGenerateMaps) */ {
 public:
  tGenerateMaps();
  virtual ~tGenerateMaps();

  tGenerateMaps(const tGenerateMaps& from);

  inline tGenerateMaps& operator=(const tGenerateMaps& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tGenerateMaps& default_instance();

  void Swap(tGenerateMaps* other);

  // implements Message ----------------------------------------------

  inline tGenerateMaps* New() const { return New(NULL); }

  tGenerateMaps* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tGenerateMaps& from);
  void MergeFrom(const tGenerateMaps& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tGenerateMaps* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef tGenerateMaps_eAODistribution eAODistribution;
  static const eAODistribution eAODistribution_Cosine =
    tGenerateMaps_eAODistribution_eAODistribution_Cosine;
  static const eAODistribution eAODistribution_CosineSq =
    tGenerateMaps_eAODistribution_eAODistribution_CosineSq;
  static const eAODistribution eAODistribution_Uniform =
    tGenerateMaps_eAODistribution_eAODistribution_Uniform;
  static inline bool eAODistribution_IsValid(int value) {
    return tGenerateMaps_eAODistribution_IsValid(value);
  }
  static const eAODistribution eAODistribution_MIN =
    tGenerateMaps_eAODistribution_eAODistribution_MIN;
  static const eAODistribution eAODistribution_MAX =
    tGenerateMaps_eAODistribution_eAODistribution_MAX;
  static const int eAODistribution_ARRAYSIZE =
    tGenerateMaps_eAODistribution_eAODistribution_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eAODistribution_descriptor() {
    return tGenerateMaps_eAODistribution_descriptor();
  }
  static inline const ::std::string& eAODistribution_Name(eAODistribution value) {
    return tGenerateMaps_eAODistribution_Name(value);
  }
  static inline bool eAODistribution_Parse(const ::std::string& name,
      eAODistribution* value) {
    return tGenerateMaps_eAODistribution_Parse(name, value);
  }

  typedef tGenerateMaps_eSwizzleComponent eSwizzleComponent;
  static const eSwizzleComponent eSwizzleComponent_X =
    tGenerateMaps_eSwizzleComponent_eSwizzleComponent_X;
  static const eSwizzleComponent eSwizzleComponent_X_ =
    tGenerateMaps_eSwizzleComponent_eSwizzleComponent_X_;
  static const eSwizzleComponent eSwizzleComponent_Y =
    tGenerateMaps_eSwizzleComponent_eSwizzleComponent_Y;
  static const eSwizzleComponent eSwizzleComponent_Y_ =
    tGenerateMaps_eSwizzleComponent_eSwizzleComponent_Y_;
  static const eSwizzleComponent eSwizzleComponent_Z =
    tGenerateMaps_eSwizzleComponent_eSwizzleComponent_Z;
  static const eSwizzleComponent eSwizzleComponent_Z_ =
    tGenerateMaps_eSwizzleComponent_eSwizzleComponent_Z_;
  static inline bool eSwizzleComponent_IsValid(int value) {
    return tGenerateMaps_eSwizzleComponent_IsValid(value);
  }
  static const eSwizzleComponent eSwizzleComponent_MIN =
    tGenerateMaps_eSwizzleComponent_eSwizzleComponent_MIN;
  static const eSwizzleComponent eSwizzleComponent_MAX =
    tGenerateMaps_eSwizzleComponent_eSwizzleComponent_MAX;
  static const int eSwizzleComponent_ARRAYSIZE =
    tGenerateMaps_eSwizzleComponent_eSwizzleComponent_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eSwizzleComponent_descriptor() {
    return tGenerateMaps_eSwizzleComponent_descriptor();
  }
  static inline const ::std::string& eSwizzleComponent_Name(eSwizzleComponent value) {
    return tGenerateMaps_eSwizzleComponent_Name(value);
  }
  static inline bool eSwizzleComponent_Parse(const ::std::string& name,
      eSwizzleComponent* value) {
    return tGenerateMaps_eSwizzleComponent_Parse(name, value);
  }

  typedef tGenerateMaps_eHMNormalization eHMNormalization;
  static const eHMNormalization eHMNormalization_Interactive =
    tGenerateMaps_eHMNormalization_eHMNormalization_Interactive;
  static const eHMNormalization eHMNormalization_Manual =
    tGenerateMaps_eHMNormalization_eHMNormalization_Manual;
  static const eHMNormalization eHMNormalization_Raw =
    tGenerateMaps_eHMNormalization_eHMNormalization_Raw;
  static inline bool eHMNormalization_IsValid(int value) {
    return tGenerateMaps_eHMNormalization_IsValid(value);
  }
  static const eHMNormalization eHMNormalization_MIN =
    tGenerateMaps_eHMNormalization_eHMNormalization_MIN;
  static const eHMNormalization eHMNormalization_MAX =
    tGenerateMaps_eHMNormalization_eHMNormalization_MAX;
  static const int eHMNormalization_ARRAYSIZE =
    tGenerateMaps_eHMNormalization_eHMNormalization_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eHMNormalization_descriptor() {
    return tGenerateMaps_eHMNormalization_descriptor();
  }
  static inline const ::std::string& eHMNormalization_Name(eHMNormalization value) {
    return tGenerateMaps_eHMNormalization_Name(value);
  }
  static inline bool eHMNormalization_Parse(const ::std::string& name,
      eHMNormalization* value) {
    return tGenerateMaps_eHMNormalization_Parse(name, value);
  }

  typedef tGenerateMaps_eRNMCoordSys eRNMCoordSys;
  static const eRNMCoordSys eRNMCoordSys_AliB =
    tGenerateMaps_eRNMCoordSys_eRNMCoordSys_AliB;
  static const eRNMCoordSys eRNMCoordSys_Direct3D =
    tGenerateMaps_eRNMCoordSys_eRNMCoordSys_Direct3D;
  static const eRNMCoordSys eRNMCoordSys_OpenGL =
    tGenerateMaps_eRNMCoordSys_eRNMCoordSys_OpenGL;
  static inline bool eRNMCoordSys_IsValid(int value) {
    return tGenerateMaps_eRNMCoordSys_IsValid(value);
  }
  static const eRNMCoordSys eRNMCoordSys_MIN =
    tGenerateMaps_eRNMCoordSys_eRNMCoordSys_MIN;
  static const eRNMCoordSys eRNMCoordSys_MAX =
    tGenerateMaps_eRNMCoordSys_eRNMCoordSys_MAX;
  static const int eRNMCoordSys_ARRAYSIZE =
    tGenerateMaps_eRNMCoordSys_eRNMCoordSys_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eRNMCoordSys_descriptor() {
    return tGenerateMaps_eRNMCoordSys_descriptor();
  }
  static inline const ::std::string& eRNMCoordSys_Name(eRNMCoordSys value) {
    return tGenerateMaps_eRNMCoordSys_Name(value);
  }
  static inline bool eRNMCoordSys_Parse(const ::std::string& name,
      eRNMCoordSys* value) {
    return tGenerateMaps_eRNMCoordSys_Parse(name, value);
  }

  typedef tGenerateMaps_eAntialiasing eAntialiasing;
  static const eAntialiasing eAntialiasing_1 =
    tGenerateMaps_eAntialiasing_eAntialiasing_1;
  static const eAntialiasing eAntialiasing_2 =
    tGenerateMaps_eAntialiasing_eAntialiasing_2;
  static const eAntialiasing eAntialiasing_4 =
    tGenerateMaps_eAntialiasing_eAntialiasing_4;
  static inline bool eAntialiasing_IsValid(int value) {
    return tGenerateMaps_eAntialiasing_IsValid(value);
  }
  static const eAntialiasing eAntialiasing_MIN =
    tGenerateMaps_eAntialiasing_eAntialiasing_MIN;
  static const eAntialiasing eAntialiasing_MAX =
    tGenerateMaps_eAntialiasing_eAntialiasing_MAX;
  static const int eAntialiasing_ARRAYSIZE =
    tGenerateMaps_eAntialiasing_eAntialiasing_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eAntialiasing_descriptor() {
    return tGenerateMaps_eAntialiasing_descriptor();
  }
  static inline const ::std::string& eAntialiasing_Name(eAntialiasing value) {
    return tGenerateMaps_eAntialiasing_Name(value);
  }
  static inline bool eAntialiasing_Parse(const ::std::string& name,
      eAntialiasing* value) {
    return tGenerateMaps_eAntialiasing_Parse(name, value);
  }

  typedef tGenerateMaps_eCurvAlgorithm eCurvAlgorithm;
  static const eCurvAlgorithm eCurvAlgorithm_Average =
    tGenerateMaps_eCurvAlgorithm_eCurvAlgorithm_Average;
  static const eCurvAlgorithm eCurvAlgorithm_Gaussian =
    tGenerateMaps_eCurvAlgorithm_eCurvAlgorithm_Gaussian;
  static inline bool eCurvAlgorithm_IsValid(int value) {
    return tGenerateMaps_eCurvAlgorithm_IsValid(value);
  }
  static const eCurvAlgorithm eCurvAlgorithm_MIN =
    tGenerateMaps_eCurvAlgorithm_eCurvAlgorithm_MIN;
  static const eCurvAlgorithm eCurvAlgorithm_MAX =
    tGenerateMaps_eCurvAlgorithm_eCurvAlgorithm_MAX;
  static const int eCurvAlgorithm_ARRAYSIZE =
    tGenerateMaps_eCurvAlgorithm_eCurvAlgorithm_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eCurvAlgorithm_descriptor() {
    return tGenerateMaps_eCurvAlgorithm_descriptor();
  }
  static inline const ::std::string& eCurvAlgorithm_Name(eCurvAlgorithm value) {
    return tGenerateMaps_eCurvAlgorithm_Name(value);
  }
  static inline bool eCurvAlgorithm_Parse(const ::std::string& name,
      eCurvAlgorithm* value) {
    return tGenerateMaps_eCurvAlgorithm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .tRGB8 NMBackgroundColor = 1;
  bool has_nmbackgroundcolor() const;
  void clear_nmbackgroundcolor();
  static const int kNMBackgroundColorFieldNumber = 1;
  const ::tRGB8& nmbackgroundcolor() const;
  ::tRGB8* mutable_nmbackgroundcolor();
  ::tRGB8* release_nmbackgroundcolor();
  void set_allocated_nmbackgroundcolor(::tRGB8* nmbackgroundcolor);

  // optional .tRGB8 HMBackgroundColor = 2;
  bool has_hmbackgroundcolor() const;
  void clear_hmbackgroundcolor();
  static const int kHMBackgroundColorFieldNumber = 2;
  const ::tRGB8& hmbackgroundcolor() const;
  ::tRGB8* mutable_hmbackgroundcolor();
  ::tRGB8* release_hmbackgroundcolor();
  void set_allocated_hmbackgroundcolor(::tRGB8* hmbackgroundcolor);

  // optional .tRGB8 BakeHighpolyBaseTextureNoTexCol = 3;
  bool has_bakehighpolybasetexturenotexcol() const;
  void clear_bakehighpolybasetexturenotexcol();
  static const int kBakeHighpolyBaseTextureNoTexColFieldNumber = 3;
  const ::tRGB8& bakehighpolybasetexturenotexcol() const;
  ::tRGB8* mutable_bakehighpolybasetexturenotexcol();
  ::tRGB8* release_bakehighpolybasetexturenotexcol();
  void set_allocated_bakehighpolybasetexturenotexcol(::tRGB8* bakehighpolybasetexturenotexcol);

  // optional .tRGB8 BakeHighpolyBaseTextureBackgroundColor = 4;
  bool has_bakehighpolybasetexturebackgroundcolor() const;
  void clear_bakehighpolybasetexturebackgroundcolor();
  static const int kBakeHighpolyBaseTextureBackgroundColorFieldNumber = 4;
  const ::tRGB8& bakehighpolybasetexturebackgroundcolor() const;
  ::tRGB8* mutable_bakehighpolybasetexturebackgroundcolor();
  ::tRGB8* release_bakehighpolybasetexturebackgroundcolor();
  void set_allocated_bakehighpolybasetexturebackgroundcolor(::tRGB8* bakehighpolybasetexturebackgroundcolor);

  // optional .tRGB8 RenderWireframeBackgroundColor = 5;
  bool has_renderwireframebackgroundcolor() const;
  void clear_renderwireframebackgroundcolor();
  static const int kRenderWireframeBackgroundColorFieldNumber = 5;
  const ::tRGB8& renderwireframebackgroundcolor() const;
  ::tRGB8* mutable_renderwireframebackgroundcolor();
  ::tRGB8* release_renderwireframebackgroundcolor();
  void set_allocated_renderwireframebackgroundcolor(::tRGB8* renderwireframebackgroundcolor);

  // optional .tRGB8 RenderWireframeCol = 6;
  bool has_renderwireframecol() const;
  void clear_renderwireframecol();
  static const int kRenderWireframeColFieldNumber = 6;
  const ::tRGB8& renderwireframecol() const;
  ::tRGB8* mutable_renderwireframecol();
  ::tRGB8* release_renderwireframecol();
  void set_allocated_renderwireframecol(::tRGB8* renderwireframecol);

  // optional .tRGB8 RenderCWCol = 7;
  bool has_rendercwcol() const;
  void clear_rendercwcol();
  static const int kRenderCWColFieldNumber = 7;
  const ::tRGB8& rendercwcol() const;
  ::tRGB8* mutable_rendercwcol();
  ::tRGB8* release_rendercwcol();
  void set_allocated_rendercwcol(::tRGB8* rendercwcol);

  // optional .tRGB8 RenderSeamCol = 8;
  bool has_renderseamcol() const;
  void clear_renderseamcol();
  static const int kRenderSeamColFieldNumber = 8;
  const ::tRGB8& renderseamcol() const;
  ::tRGB8* mutable_renderseamcol();
  ::tRGB8* release_renderseamcol();
  void set_allocated_renderseamcol(::tRGB8* renderseamcol);

  // optional .tRGB8 RenderRayFailsCol = 9;
  bool has_renderrayfailscol() const;
  void clear_renderrayfailscol();
  static const int kRenderRayFailsColFieldNumber = 9;
  const ::tRGB8& renderrayfailscol() const;
  ::tRGB8* mutable_renderrayfailscol();
  ::tRGB8* release_renderrayfailscol();
  void set_allocated_renderrayfailscol(::tRGB8* renderrayfailscol);

  // optional .tRGB8 AOOccludedColor = 10;
  bool has_aooccludedcolor() const;
  void clear_aooccludedcolor();
  static const int kAOOccludedColorFieldNumber = 10;
  const ::tRGB8& aooccludedcolor() const;
  ::tRGB8* mutable_aooccludedcolor();
  ::tRGB8* release_aooccludedcolor();
  void set_allocated_aooccludedcolor(::tRGB8* aooccludedcolor);

  // optional .tRGB8 AOUnoccludedColor = 11;
  bool has_aounoccludedcolor() const;
  void clear_aounoccludedcolor();
  static const int kAOUnoccludedColorFieldNumber = 11;
  const ::tRGB8& aounoccludedcolor() const;
  ::tRGB8* mutable_aounoccludedcolor();
  ::tRGB8* release_aounoccludedcolor();
  void set_allocated_aounoccludedcolor(::tRGB8* aounoccludedcolor);

  // optional .tRGB8 AOBackgroundColor = 12;
  bool has_aobackgroundcolor() const;
  void clear_aobackgroundcolor();
  static const int kAOBackgroundColorFieldNumber = 12;
  const ::tRGB8& aobackgroundcolor() const;
  ::tRGB8* mutable_aobackgroundcolor();
  ::tRGB8* release_aobackgroundcolor();
  void set_allocated_aobackgroundcolor(::tRGB8* aobackgroundcolor);

  // optional .tRGB8 BentBackgroundColor = 13;
  bool has_bentbackgroundcolor() const;
  void clear_bentbackgroundcolor();
  static const int kBentBackgroundColorFieldNumber = 13;
  const ::tRGB8& bentbackgroundcolor() const;
  ::tRGB8* mutable_bentbackgroundcolor();
  ::tRGB8* release_bentbackgroundcolor();
  void set_allocated_bentbackgroundcolor(::tRGB8* bentbackgroundcolor);

  // optional .tRGB8 PRTBackgroundColor = 14;
  bool has_prtbackgroundcolor() const;
  void clear_prtbackgroundcolor();
  static const int kPRTBackgroundColorFieldNumber = 14;
  const ::tRGB8& prtbackgroundcolor() const;
  ::tRGB8* mutable_prtbackgroundcolor();
  ::tRGB8* release_prtbackgroundcolor();
  void set_allocated_prtbackgroundcolor(::tRGB8* prtbackgroundcolor);

  // optional .tRGB8 ConvexityBackgroundColor = 15;
  bool has_convexitybackgroundcolor() const;
  void clear_convexitybackgroundcolor();
  static const int kConvexityBackgroundColorFieldNumber = 15;
  const ::tRGB8& convexitybackgroundcolor() const;
  ::tRGB8* mutable_convexitybackgroundcolor();
  ::tRGB8* release_convexitybackgroundcolor();
  void set_allocated_convexitybackgroundcolor(::tRGB8* convexitybackgroundcolor);

  // optional .tRGB8 ThicknessBackgroundColor = 16;
  bool has_thicknessbackgroundcolor() const;
  void clear_thicknessbackgroundcolor();
  static const int kThicknessBackgroundColorFieldNumber = 16;
  const ::tRGB8& thicknessbackgroundcolor() const;
  ::tRGB8* mutable_thicknessbackgroundcolor();
  ::tRGB8* release_thicknessbackgroundcolor();
  void set_allocated_thicknessbackgroundcolor(::tRGB8* thicknessbackgroundcolor);

  // optional .tRGB8 ProximityBackgroundColor = 17;
  bool has_proximitybackgroundcolor() const;
  void clear_proximitybackgroundcolor();
  static const int kProximityBackgroundColorFieldNumber = 17;
  const ::tRGB8& proximitybackgroundcolor() const;
  ::tRGB8* mutable_proximitybackgroundcolor();
  ::tRGB8* release_proximitybackgroundcolor();
  void set_allocated_proximitybackgroundcolor(::tRGB8* proximitybackgroundcolor);

  // optional .tRGB8 CavityBackgroundColor = 18;
  bool has_cavitybackgroundcolor() const;
  void clear_cavitybackgroundcolor();
  static const int kCavityBackgroundColorFieldNumber = 18;
  const ::tRGB8& cavitybackgroundcolor() const;
  ::tRGB8* mutable_cavitybackgroundcolor();
  ::tRGB8* release_cavitybackgroundcolor();
  void set_allocated_cavitybackgroundcolor(::tRGB8* cavitybackgroundcolor);

  // optional .tRGB8 VDMBackgroundColor = 19;
  bool has_vdmbackgroundcolor() const;
  void clear_vdmbackgroundcolor();
  static const int kVDMBackgroundColorFieldNumber = 19;
  const ::tRGB8& vdmbackgroundcolor() const;
  ::tRGB8* mutable_vdmbackgroundcolor();
  ::tRGB8* release_vdmbackgroundcolor();
  void set_allocated_vdmbackgroundcolor(::tRGB8* vdmbackgroundcolor);

  // optional .tRGB8 RadNMBackgroundColor = 20;
  bool has_radnmbackgroundcolor() const;
  void clear_radnmbackgroundcolor();
  static const int kRadNMBackgroundColorFieldNumber = 20;
  const ::tRGB8& radnmbackgroundcolor() const;
  ::tRGB8* mutable_radnmbackgroundcolor();
  ::tRGB8* release_radnmbackgroundcolor();
  void set_allocated_radnmbackgroundcolor(::tRGB8* radnmbackgroundcolor);

  // optional .tRGB8 CurvBackgroundColor = 21;
  bool has_curvbackgroundcolor() const;
  void clear_curvbackgroundcolor();
  static const int kCurvBackgroundColorFieldNumber = 21;
  const ::tRGB8& curvbackgroundcolor() const;
  ::tRGB8* mutable_curvbackgroundcolor();
  ::tRGB8* release_curvbackgroundcolor();
  void set_allocated_curvbackgroundcolor(::tRGB8* curvbackgroundcolor);

  // optional .tRGB8 DerivNMBackgroundColor = 22;
  bool has_derivnmbackgroundcolor() const;
  void clear_derivnmbackgroundcolor();
  static const int kDerivNMBackgroundColorFieldNumber = 22;
  const ::tRGB8& derivnmbackgroundcolor() const;
  ::tRGB8* mutable_derivnmbackgroundcolor();
  ::tRGB8* release_derivnmbackgroundcolor();
  void set_allocated_derivnmbackgroundcolor(::tRGB8* derivnmbackgroundcolor);

  // optional .tRGB8 TransluBackgroundColor = 23;
  bool has_translubackgroundcolor() const;
  void clear_translubackgroundcolor();
  static const int kTransluBackgroundColorFieldNumber = 23;
  const ::tRGB8& translubackgroundcolor() const;
  ::tRGB8* mutable_translubackgroundcolor();
  ::tRGB8* release_translubackgroundcolor();
  void set_allocated_translubackgroundcolor(::tRGB8* translubackgroundcolor);

  // optional .tRGB8 BakeHighpolyVColsBackgroundCol = 24;
  bool has_bakehighpolyvcolsbackgroundcol() const;
  void clear_bakehighpolyvcolsbackgroundcol();
  static const int kBakeHighpolyVColsBackgroundColFieldNumber = 24;
  const ::tRGB8& bakehighpolyvcolsbackgroundcol() const;
  ::tRGB8* mutable_bakehighpolyvcolsbackgroundcol();
  ::tRGB8* release_bakehighpolyvcolsbackgroundcol();
  void set_allocated_bakehighpolyvcolsbackgroundcol(::tRGB8* bakehighpolyvcolsbackgroundcol);

  // optional bool ClosestIfFails = 25;
  void clear_closestiffails();
  static const int kClosestIfFailsFieldNumber = 25;
  bool closestiffails() const;
  void set_closestiffails(bool value);

  // optional float DirectionsTonemapMax = 26;
  void clear_directionstonemapmax();
  static const int kDirectionsTonemapMaxFieldNumber = 26;
  float directionstonemapmax() const;
  void set_directionstonemapmax(float value);

  // optional bool CurvMonocrome = 27;
  void clear_curvmonocrome();
  static const int kCurvMonocromeFieldNumber = 27;
  bool curvmonocrome() const;
  void set_curvmonocrome(bool value);

  // optional float AOBias = 28;
  void clear_aobias();
  static const int kAOBiasFieldNumber = 28;
  float aobias() const;
  void set_aobias(float value);

  // optional bool BentTangentSpace = 29;
  void clear_benttangentspace();
  static const int kBentTangentSpaceFieldNumber = 29;
  bool benttangentspace() const;
  void set_benttangentspace(bool value);

  // optional bool GenTranslu = 30;
  void clear_gentranslu();
  static const int kGenTransluFieldNumber = 30;
  bool gentranslu() const;
  void set_gentranslu(bool value);

  // optional .tGenerateMaps.eAODistribution AODistribution = 31;
  void clear_aodistribution();
  static const int kAODistributionFieldNumber = 31;
  ::tGenerateMaps_eAODistribution aodistribution() const;
  void set_aodistribution(::tGenerateMaps_eAODistribution value);

  // optional float PRTThreshold = 32;
  void clear_prtthreshold();
  static const int kPRTThresholdFieldNumber = 32;
  float prtthreshold() const;
  void set_prtthreshold(float value);

  // optional float DirectionsTonemapMin = 33;
  void clear_directionstonemapmin();
  static const int kDirectionsTonemapMinFieldNumber = 33;
  float directionstonemapmin() const;
  void set_directionstonemapmin(float value);

  // optional .tGenerateMaps.eAODistribution CurvDistribution = 34;
  void clear_curvdistribution();
  static const int kCurvDistributionFieldNumber = 34;
  ::tGenerateMaps_eAODistribution curvdistribution() const;
  void set_curvdistribution(::tGenerateMaps_eAODistribution value);

  // optional bool BentJitter = 35;
  void clear_bentjitter();
  static const int kBentJitterFieldNumber = 35;
  bool bentjitter() const;
  void set_bentjitter(bool value);

  // optional .tGenerateMaps.eAODistribution BentDistribution = 36;
  void clear_bentdistribution();
  static const int kBentDistributionFieldNumber = 36;
  ::tGenerateMaps_eAODistribution bentdistribution() const;
  void set_bentdistribution(::tGenerateMaps_eAODistribution value);

  // optional bool BakeHighpolyBaseTexture = 37;
  void clear_bakehighpolybasetexture();
  static const int kBakeHighpolyBaseTextureFieldNumber = 37;
  bool bakehighpolybasetexture() const;
  void set_bakehighpolybasetexture(bool value);

  // optional bool GenConvexity = 38;
  void clear_genconvexity();
  static const int kGenConvexityFieldNumber = 38;
  bool genconvexity() const;
  void set_genconvexity(bool value);

  // optional float RadiosityNormalsAttenLinear = 39;
  void clear_radiositynormalsattenlinear();
  static const int kRadiosityNormalsAttenLinearFieldNumber = 39;
  float radiositynormalsattenlinear() const;
  void set_radiositynormalsattenlinear(float value);

  // optional uint32 TransluRaysPerSample = 40;
  void clear_translurayspersample();
  static const int kTransluRaysPerSampleFieldNumber = 40;
  ::google::protobuf::uint32 translurayspersample() const;
  void set_translurayspersample(::google::protobuf::uint32 value);

  // optional float CurvSearchDistance = 41;
  void clear_curvsearchdistance();
  static const int kCurvSearchDistanceFieldNumber = 41;
  float curvsearchdistance() const;
  void set_curvsearchdistance(float value);

  // optional .tGenerateMaps.eSwizzleComponent SwizzleZ = 42;
  void clear_swizzlez();
  static const int kSwizzleZFieldNumber = 42;
  ::tGenerateMaps_eSwizzleComponent swizzlez() const;
  void set_swizzlez(::tGenerateMaps_eSwizzleComponent value);

  // optional float TransluBias = 43;
  void clear_translubias();
  static const int kTransluBiasFieldNumber = 43;
  float translubias() const;
  void set_translubias(float value);

  // optional bool PRTLimitRayDistance = 44;
  void clear_prtlimitraydistance();
  static const int kPRTLimitRayDistanceFieldNumber = 44;
  bool prtlimitraydistance() const;
  void set_prtlimitraydistance(bool value);

  // optional bool GenBent = 45;
  void clear_genbent();
  static const int kGenBentFieldNumber = 45;
  bool genbent() const;
  void set_genbent(bool value);

  // optional bool AOLimitRayDistance = 46;
  void clear_aolimitraydistance();
  static const int kAOLimitRayDistanceFieldNumber = 46;
  bool aolimitraydistance() const;
  void set_aolimitraydistance(bool value);

  // optional uint32 CurvRaysPerSample = 47;
  void clear_curvrayspersample();
  static const int kCurvRaysPerSampleFieldNumber = 47;
  ::google::protobuf::uint32 curvrayspersample() const;
  void set_curvrayspersample(::google::protobuf::uint32 value);

  // optional .tGenerateMaps.eAODistribution RadiosityNormalsDistribution = 48;
  void clear_radiositynormalsdistribution();
  static const int kRadiosityNormalsDistributionFieldNumber = 48;
  ::tGenerateMaps_eAODistribution radiositynormalsdistribution() const;
  void set_radiositynormalsdistribution(::tGenerateMaps_eAODistribution value);

  // optional uint32 RadiosityNormalsRaysPerSample = 49;
  void clear_radiositynormalsrayspersample();
  static const int kRadiosityNormalsRaysPerSampleFieldNumber = 49;
  ::google::protobuf::uint32 radiositynormalsrayspersample() const;
  void set_radiositynormalsrayspersample(::google::protobuf::uint32 value);

  // optional bool CurvJitter = 50;
  void clear_curvjitter();
  static const int kCurvJitterFieldNumber = 50;
  bool curvjitter() const;
  void set_curvjitter(bool value);

  // optional bool TangentSpace = 51;
  void clear_tangentspace();
  static const int kTangentSpaceFieldNumber = 51;
  bool tangentspace() const;
  void set_tangentspace(bool value);

  // optional bool RadiosityNormalsAllowPureOcclusion = 52;
  void clear_radiositynormalsallowpureocclusion();
  static const int kRadiosityNormalsAllowPureOcclusionFieldNumber = 52;
  bool radiositynormalsallowpureocclusion() const;
  void set_radiositynormalsallowpureocclusion(bool value);

  // optional .tGenerateMaps.eSwizzleComponent BentSwizzleX = 53;
  void clear_bentswizzlex();
  static const int kBentSwizzleXFieldNumber = 53;
  ::tGenerateMaps_eSwizzleComponent bentswizzlex() const;
  void set_bentswizzlex(::tGenerateMaps_eSwizzleComponent value);

  // optional .tGenerateMaps.eSwizzleComponent SwizzleY = 54;
  void clear_swizzley();
  static const int kSwizzleYFieldNumber = 54;
  ::tGenerateMaps_eSwizzleComponent swizzley() const;
  void set_swizzley(::tGenerateMaps_eSwizzleComponent value);

  // optional bool GenCurv = 55;
  void clear_gencurv();
  static const int kGenCurvFieldNumber = 55;
  bool gencurv() const;
  void set_gencurv(bool value);

  // optional bool PRTJitter = 56;
  void clear_prtjitter();
  static const int kPRTJitterFieldNumber = 56;
  bool prtjitter() const;
  void set_prtjitter(bool value);

  // optional float AOAttenCuadratic = 57;
  void clear_aoattencuadratic();
  static const int kAOAttenCuadraticFieldNumber = 57;
  float aoattencuadratic() const;
  void set_aoattencuadratic(float value);

  // optional float BentConeAngle = 58;
  void clear_bentconeangle();
  static const int kBentConeAngleFieldNumber = 58;
  float bentconeangle() const;
  void set_bentconeangle(float value);

  // optional .tGenerateMaps.eSwizzleComponent SwizzleX = 59;
  void clear_swizzlex();
  static const int kSwizzleXFieldNumber = 59;
  ::tGenerateMaps_eSwizzleComponent swizzlex() const;
  void set_swizzlex(::tGenerateMaps_eSwizzleComponent value);

  // optional bool RenderRayFails = 60;
  void clear_renderrayfails();
  static const int kRenderRayFailsFieldNumber = 60;
  bool renderrayfails() const;
  void set_renderrayfails(bool value);

  // optional float CavitySearchRadius = 61;
  void clear_cavitysearchradius();
  static const int kCavitySearchRadiusFieldNumber = 61;
  float cavitysearchradius() const;
  void set_cavitysearchradius(float value);

  // optional bool RadiosityNormalsEncodeAO = 62;
  void clear_radiositynormalsencodeao();
  static const int kRadiosityNormalsEncodeAOFieldNumber = 62;
  bool radiositynormalsencodeao() const;
  void set_radiositynormalsencodeao(bool value);

  // optional float TransluConeAngle = 63;
  void clear_transluconeangle();
  static const int kTransluConeAngleFieldNumber = 63;
  float transluconeangle() const;
  void set_transluconeangle(float value);

  // optional uint32 BentRaysPerSample = 64;
  void clear_bentrayspersample();
  static const int kBentRaysPerSampleFieldNumber = 64;
  ::google::protobuf::uint32 bentrayspersample() const;
  void set_bentrayspersample(::google::protobuf::uint32 value);

  // optional float ConvexityScale = 65;
  void clear_convexityscale();
  static const int kConvexityScaleFieldNumber = 65;
  float convexityscale() const;
  void set_convexityscale(float value);

  // optional float RadiosityNormalsConeAngle = 66;
  void clear_radiositynormalsconeangle();
  static const int kRadiosityNormalsConeAngleFieldNumber = 66;
  float radiositynormalsconeangle() const;
  void set_radiositynormalsconeangle(float value);

  // optional string File = 67;
  void clear_file();
  static const int kFileFieldNumber = 67;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // optional bool GenDerivNM = 68;
  void clear_genderivnm();
  static const int kGenDerivNMFieldNumber = 68;
  bool genderivnm() const;
  void set_genderivnm(bool value);

  // optional bool BentLimitRayDistance = 69;
  void clear_bentlimitraydistance();
  static const int kBentLimitRayDistanceFieldNumber = 69;
  bool bentlimitraydistance() const;
  void set_bentlimitraydistance(bool value);

  // optional float PRTBias = 70;
  void clear_prtbias();
  static const int kPRTBiasFieldNumber = 70;
  float prtbias() const;
  void set_prtbias(float value);

  // optional bool RenderWireframe = 71;
  void clear_renderwireframe();
  static const int kRenderWireframeFieldNumber = 71;
  bool renderwireframe() const;
  void set_renderwireframe(bool value);

  // optional bool PRTNormalize = 72;
  void clear_prtnormalize();
  static const int kPRTNormalizeFieldNumber = 72;
  bool prtnormalize() const;
  void set_prtnormalize(bool value);

  // optional bool GenAO = 73;
  void clear_genao();
  static const int kGenAOFieldNumber = 73;
  bool genao() const;
  void set_genao(bool value);

  // optional float PRTConeAngle = 74;
  void clear_prtconeangle();
  static const int kPRTConeAngleFieldNumber = 74;
  float prtconeangle() const;
  void set_prtconeangle(float value);

  // optional uint32 Height = 75;
  void clear_height();
  static const int kHeightFieldNumber = 75;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional float RadiosityNormalsAttenCuadratic = 76;
  void clear_radiositynormalsattencuadratic();
  static const int kRadiosityNormalsAttenCuadraticFieldNumber = 76;
  float radiositynormalsattencuadratic() const;
  void set_radiositynormalsattencuadratic(float value);

  // optional .tGenerateMaps.eHMNormalization DirectionsTonemap = 77;
  void clear_directionstonemap();
  static const int kDirectionsTonemapFieldNumber = 77;
  ::tGenerateMaps_eHMNormalization directionstonemap() const;
  void set_directionstonemap(::tGenerateMaps_eHMNormalization value);

  // optional bool DirectionsTS = 78;
  void clear_directionsts();
  static const int kDirectionsTSFieldNumber = 78;
  bool directionsts() const;
  void set_directionsts(bool value);

  // optional uint32 PRTRaysPerSample = 79;
  void clear_prtrayspersample();
  static const int kPRTRaysPerSampleFieldNumber = 79;
  ::google::protobuf::uint32 prtrayspersample() const;
  void set_prtrayspersample(::google::protobuf::uint32 value);

  // optional uint32 EdgePadding = 80;
  void clear_edgepadding();
  static const int kEdgePaddingFieldNumber = 80;
  ::google::protobuf::uint32 edgepadding() const;
  void set_edgepadding(::google::protobuf::uint32 value);

  // optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleZ = 81;
  void clear_directionsswizzlez();
  static const int kDirectionsSwizzleZFieldNumber = 81;
  ::tGenerateMaps_eSwizzleComponent directionsswizzlez() const;
  void set_directionsswizzlez(::tGenerateMaps_eSwizzleComponent value);

  // optional bool AOAllowPureOccluded = 82;
  void clear_aoallowpureoccluded();
  static const int kAOAllowPureOccludedFieldNumber = 82;
  bool aoallowpureoccluded() const;
  void set_aoallowpureoccluded(bool value);

  // optional bool AOIgnoreBackfaceHits = 83;
  void clear_aoignorebackfacehits();
  static const int kAOIgnoreBackfaceHitsFieldNumber = 83;
  bool aoignorebackfacehits() const;
  void set_aoignorebackfacehits(bool value);

  // optional uint32 CavityRaysPerSample = 84;
  void clear_cavityrayspersample();
  static const int kCavityRaysPerSampleFieldNumber = 84;
  ::google::protobuf::uint32 cavityrayspersample() const;
  void set_cavityrayspersample(::google::protobuf::uint32 value);

  // optional float AOAttenConstant = 85;
  void clear_aoattenconstant();
  static const int kAOAttenConstantFieldNumber = 85;
  float aoattenconstant() const;
  void set_aoattenconstant(float value);

  // optional bool CavityJitter = 86;
  void clear_cavityjitter();
  static const int kCavityJitterFieldNumber = 86;
  bool cavityjitter() const;
  void set_cavityjitter(bool value);

  // optional float HeightTonemapMax = 87;
  void clear_heighttonemapmax();
  static const int kHeightTonemapMaxFieldNumber = 87;
  float heighttonemapmax() const;
  void set_heighttonemapmax(float value);

  // optional bool GenDirections = 88;
  void clear_gendirections();
  static const int kGenDirectionsFieldNumber = 88;
  bool gendirections() const;
  void set_gendirections(bool value);

  // optional bool RadiosityNormalsLimitRayDistance = 89;
  void clear_radiositynormalslimitraydistance();
  static const int kRadiosityNormalsLimitRayDistanceFieldNumber = 89;
  bool radiositynormalslimitraydistance() const;
  void set_radiositynormalslimitraydistance(bool value);

  // optional float HeightTonemapMin = 90;
  void clear_heighttonemapmin();
  static const int kHeightTonemapMinFieldNumber = 90;
  float heighttonemapmin() const;
  void set_heighttonemapmin(float value);

  // optional bool RadiosityNormalsJitter = 91;
  void clear_radiositynormalsjitter();
  static const int kRadiosityNormalsJitterFieldNumber = 91;
  bool radiositynormalsjitter() const;
  void set_radiositynormalsjitter(bool value);

  // optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleY = 92;
  void clear_directionsswizzley();
  static const int kDirectionsSwizzleYFieldNumber = 92;
  ::tGenerateMaps_eSwizzleComponent directionsswizzley() const;
  void set_directionsswizzley(::tGenerateMaps_eSwizzleComponent value);

  // optional uint32 Width = 93;
  void clear_width();
  static const int kWidthFieldNumber = 93;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional bool BakeHighpolyBaseTextureDrawObjectIDIfNoTexture = 94;
  void clear_bakehighpolybasetexturedrawobjectidifnotexture();
  static const int kBakeHighpolyBaseTextureDrawObjectIDIfNoTextureFieldNumber = 94;
  bool bakehighpolybasetexturedrawobjectidifnotexture() const;
  void set_bakehighpolybasetexturedrawobjectidifnotexture(bool value);

  // optional bool Concavity = 95;
  void clear_concavity();
  static const int kConcavityFieldNumber = 95;
  bool concavity() const;
  void set_concavity(bool value);

  // optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleX = 96;
  void clear_directionsswizzlex();
  static const int kDirectionsSwizzleXFieldNumber = 96;
  ::tGenerateMaps_eSwizzleComponent directionsswizzlex() const;
  void set_directionsswizzlex(::tGenerateMaps_eSwizzleComponent value);

  // optional bool GenNormals = 97;
  void clear_gennormals();
  static const int kGenNormalsFieldNumber = 97;
  bool gennormals() const;
  void set_gennormals(bool value);

  // optional uint32 ProximityRaysPerSample = 98;
  void clear_proximityrayspersample();
  static const int kProximityRaysPerSampleFieldNumber = 98;
  ::google::protobuf::uint32 proximityrayspersample() const;
  void set_proximityrayspersample(::google::protobuf::uint32 value);

  // optional bool GenHeights = 99;
  void clear_genheights();
  static const int kGenHeightsFieldNumber = 99;
  bool genheights() const;
  void set_genheights(bool value);

  // optional float RadiosityNormalsAttenConstant = 100;
  void clear_radiositynormalsattenconstant();
  static const int kRadiosityNormalsAttenConstantFieldNumber = 100;
  float radiositynormalsattenconstant() const;
  void set_radiositynormalsattenconstant(float value);

  // optional bool GenProximity = 101;
  void clear_genproximity();
  static const int kGenProximityFieldNumber = 101;
  bool genproximity() const;
  void set_genproximity(bool value);

  // optional bool GenPRT = 102;
  void clear_genprt();
  static const int kGenPRTFieldNumber = 102;
  bool genprt() const;
  void set_genprt(bool value);

  // optional float CavityContrast = 103;
  void clear_cavitycontrast();
  static const int kCavityContrastFieldNumber = 103;
  float cavitycontrast() const;
  void set_cavitycontrast(float value);

  // optional .tGenerateMaps.eRNMCoordSys RadiosityNormalsCoordSys = 104;
  void clear_radiositynormalscoordsys();
  static const int kRadiosityNormalsCoordSysFieldNumber = 104;
  ::tGenerateMaps_eRNMCoordSys radiositynormalscoordsys() const;
  void set_radiositynormalscoordsys(::tGenerateMaps_eRNMCoordSys value);

  // optional bool TransluJitter = 105;
  void clear_translujitter();
  static const int kTransluJitterFieldNumber = 105;
  bool translujitter() const;
  void set_translujitter(bool value);

  // optional uint32 AORaysPerSample = 106;
  void clear_aorayspersample();
  static const int kAORaysPerSampleFieldNumber = 106;
  ::google::protobuf::uint32 aorayspersample() const;
  void set_aorayspersample(::google::protobuf::uint32 value);

  // optional float BentBias = 107;
  void clear_bentbias();
  static const int kBentBiasFieldNumber = 107;
  float bentbias() const;
  void set_bentbias(float value);

  // optional bool DiscardRayBackFacesHits = 108;
  void clear_discardraybackfaceshits();
  static const int kDiscardRayBackFacesHitsFieldNumber = 108;
  bool discardraybackfaceshits() const;
  void set_discardraybackfaceshits(bool value);

  // optional float AOConeAngle = 109;
  void clear_aoconeangle();
  static const int kAOConeAngleFieldNumber = 109;
  float aoconeangle() const;
  void set_aoconeangle(float value);

  // optional .tGenerateMaps.eSwizzleComponent BentSwizzleY = 110;
  void clear_bentswizzley();
  static const int kBentSwizzleYFieldNumber = 110;
  ::tGenerateMaps_eSwizzleComponent bentswizzley() const;
  void set_bentswizzley(::tGenerateMaps_eSwizzleComponent value);

  // optional float RadiosityNormalsBias = 111;
  void clear_radiositynormalsbias();
  static const int kRadiosityNormalsBiasFieldNumber = 111;
  float radiositynormalsbias() const;
  void set_radiositynormalsbias(float value);

  // optional float RadiosityNormalsContrast = 112;
  void clear_radiositynormalscontrast();
  static const int kRadiosityNormalsContrastFieldNumber = 112;
  float radiositynormalscontrast() const;
  void set_radiositynormalscontrast(float value);

  // optional uint32 CavitySteps = 113;
  void clear_cavitysteps();
  static const int kCavityStepsFieldNumber = 113;
  ::google::protobuf::uint32 cavitysteps() const;
  void set_cavitysteps(::google::protobuf::uint32 value);

  // optional .tGenerateMaps.eAntialiasing AA = 114;
  void clear_aa();
  static const int kAAFieldNumber = 114;
  ::tGenerateMaps_eAntialiasing aa() const;
  void set_aa(::tGenerateMaps_eAntialiasing value);

  // optional .tGenerateMaps.eSwizzleComponent BentSwizzleZ = 115;
  void clear_bentswizzlez();
  static const int kBentSwizzleZFieldNumber = 115;
  ::tGenerateMaps_eSwizzleComponent bentswizzlez() const;
  void set_bentswizzlez(::tGenerateMaps_eSwizzleComponent value);

  // optional uint32 BucketSize = 116;
  void clear_bucketsize();
  static const int kBucketSizeFieldNumber = 116;
  ::google::protobuf::uint32 bucketsize() const;
  void set_bucketsize(::google::protobuf::uint32 value);

  // optional float CurvConeAngle = 117;
  void clear_curvconeangle();
  static const int kCurvConeAngleFieldNumber = 117;
  float curvconeangle() const;
  void set_curvconeangle(float value);

  // optional float TransluDist = 118;
  void clear_transludist();
  static const int kTransluDistFieldNumber = 118;
  float transludist() const;
  void set_transludist(float value);

  // optional bool AOJitter = 119;
  void clear_aojitter();
  static const int kAOJitterFieldNumber = 119;
  bool aojitter() const;
  void set_aojitter(bool value);

  // optional float CurvBias = 120;
  void clear_curvbias();
  static const int kCurvBiasFieldNumber = 120;
  float curvbias() const;
  void set_curvbias(float value);

  // optional bool GenWireRays = 121;
  void clear_genwirerays();
  static const int kGenWireRaysFieldNumber = 121;
  bool genwirerays() const;
  void set_genwirerays(bool value);

  // optional .tGenerateMaps.eCurvAlgorithm CurvAlgorithm = 122;
  void clear_curvalgorithm();
  static const int kCurvAlgorithmFieldNumber = 122;
  ::tGenerateMaps_eCurvAlgorithm curvalgorithm() const;
  void set_curvalgorithm(::tGenerateMaps_eCurvAlgorithm value);

  // optional .tGenerateMaps.eAODistribution TransluDistribution = 123;
  void clear_transludistribution();
  static const int kTransluDistributionFieldNumber = 123;
  ::tGenerateMaps_eAODistribution transludistribution() const;
  void set_transludistribution(::tGenerateMaps_eAODistribution value);

  // optional float AOAttenLinear = 124;
  void clear_aoattenlinear();
  static const int kAOAttenLinearFieldNumber = 124;
  float aoattenlinear() const;
  void set_aoattenlinear(float value);

  // optional bool ProximityLimitRayDistance = 125;
  void clear_proximitylimitraydistance();
  static const int kProximityLimitRayDistanceFieldNumber = 125;
  bool proximitylimitraydistance() const;
  void set_proximitylimitraydistance(bool value);

  // optional bool GenRadiosityNormals = 126;
  void clear_genradiositynormals();
  static const int kGenRadiosityNormalsFieldNumber = 126;
  bool genradiositynormals() const;
  void set_genradiositynormals(bool value);

  // optional float ProximityConeAngle = 127;
  void clear_proximityconeangle();
  static const int kProximityConeAngleFieldNumber = 127;
  float proximityconeangle() const;
  void set_proximityconeangle(float value);

  // optional .tGenerateMaps.eHMNormalization HeightTonemap = 128;
  void clear_heighttonemap();
  static const int kHeightTonemapFieldNumber = 128;
  ::tGenerateMaps_eHMNormalization heighttonemap() const;
  void set_heighttonemap(::tGenerateMaps_eHMNormalization value);

  // optional bool GenCavity = 129;
  void clear_gencavity();
  static const int kGenCavityFieldNumber = 129;
  bool gencavity() const;
  void set_gencavity(bool value);

  // optional bool BakeHighpolyVCols = 130;
  void clear_bakehighpolyvcols();
  static const int kBakeHighpolyVColsFieldNumber = 130;
  bool bakehighpolyvcols() const;
  void set_bakehighpolyvcols(bool value);

  // @@protoc_insertion_point(class_scope:tGenerateMaps)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::tRGB8* nmbackgroundcolor_;
  ::tRGB8* hmbackgroundcolor_;
  ::tRGB8* bakehighpolybasetexturenotexcol_;
  ::tRGB8* bakehighpolybasetexturebackgroundcolor_;
  ::tRGB8* renderwireframebackgroundcolor_;
  ::tRGB8* renderwireframecol_;
  ::tRGB8* rendercwcol_;
  ::tRGB8* renderseamcol_;
  ::tRGB8* renderrayfailscol_;
  ::tRGB8* aooccludedcolor_;
  ::tRGB8* aounoccludedcolor_;
  ::tRGB8* aobackgroundcolor_;
  ::tRGB8* bentbackgroundcolor_;
  ::tRGB8* prtbackgroundcolor_;
  ::tRGB8* convexitybackgroundcolor_;
  ::tRGB8* thicknessbackgroundcolor_;
  ::tRGB8* proximitybackgroundcolor_;
  ::tRGB8* cavitybackgroundcolor_;
  ::tRGB8* vdmbackgroundcolor_;
  ::tRGB8* radnmbackgroundcolor_;
  ::tRGB8* curvbackgroundcolor_;
  ::tRGB8* derivnmbackgroundcolor_;
  ::tRGB8* translubackgroundcolor_;
  ::tRGB8* bakehighpolyvcolsbackgroundcol_;
  float directionstonemapmax_;
  bool closestiffails_;
  bool curvmonocrome_;
  bool benttangentspace_;
  bool gentranslu_;
  float aobias_;
  int aodistribution_;
  float prtthreshold_;
  float directionstonemapmin_;
  int curvdistribution_;
  int bentdistribution_;
  bool bentjitter_;
  bool bakehighpolybasetexture_;
  bool genconvexity_;
  bool prtlimitraydistance_;
  float radiositynormalsattenlinear_;
  ::google::protobuf::uint32 translurayspersample_;
  float curvsearchdistance_;
  int swizzlez_;
  float translubias_;
  ::google::protobuf::uint32 curvrayspersample_;
  int radiositynormalsdistribution_;
  bool genbent_;
  bool aolimitraydistance_;
  bool curvjitter_;
  bool tangentspace_;
  ::google::protobuf::uint32 radiositynormalsrayspersample_;
  int bentswizzlex_;
  int swizzley_;
  bool radiositynormalsallowpureocclusion_;
  bool gencurv_;
  bool prtjitter_;
  bool renderrayfails_;
  float aoattencuadratic_;
  float bentconeangle_;
  int swizzlex_;
  float cavitysearchradius_;
  float transluconeangle_;
  ::google::protobuf::uint32 bentrayspersample_;
  float convexityscale_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  float radiositynormalsconeangle_;
  bool radiositynormalsencodeao_;
  bool genderivnm_;
  bool bentlimitraydistance_;
  bool renderwireframe_;
  float prtbias_;
  float prtconeangle_;
  ::google::protobuf::uint32 height_;
  float radiositynormalsattencuadratic_;
  bool prtnormalize_;
  bool genao_;
  bool directionsts_;
  bool aoallowpureoccluded_;
  int directionstonemap_;
  ::google::protobuf::uint32 prtrayspersample_;
  ::google::protobuf::uint32 edgepadding_;
  int directionsswizzlez_;
  ::google::protobuf::uint32 cavityrayspersample_;
  float aoattenconstant_;
  bool aoignorebackfacehits_;
  bool cavityjitter_;
  bool gendirections_;
  bool radiositynormalslimitraydistance_;
  float heighttonemapmax_;
  float heighttonemapmin_;
  int directionsswizzley_;
  ::google::protobuf::uint32 width_;
  bool radiositynormalsjitter_;
  bool bakehighpolybasetexturedrawobjectidifnotexture_;
  bool concavity_;
  bool gennormals_;
  int directionsswizzlex_;
  ::google::protobuf::uint32 proximityrayspersample_;
  float radiositynormalsattenconstant_;
  bool genheights_;
  bool genproximity_;
  bool genprt_;
  bool translujitter_;
  float cavitycontrast_;
  int radiositynormalscoordsys_;
  ::google::protobuf::uint32 aorayspersample_;
  float bentbias_;
  float aoconeangle_;
  int bentswizzley_;
  float radiositynormalsbias_;
  float radiositynormalscontrast_;
  ::google::protobuf::uint32 cavitysteps_;
  int aa_;
  int bentswizzlez_;
  ::google::protobuf::uint32 bucketsize_;
  float curvconeangle_;
  float transludist_;
  bool discardraybackfaceshits_;
  bool aojitter_;
  bool genwirerays_;
  bool proximitylimitraydistance_;
  float curvbias_;
  int curvalgorithm_;
  int transludistribution_;
  float aoattenlinear_;
  float proximityconeangle_;
  int heighttonemap_;
  bool genradiositynormals_;
  bool gencavity_;
  bool bakehighpolyvcols_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_xnormal_2eproto();
  friend void protobuf_AssignDesc_xnormal_2eproto();
  friend void protobuf_ShutdownFile_xnormal_2eproto();

  void InitAsDefaultInstance();
  static tGenerateMaps* default_instance_;
};
// -------------------------------------------------------------------

class tHighPolyModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tHighPolyModel) */ {
 public:
  tHighPolyModel();
  virtual ~tHighPolyModel();

  tHighPolyModel(const tHighPolyModel& from);

  inline tHighPolyModel& operator=(const tHighPolyModel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tHighPolyModel& default_instance();

  void Swap(tHighPolyModel* other);

  // implements Message ----------------------------------------------

  inline tHighPolyModel* New() const { return New(NULL); }

  tHighPolyModel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tHighPolyModel& from);
  void MergeFrom(const tHighPolyModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tHighPolyModel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tHighPolyMesh Mesh = 1;
  int mesh_size() const;
  void clear_mesh();
  static const int kMeshFieldNumber = 1;
  const ::tHighPolyMesh& mesh(int index) const;
  ::tHighPolyMesh* mutable_mesh(int index);
  ::tHighPolyMesh* add_mesh();
  ::google::protobuf::RepeatedPtrField< ::tHighPolyMesh >*
      mutable_mesh();
  const ::google::protobuf::RepeatedPtrField< ::tHighPolyMesh >&
      mesh() const;

  // optional string BaseTex = 2;
  void clear_basetex();
  static const int kBaseTexFieldNumber = 2;
  const ::std::string& basetex() const;
  void set_basetex(const ::std::string& value);
  void set_basetex(const char* value);
  void set_basetex(const char* value, size_t size);
  ::std::string* mutable_basetex();
  ::std::string* release_basetex();
  void set_allocated_basetex(::std::string* basetex);

  // optional float DefaultMeshScale = 3;
  void clear_defaultmeshscale();
  static const int kDefaultMeshScaleFieldNumber = 3;
  float defaultmeshscale() const;
  void set_defaultmeshscale(float value);

  // @@protoc_insertion_point(class_scope:tHighPolyModel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::tHighPolyMesh > mesh_;
  ::google::protobuf::internal::ArenaStringPtr basetex_;
  float defaultmeshscale_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_xnormal_2eproto();
  friend void protobuf_AssignDesc_xnormal_2eproto();
  friend void protobuf_ShutdownFile_xnormal_2eproto();

  void InitAsDefaultInstance();
  static tHighPolyModel* default_instance_;
};
// -------------------------------------------------------------------

class tLowPolyModel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tLowPolyModel) */ {
 public:
  tLowPolyModel();
  virtual ~tLowPolyModel();

  tLowPolyModel(const tLowPolyModel& from);

  inline tLowPolyModel& operator=(const tLowPolyModel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tLowPolyModel& default_instance();

  void Swap(tLowPolyModel* other);

  // implements Message ----------------------------------------------

  inline tLowPolyModel* New() const { return New(NULL); }

  tLowPolyModel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tLowPolyModel& from);
  void MergeFrom(const tLowPolyModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tLowPolyModel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tLowPolyMesh Mesh = 1;
  int mesh_size() const;
  void clear_mesh();
  static const int kMeshFieldNumber = 1;
  const ::tLowPolyMesh& mesh(int index) const;
  ::tLowPolyMesh* mutable_mesh(int index);
  ::tLowPolyMesh* add_mesh();
  ::google::protobuf::RepeatedPtrField< ::tLowPolyMesh >*
      mutable_mesh();
  const ::google::protobuf::RepeatedPtrField< ::tLowPolyMesh >&
      mesh() const;

  // optional float DefaultMeshScale = 2;
  void clear_defaultmeshscale();
  static const int kDefaultMeshScaleFieldNumber = 2;
  float defaultmeshscale() const;
  void set_defaultmeshscale(float value);

  // @@protoc_insertion_point(class_scope:tLowPolyModel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::tLowPolyMesh > mesh_;
  float defaultmeshscale_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_xnormal_2eproto();
  friend void protobuf_AssignDesc_xnormal_2eproto();
  friend void protobuf_ShutdownFile_xnormal_2eproto();

  void InitAsDefaultInstance();
  static tLowPolyModel* default_instance_;
};
// -------------------------------------------------------------------

class tViewer3D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tViewer3D) */ {
 public:
  tViewer3D();
  virtual ~tViewer3D();

  tViewer3D(const tViewer3D& from);

  inline tViewer3D& operator=(const tViewer3D& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tViewer3D& default_instance();

  void Swap(tViewer3D* other);

  // implements Message ----------------------------------------------

  inline tViewer3D* New() const { return New(NULL); }

  tViewer3D* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tViewer3D& from);
  void MergeFrom(const tViewer3D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tViewer3D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tRGB8 LightAmbientColor = 1;
  bool has_lightambientcolor() const;
  void clear_lightambientcolor();
  static const int kLightAmbientColorFieldNumber = 1;
  const ::tRGB8& lightambientcolor() const;
  ::tRGB8* mutable_lightambientcolor();
  ::tRGB8* release_lightambientcolor();
  void set_allocated_lightambientcolor(::tRGB8* lightambientcolor);

  // optional .tRGB8 LightDiffuseColor = 2;
  bool has_lightdiffusecolor() const;
  void clear_lightdiffusecolor();
  static const int kLightDiffuseColorFieldNumber = 2;
  const ::tRGB8& lightdiffusecolor() const;
  ::tRGB8* mutable_lightdiffusecolor();
  ::tRGB8* release_lightdiffusecolor();
  void set_allocated_lightdiffusecolor(::tRGB8* lightdiffusecolor);

  // optional .tRGB8 LightSpecularColor = 3;
  bool has_lightspecularcolor() const;
  void clear_lightspecularcolor();
  static const int kLightSpecularColorFieldNumber = 3;
  const ::tRGB8& lightspecularcolor() const;
  ::tRGB8* mutable_lightspecularcolor();
  ::tRGB8* release_lightspecularcolor();
  void set_allocated_lightspecularcolor(::tRGB8* lightspecularcolor);

  // optional .tRGB8 LightSecondaryColor = 4;
  bool has_lightsecondarycolor() const;
  void clear_lightsecondarycolor();
  static const int kLightSecondaryColorFieldNumber = 4;
  const ::tRGB8& lightsecondarycolor() const;
  ::tRGB8* mutable_lightsecondarycolor();
  ::tRGB8* release_lightsecondarycolor();
  void set_allocated_lightsecondarycolor(::tRGB8* lightsecondarycolor);

  // optional .tRGB8 LightTertiaryColor = 5;
  bool has_lighttertiarycolor() const;
  void clear_lighttertiarycolor();
  static const int kLightTertiaryColorFieldNumber = 5;
  const ::tRGB8& lighttertiarycolor() const;
  ::tRGB8* mutable_lighttertiarycolor();
  ::tRGB8* release_lighttertiarycolor();
  void set_allocated_lighttertiarycolor(::tRGB8* lighttertiarycolor);

  // optional .tRGB8 BackgroundColor = 6;
  bool has_backgroundcolor() const;
  void clear_backgroundcolor();
  static const int kBackgroundColorFieldNumber = 6;
  const ::tRGB8& backgroundcolor() const;
  ::tRGB8* mutable_backgroundcolor();
  ::tRGB8* release_backgroundcolor();
  void set_allocated_backgroundcolor(::tRGB8* backgroundcolor);

  // optional .tRGB8 GridColor = 7;
  bool has_gridcolor() const;
  void clear_gridcolor();
  static const int kGridColorFieldNumber = 7;
  const ::tRGB8& gridcolor() const;
  ::tRGB8* mutable_gridcolor();
  ::tRGB8* release_gridcolor();
  void set_allocated_gridcolor(::tRGB8* gridcolor);

  // optional .tRGB8 CageColor = 8;
  bool has_cagecolor() const;
  void clear_cagecolor();
  static const int kCageColorFieldNumber = 8;
  const ::tRGB8& cagecolor() const;
  ::tRGB8* mutable_cagecolor();
  ::tRGB8* release_cagecolor();
  void set_allocated_cagecolor(::tRGB8* cagecolor);

  // optional .tMatrix CameraRotation = 9;
  bool has_camerarotation() const;
  void clear_camerarotation();
  static const int kCameraRotationFieldNumber = 9;
  const ::tMatrix& camerarotation() const;
  ::tMatrix* mutable_camerarotation();
  ::tMatrix* release_camerarotation();
  void set_allocated_camerarotation(::tMatrix* camerarotation);

  // optional .tVector3 CameraPosition = 10;
  bool has_cameraposition() const;
  void clear_cameraposition();
  static const int kCameraPositionFieldNumber = 10;
  const ::tVector3& cameraposition() const;
  ::tVector3* mutable_cameraposition();
  ::tVector3* release_cameraposition();
  void set_allocated_cameraposition(::tVector3* cameraposition);

  // optional .tVector3 LightPosition = 11;
  bool has_lightposition() const;
  void clear_lightposition();
  static const int kLightPositionFieldNumber = 11;
  const ::tVector3& lightposition() const;
  ::tVector3* mutable_lightposition();
  ::tVector3* release_lightposition();
  void set_allocated_lightposition(::tVector3* lightposition);

  // optional float AxisScl = 12;
  void clear_axisscl();
  static const int kAxisSclFieldNumber = 12;
  float axisscl() const;
  void set_axisscl(float value);

  // optional bool XemakosExample = 13;
  void clear_xemakosexample();
  static const int kXemakosExampleFieldNumber = 13;
  bool xemakosexample() const;
  void set_xemakosexample(bool value);

  // optional bool ShowWireframe = 14;
  void clear_showwireframe();
  static const int kShowWireframeFieldNumber = 14;
  bool showwireframe() const;
  void set_showwireframe(bool value);

  // optional float CageOpacity = 15;
  void clear_cageopacity();
  static const int kCageOpacityFieldNumber = 15;
  float cageopacity() const;
  void set_cageopacity(float value);

  // optional float DiffuseGIIntensity = 16;
  void clear_diffusegiintensity();
  static const int kDiffuseGIIntensityFieldNumber = 16;
  float diffusegiintensity() const;
  void set_diffusegiintensity(float value);

  // optional bool ShowAO = 17;
  void clear_showao();
  static const int kShowAOFieldNumber = 17;
  bool showao() const;
  void set_showao(bool value);

  // optional float SSAOContrast = 18;
  void clear_ssaocontrast();
  static const int kSSAOContrastFieldNumber = 18;
  float ssaocontrast() const;
  void set_ssaocontrast(float value);

  // optional float ShadowArea = 19;
  void clear_shadowarea();
  static const int kShadowAreaFieldNumber = 19;
  float shadowarea() const;
  void set_shadowarea(float value);

  // optional float LightIndiretIntensity = 20;
  void clear_lightindiretintensity();
  static const int kLightIndiretIntensityFieldNumber = 20;
  float lightindiretintensity() const;
  void set_lightindiretintensity(float value);

  // optional bool ShowHighpolys = 21;
  void clear_showhighpolys();
  static const int kShowHighpolysFieldNumber = 21;
  bool showhighpolys() const;
  void set_showhighpolys(bool value);

  // optional bool ShowStarfield = 22;
  void clear_showstarfield();
  static const int kShowStarfieldFieldNumber = 22;
  bool showstarfield() const;
  void set_showstarfield(bool value);

  // optional bool ShowBlockers = 23;
  void clear_showblockers();
  static const int kShowBlockersFieldNumber = 23;
  bool showblockers() const;
  void set_showblockers(bool value);

  // optional float HDRThreshold = 24;
  void clear_hdrthreshold();
  static const int kHDRThresholdFieldNumber = 24;
  float hdrthreshold() const;
  void set_hdrthreshold(float value);

  // optional float SSAOBright = 25;
  void clear_ssaobright();
  static const int kSSAOBrightFieldNumber = 25;
  float ssaobright() const;
  void set_ssaobright(float value);

  // optional float SSAOBlurRadius = 26;
  void clear_ssaoblurradius();
  static const int kSSAOBlurRadiusFieldNumber = 26;
  float ssaoblurradius() const;
  void set_ssaoblurradius(float value);

  // optional bool ShowGrid = 27;
  void clear_showgrid();
  static const int kShowGridFieldNumber = 27;
  bool showgrid() const;
  void set_showgrid(bool value);

  // optional float ParallaxStrength = 28;
  void clear_parallaxstrength();
  static const int kParallaxStrengthFieldNumber = 28;
  float parallaxstrength() const;
  void set_parallaxstrength(float value);

  // optional float SSAOAtten = 29;
  void clear_ssaoatten();
  static const int kSSAOAttenFieldNumber = 29;
  float ssaoatten() const;
  void set_ssaoatten(float value);

  // optional float CameraOrbitDistance = 30;
  void clear_cameraorbitdistance();
  static const int kCameraOrbitDistanceFieldNumber = 30;
  float cameraorbitdistance() const;
  void set_cameraorbitdistance(float value);

  // optional bool UseGlow = 31;
  void clear_useglow();
  static const int kUseGlowFieldNumber = 31;
  bool useglow() const;
  void set_useglow(bool value);

  // optional bool SSAOEnabled = 32;
  void clear_ssaoenabled();
  static const int kSSAOEnabledFieldNumber = 32;
  bool ssaoenabled() const;
  void set_ssaoenabled(bool value);

  // optional float ShadowBias = 33;
  void clear_shadowbias();
  static const int kShadowBiasFieldNumber = 33;
  float shadowbias() const;
  void set_shadowbias(float value);

  // optional float SSAORadius = 34;
  void clear_ssaoradius();
  static const int kSSAORadiusFieldNumber = 34;
  float ssaoradius() const;
  void set_ssaoradius(float value);

  // optional float LightIntensity = 35;
  void clear_lightintensity();
  static const int kLightIntensityFieldNumber = 35;
  float lightintensity() const;
  void set_lightintensity(float value);

  // optional float Exposure = 36;
  void clear_exposure();
  static const int kExposureFieldNumber = 36;
  float exposure() const;
  void set_exposure(float value);

  // optional bool CameraOrbitAutoCenter = 37;
  void clear_cameraorbitautocenter();
  static const int kCameraOrbitAutoCenterFieldNumber = 37;
  bool cameraorbitautocenter() const;
  void set_cameraorbitautocenter(bool value);

  // optional bool CastShadows = 38;
  void clear_castshadows();
  static const int kCastShadowsFieldNumber = 38;
  bool castshadows() const;
  void set_castshadows(bool value);

  // optional bool ShowNormals = 39;
  void clear_shownormals();
  static const int kShowNormalsFieldNumber = 39;
  bool shownormals() const;
  void set_shownormals(bool value);

  // optional int64 MaxTessellationLevel = 40;
  void clear_maxtessellationlevel();
  static const int kMaxTessellationLevelFieldNumber = 40;
  ::google::protobuf::int64 maxtessellationlevel() const;
  void set_maxtessellationlevel(::google::protobuf::int64 value);

  // optional bool ShowTangents = 41;
  void clear_showtangents();
  static const int kShowTangentsFieldNumber = 41;
  bool showtangents() const;
  void set_showtangents(bool value);

  // optional float GlowIntensity = 42;
  void clear_glowintensity();
  static const int kGlowIntensityFieldNumber = 42;
  float glowintensity() const;
  void set_glowintensity(float value);

  // @@protoc_insertion_point(class_scope:tViewer3D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::tRGB8* lightambientcolor_;
  ::tRGB8* lightdiffusecolor_;
  ::tRGB8* lightspecularcolor_;
  ::tRGB8* lightsecondarycolor_;
  ::tRGB8* lighttertiarycolor_;
  ::tRGB8* backgroundcolor_;
  ::tRGB8* gridcolor_;
  ::tRGB8* cagecolor_;
  ::tMatrix* camerarotation_;
  ::tVector3* cameraposition_;
  ::tVector3* lightposition_;
  float axisscl_;
  float cageopacity_;
  float diffusegiintensity_;
  bool xemakosexample_;
  bool showwireframe_;
  bool showao_;
  bool showhighpolys_;
  float ssaocontrast_;
  float shadowarea_;
  float lightindiretintensity_;
  float hdrthreshold_;
  float ssaobright_;
  bool showstarfield_;
  bool showblockers_;
  bool showgrid_;
  bool useglow_;
  float ssaoblurradius_;
  float parallaxstrength_;
  float ssaoatten_;
  float cameraorbitdistance_;
  float shadowbias_;
  float ssaoradius_;
  float lightintensity_;
  float exposure_;
  bool ssaoenabled_;
  bool cameraorbitautocenter_;
  bool castshadows_;
  bool shownormals_;
  bool showtangents_;
  ::google::protobuf::int64 maxtessellationlevel_;
  float glowintensity_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_xnormal_2eproto();
  friend void protobuf_AssignDesc_xnormal_2eproto();
  friend void protobuf_ShutdownFile_xnormal_2eproto();

  void InitAsDefaultInstance();
  static tViewer3D* default_instance_;
};
// -------------------------------------------------------------------

class SettingsType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SettingsType) */ {
 public:
  SettingsType();
  virtual ~SettingsType();

  SettingsType(const SettingsType& from);

  inline SettingsType& operator=(const SettingsType& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SettingsType& default_instance();

  void Swap(SettingsType* other);

  // implements Message ----------------------------------------------

  inline SettingsType* New() const { return New(NULL); }

  SettingsType* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SettingsType& from);
  void MergeFrom(const SettingsType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SettingsType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tHighPolyModel HighPolyModel = 1;
  bool has_highpolymodel() const;
  void clear_highpolymodel();
  static const int kHighPolyModelFieldNumber = 1;
  const ::tHighPolyModel& highpolymodel() const;
  ::tHighPolyModel* mutable_highpolymodel();
  ::tHighPolyModel* release_highpolymodel();
  void set_allocated_highpolymodel(::tHighPolyModel* highpolymodel);

  // optional .tLowPolyModel LowPolyModel = 2;
  bool has_lowpolymodel() const;
  void clear_lowpolymodel();
  static const int kLowPolyModelFieldNumber = 2;
  const ::tLowPolyModel& lowpolymodel() const;
  ::tLowPolyModel* mutable_lowpolymodel();
  ::tLowPolyModel* release_lowpolymodel();
  void set_allocated_lowpolymodel(::tLowPolyModel* lowpolymodel);

  // optional .tGenerateMaps GenerateMaps = 3;
  bool has_generatemaps() const;
  void clear_generatemaps();
  static const int kGenerateMapsFieldNumber = 3;
  const ::tGenerateMaps& generatemaps() const;
  ::tGenerateMaps* mutable_generatemaps();
  ::tGenerateMaps* release_generatemaps();
  void set_allocated_generatemaps(::tGenerateMaps* generatemaps);

  // optional .tDetail Detail = 4;
  bool has_detail() const;
  void clear_detail();
  static const int kDetailFieldNumber = 4;
  const ::tDetail& detail() const;
  ::tDetail* mutable_detail();
  ::tDetail* release_detail();
  void set_allocated_detail(::tDetail* detail);

  // optional .tViewer3D Viewer3D = 5;
  bool has_viewer3d() const;
  void clear_viewer3d();
  static const int kViewer3DFieldNumber = 5;
  const ::tViewer3D& viewer3d() const;
  ::tViewer3D* mutable_viewer3d();
  ::tViewer3D* release_viewer3d();
  void set_allocated_viewer3d(::tViewer3D* viewer3d);

  // optional string Version = 6;
  void clear_version();
  static const int kVersionFieldNumber = 6;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:SettingsType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::tHighPolyModel* highpolymodel_;
  ::tLowPolyModel* lowpolymodel_;
  ::tGenerateMaps* generatemaps_;
  ::tDetail* detail_;
  ::tViewer3D* viewer3d_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_xnormal_2eproto();
  friend void protobuf_AssignDesc_xnormal_2eproto();
  friend void protobuf_ShutdownFile_xnormal_2eproto();

  void InitAsDefaultInstance();
  static SettingsType* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// UnspecifiedType

// optional string baseObjectType = 1;
inline void UnspecifiedType::clear_baseobjecttype() {
  baseobjecttype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnspecifiedType::baseobjecttype() const {
  // @@protoc_insertion_point(field_get:UnspecifiedType.baseObjectType)
  return baseobjecttype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnspecifiedType::set_baseobjecttype(const ::std::string& value) {
  
  baseobjecttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UnspecifiedType.baseObjectType)
}
inline void UnspecifiedType::set_baseobjecttype(const char* value) {
  
  baseobjecttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UnspecifiedType.baseObjectType)
}
inline void UnspecifiedType::set_baseobjecttype(const char* value, size_t size) {
  
  baseobjecttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UnspecifiedType.baseObjectType)
}
inline ::std::string* UnspecifiedType::mutable_baseobjecttype() {
  
  // @@protoc_insertion_point(field_mutable:UnspecifiedType.baseObjectType)
  return baseobjecttype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnspecifiedType::release_baseobjecttype() {
  // @@protoc_insertion_point(field_release:UnspecifiedType.baseObjectType)
  
  return baseobjecttype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnspecifiedType::set_allocated_baseobjecttype(::std::string* baseobjecttype) {
  if (baseobjecttype != NULL) {
    
  } else {
    
  }
  baseobjecttype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), baseobjecttype);
  // @@protoc_insertion_point(field_set_allocated:UnspecifiedType.baseObjectType)
}

// optional bytes object = 2;
inline void UnspecifiedType::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnspecifiedType::object() const {
  // @@protoc_insertion_point(field_get:UnspecifiedType.object)
  return object_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnspecifiedType::set_object(const ::std::string& value) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UnspecifiedType.object)
}
inline void UnspecifiedType::set_object(const char* value) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UnspecifiedType.object)
}
inline void UnspecifiedType::set_object(const void* value, size_t size) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UnspecifiedType.object)
}
inline ::std::string* UnspecifiedType::mutable_object() {
  
  // @@protoc_insertion_point(field_mutable:UnspecifiedType.object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnspecifiedType::release_object() {
  // @@protoc_insertion_point(field_release:UnspecifiedType.object)
  
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnspecifiedType::set_allocated_object(::std::string* object) {
  if (object != NULL) {
    
  } else {
    
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:UnspecifiedType.object)
}

// -------------------------------------------------------------------

// tMatrix

// optional float e13 = 1;
inline void tMatrix::clear_e13() {
  e13_ = 0;
}
inline float tMatrix::e13() const {
  // @@protoc_insertion_point(field_get:tMatrix.e13)
  return e13_;
}
inline void tMatrix::set_e13(float value) {
  
  e13_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e13)
}

// optional float e12 = 2;
inline void tMatrix::clear_e12() {
  e12_ = 0;
}
inline float tMatrix::e12() const {
  // @@protoc_insertion_point(field_get:tMatrix.e12)
  return e12_;
}
inline void tMatrix::set_e12(float value) {
  
  e12_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e12)
}

// optional float e23 = 3;
inline void tMatrix::clear_e23() {
  e23_ = 0;
}
inline float tMatrix::e23() const {
  // @@protoc_insertion_point(field_get:tMatrix.e23)
  return e23_;
}
inline void tMatrix::set_e23(float value) {
  
  e23_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e23)
}

// optional float e31 = 4;
inline void tMatrix::clear_e31() {
  e31_ = 0;
}
inline float tMatrix::e31() const {
  // @@protoc_insertion_point(field_get:tMatrix.e31)
  return e31_;
}
inline void tMatrix::set_e31(float value) {
  
  e31_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e31)
}

// optional float e11 = 5;
inline void tMatrix::clear_e11() {
  e11_ = 0;
}
inline float tMatrix::e11() const {
  // @@protoc_insertion_point(field_get:tMatrix.e11)
  return e11_;
}
inline void tMatrix::set_e11(float value) {
  
  e11_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e11)
}

// optional float e22 = 6;
inline void tMatrix::clear_e22() {
  e22_ = 0;
}
inline float tMatrix::e22() const {
  // @@protoc_insertion_point(field_get:tMatrix.e22)
  return e22_;
}
inline void tMatrix::set_e22(float value) {
  
  e22_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e22)
}

// optional float e33 = 7;
inline void tMatrix::clear_e33() {
  e33_ = 0;
}
inline float tMatrix::e33() const {
  // @@protoc_insertion_point(field_get:tMatrix.e33)
  return e33_;
}
inline void tMatrix::set_e33(float value) {
  
  e33_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e33)
}

// optional float e21 = 8;
inline void tMatrix::clear_e21() {
  e21_ = 0;
}
inline float tMatrix::e21() const {
  // @@protoc_insertion_point(field_get:tMatrix.e21)
  return e21_;
}
inline void tMatrix::set_e21(float value) {
  
  e21_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e21)
}

// optional float e32 = 9;
inline void tMatrix::clear_e32() {
  e32_ = 0;
}
inline float tMatrix::e32() const {
  // @@protoc_insertion_point(field_get:tMatrix.e32)
  return e32_;
}
inline void tMatrix::set_e32(float value) {
  
  e32_ = value;
  // @@protoc_insertion_point(field_set:tMatrix.e32)
}

// -------------------------------------------------------------------

// tDetail

// optional .tDetail.eHM2NMMethod Method = 1;
inline void tDetail::clear_method() {
  method_ = 0;
}
inline ::tDetail_eHM2NMMethod tDetail::method() const {
  // @@protoc_insertion_point(field_get:tDetail.Method)
  return static_cast< ::tDetail_eHM2NMMethod >(method_);
}
inline void tDetail::set_method(::tDetail_eHM2NMMethod value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:tDetail.Method)
}

// optional float Scale = 2;
inline void tDetail::clear_scale() {
  scale_ = 0;
}
inline float tDetail::scale() const {
  // @@protoc_insertion_point(field_get:tDetail.Scale)
  return scale_;
}
inline void tDetail::set_scale(float value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:tDetail.Scale)
}

// optional string File = 3;
inline void tDetail::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tDetail::file() const {
  // @@protoc_insertion_point(field_get:tDetail.File)
  return file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tDetail::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tDetail.File)
}
inline void tDetail::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tDetail.File)
}
inline void tDetail::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tDetail.File)
}
inline ::std::string* tDetail::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:tDetail.File)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tDetail::release_file() {
  // @@protoc_insertion_point(field_release:tDetail.File)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tDetail::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:tDetail.File)
}

// -------------------------------------------------------------------

// tRGB8

// optional uint32 G = 1;
inline void tRGB8::clear_g() {
  g_ = 0u;
}
inline ::google::protobuf::uint32 tRGB8::g() const {
  // @@protoc_insertion_point(field_get:tRGB8.G)
  return g_;
}
inline void tRGB8::set_g(::google::protobuf::uint32 value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:tRGB8.G)
}

// optional uint32 R = 2;
inline void tRGB8::clear_r() {
  r_ = 0u;
}
inline ::google::protobuf::uint32 tRGB8::r() const {
  // @@protoc_insertion_point(field_get:tRGB8.R)
  return r_;
}
inline void tRGB8::set_r(::google::protobuf::uint32 value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:tRGB8.R)
}

// optional uint32 B = 3;
inline void tRGB8::clear_b() {
  b_ = 0u;
}
inline ::google::protobuf::uint32 tRGB8::b() const {
  // @@protoc_insertion_point(field_get:tRGB8.B)
  return b_;
}
inline void tRGB8::set_b(::google::protobuf::uint32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:tRGB8.B)
}

// -------------------------------------------------------------------

// tHighPolyMesh

// optional string File = 1;
inline void tHighPolyMesh::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tHighPolyMesh::file() const {
  // @@protoc_insertion_point(field_get:tHighPolyMesh.File)
  return file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tHighPolyMesh::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tHighPolyMesh.File)
}
inline void tHighPolyMesh::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tHighPolyMesh.File)
}
inline void tHighPolyMesh::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tHighPolyMesh.File)
}
inline ::std::string* tHighPolyMesh::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:tHighPolyMesh.File)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tHighPolyMesh::release_file() {
  // @@protoc_insertion_point(field_release:tHighPolyMesh.File)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tHighPolyMesh::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:tHighPolyMesh.File)
}

// optional string PositionOffset = 2;
inline void tHighPolyMesh::clear_positionoffset() {
  positionoffset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tHighPolyMesh::positionoffset() const {
  // @@protoc_insertion_point(field_get:tHighPolyMesh.PositionOffset)
  return positionoffset_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tHighPolyMesh::set_positionoffset(const ::std::string& value) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tHighPolyMesh.PositionOffset)
}
inline void tHighPolyMesh::set_positionoffset(const char* value) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tHighPolyMesh.PositionOffset)
}
inline void tHighPolyMesh::set_positionoffset(const char* value, size_t size) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tHighPolyMesh.PositionOffset)
}
inline ::std::string* tHighPolyMesh::mutable_positionoffset() {
  
  // @@protoc_insertion_point(field_mutable:tHighPolyMesh.PositionOffset)
  return positionoffset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tHighPolyMesh::release_positionoffset() {
  // @@protoc_insertion_point(field_release:tHighPolyMesh.PositionOffset)
  
  return positionoffset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tHighPolyMesh::set_allocated_positionoffset(::std::string* positionoffset) {
  if (positionoffset != NULL) {
    
  } else {
    
  }
  positionoffset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positionoffset);
  // @@protoc_insertion_point(field_set_allocated:tHighPolyMesh.PositionOffset)
}

// optional bool IgnorePerVertexColor = 3;
inline void tHighPolyMesh::clear_ignorepervertexcolor() {
  ignorepervertexcolor_ = false;
}
inline bool tHighPolyMesh::ignorepervertexcolor() const {
  // @@protoc_insertion_point(field_get:tHighPolyMesh.IgnorePerVertexColor)
  return ignorepervertexcolor_;
}
inline void tHighPolyMesh::set_ignorepervertexcolor(bool value) {
  
  ignorepervertexcolor_ = value;
  // @@protoc_insertion_point(field_set:tHighPolyMesh.IgnorePerVertexColor)
}

// optional .tHighPolyMesh.eSmoothNormals AverageNormals = 4;
inline void tHighPolyMesh::clear_averagenormals() {
  averagenormals_ = 0;
}
inline ::tHighPolyMesh_eSmoothNormals tHighPolyMesh::averagenormals() const {
  // @@protoc_insertion_point(field_get:tHighPolyMesh.AverageNormals)
  return static_cast< ::tHighPolyMesh_eSmoothNormals >(averagenormals_);
}
inline void tHighPolyMesh::set_averagenormals(::tHighPolyMesh_eSmoothNormals value) {
  
  averagenormals_ = value;
  // @@protoc_insertion_point(field_set:tHighPolyMesh.AverageNormals)
}

// optional bool Visible = 5;
inline void tHighPolyMesh::clear_visible() {
  visible_ = false;
}
inline bool tHighPolyMesh::visible() const {
  // @@protoc_insertion_point(field_get:tHighPolyMesh.Visible)
  return visible_;
}
inline void tHighPolyMesh::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:tHighPolyMesh.Visible)
}

// optional bool BaseTexIsTSNM = 6;
inline void tHighPolyMesh::clear_basetexistsnm() {
  basetexistsnm_ = false;
}
inline bool tHighPolyMesh::basetexistsnm() const {
  // @@protoc_insertion_point(field_get:tHighPolyMesh.BaseTexIsTSNM)
  return basetexistsnm_;
}
inline void tHighPolyMesh::set_basetexistsnm(bool value) {
  
  basetexistsnm_ = value;
  // @@protoc_insertion_point(field_set:tHighPolyMesh.BaseTexIsTSNM)
}

// optional float Scale = 7;
inline void tHighPolyMesh::clear_scale() {
  scale_ = 0;
}
inline float tHighPolyMesh::scale() const {
  // @@protoc_insertion_point(field_get:tHighPolyMesh.Scale)
  return scale_;
}
inline void tHighPolyMesh::set_scale(float value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:tHighPolyMesh.Scale)
}

// -------------------------------------------------------------------

// tLowPolyMesh

// optional string BaseTex = 1;
inline void tLowPolyMesh::clear_basetex() {
  basetex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tLowPolyMesh::basetex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.BaseTex)
  return basetex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_basetex(const ::std::string& value) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.BaseTex)
}
inline void tLowPolyMesh::set_basetex(const char* value) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.BaseTex)
}
inline void tLowPolyMesh::set_basetex(const char* value, size_t size) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.BaseTex)
}
inline ::std::string* tLowPolyMesh::mutable_basetex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.BaseTex)
  return basetex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tLowPolyMesh::release_basetex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.BaseTex)
  
  return basetex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_allocated_basetex(::std::string* basetex) {
  if (basetex != NULL) {
    
  } else {
    
  }
  basetex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basetex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.BaseTex)
}

// optional string BlockersFile = 2;
inline void tLowPolyMesh::clear_blockersfile() {
  blockersfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tLowPolyMesh::blockersfile() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.BlockersFile)
  return blockersfile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_blockersfile(const ::std::string& value) {
  
  blockersfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.BlockersFile)
}
inline void tLowPolyMesh::set_blockersfile(const char* value) {
  
  blockersfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.BlockersFile)
}
inline void tLowPolyMesh::set_blockersfile(const char* value, size_t size) {
  
  blockersfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.BlockersFile)
}
inline ::std::string* tLowPolyMesh::mutable_blockersfile() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.BlockersFile)
  return blockersfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tLowPolyMesh::release_blockersfile() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.BlockersFile)
  
  return blockersfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_allocated_blockersfile(::std::string* blockersfile) {
  if (blockersfile != NULL) {
    
  } else {
    
  }
  blockersfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockersfile);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.BlockersFile)
}

// optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleZ = 3;
inline void tLowPolyMesh::clear_vvdmswizzlez() {
  vvdmswizzlez_ = 0;
}
inline ::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::vvdmswizzlez() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.VVDMSwizzleZ)
  return static_cast< ::tLowPolyMesh_eSwizzleComponent >(vvdmswizzlez_);
}
inline void tLowPolyMesh::set_vvdmswizzlez(::tLowPolyMesh_eSwizzleComponent value) {
  
  vvdmswizzlez_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.VVDMSwizzleZ)
}

// optional float FresnelRefractiveIndex = 4;
inline void tLowPolyMesh::clear_fresnelrefractiveindex() {
  fresnelrefractiveindex_ = 0;
}
inline float tLowPolyMesh::fresnelrefractiveindex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.FresnelRefractiveIndex)
  return fresnelrefractiveindex_;
}
inline void tLowPolyMesh::set_fresnelrefractiveindex(float value) {
  
  fresnelrefractiveindex_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.FresnelRefractiveIndex)
}

// optional float UOffset = 5;
inline void tLowPolyMesh::clear_uoffset() {
  uoffset_ = 0;
}
inline float tLowPolyMesh::uoffset() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.UOffset)
  return uoffset_;
}
inline void tLowPolyMesh::set_uoffset(float value) {
  
  uoffset_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.UOffset)
}

// optional float ReflectHDRMult = 6;
inline void tLowPolyMesh::clear_reflecthdrmult() {
  reflecthdrmult_ = 0;
}
inline float tLowPolyMesh::reflecthdrmult() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.ReflectHDRMult)
  return reflecthdrmult_;
}
inline void tLowPolyMesh::set_reflecthdrmult(float value) {
  
  reflecthdrmult_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.ReflectHDRMult)
}

// optional .tLowPolyMesh.eTransparencyMode TransparencyMode = 7;
inline void tLowPolyMesh::clear_transparencymode() {
  transparencymode_ = 0;
}
inline ::tLowPolyMesh_eTransparencyMode tLowPolyMesh::transparencymode() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.TransparencyMode)
  return static_cast< ::tLowPolyMesh_eTransparencyMode >(transparencymode_);
}
inline void tLowPolyMesh::set_transparencymode(::tLowPolyMesh_eTransparencyMode value) {
  
  transparencymode_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.TransparencyMode)
}

// optional float VOffset = 8;
inline void tLowPolyMesh::clear_voffset() {
  voffset_ = 0;
}
inline float tLowPolyMesh::voffset() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.VOffset)
  return voffset_;
}
inline void tLowPolyMesh::set_voffset(float value) {
  
  voffset_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.VOffset)
}

// optional string ReflectTex = 9;
inline void tLowPolyMesh::clear_reflecttex() {
  reflecttex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tLowPolyMesh::reflecttex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.ReflectTex)
  return reflecttex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_reflecttex(const ::std::string& value) {
  
  reflecttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.ReflectTex)
}
inline void tLowPolyMesh::set_reflecttex(const char* value) {
  
  reflecttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.ReflectTex)
}
inline void tLowPolyMesh::set_reflecttex(const char* value, size_t size) {
  
  reflecttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.ReflectTex)
}
inline ::std::string* tLowPolyMesh::mutable_reflecttex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.ReflectTex)
  return reflecttex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tLowPolyMesh::release_reflecttex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.ReflectTex)
  
  return reflecttex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_allocated_reflecttex(::std::string* reflecttex) {
  if (reflecttex != NULL) {
    
  } else {
    
  }
  reflecttex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reflecttex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.ReflectTex)
}

// optional float MaxRayDistanceFront = 10;
inline void tLowPolyMesh::clear_maxraydistancefront() {
  maxraydistancefront_ = 0;
}
inline float tLowPolyMesh::maxraydistancefront() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.MaxRayDistanceFront)
  return maxraydistancefront_;
}
inline void tLowPolyMesh::set_maxraydistancefront(float value) {
  
  maxraydistancefront_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.MaxRayDistanceFront)
}

// optional string DiffuseGITex = 11;
inline void tLowPolyMesh::clear_diffusegitex() {
  diffusegitex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tLowPolyMesh::diffusegitex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.DiffuseGITex)
  return diffusegitex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_diffusegitex(const ::std::string& value) {
  
  diffusegitex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.DiffuseGITex)
}
inline void tLowPolyMesh::set_diffusegitex(const char* value) {
  
  diffusegitex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.DiffuseGITex)
}
inline void tLowPolyMesh::set_diffusegitex(const char* value, size_t size) {
  
  diffusegitex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.DiffuseGITex)
}
inline ::std::string* tLowPolyMesh::mutable_diffusegitex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.DiffuseGITex)
  return diffusegitex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tLowPolyMesh::release_diffusegitex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.DiffuseGITex)
  
  return diffusegitex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_allocated_diffusegitex(::std::string* diffusegitex) {
  if (diffusegitex != NULL) {
    
  } else {
    
  }
  diffusegitex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diffusegitex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.DiffuseGITex)
}

// optional .tLowPolyMesh.eNormalMapType NormapMapType = 12;
inline void tLowPolyMesh::clear_normapmaptype() {
  normapmaptype_ = 0;
}
inline ::tLowPolyMesh_eNormalMapType tLowPolyMesh::normapmaptype() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.NormapMapType)
  return static_cast< ::tLowPolyMesh_eNormalMapType >(normapmaptype_);
}
inline void tLowPolyMesh::set_normapmaptype(::tLowPolyMesh_eNormalMapType value) {
  
  normapmaptype_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.NormapMapType)
}

// optional string File = 13;
inline void tLowPolyMesh::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tLowPolyMesh::file() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.File)
  return file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.File)
}
inline void tLowPolyMesh::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.File)
}
inline void tLowPolyMesh::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.File)
}
inline ::std::string* tLowPolyMesh::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.File)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tLowPolyMesh::release_file() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.File)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.File)
}

// optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleY = 14;
inline void tLowPolyMesh::clear_vvdmswizzley() {
  vvdmswizzley_ = 0;
}
inline ::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::vvdmswizzley() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.VVDMSwizzleY)
  return static_cast< ::tLowPolyMesh_eSwizzleComponent >(vvdmswizzley_);
}
inline void tLowPolyMesh::set_vvdmswizzley(::tLowPolyMesh_eSwizzleComponent value) {
  
  vvdmswizzley_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.VVDMSwizzleY)
}

// optional string CageFile = 15;
inline void tLowPolyMesh::clear_cagefile() {
  cagefile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tLowPolyMesh::cagefile() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.CageFile)
  return cagefile_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_cagefile(const ::std::string& value) {
  
  cagefile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.CageFile)
}
inline void tLowPolyMesh::set_cagefile(const char* value) {
  
  cagefile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.CageFile)
}
inline void tLowPolyMesh::set_cagefile(const char* value, size_t size) {
  
  cagefile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.CageFile)
}
inline ::std::string* tLowPolyMesh::mutable_cagefile() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.CageFile)
  return cagefile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tLowPolyMesh::release_cagefile() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.CageFile)
  
  return cagefile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_allocated_cagefile(::std::string* cagefile) {
  if (cagefile != NULL) {
    
  } else {
    
  }
  cagefile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cagefile);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.CageFile)
}

// optional string HeightTex = 16;
inline void tLowPolyMesh::clear_heighttex() {
  heighttex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tLowPolyMesh::heighttex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.HeightTex)
  return heighttex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_heighttex(const ::std::string& value) {
  
  heighttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.HeightTex)
}
inline void tLowPolyMesh::set_heighttex(const char* value) {
  
  heighttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.HeightTex)
}
inline void tLowPolyMesh::set_heighttex(const char* value, size_t size) {
  
  heighttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.HeightTex)
}
inline ::std::string* tLowPolyMesh::mutable_heighttex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.HeightTex)
  return heighttex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tLowPolyMesh::release_heighttex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.HeightTex)
  
  return heighttex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_allocated_heighttex(::std::string* heighttex) {
  if (heighttex != NULL) {
    
  } else {
    
  }
  heighttex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), heighttex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.HeightTex)
}

// optional .tLowPolyMesh.eSwizzleComponent NMSwizzleY = 17;
inline void tLowPolyMesh::clear_nmswizzley() {
  nmswizzley_ = 0;
}
inline ::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::nmswizzley() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.NMSwizzleY)
  return static_cast< ::tLowPolyMesh_eSwizzleComponent >(nmswizzley_);
}
inline void tLowPolyMesh::set_nmswizzley(::tLowPolyMesh_eSwizzleComponent value) {
  
  nmswizzley_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.NMSwizzleY)
}

// optional bool BatchProtect = 18;
inline void tLowPolyMesh::clear_batchprotect() {
  batchprotect_ = false;
}
inline bool tLowPolyMesh::batchprotect() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.BatchProtect)
  return batchprotect_;
}
inline void tLowPolyMesh::set_batchprotect(bool value) {
  
  batchprotect_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.BatchProtect)
}

// optional bytes AlphaTestValue = 19;
inline void tLowPolyMesh::clear_alphatestvalue() {
  alphatestvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tLowPolyMesh::alphatestvalue() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.AlphaTestValue)
  return alphatestvalue_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_alphatestvalue(const ::std::string& value) {
  
  alphatestvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.AlphaTestValue)
}
inline void tLowPolyMesh::set_alphatestvalue(const char* value) {
  
  alphatestvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.AlphaTestValue)
}
inline void tLowPolyMesh::set_alphatestvalue(const void* value, size_t size) {
  
  alphatestvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.AlphaTestValue)
}
inline ::std::string* tLowPolyMesh::mutable_alphatestvalue() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.AlphaTestValue)
  return alphatestvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tLowPolyMesh::release_alphatestvalue() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.AlphaTestValue)
  
  return alphatestvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_allocated_alphatestvalue(::std::string* alphatestvalue) {
  if (alphatestvalue != NULL) {
    
  } else {
    
  }
  alphatestvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alphatestvalue);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.AlphaTestValue)
}

// optional uint32 Subdivisions = 20;
inline void tLowPolyMesh::clear_subdivisions() {
  subdivisions_ = 0u;
}
inline ::google::protobuf::uint32 tLowPolyMesh::subdivisions() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.Subdivisions)
  return subdivisions_;
}
inline void tLowPolyMesh::set_subdivisions(::google::protobuf::uint32 value) {
  
  subdivisions_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.Subdivisions)
}

// optional bool Matte = 21;
inline void tLowPolyMesh::clear_matte() {
  matte_ = false;
}
inline bool tLowPolyMesh::matte() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.Matte)
  return matte_;
}
inline void tLowPolyMesh::set_matte(bool value) {
  
  matte_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.Matte)
}

// optional bool AverageNormals = 22;
inline void tLowPolyMesh::clear_averagenormals() {
  averagenormals_ = false;
}
inline bool tLowPolyMesh::averagenormals() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.AverageNormals)
  return averagenormals_;
}
inline void tLowPolyMesh::set_averagenormals(bool value) {
  
  averagenormals_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.AverageNormals)
}

// optional bool VectorDisplacementTS = 23;
inline void tLowPolyMesh::clear_vectordisplacementts() {
  vectordisplacementts_ = false;
}
inline bool tLowPolyMesh::vectordisplacementts() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.VectorDisplacementTS)
  return vectordisplacementts_;
}
inline void tLowPolyMesh::set_vectordisplacementts(bool value) {
  
  vectordisplacementts_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.VectorDisplacementTS)
}

// optional bool UseCage = 24;
inline void tLowPolyMesh::clear_usecage() {
  usecage_ = false;
}
inline bool tLowPolyMesh::usecage() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.UseCage)
  return usecage_;
}
inline void tLowPolyMesh::set_usecage(bool value) {
  
  usecage_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.UseCage)
}

// optional bool Visible = 25;
inline void tLowPolyMesh::clear_visible() {
  visible_ = false;
}
inline bool tLowPolyMesh::visible() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.Visible)
  return visible_;
}
inline void tLowPolyMesh::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.Visible)
}

// optional .tLowPolyMesh.eSwizzleComponent NMSwizzleX = 26;
inline void tLowPolyMesh::clear_nmswizzlex() {
  nmswizzlex_ = 0;
}
inline ::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::nmswizzlex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.NMSwizzleX)
  return static_cast< ::tLowPolyMesh_eSwizzleComponent >(nmswizzlex_);
}
inline void tLowPolyMesh::set_nmswizzlex(::tLowPolyMesh_eSwizzleComponent value) {
  
  nmswizzlex_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.NMSwizzleX)
}

// optional string GlossTex = 27;
inline void tLowPolyMesh::clear_glosstex() {
  glosstex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tLowPolyMesh::glosstex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.GlossTex)
  return glosstex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_glosstex(const ::std::string& value) {
  
  glosstex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.GlossTex)
}
inline void tLowPolyMesh::set_glosstex(const char* value) {
  
  glosstex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.GlossTex)
}
inline void tLowPolyMesh::set_glosstex(const char* value, size_t size) {
  
  glosstex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.GlossTex)
}
inline ::std::string* tLowPolyMesh::mutable_glosstex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.GlossTex)
  return glosstex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tLowPolyMesh::release_glosstex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.GlossTex)
  
  return glosstex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_allocated_glosstex(::std::string* glosstex) {
  if (glosstex != NULL) {
    
  } else {
    
  }
  glosstex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), glosstex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.GlossTex)
}

// optional float Scale = 28;
inline void tLowPolyMesh::clear_scale() {
  scale_ = 0;
}
inline float tLowPolyMesh::scale() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.Scale)
  return scale_;
}
inline void tLowPolyMesh::set_scale(float value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.Scale)
}

// optional .tLowPolyMesh.eSwizzleComponent NMSwizzleZ = 29;
inline void tLowPolyMesh::clear_nmswizzlez() {
  nmswizzlez_ = 0;
}
inline ::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::nmswizzlez() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.NMSwizzleZ)
  return static_cast< ::tLowPolyMesh_eSwizzleComponent >(nmswizzlez_);
}
inline void tLowPolyMesh::set_nmswizzlez(::tLowPolyMesh_eSwizzleComponent value) {
  
  nmswizzlez_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.NMSwizzleZ)
}

// optional string VectorDisplacementTex = 30;
inline void tLowPolyMesh::clear_vectordisplacementtex() {
  vectordisplacementtex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tLowPolyMesh::vectordisplacementtex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.VectorDisplacementTex)
  return vectordisplacementtex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_vectordisplacementtex(const ::std::string& value) {
  
  vectordisplacementtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.VectorDisplacementTex)
}
inline void tLowPolyMesh::set_vectordisplacementtex(const char* value) {
  
  vectordisplacementtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.VectorDisplacementTex)
}
inline void tLowPolyMesh::set_vectordisplacementtex(const char* value, size_t size) {
  
  vectordisplacementtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.VectorDisplacementTex)
}
inline ::std::string* tLowPolyMesh::mutable_vectordisplacementtex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.VectorDisplacementTex)
  return vectordisplacementtex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tLowPolyMesh::release_vectordisplacementtex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.VectorDisplacementTex)
  
  return vectordisplacementtex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_allocated_vectordisplacementtex(::std::string* vectordisplacementtex) {
  if (vectordisplacementtex != NULL) {
    
  } else {
    
  }
  vectordisplacementtex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vectordisplacementtex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.VectorDisplacementTex)
}

// optional .tLowPolyMesh.eSwizzleComponent VVDMSwizzleX = 31;
inline void tLowPolyMesh::clear_vvdmswizzlex() {
  vvdmswizzlex_ = 0;
}
inline ::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::vvdmswizzlex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.VVDMSwizzleX)
  return static_cast< ::tLowPolyMesh_eSwizzleComponent >(vvdmswizzlex_);
}
inline void tLowPolyMesh::set_vvdmswizzlex(::tLowPolyMesh_eSwizzleComponent value) {
  
  vvdmswizzlex_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.VVDMSwizzleX)
}

// optional bool UsePerVertexColors = 32;
inline void tLowPolyMesh::clear_usepervertexcolors() {
  usepervertexcolors_ = false;
}
inline bool tLowPolyMesh::usepervertexcolors() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.UsePerVertexColors)
  return usepervertexcolors_;
}
inline void tLowPolyMesh::set_usepervertexcolors(bool value) {
  
  usepervertexcolors_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.UsePerVertexColors)
}

// optional bool HighpolyNormalsOverrideTangentSpace = 33;
inline void tLowPolyMesh::clear_highpolynormalsoverridetangentspace() {
  highpolynormalsoverridetangentspace_ = false;
}
inline bool tLowPolyMesh::highpolynormalsoverridetangentspace() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.HighpolyNormalsOverrideTangentSpace)
  return highpolynormalsoverridetangentspace_;
}
inline void tLowPolyMesh::set_highpolynormalsoverridetangentspace(bool value) {
  
  highpolynormalsoverridetangentspace_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.HighpolyNormalsOverrideTangentSpace)
}

// optional string LMAOTex = 34;
inline void tLowPolyMesh::clear_lmaotex() {
  lmaotex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tLowPolyMesh::lmaotex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.LMAOTex)
  return lmaotex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_lmaotex(const ::std::string& value) {
  
  lmaotex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.LMAOTex)
}
inline void tLowPolyMesh::set_lmaotex(const char* value) {
  
  lmaotex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.LMAOTex)
}
inline void tLowPolyMesh::set_lmaotex(const char* value, size_t size) {
  
  lmaotex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.LMAOTex)
}
inline ::std::string* tLowPolyMesh::mutable_lmaotex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.LMAOTex)
  return lmaotex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tLowPolyMesh::release_lmaotex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.LMAOTex)
  
  return lmaotex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_allocated_lmaotex(::std::string* lmaotex) {
  if (lmaotex != NULL) {
    
  } else {
    
  }
  lmaotex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lmaotex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.LMAOTex)
}

// optional string SpecTex = 35;
inline void tLowPolyMesh::clear_spectex() {
  spectex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tLowPolyMesh::spectex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.SpecTex)
  return spectex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_spectex(const ::std::string& value) {
  
  spectex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.SpecTex)
}
inline void tLowPolyMesh::set_spectex(const char* value) {
  
  spectex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.SpecTex)
}
inline void tLowPolyMesh::set_spectex(const char* value, size_t size) {
  
  spectex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.SpecTex)
}
inline ::std::string* tLowPolyMesh::mutable_spectex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.SpecTex)
  return spectex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tLowPolyMesh::release_spectex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.SpecTex)
  
  return spectex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_allocated_spectex(::std::string* spectex) {
  if (spectex != NULL) {
    
  } else {
    
  }
  spectex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spectex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.SpecTex)
}

// optional string NormTex = 36;
inline void tLowPolyMesh::clear_normtex() {
  normtex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tLowPolyMesh::normtex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.NormTex)
  return normtex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_normtex(const ::std::string& value) {
  
  normtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.NormTex)
}
inline void tLowPolyMesh::set_normtex(const char* value) {
  
  normtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.NormTex)
}
inline void tLowPolyMesh::set_normtex(const char* value, size_t size) {
  
  normtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.NormTex)
}
inline ::std::string* tLowPolyMesh::mutable_normtex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.NormTex)
  return normtex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tLowPolyMesh::release_normtex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.NormTex)
  
  return normtex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_allocated_normtex(::std::string* normtex) {
  if (normtex != NULL) {
    
  } else {
    
  }
  normtex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normtex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.NormTex)
}

// optional .UnspecifiedType HighpolyNormalOverride = 37;
inline bool tLowPolyMesh::has_highpolynormaloverride() const {
  return !_is_default_instance_ && highpolynormaloverride_ != NULL;
}
inline void tLowPolyMesh::clear_highpolynormaloverride() {
  if (GetArenaNoVirtual() == NULL && highpolynormaloverride_ != NULL) delete highpolynormaloverride_;
  highpolynormaloverride_ = NULL;
}
inline const ::UnspecifiedType& tLowPolyMesh::highpolynormaloverride() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.HighpolyNormalOverride)
  return highpolynormaloverride_ != NULL ? *highpolynormaloverride_ : *default_instance_->highpolynormaloverride_;
}
inline ::UnspecifiedType* tLowPolyMesh::mutable_highpolynormaloverride() {
  
  if (highpolynormaloverride_ == NULL) {
    highpolynormaloverride_ = new ::UnspecifiedType;
  }
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.HighpolyNormalOverride)
  return highpolynormaloverride_;
}
inline ::UnspecifiedType* tLowPolyMesh::release_highpolynormaloverride() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.HighpolyNormalOverride)
  
  ::UnspecifiedType* temp = highpolynormaloverride_;
  highpolynormaloverride_ = NULL;
  return temp;
}
inline void tLowPolyMesh::set_allocated_highpolynormaloverride(::UnspecifiedType* highpolynormaloverride) {
  delete highpolynormaloverride_;
  highpolynormaloverride_ = highpolynormaloverride;
  if (highpolynormaloverride) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.HighpolyNormalOverride)
}

// optional string PositionOffset = 38;
inline void tLowPolyMesh::clear_positionoffset() {
  positionoffset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tLowPolyMesh::positionoffset() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.PositionOffset)
  return positionoffset_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_positionoffset(const ::std::string& value) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.PositionOffset)
}
inline void tLowPolyMesh::set_positionoffset(const char* value) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.PositionOffset)
}
inline void tLowPolyMesh::set_positionoffset(const char* value, size_t size) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.PositionOffset)
}
inline ::std::string* tLowPolyMesh::mutable_positionoffset() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.PositionOffset)
  return positionoffset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tLowPolyMesh::release_positionoffset() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.PositionOffset)
  
  return positionoffset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_allocated_positionoffset(::std::string* positionoffset) {
  if (positionoffset != NULL) {
    
  } else {
    
  }
  positionoffset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positionoffset);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.PositionOffset)
}

// optional float MaxRayDistanceBack = 39;
inline void tLowPolyMesh::clear_maxraydistanceback() {
  maxraydistanceback_ = 0;
}
inline float tLowPolyMesh::maxraydistanceback() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.MaxRayDistanceBack)
  return maxraydistanceback_;
}
inline void tLowPolyMesh::set_maxraydistanceback(float value) {
  
  maxraydistanceback_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.MaxRayDistanceBack)
}

// optional bool UseFresnel = 40;
inline void tLowPolyMesh::clear_usefresnel() {
  usefresnel_ = false;
}
inline bool tLowPolyMesh::usefresnel() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.UseFresnel)
  return usefresnel_;
}
inline void tLowPolyMesh::set_usefresnel(bool value) {
  
  usefresnel_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.UseFresnel)
}

// optional bool ReceiveShadows = 41;
inline void tLowPolyMesh::clear_receiveshadows() {
  receiveshadows_ = false;
}
inline bool tLowPolyMesh::receiveshadows() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.ReceiveShadows)
  return receiveshadows_;
}
inline void tLowPolyMesh::set_receiveshadows(bool value) {
  
  receiveshadows_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.ReceiveShadows)
}

// optional string EmissiveTex = 42;
inline void tLowPolyMesh::clear_emissivetex() {
  emissivetex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tLowPolyMesh::emissivetex() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.EmissiveTex)
  return emissivetex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_emissivetex(const ::std::string& value) {
  
  emissivetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tLowPolyMesh.EmissiveTex)
}
inline void tLowPolyMesh::set_emissivetex(const char* value) {
  
  emissivetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tLowPolyMesh.EmissiveTex)
}
inline void tLowPolyMesh::set_emissivetex(const char* value, size_t size) {
  
  emissivetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tLowPolyMesh.EmissiveTex)
}
inline ::std::string* tLowPolyMesh::mutable_emissivetex() {
  
  // @@protoc_insertion_point(field_mutable:tLowPolyMesh.EmissiveTex)
  return emissivetex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tLowPolyMesh::release_emissivetex() {
  // @@protoc_insertion_point(field_release:tLowPolyMesh.EmissiveTex)
  
  return emissivetex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tLowPolyMesh::set_allocated_emissivetex(::std::string* emissivetex) {
  if (emissivetex != NULL) {
    
  } else {
    
  }
  emissivetex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emissivetex);
  // @@protoc_insertion_point(field_set_allocated:tLowPolyMesh.EmissiveTex)
}

// optional bool BackfaceCull = 43;
inline void tLowPolyMesh::clear_backfacecull() {
  backfacecull_ = false;
}
inline bool tLowPolyMesh::backfacecull() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.BackfaceCull)
  return backfacecull_;
}
inline void tLowPolyMesh::set_backfacecull(bool value) {
  
  backfacecull_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.BackfaceCull)
}

// optional bool CastShadows = 44;
inline void tLowPolyMesh::clear_castshadows() {
  castshadows_ = false;
}
inline bool tLowPolyMesh::castshadows() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.CastShadows)
  return castshadows_;
}
inline void tLowPolyMesh::set_castshadows(bool value) {
  
  castshadows_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.CastShadows)
}

// optional bool MatchUVs = 45;
inline void tLowPolyMesh::clear_matchuvs() {
  matchuvs_ = false;
}
inline bool tLowPolyMesh::matchuvs() const {
  // @@protoc_insertion_point(field_get:tLowPolyMesh.MatchUVs)
  return matchuvs_;
}
inline void tLowPolyMesh::set_matchuvs(bool value) {
  
  matchuvs_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyMesh.MatchUVs)
}

// -------------------------------------------------------------------

// tVector3

// optional float y = 1;
inline void tVector3::clear_y() {
  y_ = 0;
}
inline float tVector3::y() const {
  // @@protoc_insertion_point(field_get:tVector3.y)
  return y_;
}
inline void tVector3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:tVector3.y)
}

// optional float x = 2;
inline void tVector3::clear_x() {
  x_ = 0;
}
inline float tVector3::x() const {
  // @@protoc_insertion_point(field_get:tVector3.x)
  return x_;
}
inline void tVector3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:tVector3.x)
}

// optional float z = 3;
inline void tVector3::clear_z() {
  z_ = 0;
}
inline float tVector3::z() const {
  // @@protoc_insertion_point(field_get:tVector3.z)
  return z_;
}
inline void tVector3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:tVector3.z)
}

// -------------------------------------------------------------------

// tGenerateMaps

// optional .tRGB8 NMBackgroundColor = 1;
inline bool tGenerateMaps::has_nmbackgroundcolor() const {
  return !_is_default_instance_ && nmbackgroundcolor_ != NULL;
}
inline void tGenerateMaps::clear_nmbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && nmbackgroundcolor_ != NULL) delete nmbackgroundcolor_;
  nmbackgroundcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::nmbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.NMBackgroundColor)
  return nmbackgroundcolor_ != NULL ? *nmbackgroundcolor_ : *default_instance_->nmbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_nmbackgroundcolor() {
  
  if (nmbackgroundcolor_ == NULL) {
    nmbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.NMBackgroundColor)
  return nmbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::release_nmbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.NMBackgroundColor)
  
  ::tRGB8* temp = nmbackgroundcolor_;
  nmbackgroundcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_nmbackgroundcolor(::tRGB8* nmbackgroundcolor) {
  delete nmbackgroundcolor_;
  nmbackgroundcolor_ = nmbackgroundcolor;
  if (nmbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.NMBackgroundColor)
}

// optional .tRGB8 HMBackgroundColor = 2;
inline bool tGenerateMaps::has_hmbackgroundcolor() const {
  return !_is_default_instance_ && hmbackgroundcolor_ != NULL;
}
inline void tGenerateMaps::clear_hmbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && hmbackgroundcolor_ != NULL) delete hmbackgroundcolor_;
  hmbackgroundcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::hmbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.HMBackgroundColor)
  return hmbackgroundcolor_ != NULL ? *hmbackgroundcolor_ : *default_instance_->hmbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_hmbackgroundcolor() {
  
  if (hmbackgroundcolor_ == NULL) {
    hmbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.HMBackgroundColor)
  return hmbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::release_hmbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.HMBackgroundColor)
  
  ::tRGB8* temp = hmbackgroundcolor_;
  hmbackgroundcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_hmbackgroundcolor(::tRGB8* hmbackgroundcolor) {
  delete hmbackgroundcolor_;
  hmbackgroundcolor_ = hmbackgroundcolor;
  if (hmbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.HMBackgroundColor)
}

// optional .tRGB8 BakeHighpolyBaseTextureNoTexCol = 3;
inline bool tGenerateMaps::has_bakehighpolybasetexturenotexcol() const {
  return !_is_default_instance_ && bakehighpolybasetexturenotexcol_ != NULL;
}
inline void tGenerateMaps::clear_bakehighpolybasetexturenotexcol() {
  if (GetArenaNoVirtual() == NULL && bakehighpolybasetexturenotexcol_ != NULL) delete bakehighpolybasetexturenotexcol_;
  bakehighpolybasetexturenotexcol_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::bakehighpolybasetexturenotexcol() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BakeHighpolyBaseTextureNoTexCol)
  return bakehighpolybasetexturenotexcol_ != NULL ? *bakehighpolybasetexturenotexcol_ : *default_instance_->bakehighpolybasetexturenotexcol_;
}
inline ::tRGB8* tGenerateMaps::mutable_bakehighpolybasetexturenotexcol() {
  
  if (bakehighpolybasetexturenotexcol_ == NULL) {
    bakehighpolybasetexturenotexcol_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.BakeHighpolyBaseTextureNoTexCol)
  return bakehighpolybasetexturenotexcol_;
}
inline ::tRGB8* tGenerateMaps::release_bakehighpolybasetexturenotexcol() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.BakeHighpolyBaseTextureNoTexCol)
  
  ::tRGB8* temp = bakehighpolybasetexturenotexcol_;
  bakehighpolybasetexturenotexcol_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_bakehighpolybasetexturenotexcol(::tRGB8* bakehighpolybasetexturenotexcol) {
  delete bakehighpolybasetexturenotexcol_;
  bakehighpolybasetexturenotexcol_ = bakehighpolybasetexturenotexcol;
  if (bakehighpolybasetexturenotexcol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.BakeHighpolyBaseTextureNoTexCol)
}

// optional .tRGB8 BakeHighpolyBaseTextureBackgroundColor = 4;
inline bool tGenerateMaps::has_bakehighpolybasetexturebackgroundcolor() const {
  return !_is_default_instance_ && bakehighpolybasetexturebackgroundcolor_ != NULL;
}
inline void tGenerateMaps::clear_bakehighpolybasetexturebackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && bakehighpolybasetexturebackgroundcolor_ != NULL) delete bakehighpolybasetexturebackgroundcolor_;
  bakehighpolybasetexturebackgroundcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::bakehighpolybasetexturebackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BakeHighpolyBaseTextureBackgroundColor)
  return bakehighpolybasetexturebackgroundcolor_ != NULL ? *bakehighpolybasetexturebackgroundcolor_ : *default_instance_->bakehighpolybasetexturebackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_bakehighpolybasetexturebackgroundcolor() {
  
  if (bakehighpolybasetexturebackgroundcolor_ == NULL) {
    bakehighpolybasetexturebackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.BakeHighpolyBaseTextureBackgroundColor)
  return bakehighpolybasetexturebackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::release_bakehighpolybasetexturebackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.BakeHighpolyBaseTextureBackgroundColor)
  
  ::tRGB8* temp = bakehighpolybasetexturebackgroundcolor_;
  bakehighpolybasetexturebackgroundcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_bakehighpolybasetexturebackgroundcolor(::tRGB8* bakehighpolybasetexturebackgroundcolor) {
  delete bakehighpolybasetexturebackgroundcolor_;
  bakehighpolybasetexturebackgroundcolor_ = bakehighpolybasetexturebackgroundcolor;
  if (bakehighpolybasetexturebackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.BakeHighpolyBaseTextureBackgroundColor)
}

// optional .tRGB8 RenderWireframeBackgroundColor = 5;
inline bool tGenerateMaps::has_renderwireframebackgroundcolor() const {
  return !_is_default_instance_ && renderwireframebackgroundcolor_ != NULL;
}
inline void tGenerateMaps::clear_renderwireframebackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && renderwireframebackgroundcolor_ != NULL) delete renderwireframebackgroundcolor_;
  renderwireframebackgroundcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::renderwireframebackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RenderWireframeBackgroundColor)
  return renderwireframebackgroundcolor_ != NULL ? *renderwireframebackgroundcolor_ : *default_instance_->renderwireframebackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_renderwireframebackgroundcolor() {
  
  if (renderwireframebackgroundcolor_ == NULL) {
    renderwireframebackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.RenderWireframeBackgroundColor)
  return renderwireframebackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::release_renderwireframebackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.RenderWireframeBackgroundColor)
  
  ::tRGB8* temp = renderwireframebackgroundcolor_;
  renderwireframebackgroundcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_renderwireframebackgroundcolor(::tRGB8* renderwireframebackgroundcolor) {
  delete renderwireframebackgroundcolor_;
  renderwireframebackgroundcolor_ = renderwireframebackgroundcolor;
  if (renderwireframebackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.RenderWireframeBackgroundColor)
}

// optional .tRGB8 RenderWireframeCol = 6;
inline bool tGenerateMaps::has_renderwireframecol() const {
  return !_is_default_instance_ && renderwireframecol_ != NULL;
}
inline void tGenerateMaps::clear_renderwireframecol() {
  if (GetArenaNoVirtual() == NULL && renderwireframecol_ != NULL) delete renderwireframecol_;
  renderwireframecol_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::renderwireframecol() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RenderWireframeCol)
  return renderwireframecol_ != NULL ? *renderwireframecol_ : *default_instance_->renderwireframecol_;
}
inline ::tRGB8* tGenerateMaps::mutable_renderwireframecol() {
  
  if (renderwireframecol_ == NULL) {
    renderwireframecol_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.RenderWireframeCol)
  return renderwireframecol_;
}
inline ::tRGB8* tGenerateMaps::release_renderwireframecol() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.RenderWireframeCol)
  
  ::tRGB8* temp = renderwireframecol_;
  renderwireframecol_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_renderwireframecol(::tRGB8* renderwireframecol) {
  delete renderwireframecol_;
  renderwireframecol_ = renderwireframecol;
  if (renderwireframecol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.RenderWireframeCol)
}

// optional .tRGB8 RenderCWCol = 7;
inline bool tGenerateMaps::has_rendercwcol() const {
  return !_is_default_instance_ && rendercwcol_ != NULL;
}
inline void tGenerateMaps::clear_rendercwcol() {
  if (GetArenaNoVirtual() == NULL && rendercwcol_ != NULL) delete rendercwcol_;
  rendercwcol_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::rendercwcol() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RenderCWCol)
  return rendercwcol_ != NULL ? *rendercwcol_ : *default_instance_->rendercwcol_;
}
inline ::tRGB8* tGenerateMaps::mutable_rendercwcol() {
  
  if (rendercwcol_ == NULL) {
    rendercwcol_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.RenderCWCol)
  return rendercwcol_;
}
inline ::tRGB8* tGenerateMaps::release_rendercwcol() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.RenderCWCol)
  
  ::tRGB8* temp = rendercwcol_;
  rendercwcol_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_rendercwcol(::tRGB8* rendercwcol) {
  delete rendercwcol_;
  rendercwcol_ = rendercwcol;
  if (rendercwcol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.RenderCWCol)
}

// optional .tRGB8 RenderSeamCol = 8;
inline bool tGenerateMaps::has_renderseamcol() const {
  return !_is_default_instance_ && renderseamcol_ != NULL;
}
inline void tGenerateMaps::clear_renderseamcol() {
  if (GetArenaNoVirtual() == NULL && renderseamcol_ != NULL) delete renderseamcol_;
  renderseamcol_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::renderseamcol() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RenderSeamCol)
  return renderseamcol_ != NULL ? *renderseamcol_ : *default_instance_->renderseamcol_;
}
inline ::tRGB8* tGenerateMaps::mutable_renderseamcol() {
  
  if (renderseamcol_ == NULL) {
    renderseamcol_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.RenderSeamCol)
  return renderseamcol_;
}
inline ::tRGB8* tGenerateMaps::release_renderseamcol() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.RenderSeamCol)
  
  ::tRGB8* temp = renderseamcol_;
  renderseamcol_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_renderseamcol(::tRGB8* renderseamcol) {
  delete renderseamcol_;
  renderseamcol_ = renderseamcol;
  if (renderseamcol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.RenderSeamCol)
}

// optional .tRGB8 RenderRayFailsCol = 9;
inline bool tGenerateMaps::has_renderrayfailscol() const {
  return !_is_default_instance_ && renderrayfailscol_ != NULL;
}
inline void tGenerateMaps::clear_renderrayfailscol() {
  if (GetArenaNoVirtual() == NULL && renderrayfailscol_ != NULL) delete renderrayfailscol_;
  renderrayfailscol_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::renderrayfailscol() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RenderRayFailsCol)
  return renderrayfailscol_ != NULL ? *renderrayfailscol_ : *default_instance_->renderrayfailscol_;
}
inline ::tRGB8* tGenerateMaps::mutable_renderrayfailscol() {
  
  if (renderrayfailscol_ == NULL) {
    renderrayfailscol_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.RenderRayFailsCol)
  return renderrayfailscol_;
}
inline ::tRGB8* tGenerateMaps::release_renderrayfailscol() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.RenderRayFailsCol)
  
  ::tRGB8* temp = renderrayfailscol_;
  renderrayfailscol_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_renderrayfailscol(::tRGB8* renderrayfailscol) {
  delete renderrayfailscol_;
  renderrayfailscol_ = renderrayfailscol;
  if (renderrayfailscol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.RenderRayFailsCol)
}

// optional .tRGB8 AOOccludedColor = 10;
inline bool tGenerateMaps::has_aooccludedcolor() const {
  return !_is_default_instance_ && aooccludedcolor_ != NULL;
}
inline void tGenerateMaps::clear_aooccludedcolor() {
  if (GetArenaNoVirtual() == NULL && aooccludedcolor_ != NULL) delete aooccludedcolor_;
  aooccludedcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::aooccludedcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOOccludedColor)
  return aooccludedcolor_ != NULL ? *aooccludedcolor_ : *default_instance_->aooccludedcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_aooccludedcolor() {
  
  if (aooccludedcolor_ == NULL) {
    aooccludedcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.AOOccludedColor)
  return aooccludedcolor_;
}
inline ::tRGB8* tGenerateMaps::release_aooccludedcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.AOOccludedColor)
  
  ::tRGB8* temp = aooccludedcolor_;
  aooccludedcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_aooccludedcolor(::tRGB8* aooccludedcolor) {
  delete aooccludedcolor_;
  aooccludedcolor_ = aooccludedcolor;
  if (aooccludedcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.AOOccludedColor)
}

// optional .tRGB8 AOUnoccludedColor = 11;
inline bool tGenerateMaps::has_aounoccludedcolor() const {
  return !_is_default_instance_ && aounoccludedcolor_ != NULL;
}
inline void tGenerateMaps::clear_aounoccludedcolor() {
  if (GetArenaNoVirtual() == NULL && aounoccludedcolor_ != NULL) delete aounoccludedcolor_;
  aounoccludedcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::aounoccludedcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOUnoccludedColor)
  return aounoccludedcolor_ != NULL ? *aounoccludedcolor_ : *default_instance_->aounoccludedcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_aounoccludedcolor() {
  
  if (aounoccludedcolor_ == NULL) {
    aounoccludedcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.AOUnoccludedColor)
  return aounoccludedcolor_;
}
inline ::tRGB8* tGenerateMaps::release_aounoccludedcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.AOUnoccludedColor)
  
  ::tRGB8* temp = aounoccludedcolor_;
  aounoccludedcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_aounoccludedcolor(::tRGB8* aounoccludedcolor) {
  delete aounoccludedcolor_;
  aounoccludedcolor_ = aounoccludedcolor;
  if (aounoccludedcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.AOUnoccludedColor)
}

// optional .tRGB8 AOBackgroundColor = 12;
inline bool tGenerateMaps::has_aobackgroundcolor() const {
  return !_is_default_instance_ && aobackgroundcolor_ != NULL;
}
inline void tGenerateMaps::clear_aobackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && aobackgroundcolor_ != NULL) delete aobackgroundcolor_;
  aobackgroundcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::aobackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOBackgroundColor)
  return aobackgroundcolor_ != NULL ? *aobackgroundcolor_ : *default_instance_->aobackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_aobackgroundcolor() {
  
  if (aobackgroundcolor_ == NULL) {
    aobackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.AOBackgroundColor)
  return aobackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::release_aobackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.AOBackgroundColor)
  
  ::tRGB8* temp = aobackgroundcolor_;
  aobackgroundcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_aobackgroundcolor(::tRGB8* aobackgroundcolor) {
  delete aobackgroundcolor_;
  aobackgroundcolor_ = aobackgroundcolor;
  if (aobackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.AOBackgroundColor)
}

// optional .tRGB8 BentBackgroundColor = 13;
inline bool tGenerateMaps::has_bentbackgroundcolor() const {
  return !_is_default_instance_ && bentbackgroundcolor_ != NULL;
}
inline void tGenerateMaps::clear_bentbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && bentbackgroundcolor_ != NULL) delete bentbackgroundcolor_;
  bentbackgroundcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::bentbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentBackgroundColor)
  return bentbackgroundcolor_ != NULL ? *bentbackgroundcolor_ : *default_instance_->bentbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_bentbackgroundcolor() {
  
  if (bentbackgroundcolor_ == NULL) {
    bentbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.BentBackgroundColor)
  return bentbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::release_bentbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.BentBackgroundColor)
  
  ::tRGB8* temp = bentbackgroundcolor_;
  bentbackgroundcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_bentbackgroundcolor(::tRGB8* bentbackgroundcolor) {
  delete bentbackgroundcolor_;
  bentbackgroundcolor_ = bentbackgroundcolor;
  if (bentbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.BentBackgroundColor)
}

// optional .tRGB8 PRTBackgroundColor = 14;
inline bool tGenerateMaps::has_prtbackgroundcolor() const {
  return !_is_default_instance_ && prtbackgroundcolor_ != NULL;
}
inline void tGenerateMaps::clear_prtbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && prtbackgroundcolor_ != NULL) delete prtbackgroundcolor_;
  prtbackgroundcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::prtbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.PRTBackgroundColor)
  return prtbackgroundcolor_ != NULL ? *prtbackgroundcolor_ : *default_instance_->prtbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_prtbackgroundcolor() {
  
  if (prtbackgroundcolor_ == NULL) {
    prtbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.PRTBackgroundColor)
  return prtbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::release_prtbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.PRTBackgroundColor)
  
  ::tRGB8* temp = prtbackgroundcolor_;
  prtbackgroundcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_prtbackgroundcolor(::tRGB8* prtbackgroundcolor) {
  delete prtbackgroundcolor_;
  prtbackgroundcolor_ = prtbackgroundcolor;
  if (prtbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.PRTBackgroundColor)
}

// optional .tRGB8 ConvexityBackgroundColor = 15;
inline bool tGenerateMaps::has_convexitybackgroundcolor() const {
  return !_is_default_instance_ && convexitybackgroundcolor_ != NULL;
}
inline void tGenerateMaps::clear_convexitybackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && convexitybackgroundcolor_ != NULL) delete convexitybackgroundcolor_;
  convexitybackgroundcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::convexitybackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.ConvexityBackgroundColor)
  return convexitybackgroundcolor_ != NULL ? *convexitybackgroundcolor_ : *default_instance_->convexitybackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_convexitybackgroundcolor() {
  
  if (convexitybackgroundcolor_ == NULL) {
    convexitybackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.ConvexityBackgroundColor)
  return convexitybackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::release_convexitybackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.ConvexityBackgroundColor)
  
  ::tRGB8* temp = convexitybackgroundcolor_;
  convexitybackgroundcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_convexitybackgroundcolor(::tRGB8* convexitybackgroundcolor) {
  delete convexitybackgroundcolor_;
  convexitybackgroundcolor_ = convexitybackgroundcolor;
  if (convexitybackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.ConvexityBackgroundColor)
}

// optional .tRGB8 ThicknessBackgroundColor = 16;
inline bool tGenerateMaps::has_thicknessbackgroundcolor() const {
  return !_is_default_instance_ && thicknessbackgroundcolor_ != NULL;
}
inline void tGenerateMaps::clear_thicknessbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && thicknessbackgroundcolor_ != NULL) delete thicknessbackgroundcolor_;
  thicknessbackgroundcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::thicknessbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.ThicknessBackgroundColor)
  return thicknessbackgroundcolor_ != NULL ? *thicknessbackgroundcolor_ : *default_instance_->thicknessbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_thicknessbackgroundcolor() {
  
  if (thicknessbackgroundcolor_ == NULL) {
    thicknessbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.ThicknessBackgroundColor)
  return thicknessbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::release_thicknessbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.ThicknessBackgroundColor)
  
  ::tRGB8* temp = thicknessbackgroundcolor_;
  thicknessbackgroundcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_thicknessbackgroundcolor(::tRGB8* thicknessbackgroundcolor) {
  delete thicknessbackgroundcolor_;
  thicknessbackgroundcolor_ = thicknessbackgroundcolor;
  if (thicknessbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.ThicknessBackgroundColor)
}

// optional .tRGB8 ProximityBackgroundColor = 17;
inline bool tGenerateMaps::has_proximitybackgroundcolor() const {
  return !_is_default_instance_ && proximitybackgroundcolor_ != NULL;
}
inline void tGenerateMaps::clear_proximitybackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && proximitybackgroundcolor_ != NULL) delete proximitybackgroundcolor_;
  proximitybackgroundcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::proximitybackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.ProximityBackgroundColor)
  return proximitybackgroundcolor_ != NULL ? *proximitybackgroundcolor_ : *default_instance_->proximitybackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_proximitybackgroundcolor() {
  
  if (proximitybackgroundcolor_ == NULL) {
    proximitybackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.ProximityBackgroundColor)
  return proximitybackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::release_proximitybackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.ProximityBackgroundColor)
  
  ::tRGB8* temp = proximitybackgroundcolor_;
  proximitybackgroundcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_proximitybackgroundcolor(::tRGB8* proximitybackgroundcolor) {
  delete proximitybackgroundcolor_;
  proximitybackgroundcolor_ = proximitybackgroundcolor;
  if (proximitybackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.ProximityBackgroundColor)
}

// optional .tRGB8 CavityBackgroundColor = 18;
inline bool tGenerateMaps::has_cavitybackgroundcolor() const {
  return !_is_default_instance_ && cavitybackgroundcolor_ != NULL;
}
inline void tGenerateMaps::clear_cavitybackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && cavitybackgroundcolor_ != NULL) delete cavitybackgroundcolor_;
  cavitybackgroundcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::cavitybackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CavityBackgroundColor)
  return cavitybackgroundcolor_ != NULL ? *cavitybackgroundcolor_ : *default_instance_->cavitybackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_cavitybackgroundcolor() {
  
  if (cavitybackgroundcolor_ == NULL) {
    cavitybackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.CavityBackgroundColor)
  return cavitybackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::release_cavitybackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.CavityBackgroundColor)
  
  ::tRGB8* temp = cavitybackgroundcolor_;
  cavitybackgroundcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_cavitybackgroundcolor(::tRGB8* cavitybackgroundcolor) {
  delete cavitybackgroundcolor_;
  cavitybackgroundcolor_ = cavitybackgroundcolor;
  if (cavitybackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.CavityBackgroundColor)
}

// optional .tRGB8 VDMBackgroundColor = 19;
inline bool tGenerateMaps::has_vdmbackgroundcolor() const {
  return !_is_default_instance_ && vdmbackgroundcolor_ != NULL;
}
inline void tGenerateMaps::clear_vdmbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && vdmbackgroundcolor_ != NULL) delete vdmbackgroundcolor_;
  vdmbackgroundcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::vdmbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.VDMBackgroundColor)
  return vdmbackgroundcolor_ != NULL ? *vdmbackgroundcolor_ : *default_instance_->vdmbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_vdmbackgroundcolor() {
  
  if (vdmbackgroundcolor_ == NULL) {
    vdmbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.VDMBackgroundColor)
  return vdmbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::release_vdmbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.VDMBackgroundColor)
  
  ::tRGB8* temp = vdmbackgroundcolor_;
  vdmbackgroundcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_vdmbackgroundcolor(::tRGB8* vdmbackgroundcolor) {
  delete vdmbackgroundcolor_;
  vdmbackgroundcolor_ = vdmbackgroundcolor;
  if (vdmbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.VDMBackgroundColor)
}

// optional .tRGB8 RadNMBackgroundColor = 20;
inline bool tGenerateMaps::has_radnmbackgroundcolor() const {
  return !_is_default_instance_ && radnmbackgroundcolor_ != NULL;
}
inline void tGenerateMaps::clear_radnmbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && radnmbackgroundcolor_ != NULL) delete radnmbackgroundcolor_;
  radnmbackgroundcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::radnmbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadNMBackgroundColor)
  return radnmbackgroundcolor_ != NULL ? *radnmbackgroundcolor_ : *default_instance_->radnmbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_radnmbackgroundcolor() {
  
  if (radnmbackgroundcolor_ == NULL) {
    radnmbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.RadNMBackgroundColor)
  return radnmbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::release_radnmbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.RadNMBackgroundColor)
  
  ::tRGB8* temp = radnmbackgroundcolor_;
  radnmbackgroundcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_radnmbackgroundcolor(::tRGB8* radnmbackgroundcolor) {
  delete radnmbackgroundcolor_;
  radnmbackgroundcolor_ = radnmbackgroundcolor;
  if (radnmbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.RadNMBackgroundColor)
}

// optional .tRGB8 CurvBackgroundColor = 21;
inline bool tGenerateMaps::has_curvbackgroundcolor() const {
  return !_is_default_instance_ && curvbackgroundcolor_ != NULL;
}
inline void tGenerateMaps::clear_curvbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && curvbackgroundcolor_ != NULL) delete curvbackgroundcolor_;
  curvbackgroundcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::curvbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvBackgroundColor)
  return curvbackgroundcolor_ != NULL ? *curvbackgroundcolor_ : *default_instance_->curvbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_curvbackgroundcolor() {
  
  if (curvbackgroundcolor_ == NULL) {
    curvbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.CurvBackgroundColor)
  return curvbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::release_curvbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.CurvBackgroundColor)
  
  ::tRGB8* temp = curvbackgroundcolor_;
  curvbackgroundcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_curvbackgroundcolor(::tRGB8* curvbackgroundcolor) {
  delete curvbackgroundcolor_;
  curvbackgroundcolor_ = curvbackgroundcolor;
  if (curvbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.CurvBackgroundColor)
}

// optional .tRGB8 DerivNMBackgroundColor = 22;
inline bool tGenerateMaps::has_derivnmbackgroundcolor() const {
  return !_is_default_instance_ && derivnmbackgroundcolor_ != NULL;
}
inline void tGenerateMaps::clear_derivnmbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && derivnmbackgroundcolor_ != NULL) delete derivnmbackgroundcolor_;
  derivnmbackgroundcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::derivnmbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DerivNMBackgroundColor)
  return derivnmbackgroundcolor_ != NULL ? *derivnmbackgroundcolor_ : *default_instance_->derivnmbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_derivnmbackgroundcolor() {
  
  if (derivnmbackgroundcolor_ == NULL) {
    derivnmbackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.DerivNMBackgroundColor)
  return derivnmbackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::release_derivnmbackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.DerivNMBackgroundColor)
  
  ::tRGB8* temp = derivnmbackgroundcolor_;
  derivnmbackgroundcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_derivnmbackgroundcolor(::tRGB8* derivnmbackgroundcolor) {
  delete derivnmbackgroundcolor_;
  derivnmbackgroundcolor_ = derivnmbackgroundcolor;
  if (derivnmbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.DerivNMBackgroundColor)
}

// optional .tRGB8 TransluBackgroundColor = 23;
inline bool tGenerateMaps::has_translubackgroundcolor() const {
  return !_is_default_instance_ && translubackgroundcolor_ != NULL;
}
inline void tGenerateMaps::clear_translubackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && translubackgroundcolor_ != NULL) delete translubackgroundcolor_;
  translubackgroundcolor_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::translubackgroundcolor() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.TransluBackgroundColor)
  return translubackgroundcolor_ != NULL ? *translubackgroundcolor_ : *default_instance_->translubackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::mutable_translubackgroundcolor() {
  
  if (translubackgroundcolor_ == NULL) {
    translubackgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.TransluBackgroundColor)
  return translubackgroundcolor_;
}
inline ::tRGB8* tGenerateMaps::release_translubackgroundcolor() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.TransluBackgroundColor)
  
  ::tRGB8* temp = translubackgroundcolor_;
  translubackgroundcolor_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_translubackgroundcolor(::tRGB8* translubackgroundcolor) {
  delete translubackgroundcolor_;
  translubackgroundcolor_ = translubackgroundcolor;
  if (translubackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.TransluBackgroundColor)
}

// optional .tRGB8 BakeHighpolyVColsBackgroundCol = 24;
inline bool tGenerateMaps::has_bakehighpolyvcolsbackgroundcol() const {
  return !_is_default_instance_ && bakehighpolyvcolsbackgroundcol_ != NULL;
}
inline void tGenerateMaps::clear_bakehighpolyvcolsbackgroundcol() {
  if (GetArenaNoVirtual() == NULL && bakehighpolyvcolsbackgroundcol_ != NULL) delete bakehighpolyvcolsbackgroundcol_;
  bakehighpolyvcolsbackgroundcol_ = NULL;
}
inline const ::tRGB8& tGenerateMaps::bakehighpolyvcolsbackgroundcol() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BakeHighpolyVColsBackgroundCol)
  return bakehighpolyvcolsbackgroundcol_ != NULL ? *bakehighpolyvcolsbackgroundcol_ : *default_instance_->bakehighpolyvcolsbackgroundcol_;
}
inline ::tRGB8* tGenerateMaps::mutable_bakehighpolyvcolsbackgroundcol() {
  
  if (bakehighpolyvcolsbackgroundcol_ == NULL) {
    bakehighpolyvcolsbackgroundcol_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.BakeHighpolyVColsBackgroundCol)
  return bakehighpolyvcolsbackgroundcol_;
}
inline ::tRGB8* tGenerateMaps::release_bakehighpolyvcolsbackgroundcol() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.BakeHighpolyVColsBackgroundCol)
  
  ::tRGB8* temp = bakehighpolyvcolsbackgroundcol_;
  bakehighpolyvcolsbackgroundcol_ = NULL;
  return temp;
}
inline void tGenerateMaps::set_allocated_bakehighpolyvcolsbackgroundcol(::tRGB8* bakehighpolyvcolsbackgroundcol) {
  delete bakehighpolyvcolsbackgroundcol_;
  bakehighpolyvcolsbackgroundcol_ = bakehighpolyvcolsbackgroundcol;
  if (bakehighpolyvcolsbackgroundcol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.BakeHighpolyVColsBackgroundCol)
}

// optional bool ClosestIfFails = 25;
inline void tGenerateMaps::clear_closestiffails() {
  closestiffails_ = false;
}
inline bool tGenerateMaps::closestiffails() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.ClosestIfFails)
  return closestiffails_;
}
inline void tGenerateMaps::set_closestiffails(bool value) {
  
  closestiffails_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.ClosestIfFails)
}

// optional float DirectionsTonemapMax = 26;
inline void tGenerateMaps::clear_directionstonemapmax() {
  directionstonemapmax_ = 0;
}
inline float tGenerateMaps::directionstonemapmax() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DirectionsTonemapMax)
  return directionstonemapmax_;
}
inline void tGenerateMaps::set_directionstonemapmax(float value) {
  
  directionstonemapmax_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.DirectionsTonemapMax)
}

// optional bool CurvMonocrome = 27;
inline void tGenerateMaps::clear_curvmonocrome() {
  curvmonocrome_ = false;
}
inline bool tGenerateMaps::curvmonocrome() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvMonocrome)
  return curvmonocrome_;
}
inline void tGenerateMaps::set_curvmonocrome(bool value) {
  
  curvmonocrome_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CurvMonocrome)
}

// optional float AOBias = 28;
inline void tGenerateMaps::clear_aobias() {
  aobias_ = 0;
}
inline float tGenerateMaps::aobias() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOBias)
  return aobias_;
}
inline void tGenerateMaps::set_aobias(float value) {
  
  aobias_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOBias)
}

// optional bool BentTangentSpace = 29;
inline void tGenerateMaps::clear_benttangentspace() {
  benttangentspace_ = false;
}
inline bool tGenerateMaps::benttangentspace() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentTangentSpace)
  return benttangentspace_;
}
inline void tGenerateMaps::set_benttangentspace(bool value) {
  
  benttangentspace_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentTangentSpace)
}

// optional bool GenTranslu = 30;
inline void tGenerateMaps::clear_gentranslu() {
  gentranslu_ = false;
}
inline bool tGenerateMaps::gentranslu() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenTranslu)
  return gentranslu_;
}
inline void tGenerateMaps::set_gentranslu(bool value) {
  
  gentranslu_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenTranslu)
}

// optional .tGenerateMaps.eAODistribution AODistribution = 31;
inline void tGenerateMaps::clear_aodistribution() {
  aodistribution_ = 0;
}
inline ::tGenerateMaps_eAODistribution tGenerateMaps::aodistribution() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AODistribution)
  return static_cast< ::tGenerateMaps_eAODistribution >(aodistribution_);
}
inline void tGenerateMaps::set_aodistribution(::tGenerateMaps_eAODistribution value) {
  
  aodistribution_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AODistribution)
}

// optional float PRTThreshold = 32;
inline void tGenerateMaps::clear_prtthreshold() {
  prtthreshold_ = 0;
}
inline float tGenerateMaps::prtthreshold() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.PRTThreshold)
  return prtthreshold_;
}
inline void tGenerateMaps::set_prtthreshold(float value) {
  
  prtthreshold_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.PRTThreshold)
}

// optional float DirectionsTonemapMin = 33;
inline void tGenerateMaps::clear_directionstonemapmin() {
  directionstonemapmin_ = 0;
}
inline float tGenerateMaps::directionstonemapmin() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DirectionsTonemapMin)
  return directionstonemapmin_;
}
inline void tGenerateMaps::set_directionstonemapmin(float value) {
  
  directionstonemapmin_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.DirectionsTonemapMin)
}

// optional .tGenerateMaps.eAODistribution CurvDistribution = 34;
inline void tGenerateMaps::clear_curvdistribution() {
  curvdistribution_ = 0;
}
inline ::tGenerateMaps_eAODistribution tGenerateMaps::curvdistribution() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvDistribution)
  return static_cast< ::tGenerateMaps_eAODistribution >(curvdistribution_);
}
inline void tGenerateMaps::set_curvdistribution(::tGenerateMaps_eAODistribution value) {
  
  curvdistribution_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CurvDistribution)
}

// optional bool BentJitter = 35;
inline void tGenerateMaps::clear_bentjitter() {
  bentjitter_ = false;
}
inline bool tGenerateMaps::bentjitter() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentJitter)
  return bentjitter_;
}
inline void tGenerateMaps::set_bentjitter(bool value) {
  
  bentjitter_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentJitter)
}

// optional .tGenerateMaps.eAODistribution BentDistribution = 36;
inline void tGenerateMaps::clear_bentdistribution() {
  bentdistribution_ = 0;
}
inline ::tGenerateMaps_eAODistribution tGenerateMaps::bentdistribution() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentDistribution)
  return static_cast< ::tGenerateMaps_eAODistribution >(bentdistribution_);
}
inline void tGenerateMaps::set_bentdistribution(::tGenerateMaps_eAODistribution value) {
  
  bentdistribution_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentDistribution)
}

// optional bool BakeHighpolyBaseTexture = 37;
inline void tGenerateMaps::clear_bakehighpolybasetexture() {
  bakehighpolybasetexture_ = false;
}
inline bool tGenerateMaps::bakehighpolybasetexture() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BakeHighpolyBaseTexture)
  return bakehighpolybasetexture_;
}
inline void tGenerateMaps::set_bakehighpolybasetexture(bool value) {
  
  bakehighpolybasetexture_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BakeHighpolyBaseTexture)
}

// optional bool GenConvexity = 38;
inline void tGenerateMaps::clear_genconvexity() {
  genconvexity_ = false;
}
inline bool tGenerateMaps::genconvexity() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenConvexity)
  return genconvexity_;
}
inline void tGenerateMaps::set_genconvexity(bool value) {
  
  genconvexity_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenConvexity)
}

// optional float RadiosityNormalsAttenLinear = 39;
inline void tGenerateMaps::clear_radiositynormalsattenlinear() {
  radiositynormalsattenlinear_ = 0;
}
inline float tGenerateMaps::radiositynormalsattenlinear() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsAttenLinear)
  return radiositynormalsattenlinear_;
}
inline void tGenerateMaps::set_radiositynormalsattenlinear(float value) {
  
  radiositynormalsattenlinear_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsAttenLinear)
}

// optional uint32 TransluRaysPerSample = 40;
inline void tGenerateMaps::clear_translurayspersample() {
  translurayspersample_ = 0u;
}
inline ::google::protobuf::uint32 tGenerateMaps::translurayspersample() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.TransluRaysPerSample)
  return translurayspersample_;
}
inline void tGenerateMaps::set_translurayspersample(::google::protobuf::uint32 value) {
  
  translurayspersample_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.TransluRaysPerSample)
}

// optional float CurvSearchDistance = 41;
inline void tGenerateMaps::clear_curvsearchdistance() {
  curvsearchdistance_ = 0;
}
inline float tGenerateMaps::curvsearchdistance() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvSearchDistance)
  return curvsearchdistance_;
}
inline void tGenerateMaps::set_curvsearchdistance(float value) {
  
  curvsearchdistance_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CurvSearchDistance)
}

// optional .tGenerateMaps.eSwizzleComponent SwizzleZ = 42;
inline void tGenerateMaps::clear_swizzlez() {
  swizzlez_ = 0;
}
inline ::tGenerateMaps_eSwizzleComponent tGenerateMaps::swizzlez() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.SwizzleZ)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(swizzlez_);
}
inline void tGenerateMaps::set_swizzlez(::tGenerateMaps_eSwizzleComponent value) {
  
  swizzlez_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.SwizzleZ)
}

// optional float TransluBias = 43;
inline void tGenerateMaps::clear_translubias() {
  translubias_ = 0;
}
inline float tGenerateMaps::translubias() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.TransluBias)
  return translubias_;
}
inline void tGenerateMaps::set_translubias(float value) {
  
  translubias_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.TransluBias)
}

// optional bool PRTLimitRayDistance = 44;
inline void tGenerateMaps::clear_prtlimitraydistance() {
  prtlimitraydistance_ = false;
}
inline bool tGenerateMaps::prtlimitraydistance() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.PRTLimitRayDistance)
  return prtlimitraydistance_;
}
inline void tGenerateMaps::set_prtlimitraydistance(bool value) {
  
  prtlimitraydistance_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.PRTLimitRayDistance)
}

// optional bool GenBent = 45;
inline void tGenerateMaps::clear_genbent() {
  genbent_ = false;
}
inline bool tGenerateMaps::genbent() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenBent)
  return genbent_;
}
inline void tGenerateMaps::set_genbent(bool value) {
  
  genbent_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenBent)
}

// optional bool AOLimitRayDistance = 46;
inline void tGenerateMaps::clear_aolimitraydistance() {
  aolimitraydistance_ = false;
}
inline bool tGenerateMaps::aolimitraydistance() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOLimitRayDistance)
  return aolimitraydistance_;
}
inline void tGenerateMaps::set_aolimitraydistance(bool value) {
  
  aolimitraydistance_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOLimitRayDistance)
}

// optional uint32 CurvRaysPerSample = 47;
inline void tGenerateMaps::clear_curvrayspersample() {
  curvrayspersample_ = 0u;
}
inline ::google::protobuf::uint32 tGenerateMaps::curvrayspersample() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvRaysPerSample)
  return curvrayspersample_;
}
inline void tGenerateMaps::set_curvrayspersample(::google::protobuf::uint32 value) {
  
  curvrayspersample_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CurvRaysPerSample)
}

// optional .tGenerateMaps.eAODistribution RadiosityNormalsDistribution = 48;
inline void tGenerateMaps::clear_radiositynormalsdistribution() {
  radiositynormalsdistribution_ = 0;
}
inline ::tGenerateMaps_eAODistribution tGenerateMaps::radiositynormalsdistribution() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsDistribution)
  return static_cast< ::tGenerateMaps_eAODistribution >(radiositynormalsdistribution_);
}
inline void tGenerateMaps::set_radiositynormalsdistribution(::tGenerateMaps_eAODistribution value) {
  
  radiositynormalsdistribution_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsDistribution)
}

// optional uint32 RadiosityNormalsRaysPerSample = 49;
inline void tGenerateMaps::clear_radiositynormalsrayspersample() {
  radiositynormalsrayspersample_ = 0u;
}
inline ::google::protobuf::uint32 tGenerateMaps::radiositynormalsrayspersample() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsRaysPerSample)
  return radiositynormalsrayspersample_;
}
inline void tGenerateMaps::set_radiositynormalsrayspersample(::google::protobuf::uint32 value) {
  
  radiositynormalsrayspersample_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsRaysPerSample)
}

// optional bool CurvJitter = 50;
inline void tGenerateMaps::clear_curvjitter() {
  curvjitter_ = false;
}
inline bool tGenerateMaps::curvjitter() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvJitter)
  return curvjitter_;
}
inline void tGenerateMaps::set_curvjitter(bool value) {
  
  curvjitter_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CurvJitter)
}

// optional bool TangentSpace = 51;
inline void tGenerateMaps::clear_tangentspace() {
  tangentspace_ = false;
}
inline bool tGenerateMaps::tangentspace() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.TangentSpace)
  return tangentspace_;
}
inline void tGenerateMaps::set_tangentspace(bool value) {
  
  tangentspace_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.TangentSpace)
}

// optional bool RadiosityNormalsAllowPureOcclusion = 52;
inline void tGenerateMaps::clear_radiositynormalsallowpureocclusion() {
  radiositynormalsallowpureocclusion_ = false;
}
inline bool tGenerateMaps::radiositynormalsallowpureocclusion() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsAllowPureOcclusion)
  return radiositynormalsallowpureocclusion_;
}
inline void tGenerateMaps::set_radiositynormalsallowpureocclusion(bool value) {
  
  radiositynormalsallowpureocclusion_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsAllowPureOcclusion)
}

// optional .tGenerateMaps.eSwizzleComponent BentSwizzleX = 53;
inline void tGenerateMaps::clear_bentswizzlex() {
  bentswizzlex_ = 0;
}
inline ::tGenerateMaps_eSwizzleComponent tGenerateMaps::bentswizzlex() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentSwizzleX)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(bentswizzlex_);
}
inline void tGenerateMaps::set_bentswizzlex(::tGenerateMaps_eSwizzleComponent value) {
  
  bentswizzlex_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentSwizzleX)
}

// optional .tGenerateMaps.eSwizzleComponent SwizzleY = 54;
inline void tGenerateMaps::clear_swizzley() {
  swizzley_ = 0;
}
inline ::tGenerateMaps_eSwizzleComponent tGenerateMaps::swizzley() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.SwizzleY)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(swizzley_);
}
inline void tGenerateMaps::set_swizzley(::tGenerateMaps_eSwizzleComponent value) {
  
  swizzley_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.SwizzleY)
}

// optional bool GenCurv = 55;
inline void tGenerateMaps::clear_gencurv() {
  gencurv_ = false;
}
inline bool tGenerateMaps::gencurv() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenCurv)
  return gencurv_;
}
inline void tGenerateMaps::set_gencurv(bool value) {
  
  gencurv_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenCurv)
}

// optional bool PRTJitter = 56;
inline void tGenerateMaps::clear_prtjitter() {
  prtjitter_ = false;
}
inline bool tGenerateMaps::prtjitter() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.PRTJitter)
  return prtjitter_;
}
inline void tGenerateMaps::set_prtjitter(bool value) {
  
  prtjitter_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.PRTJitter)
}

// optional float AOAttenCuadratic = 57;
inline void tGenerateMaps::clear_aoattencuadratic() {
  aoattencuadratic_ = 0;
}
inline float tGenerateMaps::aoattencuadratic() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOAttenCuadratic)
  return aoattencuadratic_;
}
inline void tGenerateMaps::set_aoattencuadratic(float value) {
  
  aoattencuadratic_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOAttenCuadratic)
}

// optional float BentConeAngle = 58;
inline void tGenerateMaps::clear_bentconeangle() {
  bentconeangle_ = 0;
}
inline float tGenerateMaps::bentconeangle() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentConeAngle)
  return bentconeangle_;
}
inline void tGenerateMaps::set_bentconeangle(float value) {
  
  bentconeangle_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentConeAngle)
}

// optional .tGenerateMaps.eSwizzleComponent SwizzleX = 59;
inline void tGenerateMaps::clear_swizzlex() {
  swizzlex_ = 0;
}
inline ::tGenerateMaps_eSwizzleComponent tGenerateMaps::swizzlex() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.SwizzleX)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(swizzlex_);
}
inline void tGenerateMaps::set_swizzlex(::tGenerateMaps_eSwizzleComponent value) {
  
  swizzlex_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.SwizzleX)
}

// optional bool RenderRayFails = 60;
inline void tGenerateMaps::clear_renderrayfails() {
  renderrayfails_ = false;
}
inline bool tGenerateMaps::renderrayfails() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RenderRayFails)
  return renderrayfails_;
}
inline void tGenerateMaps::set_renderrayfails(bool value) {
  
  renderrayfails_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RenderRayFails)
}

// optional float CavitySearchRadius = 61;
inline void tGenerateMaps::clear_cavitysearchradius() {
  cavitysearchradius_ = 0;
}
inline float tGenerateMaps::cavitysearchradius() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CavitySearchRadius)
  return cavitysearchradius_;
}
inline void tGenerateMaps::set_cavitysearchradius(float value) {
  
  cavitysearchradius_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CavitySearchRadius)
}

// optional bool RadiosityNormalsEncodeAO = 62;
inline void tGenerateMaps::clear_radiositynormalsencodeao() {
  radiositynormalsencodeao_ = false;
}
inline bool tGenerateMaps::radiositynormalsencodeao() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsEncodeAO)
  return radiositynormalsencodeao_;
}
inline void tGenerateMaps::set_radiositynormalsencodeao(bool value) {
  
  radiositynormalsencodeao_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsEncodeAO)
}

// optional float TransluConeAngle = 63;
inline void tGenerateMaps::clear_transluconeangle() {
  transluconeangle_ = 0;
}
inline float tGenerateMaps::transluconeangle() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.TransluConeAngle)
  return transluconeangle_;
}
inline void tGenerateMaps::set_transluconeangle(float value) {
  
  transluconeangle_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.TransluConeAngle)
}

// optional uint32 BentRaysPerSample = 64;
inline void tGenerateMaps::clear_bentrayspersample() {
  bentrayspersample_ = 0u;
}
inline ::google::protobuf::uint32 tGenerateMaps::bentrayspersample() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentRaysPerSample)
  return bentrayspersample_;
}
inline void tGenerateMaps::set_bentrayspersample(::google::protobuf::uint32 value) {
  
  bentrayspersample_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentRaysPerSample)
}

// optional float ConvexityScale = 65;
inline void tGenerateMaps::clear_convexityscale() {
  convexityscale_ = 0;
}
inline float tGenerateMaps::convexityscale() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.ConvexityScale)
  return convexityscale_;
}
inline void tGenerateMaps::set_convexityscale(float value) {
  
  convexityscale_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.ConvexityScale)
}

// optional float RadiosityNormalsConeAngle = 66;
inline void tGenerateMaps::clear_radiositynormalsconeangle() {
  radiositynormalsconeangle_ = 0;
}
inline float tGenerateMaps::radiositynormalsconeangle() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsConeAngle)
  return radiositynormalsconeangle_;
}
inline void tGenerateMaps::set_radiositynormalsconeangle(float value) {
  
  radiositynormalsconeangle_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsConeAngle)
}

// optional string File = 67;
inline void tGenerateMaps::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tGenerateMaps::file() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.File)
  return file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tGenerateMaps::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tGenerateMaps.File)
}
inline void tGenerateMaps::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tGenerateMaps.File)
}
inline void tGenerateMaps::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tGenerateMaps.File)
}
inline ::std::string* tGenerateMaps::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:tGenerateMaps.File)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tGenerateMaps::release_file() {
  // @@protoc_insertion_point(field_release:tGenerateMaps.File)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tGenerateMaps::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:tGenerateMaps.File)
}

// optional bool GenDerivNM = 68;
inline void tGenerateMaps::clear_genderivnm() {
  genderivnm_ = false;
}
inline bool tGenerateMaps::genderivnm() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenDerivNM)
  return genderivnm_;
}
inline void tGenerateMaps::set_genderivnm(bool value) {
  
  genderivnm_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenDerivNM)
}

// optional bool BentLimitRayDistance = 69;
inline void tGenerateMaps::clear_bentlimitraydistance() {
  bentlimitraydistance_ = false;
}
inline bool tGenerateMaps::bentlimitraydistance() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentLimitRayDistance)
  return bentlimitraydistance_;
}
inline void tGenerateMaps::set_bentlimitraydistance(bool value) {
  
  bentlimitraydistance_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentLimitRayDistance)
}

// optional float PRTBias = 70;
inline void tGenerateMaps::clear_prtbias() {
  prtbias_ = 0;
}
inline float tGenerateMaps::prtbias() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.PRTBias)
  return prtbias_;
}
inline void tGenerateMaps::set_prtbias(float value) {
  
  prtbias_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.PRTBias)
}

// optional bool RenderWireframe = 71;
inline void tGenerateMaps::clear_renderwireframe() {
  renderwireframe_ = false;
}
inline bool tGenerateMaps::renderwireframe() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RenderWireframe)
  return renderwireframe_;
}
inline void tGenerateMaps::set_renderwireframe(bool value) {
  
  renderwireframe_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RenderWireframe)
}

// optional bool PRTNormalize = 72;
inline void tGenerateMaps::clear_prtnormalize() {
  prtnormalize_ = false;
}
inline bool tGenerateMaps::prtnormalize() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.PRTNormalize)
  return prtnormalize_;
}
inline void tGenerateMaps::set_prtnormalize(bool value) {
  
  prtnormalize_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.PRTNormalize)
}

// optional bool GenAO = 73;
inline void tGenerateMaps::clear_genao() {
  genao_ = false;
}
inline bool tGenerateMaps::genao() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenAO)
  return genao_;
}
inline void tGenerateMaps::set_genao(bool value) {
  
  genao_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenAO)
}

// optional float PRTConeAngle = 74;
inline void tGenerateMaps::clear_prtconeangle() {
  prtconeangle_ = 0;
}
inline float tGenerateMaps::prtconeangle() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.PRTConeAngle)
  return prtconeangle_;
}
inline void tGenerateMaps::set_prtconeangle(float value) {
  
  prtconeangle_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.PRTConeAngle)
}

// optional uint32 Height = 75;
inline void tGenerateMaps::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 tGenerateMaps::height() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.Height)
  return height_;
}
inline void tGenerateMaps::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.Height)
}

// optional float RadiosityNormalsAttenCuadratic = 76;
inline void tGenerateMaps::clear_radiositynormalsattencuadratic() {
  radiositynormalsattencuadratic_ = 0;
}
inline float tGenerateMaps::radiositynormalsattencuadratic() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsAttenCuadratic)
  return radiositynormalsattencuadratic_;
}
inline void tGenerateMaps::set_radiositynormalsattencuadratic(float value) {
  
  radiositynormalsattencuadratic_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsAttenCuadratic)
}

// optional .tGenerateMaps.eHMNormalization DirectionsTonemap = 77;
inline void tGenerateMaps::clear_directionstonemap() {
  directionstonemap_ = 0;
}
inline ::tGenerateMaps_eHMNormalization tGenerateMaps::directionstonemap() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DirectionsTonemap)
  return static_cast< ::tGenerateMaps_eHMNormalization >(directionstonemap_);
}
inline void tGenerateMaps::set_directionstonemap(::tGenerateMaps_eHMNormalization value) {
  
  directionstonemap_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.DirectionsTonemap)
}

// optional bool DirectionsTS = 78;
inline void tGenerateMaps::clear_directionsts() {
  directionsts_ = false;
}
inline bool tGenerateMaps::directionsts() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DirectionsTS)
  return directionsts_;
}
inline void tGenerateMaps::set_directionsts(bool value) {
  
  directionsts_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.DirectionsTS)
}

// optional uint32 PRTRaysPerSample = 79;
inline void tGenerateMaps::clear_prtrayspersample() {
  prtrayspersample_ = 0u;
}
inline ::google::protobuf::uint32 tGenerateMaps::prtrayspersample() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.PRTRaysPerSample)
  return prtrayspersample_;
}
inline void tGenerateMaps::set_prtrayspersample(::google::protobuf::uint32 value) {
  
  prtrayspersample_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.PRTRaysPerSample)
}

// optional uint32 EdgePadding = 80;
inline void tGenerateMaps::clear_edgepadding() {
  edgepadding_ = 0u;
}
inline ::google::protobuf::uint32 tGenerateMaps::edgepadding() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.EdgePadding)
  return edgepadding_;
}
inline void tGenerateMaps::set_edgepadding(::google::protobuf::uint32 value) {
  
  edgepadding_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.EdgePadding)
}

// optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleZ = 81;
inline void tGenerateMaps::clear_directionsswizzlez() {
  directionsswizzlez_ = 0;
}
inline ::tGenerateMaps_eSwizzleComponent tGenerateMaps::directionsswizzlez() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DirectionsSwizzleZ)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(directionsswizzlez_);
}
inline void tGenerateMaps::set_directionsswizzlez(::tGenerateMaps_eSwizzleComponent value) {
  
  directionsswizzlez_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.DirectionsSwizzleZ)
}

// optional bool AOAllowPureOccluded = 82;
inline void tGenerateMaps::clear_aoallowpureoccluded() {
  aoallowpureoccluded_ = false;
}
inline bool tGenerateMaps::aoallowpureoccluded() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOAllowPureOccluded)
  return aoallowpureoccluded_;
}
inline void tGenerateMaps::set_aoallowpureoccluded(bool value) {
  
  aoallowpureoccluded_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOAllowPureOccluded)
}

// optional bool AOIgnoreBackfaceHits = 83;
inline void tGenerateMaps::clear_aoignorebackfacehits() {
  aoignorebackfacehits_ = false;
}
inline bool tGenerateMaps::aoignorebackfacehits() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOIgnoreBackfaceHits)
  return aoignorebackfacehits_;
}
inline void tGenerateMaps::set_aoignorebackfacehits(bool value) {
  
  aoignorebackfacehits_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOIgnoreBackfaceHits)
}

// optional uint32 CavityRaysPerSample = 84;
inline void tGenerateMaps::clear_cavityrayspersample() {
  cavityrayspersample_ = 0u;
}
inline ::google::protobuf::uint32 tGenerateMaps::cavityrayspersample() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CavityRaysPerSample)
  return cavityrayspersample_;
}
inline void tGenerateMaps::set_cavityrayspersample(::google::protobuf::uint32 value) {
  
  cavityrayspersample_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CavityRaysPerSample)
}

// optional float AOAttenConstant = 85;
inline void tGenerateMaps::clear_aoattenconstant() {
  aoattenconstant_ = 0;
}
inline float tGenerateMaps::aoattenconstant() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOAttenConstant)
  return aoattenconstant_;
}
inline void tGenerateMaps::set_aoattenconstant(float value) {
  
  aoattenconstant_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOAttenConstant)
}

// optional bool CavityJitter = 86;
inline void tGenerateMaps::clear_cavityjitter() {
  cavityjitter_ = false;
}
inline bool tGenerateMaps::cavityjitter() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CavityJitter)
  return cavityjitter_;
}
inline void tGenerateMaps::set_cavityjitter(bool value) {
  
  cavityjitter_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CavityJitter)
}

// optional float HeightTonemapMax = 87;
inline void tGenerateMaps::clear_heighttonemapmax() {
  heighttonemapmax_ = 0;
}
inline float tGenerateMaps::heighttonemapmax() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.HeightTonemapMax)
  return heighttonemapmax_;
}
inline void tGenerateMaps::set_heighttonemapmax(float value) {
  
  heighttonemapmax_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.HeightTonemapMax)
}

// optional bool GenDirections = 88;
inline void tGenerateMaps::clear_gendirections() {
  gendirections_ = false;
}
inline bool tGenerateMaps::gendirections() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenDirections)
  return gendirections_;
}
inline void tGenerateMaps::set_gendirections(bool value) {
  
  gendirections_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenDirections)
}

// optional bool RadiosityNormalsLimitRayDistance = 89;
inline void tGenerateMaps::clear_radiositynormalslimitraydistance() {
  radiositynormalslimitraydistance_ = false;
}
inline bool tGenerateMaps::radiositynormalslimitraydistance() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsLimitRayDistance)
  return radiositynormalslimitraydistance_;
}
inline void tGenerateMaps::set_radiositynormalslimitraydistance(bool value) {
  
  radiositynormalslimitraydistance_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsLimitRayDistance)
}

// optional float HeightTonemapMin = 90;
inline void tGenerateMaps::clear_heighttonemapmin() {
  heighttonemapmin_ = 0;
}
inline float tGenerateMaps::heighttonemapmin() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.HeightTonemapMin)
  return heighttonemapmin_;
}
inline void tGenerateMaps::set_heighttonemapmin(float value) {
  
  heighttonemapmin_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.HeightTonemapMin)
}

// optional bool RadiosityNormalsJitter = 91;
inline void tGenerateMaps::clear_radiositynormalsjitter() {
  radiositynormalsjitter_ = false;
}
inline bool tGenerateMaps::radiositynormalsjitter() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsJitter)
  return radiositynormalsjitter_;
}
inline void tGenerateMaps::set_radiositynormalsjitter(bool value) {
  
  radiositynormalsjitter_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsJitter)
}

// optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleY = 92;
inline void tGenerateMaps::clear_directionsswizzley() {
  directionsswizzley_ = 0;
}
inline ::tGenerateMaps_eSwizzleComponent tGenerateMaps::directionsswizzley() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DirectionsSwizzleY)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(directionsswizzley_);
}
inline void tGenerateMaps::set_directionsswizzley(::tGenerateMaps_eSwizzleComponent value) {
  
  directionsswizzley_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.DirectionsSwizzleY)
}

// optional uint32 Width = 93;
inline void tGenerateMaps::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 tGenerateMaps::width() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.Width)
  return width_;
}
inline void tGenerateMaps::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.Width)
}

// optional bool BakeHighpolyBaseTextureDrawObjectIDIfNoTexture = 94;
inline void tGenerateMaps::clear_bakehighpolybasetexturedrawobjectidifnotexture() {
  bakehighpolybasetexturedrawobjectidifnotexture_ = false;
}
inline bool tGenerateMaps::bakehighpolybasetexturedrawobjectidifnotexture() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BakeHighpolyBaseTextureDrawObjectIDIfNoTexture)
  return bakehighpolybasetexturedrawobjectidifnotexture_;
}
inline void tGenerateMaps::set_bakehighpolybasetexturedrawobjectidifnotexture(bool value) {
  
  bakehighpolybasetexturedrawobjectidifnotexture_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BakeHighpolyBaseTextureDrawObjectIDIfNoTexture)
}

// optional bool Concavity = 95;
inline void tGenerateMaps::clear_concavity() {
  concavity_ = false;
}
inline bool tGenerateMaps::concavity() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.Concavity)
  return concavity_;
}
inline void tGenerateMaps::set_concavity(bool value) {
  
  concavity_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.Concavity)
}

// optional .tGenerateMaps.eSwizzleComponent DirectionsSwizzleX = 96;
inline void tGenerateMaps::clear_directionsswizzlex() {
  directionsswizzlex_ = 0;
}
inline ::tGenerateMaps_eSwizzleComponent tGenerateMaps::directionsswizzlex() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DirectionsSwizzleX)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(directionsswizzlex_);
}
inline void tGenerateMaps::set_directionsswizzlex(::tGenerateMaps_eSwizzleComponent value) {
  
  directionsswizzlex_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.DirectionsSwizzleX)
}

// optional bool GenNormals = 97;
inline void tGenerateMaps::clear_gennormals() {
  gennormals_ = false;
}
inline bool tGenerateMaps::gennormals() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenNormals)
  return gennormals_;
}
inline void tGenerateMaps::set_gennormals(bool value) {
  
  gennormals_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenNormals)
}

// optional uint32 ProximityRaysPerSample = 98;
inline void tGenerateMaps::clear_proximityrayspersample() {
  proximityrayspersample_ = 0u;
}
inline ::google::protobuf::uint32 tGenerateMaps::proximityrayspersample() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.ProximityRaysPerSample)
  return proximityrayspersample_;
}
inline void tGenerateMaps::set_proximityrayspersample(::google::protobuf::uint32 value) {
  
  proximityrayspersample_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.ProximityRaysPerSample)
}

// optional bool GenHeights = 99;
inline void tGenerateMaps::clear_genheights() {
  genheights_ = false;
}
inline bool tGenerateMaps::genheights() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenHeights)
  return genheights_;
}
inline void tGenerateMaps::set_genheights(bool value) {
  
  genheights_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenHeights)
}

// optional float RadiosityNormalsAttenConstant = 100;
inline void tGenerateMaps::clear_radiositynormalsattenconstant() {
  radiositynormalsattenconstant_ = 0;
}
inline float tGenerateMaps::radiositynormalsattenconstant() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsAttenConstant)
  return radiositynormalsattenconstant_;
}
inline void tGenerateMaps::set_radiositynormalsattenconstant(float value) {
  
  radiositynormalsattenconstant_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsAttenConstant)
}

// optional bool GenProximity = 101;
inline void tGenerateMaps::clear_genproximity() {
  genproximity_ = false;
}
inline bool tGenerateMaps::genproximity() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenProximity)
  return genproximity_;
}
inline void tGenerateMaps::set_genproximity(bool value) {
  
  genproximity_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenProximity)
}

// optional bool GenPRT = 102;
inline void tGenerateMaps::clear_genprt() {
  genprt_ = false;
}
inline bool tGenerateMaps::genprt() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenPRT)
  return genprt_;
}
inline void tGenerateMaps::set_genprt(bool value) {
  
  genprt_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenPRT)
}

// optional float CavityContrast = 103;
inline void tGenerateMaps::clear_cavitycontrast() {
  cavitycontrast_ = 0;
}
inline float tGenerateMaps::cavitycontrast() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CavityContrast)
  return cavitycontrast_;
}
inline void tGenerateMaps::set_cavitycontrast(float value) {
  
  cavitycontrast_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CavityContrast)
}

// optional .tGenerateMaps.eRNMCoordSys RadiosityNormalsCoordSys = 104;
inline void tGenerateMaps::clear_radiositynormalscoordsys() {
  radiositynormalscoordsys_ = 0;
}
inline ::tGenerateMaps_eRNMCoordSys tGenerateMaps::radiositynormalscoordsys() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsCoordSys)
  return static_cast< ::tGenerateMaps_eRNMCoordSys >(radiositynormalscoordsys_);
}
inline void tGenerateMaps::set_radiositynormalscoordsys(::tGenerateMaps_eRNMCoordSys value) {
  
  radiositynormalscoordsys_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsCoordSys)
}

// optional bool TransluJitter = 105;
inline void tGenerateMaps::clear_translujitter() {
  translujitter_ = false;
}
inline bool tGenerateMaps::translujitter() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.TransluJitter)
  return translujitter_;
}
inline void tGenerateMaps::set_translujitter(bool value) {
  
  translujitter_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.TransluJitter)
}

// optional uint32 AORaysPerSample = 106;
inline void tGenerateMaps::clear_aorayspersample() {
  aorayspersample_ = 0u;
}
inline ::google::protobuf::uint32 tGenerateMaps::aorayspersample() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AORaysPerSample)
  return aorayspersample_;
}
inline void tGenerateMaps::set_aorayspersample(::google::protobuf::uint32 value) {
  
  aorayspersample_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AORaysPerSample)
}

// optional float BentBias = 107;
inline void tGenerateMaps::clear_bentbias() {
  bentbias_ = 0;
}
inline float tGenerateMaps::bentbias() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentBias)
  return bentbias_;
}
inline void tGenerateMaps::set_bentbias(float value) {
  
  bentbias_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentBias)
}

// optional bool DiscardRayBackFacesHits = 108;
inline void tGenerateMaps::clear_discardraybackfaceshits() {
  discardraybackfaceshits_ = false;
}
inline bool tGenerateMaps::discardraybackfaceshits() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.DiscardRayBackFacesHits)
  return discardraybackfaceshits_;
}
inline void tGenerateMaps::set_discardraybackfaceshits(bool value) {
  
  discardraybackfaceshits_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.DiscardRayBackFacesHits)
}

// optional float AOConeAngle = 109;
inline void tGenerateMaps::clear_aoconeangle() {
  aoconeangle_ = 0;
}
inline float tGenerateMaps::aoconeangle() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOConeAngle)
  return aoconeangle_;
}
inline void tGenerateMaps::set_aoconeangle(float value) {
  
  aoconeangle_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOConeAngle)
}

// optional .tGenerateMaps.eSwizzleComponent BentSwizzleY = 110;
inline void tGenerateMaps::clear_bentswizzley() {
  bentswizzley_ = 0;
}
inline ::tGenerateMaps_eSwizzleComponent tGenerateMaps::bentswizzley() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentSwizzleY)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(bentswizzley_);
}
inline void tGenerateMaps::set_bentswizzley(::tGenerateMaps_eSwizzleComponent value) {
  
  bentswizzley_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentSwizzleY)
}

// optional float RadiosityNormalsBias = 111;
inline void tGenerateMaps::clear_radiositynormalsbias() {
  radiositynormalsbias_ = 0;
}
inline float tGenerateMaps::radiositynormalsbias() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsBias)
  return radiositynormalsbias_;
}
inline void tGenerateMaps::set_radiositynormalsbias(float value) {
  
  radiositynormalsbias_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsBias)
}

// optional float RadiosityNormalsContrast = 112;
inline void tGenerateMaps::clear_radiositynormalscontrast() {
  radiositynormalscontrast_ = 0;
}
inline float tGenerateMaps::radiositynormalscontrast() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.RadiosityNormalsContrast)
  return radiositynormalscontrast_;
}
inline void tGenerateMaps::set_radiositynormalscontrast(float value) {
  
  radiositynormalscontrast_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.RadiosityNormalsContrast)
}

// optional uint32 CavitySteps = 113;
inline void tGenerateMaps::clear_cavitysteps() {
  cavitysteps_ = 0u;
}
inline ::google::protobuf::uint32 tGenerateMaps::cavitysteps() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CavitySteps)
  return cavitysteps_;
}
inline void tGenerateMaps::set_cavitysteps(::google::protobuf::uint32 value) {
  
  cavitysteps_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CavitySteps)
}

// optional .tGenerateMaps.eAntialiasing AA = 114;
inline void tGenerateMaps::clear_aa() {
  aa_ = 0;
}
inline ::tGenerateMaps_eAntialiasing tGenerateMaps::aa() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AA)
  return static_cast< ::tGenerateMaps_eAntialiasing >(aa_);
}
inline void tGenerateMaps::set_aa(::tGenerateMaps_eAntialiasing value) {
  
  aa_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AA)
}

// optional .tGenerateMaps.eSwizzleComponent BentSwizzleZ = 115;
inline void tGenerateMaps::clear_bentswizzlez() {
  bentswizzlez_ = 0;
}
inline ::tGenerateMaps_eSwizzleComponent tGenerateMaps::bentswizzlez() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BentSwizzleZ)
  return static_cast< ::tGenerateMaps_eSwizzleComponent >(bentswizzlez_);
}
inline void tGenerateMaps::set_bentswizzlez(::tGenerateMaps_eSwizzleComponent value) {
  
  bentswizzlez_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BentSwizzleZ)
}

// optional uint32 BucketSize = 116;
inline void tGenerateMaps::clear_bucketsize() {
  bucketsize_ = 0u;
}
inline ::google::protobuf::uint32 tGenerateMaps::bucketsize() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BucketSize)
  return bucketsize_;
}
inline void tGenerateMaps::set_bucketsize(::google::protobuf::uint32 value) {
  
  bucketsize_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BucketSize)
}

// optional float CurvConeAngle = 117;
inline void tGenerateMaps::clear_curvconeangle() {
  curvconeangle_ = 0;
}
inline float tGenerateMaps::curvconeangle() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvConeAngle)
  return curvconeangle_;
}
inline void tGenerateMaps::set_curvconeangle(float value) {
  
  curvconeangle_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CurvConeAngle)
}

// optional float TransluDist = 118;
inline void tGenerateMaps::clear_transludist() {
  transludist_ = 0;
}
inline float tGenerateMaps::transludist() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.TransluDist)
  return transludist_;
}
inline void tGenerateMaps::set_transludist(float value) {
  
  transludist_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.TransluDist)
}

// optional bool AOJitter = 119;
inline void tGenerateMaps::clear_aojitter() {
  aojitter_ = false;
}
inline bool tGenerateMaps::aojitter() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOJitter)
  return aojitter_;
}
inline void tGenerateMaps::set_aojitter(bool value) {
  
  aojitter_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOJitter)
}

// optional float CurvBias = 120;
inline void tGenerateMaps::clear_curvbias() {
  curvbias_ = 0;
}
inline float tGenerateMaps::curvbias() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvBias)
  return curvbias_;
}
inline void tGenerateMaps::set_curvbias(float value) {
  
  curvbias_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CurvBias)
}

// optional bool GenWireRays = 121;
inline void tGenerateMaps::clear_genwirerays() {
  genwirerays_ = false;
}
inline bool tGenerateMaps::genwirerays() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenWireRays)
  return genwirerays_;
}
inline void tGenerateMaps::set_genwirerays(bool value) {
  
  genwirerays_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenWireRays)
}

// optional .tGenerateMaps.eCurvAlgorithm CurvAlgorithm = 122;
inline void tGenerateMaps::clear_curvalgorithm() {
  curvalgorithm_ = 0;
}
inline ::tGenerateMaps_eCurvAlgorithm tGenerateMaps::curvalgorithm() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.CurvAlgorithm)
  return static_cast< ::tGenerateMaps_eCurvAlgorithm >(curvalgorithm_);
}
inline void tGenerateMaps::set_curvalgorithm(::tGenerateMaps_eCurvAlgorithm value) {
  
  curvalgorithm_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.CurvAlgorithm)
}

// optional .tGenerateMaps.eAODistribution TransluDistribution = 123;
inline void tGenerateMaps::clear_transludistribution() {
  transludistribution_ = 0;
}
inline ::tGenerateMaps_eAODistribution tGenerateMaps::transludistribution() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.TransluDistribution)
  return static_cast< ::tGenerateMaps_eAODistribution >(transludistribution_);
}
inline void tGenerateMaps::set_transludistribution(::tGenerateMaps_eAODistribution value) {
  
  transludistribution_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.TransluDistribution)
}

// optional float AOAttenLinear = 124;
inline void tGenerateMaps::clear_aoattenlinear() {
  aoattenlinear_ = 0;
}
inline float tGenerateMaps::aoattenlinear() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.AOAttenLinear)
  return aoattenlinear_;
}
inline void tGenerateMaps::set_aoattenlinear(float value) {
  
  aoattenlinear_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.AOAttenLinear)
}

// optional bool ProximityLimitRayDistance = 125;
inline void tGenerateMaps::clear_proximitylimitraydistance() {
  proximitylimitraydistance_ = false;
}
inline bool tGenerateMaps::proximitylimitraydistance() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.ProximityLimitRayDistance)
  return proximitylimitraydistance_;
}
inline void tGenerateMaps::set_proximitylimitraydistance(bool value) {
  
  proximitylimitraydistance_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.ProximityLimitRayDistance)
}

// optional bool GenRadiosityNormals = 126;
inline void tGenerateMaps::clear_genradiositynormals() {
  genradiositynormals_ = false;
}
inline bool tGenerateMaps::genradiositynormals() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenRadiosityNormals)
  return genradiositynormals_;
}
inline void tGenerateMaps::set_genradiositynormals(bool value) {
  
  genradiositynormals_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenRadiosityNormals)
}

// optional float ProximityConeAngle = 127;
inline void tGenerateMaps::clear_proximityconeangle() {
  proximityconeangle_ = 0;
}
inline float tGenerateMaps::proximityconeangle() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.ProximityConeAngle)
  return proximityconeangle_;
}
inline void tGenerateMaps::set_proximityconeangle(float value) {
  
  proximityconeangle_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.ProximityConeAngle)
}

// optional .tGenerateMaps.eHMNormalization HeightTonemap = 128;
inline void tGenerateMaps::clear_heighttonemap() {
  heighttonemap_ = 0;
}
inline ::tGenerateMaps_eHMNormalization tGenerateMaps::heighttonemap() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.HeightTonemap)
  return static_cast< ::tGenerateMaps_eHMNormalization >(heighttonemap_);
}
inline void tGenerateMaps::set_heighttonemap(::tGenerateMaps_eHMNormalization value) {
  
  heighttonemap_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.HeightTonemap)
}

// optional bool GenCavity = 129;
inline void tGenerateMaps::clear_gencavity() {
  gencavity_ = false;
}
inline bool tGenerateMaps::gencavity() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.GenCavity)
  return gencavity_;
}
inline void tGenerateMaps::set_gencavity(bool value) {
  
  gencavity_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.GenCavity)
}

// optional bool BakeHighpolyVCols = 130;
inline void tGenerateMaps::clear_bakehighpolyvcols() {
  bakehighpolyvcols_ = false;
}
inline bool tGenerateMaps::bakehighpolyvcols() const {
  // @@protoc_insertion_point(field_get:tGenerateMaps.BakeHighpolyVCols)
  return bakehighpolyvcols_;
}
inline void tGenerateMaps::set_bakehighpolyvcols(bool value) {
  
  bakehighpolyvcols_ = value;
  // @@protoc_insertion_point(field_set:tGenerateMaps.BakeHighpolyVCols)
}

// -------------------------------------------------------------------

// tHighPolyModel

// repeated .tHighPolyMesh Mesh = 1;
inline int tHighPolyModel::mesh_size() const {
  return mesh_.size();
}
inline void tHighPolyModel::clear_mesh() {
  mesh_.Clear();
}
inline const ::tHighPolyMesh& tHighPolyModel::mesh(int index) const {
  // @@protoc_insertion_point(field_get:tHighPolyModel.Mesh)
  return mesh_.Get(index);
}
inline ::tHighPolyMesh* tHighPolyModel::mutable_mesh(int index) {
  // @@protoc_insertion_point(field_mutable:tHighPolyModel.Mesh)
  return mesh_.Mutable(index);
}
inline ::tHighPolyMesh* tHighPolyModel::add_mesh() {
  // @@protoc_insertion_point(field_add:tHighPolyModel.Mesh)
  return mesh_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tHighPolyMesh >*
tHighPolyModel::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable_list:tHighPolyModel.Mesh)
  return &mesh_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tHighPolyMesh >&
tHighPolyModel::mesh() const {
  // @@protoc_insertion_point(field_list:tHighPolyModel.Mesh)
  return mesh_;
}

// optional string BaseTex = 2;
inline void tHighPolyModel::clear_basetex() {
  basetex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tHighPolyModel::basetex() const {
  // @@protoc_insertion_point(field_get:tHighPolyModel.BaseTex)
  return basetex_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tHighPolyModel::set_basetex(const ::std::string& value) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tHighPolyModel.BaseTex)
}
inline void tHighPolyModel::set_basetex(const char* value) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tHighPolyModel.BaseTex)
}
inline void tHighPolyModel::set_basetex(const char* value, size_t size) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tHighPolyModel.BaseTex)
}
inline ::std::string* tHighPolyModel::mutable_basetex() {
  
  // @@protoc_insertion_point(field_mutable:tHighPolyModel.BaseTex)
  return basetex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tHighPolyModel::release_basetex() {
  // @@protoc_insertion_point(field_release:tHighPolyModel.BaseTex)
  
  return basetex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tHighPolyModel::set_allocated_basetex(::std::string* basetex) {
  if (basetex != NULL) {
    
  } else {
    
  }
  basetex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basetex);
  // @@protoc_insertion_point(field_set_allocated:tHighPolyModel.BaseTex)
}

// optional float DefaultMeshScale = 3;
inline void tHighPolyModel::clear_defaultmeshscale() {
  defaultmeshscale_ = 0;
}
inline float tHighPolyModel::defaultmeshscale() const {
  // @@protoc_insertion_point(field_get:tHighPolyModel.DefaultMeshScale)
  return defaultmeshscale_;
}
inline void tHighPolyModel::set_defaultmeshscale(float value) {
  
  defaultmeshscale_ = value;
  // @@protoc_insertion_point(field_set:tHighPolyModel.DefaultMeshScale)
}

// -------------------------------------------------------------------

// tLowPolyModel

// repeated .tLowPolyMesh Mesh = 1;
inline int tLowPolyModel::mesh_size() const {
  return mesh_.size();
}
inline void tLowPolyModel::clear_mesh() {
  mesh_.Clear();
}
inline const ::tLowPolyMesh& tLowPolyModel::mesh(int index) const {
  // @@protoc_insertion_point(field_get:tLowPolyModel.Mesh)
  return mesh_.Get(index);
}
inline ::tLowPolyMesh* tLowPolyModel::mutable_mesh(int index) {
  // @@protoc_insertion_point(field_mutable:tLowPolyModel.Mesh)
  return mesh_.Mutable(index);
}
inline ::tLowPolyMesh* tLowPolyModel::add_mesh() {
  // @@protoc_insertion_point(field_add:tLowPolyModel.Mesh)
  return mesh_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tLowPolyMesh >*
tLowPolyModel::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable_list:tLowPolyModel.Mesh)
  return &mesh_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tLowPolyMesh >&
tLowPolyModel::mesh() const {
  // @@protoc_insertion_point(field_list:tLowPolyModel.Mesh)
  return mesh_;
}

// optional float DefaultMeshScale = 2;
inline void tLowPolyModel::clear_defaultmeshscale() {
  defaultmeshscale_ = 0;
}
inline float tLowPolyModel::defaultmeshscale() const {
  // @@protoc_insertion_point(field_get:tLowPolyModel.DefaultMeshScale)
  return defaultmeshscale_;
}
inline void tLowPolyModel::set_defaultmeshscale(float value) {
  
  defaultmeshscale_ = value;
  // @@protoc_insertion_point(field_set:tLowPolyModel.DefaultMeshScale)
}

// -------------------------------------------------------------------

// tViewer3D

// optional .tRGB8 LightAmbientColor = 1;
inline bool tViewer3D::has_lightambientcolor() const {
  return !_is_default_instance_ && lightambientcolor_ != NULL;
}
inline void tViewer3D::clear_lightambientcolor() {
  if (GetArenaNoVirtual() == NULL && lightambientcolor_ != NULL) delete lightambientcolor_;
  lightambientcolor_ = NULL;
}
inline const ::tRGB8& tViewer3D::lightambientcolor() const {
  // @@protoc_insertion_point(field_get:tViewer3D.LightAmbientColor)
  return lightambientcolor_ != NULL ? *lightambientcolor_ : *default_instance_->lightambientcolor_;
}
inline ::tRGB8* tViewer3D::mutable_lightambientcolor() {
  
  if (lightambientcolor_ == NULL) {
    lightambientcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.LightAmbientColor)
  return lightambientcolor_;
}
inline ::tRGB8* tViewer3D::release_lightambientcolor() {
  // @@protoc_insertion_point(field_release:tViewer3D.LightAmbientColor)
  
  ::tRGB8* temp = lightambientcolor_;
  lightambientcolor_ = NULL;
  return temp;
}
inline void tViewer3D::set_allocated_lightambientcolor(::tRGB8* lightambientcolor) {
  delete lightambientcolor_;
  lightambientcolor_ = lightambientcolor;
  if (lightambientcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.LightAmbientColor)
}

// optional .tRGB8 LightDiffuseColor = 2;
inline bool tViewer3D::has_lightdiffusecolor() const {
  return !_is_default_instance_ && lightdiffusecolor_ != NULL;
}
inline void tViewer3D::clear_lightdiffusecolor() {
  if (GetArenaNoVirtual() == NULL && lightdiffusecolor_ != NULL) delete lightdiffusecolor_;
  lightdiffusecolor_ = NULL;
}
inline const ::tRGB8& tViewer3D::lightdiffusecolor() const {
  // @@protoc_insertion_point(field_get:tViewer3D.LightDiffuseColor)
  return lightdiffusecolor_ != NULL ? *lightdiffusecolor_ : *default_instance_->lightdiffusecolor_;
}
inline ::tRGB8* tViewer3D::mutable_lightdiffusecolor() {
  
  if (lightdiffusecolor_ == NULL) {
    lightdiffusecolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.LightDiffuseColor)
  return lightdiffusecolor_;
}
inline ::tRGB8* tViewer3D::release_lightdiffusecolor() {
  // @@protoc_insertion_point(field_release:tViewer3D.LightDiffuseColor)
  
  ::tRGB8* temp = lightdiffusecolor_;
  lightdiffusecolor_ = NULL;
  return temp;
}
inline void tViewer3D::set_allocated_lightdiffusecolor(::tRGB8* lightdiffusecolor) {
  delete lightdiffusecolor_;
  lightdiffusecolor_ = lightdiffusecolor;
  if (lightdiffusecolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.LightDiffuseColor)
}

// optional .tRGB8 LightSpecularColor = 3;
inline bool tViewer3D::has_lightspecularcolor() const {
  return !_is_default_instance_ && lightspecularcolor_ != NULL;
}
inline void tViewer3D::clear_lightspecularcolor() {
  if (GetArenaNoVirtual() == NULL && lightspecularcolor_ != NULL) delete lightspecularcolor_;
  lightspecularcolor_ = NULL;
}
inline const ::tRGB8& tViewer3D::lightspecularcolor() const {
  // @@protoc_insertion_point(field_get:tViewer3D.LightSpecularColor)
  return lightspecularcolor_ != NULL ? *lightspecularcolor_ : *default_instance_->lightspecularcolor_;
}
inline ::tRGB8* tViewer3D::mutable_lightspecularcolor() {
  
  if (lightspecularcolor_ == NULL) {
    lightspecularcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.LightSpecularColor)
  return lightspecularcolor_;
}
inline ::tRGB8* tViewer3D::release_lightspecularcolor() {
  // @@protoc_insertion_point(field_release:tViewer3D.LightSpecularColor)
  
  ::tRGB8* temp = lightspecularcolor_;
  lightspecularcolor_ = NULL;
  return temp;
}
inline void tViewer3D::set_allocated_lightspecularcolor(::tRGB8* lightspecularcolor) {
  delete lightspecularcolor_;
  lightspecularcolor_ = lightspecularcolor;
  if (lightspecularcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.LightSpecularColor)
}

// optional .tRGB8 LightSecondaryColor = 4;
inline bool tViewer3D::has_lightsecondarycolor() const {
  return !_is_default_instance_ && lightsecondarycolor_ != NULL;
}
inline void tViewer3D::clear_lightsecondarycolor() {
  if (GetArenaNoVirtual() == NULL && lightsecondarycolor_ != NULL) delete lightsecondarycolor_;
  lightsecondarycolor_ = NULL;
}
inline const ::tRGB8& tViewer3D::lightsecondarycolor() const {
  // @@protoc_insertion_point(field_get:tViewer3D.LightSecondaryColor)
  return lightsecondarycolor_ != NULL ? *lightsecondarycolor_ : *default_instance_->lightsecondarycolor_;
}
inline ::tRGB8* tViewer3D::mutable_lightsecondarycolor() {
  
  if (lightsecondarycolor_ == NULL) {
    lightsecondarycolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.LightSecondaryColor)
  return lightsecondarycolor_;
}
inline ::tRGB8* tViewer3D::release_lightsecondarycolor() {
  // @@protoc_insertion_point(field_release:tViewer3D.LightSecondaryColor)
  
  ::tRGB8* temp = lightsecondarycolor_;
  lightsecondarycolor_ = NULL;
  return temp;
}
inline void tViewer3D::set_allocated_lightsecondarycolor(::tRGB8* lightsecondarycolor) {
  delete lightsecondarycolor_;
  lightsecondarycolor_ = lightsecondarycolor;
  if (lightsecondarycolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.LightSecondaryColor)
}

// optional .tRGB8 LightTertiaryColor = 5;
inline bool tViewer3D::has_lighttertiarycolor() const {
  return !_is_default_instance_ && lighttertiarycolor_ != NULL;
}
inline void tViewer3D::clear_lighttertiarycolor() {
  if (GetArenaNoVirtual() == NULL && lighttertiarycolor_ != NULL) delete lighttertiarycolor_;
  lighttertiarycolor_ = NULL;
}
inline const ::tRGB8& tViewer3D::lighttertiarycolor() const {
  // @@protoc_insertion_point(field_get:tViewer3D.LightTertiaryColor)
  return lighttertiarycolor_ != NULL ? *lighttertiarycolor_ : *default_instance_->lighttertiarycolor_;
}
inline ::tRGB8* tViewer3D::mutable_lighttertiarycolor() {
  
  if (lighttertiarycolor_ == NULL) {
    lighttertiarycolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.LightTertiaryColor)
  return lighttertiarycolor_;
}
inline ::tRGB8* tViewer3D::release_lighttertiarycolor() {
  // @@protoc_insertion_point(field_release:tViewer3D.LightTertiaryColor)
  
  ::tRGB8* temp = lighttertiarycolor_;
  lighttertiarycolor_ = NULL;
  return temp;
}
inline void tViewer3D::set_allocated_lighttertiarycolor(::tRGB8* lighttertiarycolor) {
  delete lighttertiarycolor_;
  lighttertiarycolor_ = lighttertiarycolor;
  if (lighttertiarycolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.LightTertiaryColor)
}

// optional .tRGB8 BackgroundColor = 6;
inline bool tViewer3D::has_backgroundcolor() const {
  return !_is_default_instance_ && backgroundcolor_ != NULL;
}
inline void tViewer3D::clear_backgroundcolor() {
  if (GetArenaNoVirtual() == NULL && backgroundcolor_ != NULL) delete backgroundcolor_;
  backgroundcolor_ = NULL;
}
inline const ::tRGB8& tViewer3D::backgroundcolor() const {
  // @@protoc_insertion_point(field_get:tViewer3D.BackgroundColor)
  return backgroundcolor_ != NULL ? *backgroundcolor_ : *default_instance_->backgroundcolor_;
}
inline ::tRGB8* tViewer3D::mutable_backgroundcolor() {
  
  if (backgroundcolor_ == NULL) {
    backgroundcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.BackgroundColor)
  return backgroundcolor_;
}
inline ::tRGB8* tViewer3D::release_backgroundcolor() {
  // @@protoc_insertion_point(field_release:tViewer3D.BackgroundColor)
  
  ::tRGB8* temp = backgroundcolor_;
  backgroundcolor_ = NULL;
  return temp;
}
inline void tViewer3D::set_allocated_backgroundcolor(::tRGB8* backgroundcolor) {
  delete backgroundcolor_;
  backgroundcolor_ = backgroundcolor;
  if (backgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.BackgroundColor)
}

// optional .tRGB8 GridColor = 7;
inline bool tViewer3D::has_gridcolor() const {
  return !_is_default_instance_ && gridcolor_ != NULL;
}
inline void tViewer3D::clear_gridcolor() {
  if (GetArenaNoVirtual() == NULL && gridcolor_ != NULL) delete gridcolor_;
  gridcolor_ = NULL;
}
inline const ::tRGB8& tViewer3D::gridcolor() const {
  // @@protoc_insertion_point(field_get:tViewer3D.GridColor)
  return gridcolor_ != NULL ? *gridcolor_ : *default_instance_->gridcolor_;
}
inline ::tRGB8* tViewer3D::mutable_gridcolor() {
  
  if (gridcolor_ == NULL) {
    gridcolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.GridColor)
  return gridcolor_;
}
inline ::tRGB8* tViewer3D::release_gridcolor() {
  // @@protoc_insertion_point(field_release:tViewer3D.GridColor)
  
  ::tRGB8* temp = gridcolor_;
  gridcolor_ = NULL;
  return temp;
}
inline void tViewer3D::set_allocated_gridcolor(::tRGB8* gridcolor) {
  delete gridcolor_;
  gridcolor_ = gridcolor;
  if (gridcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.GridColor)
}

// optional .tRGB8 CageColor = 8;
inline bool tViewer3D::has_cagecolor() const {
  return !_is_default_instance_ && cagecolor_ != NULL;
}
inline void tViewer3D::clear_cagecolor() {
  if (GetArenaNoVirtual() == NULL && cagecolor_ != NULL) delete cagecolor_;
  cagecolor_ = NULL;
}
inline const ::tRGB8& tViewer3D::cagecolor() const {
  // @@protoc_insertion_point(field_get:tViewer3D.CageColor)
  return cagecolor_ != NULL ? *cagecolor_ : *default_instance_->cagecolor_;
}
inline ::tRGB8* tViewer3D::mutable_cagecolor() {
  
  if (cagecolor_ == NULL) {
    cagecolor_ = new ::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.CageColor)
  return cagecolor_;
}
inline ::tRGB8* tViewer3D::release_cagecolor() {
  // @@protoc_insertion_point(field_release:tViewer3D.CageColor)
  
  ::tRGB8* temp = cagecolor_;
  cagecolor_ = NULL;
  return temp;
}
inline void tViewer3D::set_allocated_cagecolor(::tRGB8* cagecolor) {
  delete cagecolor_;
  cagecolor_ = cagecolor;
  if (cagecolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.CageColor)
}

// optional .tMatrix CameraRotation = 9;
inline bool tViewer3D::has_camerarotation() const {
  return !_is_default_instance_ && camerarotation_ != NULL;
}
inline void tViewer3D::clear_camerarotation() {
  if (GetArenaNoVirtual() == NULL && camerarotation_ != NULL) delete camerarotation_;
  camerarotation_ = NULL;
}
inline const ::tMatrix& tViewer3D::camerarotation() const {
  // @@protoc_insertion_point(field_get:tViewer3D.CameraRotation)
  return camerarotation_ != NULL ? *camerarotation_ : *default_instance_->camerarotation_;
}
inline ::tMatrix* tViewer3D::mutable_camerarotation() {
  
  if (camerarotation_ == NULL) {
    camerarotation_ = new ::tMatrix;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.CameraRotation)
  return camerarotation_;
}
inline ::tMatrix* tViewer3D::release_camerarotation() {
  // @@protoc_insertion_point(field_release:tViewer3D.CameraRotation)
  
  ::tMatrix* temp = camerarotation_;
  camerarotation_ = NULL;
  return temp;
}
inline void tViewer3D::set_allocated_camerarotation(::tMatrix* camerarotation) {
  delete camerarotation_;
  camerarotation_ = camerarotation;
  if (camerarotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.CameraRotation)
}

// optional .tVector3 CameraPosition = 10;
inline bool tViewer3D::has_cameraposition() const {
  return !_is_default_instance_ && cameraposition_ != NULL;
}
inline void tViewer3D::clear_cameraposition() {
  if (GetArenaNoVirtual() == NULL && cameraposition_ != NULL) delete cameraposition_;
  cameraposition_ = NULL;
}
inline const ::tVector3& tViewer3D::cameraposition() const {
  // @@protoc_insertion_point(field_get:tViewer3D.CameraPosition)
  return cameraposition_ != NULL ? *cameraposition_ : *default_instance_->cameraposition_;
}
inline ::tVector3* tViewer3D::mutable_cameraposition() {
  
  if (cameraposition_ == NULL) {
    cameraposition_ = new ::tVector3;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.CameraPosition)
  return cameraposition_;
}
inline ::tVector3* tViewer3D::release_cameraposition() {
  // @@protoc_insertion_point(field_release:tViewer3D.CameraPosition)
  
  ::tVector3* temp = cameraposition_;
  cameraposition_ = NULL;
  return temp;
}
inline void tViewer3D::set_allocated_cameraposition(::tVector3* cameraposition) {
  delete cameraposition_;
  cameraposition_ = cameraposition;
  if (cameraposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.CameraPosition)
}

// optional .tVector3 LightPosition = 11;
inline bool tViewer3D::has_lightposition() const {
  return !_is_default_instance_ && lightposition_ != NULL;
}
inline void tViewer3D::clear_lightposition() {
  if (GetArenaNoVirtual() == NULL && lightposition_ != NULL) delete lightposition_;
  lightposition_ = NULL;
}
inline const ::tVector3& tViewer3D::lightposition() const {
  // @@protoc_insertion_point(field_get:tViewer3D.LightPosition)
  return lightposition_ != NULL ? *lightposition_ : *default_instance_->lightposition_;
}
inline ::tVector3* tViewer3D::mutable_lightposition() {
  
  if (lightposition_ == NULL) {
    lightposition_ = new ::tVector3;
  }
  // @@protoc_insertion_point(field_mutable:tViewer3D.LightPosition)
  return lightposition_;
}
inline ::tVector3* tViewer3D::release_lightposition() {
  // @@protoc_insertion_point(field_release:tViewer3D.LightPosition)
  
  ::tVector3* temp = lightposition_;
  lightposition_ = NULL;
  return temp;
}
inline void tViewer3D::set_allocated_lightposition(::tVector3* lightposition) {
  delete lightposition_;
  lightposition_ = lightposition;
  if (lightposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tViewer3D.LightPosition)
}

// optional float AxisScl = 12;
inline void tViewer3D::clear_axisscl() {
  axisscl_ = 0;
}
inline float tViewer3D::axisscl() const {
  // @@protoc_insertion_point(field_get:tViewer3D.AxisScl)
  return axisscl_;
}
inline void tViewer3D::set_axisscl(float value) {
  
  axisscl_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.AxisScl)
}

// optional bool XemakosExample = 13;
inline void tViewer3D::clear_xemakosexample() {
  xemakosexample_ = false;
}
inline bool tViewer3D::xemakosexample() const {
  // @@protoc_insertion_point(field_get:tViewer3D.XemakosExample)
  return xemakosexample_;
}
inline void tViewer3D::set_xemakosexample(bool value) {
  
  xemakosexample_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.XemakosExample)
}

// optional bool ShowWireframe = 14;
inline void tViewer3D::clear_showwireframe() {
  showwireframe_ = false;
}
inline bool tViewer3D::showwireframe() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShowWireframe)
  return showwireframe_;
}
inline void tViewer3D::set_showwireframe(bool value) {
  
  showwireframe_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShowWireframe)
}

// optional float CageOpacity = 15;
inline void tViewer3D::clear_cageopacity() {
  cageopacity_ = 0;
}
inline float tViewer3D::cageopacity() const {
  // @@protoc_insertion_point(field_get:tViewer3D.CageOpacity)
  return cageopacity_;
}
inline void tViewer3D::set_cageopacity(float value) {
  
  cageopacity_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.CageOpacity)
}

// optional float DiffuseGIIntensity = 16;
inline void tViewer3D::clear_diffusegiintensity() {
  diffusegiintensity_ = 0;
}
inline float tViewer3D::diffusegiintensity() const {
  // @@protoc_insertion_point(field_get:tViewer3D.DiffuseGIIntensity)
  return diffusegiintensity_;
}
inline void tViewer3D::set_diffusegiintensity(float value) {
  
  diffusegiintensity_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.DiffuseGIIntensity)
}

// optional bool ShowAO = 17;
inline void tViewer3D::clear_showao() {
  showao_ = false;
}
inline bool tViewer3D::showao() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShowAO)
  return showao_;
}
inline void tViewer3D::set_showao(bool value) {
  
  showao_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShowAO)
}

// optional float SSAOContrast = 18;
inline void tViewer3D::clear_ssaocontrast() {
  ssaocontrast_ = 0;
}
inline float tViewer3D::ssaocontrast() const {
  // @@protoc_insertion_point(field_get:tViewer3D.SSAOContrast)
  return ssaocontrast_;
}
inline void tViewer3D::set_ssaocontrast(float value) {
  
  ssaocontrast_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.SSAOContrast)
}

// optional float ShadowArea = 19;
inline void tViewer3D::clear_shadowarea() {
  shadowarea_ = 0;
}
inline float tViewer3D::shadowarea() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShadowArea)
  return shadowarea_;
}
inline void tViewer3D::set_shadowarea(float value) {
  
  shadowarea_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShadowArea)
}

// optional float LightIndiretIntensity = 20;
inline void tViewer3D::clear_lightindiretintensity() {
  lightindiretintensity_ = 0;
}
inline float tViewer3D::lightindiretintensity() const {
  // @@protoc_insertion_point(field_get:tViewer3D.LightIndiretIntensity)
  return lightindiretintensity_;
}
inline void tViewer3D::set_lightindiretintensity(float value) {
  
  lightindiretintensity_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.LightIndiretIntensity)
}

// optional bool ShowHighpolys = 21;
inline void tViewer3D::clear_showhighpolys() {
  showhighpolys_ = false;
}
inline bool tViewer3D::showhighpolys() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShowHighpolys)
  return showhighpolys_;
}
inline void tViewer3D::set_showhighpolys(bool value) {
  
  showhighpolys_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShowHighpolys)
}

// optional bool ShowStarfield = 22;
inline void tViewer3D::clear_showstarfield() {
  showstarfield_ = false;
}
inline bool tViewer3D::showstarfield() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShowStarfield)
  return showstarfield_;
}
inline void tViewer3D::set_showstarfield(bool value) {
  
  showstarfield_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShowStarfield)
}

// optional bool ShowBlockers = 23;
inline void tViewer3D::clear_showblockers() {
  showblockers_ = false;
}
inline bool tViewer3D::showblockers() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShowBlockers)
  return showblockers_;
}
inline void tViewer3D::set_showblockers(bool value) {
  
  showblockers_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShowBlockers)
}

// optional float HDRThreshold = 24;
inline void tViewer3D::clear_hdrthreshold() {
  hdrthreshold_ = 0;
}
inline float tViewer3D::hdrthreshold() const {
  // @@protoc_insertion_point(field_get:tViewer3D.HDRThreshold)
  return hdrthreshold_;
}
inline void tViewer3D::set_hdrthreshold(float value) {
  
  hdrthreshold_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.HDRThreshold)
}

// optional float SSAOBright = 25;
inline void tViewer3D::clear_ssaobright() {
  ssaobright_ = 0;
}
inline float tViewer3D::ssaobright() const {
  // @@protoc_insertion_point(field_get:tViewer3D.SSAOBright)
  return ssaobright_;
}
inline void tViewer3D::set_ssaobright(float value) {
  
  ssaobright_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.SSAOBright)
}

// optional float SSAOBlurRadius = 26;
inline void tViewer3D::clear_ssaoblurradius() {
  ssaoblurradius_ = 0;
}
inline float tViewer3D::ssaoblurradius() const {
  // @@protoc_insertion_point(field_get:tViewer3D.SSAOBlurRadius)
  return ssaoblurradius_;
}
inline void tViewer3D::set_ssaoblurradius(float value) {
  
  ssaoblurradius_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.SSAOBlurRadius)
}

// optional bool ShowGrid = 27;
inline void tViewer3D::clear_showgrid() {
  showgrid_ = false;
}
inline bool tViewer3D::showgrid() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShowGrid)
  return showgrid_;
}
inline void tViewer3D::set_showgrid(bool value) {
  
  showgrid_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShowGrid)
}

// optional float ParallaxStrength = 28;
inline void tViewer3D::clear_parallaxstrength() {
  parallaxstrength_ = 0;
}
inline float tViewer3D::parallaxstrength() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ParallaxStrength)
  return parallaxstrength_;
}
inline void tViewer3D::set_parallaxstrength(float value) {
  
  parallaxstrength_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ParallaxStrength)
}

// optional float SSAOAtten = 29;
inline void tViewer3D::clear_ssaoatten() {
  ssaoatten_ = 0;
}
inline float tViewer3D::ssaoatten() const {
  // @@protoc_insertion_point(field_get:tViewer3D.SSAOAtten)
  return ssaoatten_;
}
inline void tViewer3D::set_ssaoatten(float value) {
  
  ssaoatten_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.SSAOAtten)
}

// optional float CameraOrbitDistance = 30;
inline void tViewer3D::clear_cameraorbitdistance() {
  cameraorbitdistance_ = 0;
}
inline float tViewer3D::cameraorbitdistance() const {
  // @@protoc_insertion_point(field_get:tViewer3D.CameraOrbitDistance)
  return cameraorbitdistance_;
}
inline void tViewer3D::set_cameraorbitdistance(float value) {
  
  cameraorbitdistance_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.CameraOrbitDistance)
}

// optional bool UseGlow = 31;
inline void tViewer3D::clear_useglow() {
  useglow_ = false;
}
inline bool tViewer3D::useglow() const {
  // @@protoc_insertion_point(field_get:tViewer3D.UseGlow)
  return useglow_;
}
inline void tViewer3D::set_useglow(bool value) {
  
  useglow_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.UseGlow)
}

// optional bool SSAOEnabled = 32;
inline void tViewer3D::clear_ssaoenabled() {
  ssaoenabled_ = false;
}
inline bool tViewer3D::ssaoenabled() const {
  // @@protoc_insertion_point(field_get:tViewer3D.SSAOEnabled)
  return ssaoenabled_;
}
inline void tViewer3D::set_ssaoenabled(bool value) {
  
  ssaoenabled_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.SSAOEnabled)
}

// optional float ShadowBias = 33;
inline void tViewer3D::clear_shadowbias() {
  shadowbias_ = 0;
}
inline float tViewer3D::shadowbias() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShadowBias)
  return shadowbias_;
}
inline void tViewer3D::set_shadowbias(float value) {
  
  shadowbias_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShadowBias)
}

// optional float SSAORadius = 34;
inline void tViewer3D::clear_ssaoradius() {
  ssaoradius_ = 0;
}
inline float tViewer3D::ssaoradius() const {
  // @@protoc_insertion_point(field_get:tViewer3D.SSAORadius)
  return ssaoradius_;
}
inline void tViewer3D::set_ssaoradius(float value) {
  
  ssaoradius_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.SSAORadius)
}

// optional float LightIntensity = 35;
inline void tViewer3D::clear_lightintensity() {
  lightintensity_ = 0;
}
inline float tViewer3D::lightintensity() const {
  // @@protoc_insertion_point(field_get:tViewer3D.LightIntensity)
  return lightintensity_;
}
inline void tViewer3D::set_lightintensity(float value) {
  
  lightintensity_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.LightIntensity)
}

// optional float Exposure = 36;
inline void tViewer3D::clear_exposure() {
  exposure_ = 0;
}
inline float tViewer3D::exposure() const {
  // @@protoc_insertion_point(field_get:tViewer3D.Exposure)
  return exposure_;
}
inline void tViewer3D::set_exposure(float value) {
  
  exposure_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.Exposure)
}

// optional bool CameraOrbitAutoCenter = 37;
inline void tViewer3D::clear_cameraorbitautocenter() {
  cameraorbitautocenter_ = false;
}
inline bool tViewer3D::cameraorbitautocenter() const {
  // @@protoc_insertion_point(field_get:tViewer3D.CameraOrbitAutoCenter)
  return cameraorbitautocenter_;
}
inline void tViewer3D::set_cameraorbitautocenter(bool value) {
  
  cameraorbitautocenter_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.CameraOrbitAutoCenter)
}

// optional bool CastShadows = 38;
inline void tViewer3D::clear_castshadows() {
  castshadows_ = false;
}
inline bool tViewer3D::castshadows() const {
  // @@protoc_insertion_point(field_get:tViewer3D.CastShadows)
  return castshadows_;
}
inline void tViewer3D::set_castshadows(bool value) {
  
  castshadows_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.CastShadows)
}

// optional bool ShowNormals = 39;
inline void tViewer3D::clear_shownormals() {
  shownormals_ = false;
}
inline bool tViewer3D::shownormals() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShowNormals)
  return shownormals_;
}
inline void tViewer3D::set_shownormals(bool value) {
  
  shownormals_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShowNormals)
}

// optional int64 MaxTessellationLevel = 40;
inline void tViewer3D::clear_maxtessellationlevel() {
  maxtessellationlevel_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 tViewer3D::maxtessellationlevel() const {
  // @@protoc_insertion_point(field_get:tViewer3D.MaxTessellationLevel)
  return maxtessellationlevel_;
}
inline void tViewer3D::set_maxtessellationlevel(::google::protobuf::int64 value) {
  
  maxtessellationlevel_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.MaxTessellationLevel)
}

// optional bool ShowTangents = 41;
inline void tViewer3D::clear_showtangents() {
  showtangents_ = false;
}
inline bool tViewer3D::showtangents() const {
  // @@protoc_insertion_point(field_get:tViewer3D.ShowTangents)
  return showtangents_;
}
inline void tViewer3D::set_showtangents(bool value) {
  
  showtangents_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.ShowTangents)
}

// optional float GlowIntensity = 42;
inline void tViewer3D::clear_glowintensity() {
  glowintensity_ = 0;
}
inline float tViewer3D::glowintensity() const {
  // @@protoc_insertion_point(field_get:tViewer3D.GlowIntensity)
  return glowintensity_;
}
inline void tViewer3D::set_glowintensity(float value) {
  
  glowintensity_ = value;
  // @@protoc_insertion_point(field_set:tViewer3D.GlowIntensity)
}

// -------------------------------------------------------------------

// SettingsType

// optional .tHighPolyModel HighPolyModel = 1;
inline bool SettingsType::has_highpolymodel() const {
  return !_is_default_instance_ && highpolymodel_ != NULL;
}
inline void SettingsType::clear_highpolymodel() {
  if (GetArenaNoVirtual() == NULL && highpolymodel_ != NULL) delete highpolymodel_;
  highpolymodel_ = NULL;
}
inline const ::tHighPolyModel& SettingsType::highpolymodel() const {
  // @@protoc_insertion_point(field_get:SettingsType.HighPolyModel)
  return highpolymodel_ != NULL ? *highpolymodel_ : *default_instance_->highpolymodel_;
}
inline ::tHighPolyModel* SettingsType::mutable_highpolymodel() {
  
  if (highpolymodel_ == NULL) {
    highpolymodel_ = new ::tHighPolyModel;
  }
  // @@protoc_insertion_point(field_mutable:SettingsType.HighPolyModel)
  return highpolymodel_;
}
inline ::tHighPolyModel* SettingsType::release_highpolymodel() {
  // @@protoc_insertion_point(field_release:SettingsType.HighPolyModel)
  
  ::tHighPolyModel* temp = highpolymodel_;
  highpolymodel_ = NULL;
  return temp;
}
inline void SettingsType::set_allocated_highpolymodel(::tHighPolyModel* highpolymodel) {
  delete highpolymodel_;
  highpolymodel_ = highpolymodel;
  if (highpolymodel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SettingsType.HighPolyModel)
}

// optional .tLowPolyModel LowPolyModel = 2;
inline bool SettingsType::has_lowpolymodel() const {
  return !_is_default_instance_ && lowpolymodel_ != NULL;
}
inline void SettingsType::clear_lowpolymodel() {
  if (GetArenaNoVirtual() == NULL && lowpolymodel_ != NULL) delete lowpolymodel_;
  lowpolymodel_ = NULL;
}
inline const ::tLowPolyModel& SettingsType::lowpolymodel() const {
  // @@protoc_insertion_point(field_get:SettingsType.LowPolyModel)
  return lowpolymodel_ != NULL ? *lowpolymodel_ : *default_instance_->lowpolymodel_;
}
inline ::tLowPolyModel* SettingsType::mutable_lowpolymodel() {
  
  if (lowpolymodel_ == NULL) {
    lowpolymodel_ = new ::tLowPolyModel;
  }
  // @@protoc_insertion_point(field_mutable:SettingsType.LowPolyModel)
  return lowpolymodel_;
}
inline ::tLowPolyModel* SettingsType::release_lowpolymodel() {
  // @@protoc_insertion_point(field_release:SettingsType.LowPolyModel)
  
  ::tLowPolyModel* temp = lowpolymodel_;
  lowpolymodel_ = NULL;
  return temp;
}
inline void SettingsType::set_allocated_lowpolymodel(::tLowPolyModel* lowpolymodel) {
  delete lowpolymodel_;
  lowpolymodel_ = lowpolymodel;
  if (lowpolymodel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SettingsType.LowPolyModel)
}

// optional .tGenerateMaps GenerateMaps = 3;
inline bool SettingsType::has_generatemaps() const {
  return !_is_default_instance_ && generatemaps_ != NULL;
}
inline void SettingsType::clear_generatemaps() {
  if (GetArenaNoVirtual() == NULL && generatemaps_ != NULL) delete generatemaps_;
  generatemaps_ = NULL;
}
inline const ::tGenerateMaps& SettingsType::generatemaps() const {
  // @@protoc_insertion_point(field_get:SettingsType.GenerateMaps)
  return generatemaps_ != NULL ? *generatemaps_ : *default_instance_->generatemaps_;
}
inline ::tGenerateMaps* SettingsType::mutable_generatemaps() {
  
  if (generatemaps_ == NULL) {
    generatemaps_ = new ::tGenerateMaps;
  }
  // @@protoc_insertion_point(field_mutable:SettingsType.GenerateMaps)
  return generatemaps_;
}
inline ::tGenerateMaps* SettingsType::release_generatemaps() {
  // @@protoc_insertion_point(field_release:SettingsType.GenerateMaps)
  
  ::tGenerateMaps* temp = generatemaps_;
  generatemaps_ = NULL;
  return temp;
}
inline void SettingsType::set_allocated_generatemaps(::tGenerateMaps* generatemaps) {
  delete generatemaps_;
  generatemaps_ = generatemaps;
  if (generatemaps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SettingsType.GenerateMaps)
}

// optional .tDetail Detail = 4;
inline bool SettingsType::has_detail() const {
  return !_is_default_instance_ && detail_ != NULL;
}
inline void SettingsType::clear_detail() {
  if (GetArenaNoVirtual() == NULL && detail_ != NULL) delete detail_;
  detail_ = NULL;
}
inline const ::tDetail& SettingsType::detail() const {
  // @@protoc_insertion_point(field_get:SettingsType.Detail)
  return detail_ != NULL ? *detail_ : *default_instance_->detail_;
}
inline ::tDetail* SettingsType::mutable_detail() {
  
  if (detail_ == NULL) {
    detail_ = new ::tDetail;
  }
  // @@protoc_insertion_point(field_mutable:SettingsType.Detail)
  return detail_;
}
inline ::tDetail* SettingsType::release_detail() {
  // @@protoc_insertion_point(field_release:SettingsType.Detail)
  
  ::tDetail* temp = detail_;
  detail_ = NULL;
  return temp;
}
inline void SettingsType::set_allocated_detail(::tDetail* detail) {
  delete detail_;
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SettingsType.Detail)
}

// optional .tViewer3D Viewer3D = 5;
inline bool SettingsType::has_viewer3d() const {
  return !_is_default_instance_ && viewer3d_ != NULL;
}
inline void SettingsType::clear_viewer3d() {
  if (GetArenaNoVirtual() == NULL && viewer3d_ != NULL) delete viewer3d_;
  viewer3d_ = NULL;
}
inline const ::tViewer3D& SettingsType::viewer3d() const {
  // @@protoc_insertion_point(field_get:SettingsType.Viewer3D)
  return viewer3d_ != NULL ? *viewer3d_ : *default_instance_->viewer3d_;
}
inline ::tViewer3D* SettingsType::mutable_viewer3d() {
  
  if (viewer3d_ == NULL) {
    viewer3d_ = new ::tViewer3D;
  }
  // @@protoc_insertion_point(field_mutable:SettingsType.Viewer3D)
  return viewer3d_;
}
inline ::tViewer3D* SettingsType::release_viewer3d() {
  // @@protoc_insertion_point(field_release:SettingsType.Viewer3D)
  
  ::tViewer3D* temp = viewer3d_;
  viewer3d_ = NULL;
  return temp;
}
inline void SettingsType::set_allocated_viewer3d(::tViewer3D* viewer3d) {
  delete viewer3d_;
  viewer3d_ = viewer3d;
  if (viewer3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SettingsType.Viewer3D)
}

// optional string Version = 6;
inline void SettingsType::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SettingsType::version() const {
  // @@protoc_insertion_point(field_get:SettingsType.Version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SettingsType::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SettingsType.Version)
}
inline void SettingsType::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SettingsType.Version)
}
inline void SettingsType::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SettingsType.Version)
}
inline ::std::string* SettingsType::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:SettingsType.Version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SettingsType::release_version() {
  // @@protoc_insertion_point(field_release:SettingsType.Version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SettingsType::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:SettingsType.Version)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tDetail_eHM2NMMethod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tDetail_eHM2NMMethod>() {
  return ::tDetail_eHM2NMMethod_descriptor();
}
template <> struct is_proto_enum< ::tHighPolyMesh_eSmoothNormals> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tHighPolyMesh_eSmoothNormals>() {
  return ::tHighPolyMesh_eSmoothNormals_descriptor();
}
template <> struct is_proto_enum< ::tLowPolyMesh_eSwizzleComponent> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tLowPolyMesh_eSwizzleComponent>() {
  return ::tLowPolyMesh_eSwizzleComponent_descriptor();
}
template <> struct is_proto_enum< ::tLowPolyMesh_eTransparencyMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tLowPolyMesh_eTransparencyMode>() {
  return ::tLowPolyMesh_eTransparencyMode_descriptor();
}
template <> struct is_proto_enum< ::tLowPolyMesh_eNormalMapType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tLowPolyMesh_eNormalMapType>() {
  return ::tLowPolyMesh_eNormalMapType_descriptor();
}
template <> struct is_proto_enum< ::tGenerateMaps_eAODistribution> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tGenerateMaps_eAODistribution>() {
  return ::tGenerateMaps_eAODistribution_descriptor();
}
template <> struct is_proto_enum< ::tGenerateMaps_eSwizzleComponent> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tGenerateMaps_eSwizzleComponent>() {
  return ::tGenerateMaps_eSwizzleComponent_descriptor();
}
template <> struct is_proto_enum< ::tGenerateMaps_eHMNormalization> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tGenerateMaps_eHMNormalization>() {
  return ::tGenerateMaps_eHMNormalization_descriptor();
}
template <> struct is_proto_enum< ::tGenerateMaps_eRNMCoordSys> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tGenerateMaps_eRNMCoordSys>() {
  return ::tGenerateMaps_eRNMCoordSys_descriptor();
}
template <> struct is_proto_enum< ::tGenerateMaps_eAntialiasing> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tGenerateMaps_eAntialiasing>() {
  return ::tGenerateMaps_eAntialiasing_descriptor();
}
template <> struct is_proto_enum< ::tGenerateMaps_eCurvAlgorithm> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tGenerateMaps_eCurvAlgorithm>() {
  return ::tGenerateMaps_eCurvAlgorithm_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_xnormal_2eproto__INCLUDED
