// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: y3d.proto

#ifndef PROTOBUF_y3d_2eproto__INCLUDED
#define PROTOBUF_y3d_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace y3d {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_y3d_2eproto();
void protobuf_AssignDesc_y3d_2eproto();
void protobuf_ShutdownFile_y3d_2eproto();

class AttrSet;
class CustomAttr;
class FilterView;
class PSetting;
class ProjectInfo;
class YArea;
class YAreaList;
class YBox3;
class YCamera;
class YColor;
class YGroup;
class YGroupVer;
class YLayer;
class YLight;
class YMesh;
class YObject;
class YPoint3;
class YResource;
class YSystem;

enum YResource_ResourceType {
  YResource_ResourceType_BINARY = 0,
  YResource_ResourceType_IMAGE = 1,
  YResource_ResourceType_FLATBUFFER = 2,
  YResource_ResourceType_PROTOBUF = 3,
  YResource_ResourceType_CAPNP = 4,
  YResource_ResourceType_YResource_ResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YResource_ResourceType_YResource_ResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YResource_ResourceType_IsValid(int value);
const YResource_ResourceType YResource_ResourceType_ResourceType_MIN = YResource_ResourceType_BINARY;
const YResource_ResourceType YResource_ResourceType_ResourceType_MAX = YResource_ResourceType_CAPNP;
const int YResource_ResourceType_ResourceType_ARRAYSIZE = YResource_ResourceType_ResourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* YResource_ResourceType_descriptor();
inline const ::std::string& YResource_ResourceType_Name(YResource_ResourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    YResource_ResourceType_descriptor(), value);
}
inline bool YResource_ResourceType_Parse(
    const ::std::string& name, YResource_ResourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YResource_ResourceType>(
    YResource_ResourceType_descriptor(), name, value);
}
enum YMesh_MeshType {
  YMesh_MeshType_Unknown = 0,
  YMesh_MeshType_Editable_Mesh = 1,
  YMesh_MeshType_Editable_Poly = 2,
  YMesh_MeshType_Box = 3,
  YMesh_MeshType_Sphere = 4,
  YMesh_MeshType_GeoSphere = 5,
  YMesh_MeshType_Cylinder = 6,
  YMesh_MeshType_Tube = 7,
  YMesh_MeshType_Torus = 8,
  YMesh_MeshType_Pyramid = 9,
  YMesh_MeshType_Teapot = 10,
  YMesh_MeshType_Plane = 11,
  YMesh_MeshType_Target = 12,
  YMesh_MeshType_Cone = 13,
  YMesh_MeshType_YMesh_MeshType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YMesh_MeshType_YMesh_MeshType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YMesh_MeshType_IsValid(int value);
const YMesh_MeshType YMesh_MeshType_MeshType_MIN = YMesh_MeshType_Unknown;
const YMesh_MeshType YMesh_MeshType_MeshType_MAX = YMesh_MeshType_Cone;
const int YMesh_MeshType_MeshType_ARRAYSIZE = YMesh_MeshType_MeshType_MAX + 1;

const ::google::protobuf::EnumDescriptor* YMesh_MeshType_descriptor();
inline const ::std::string& YMesh_MeshType_Name(YMesh_MeshType value) {
  return ::google::protobuf::internal::NameOfEnum(
    YMesh_MeshType_descriptor(), value);
}
inline bool YMesh_MeshType_Parse(
    const ::std::string& name, YMesh_MeshType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YMesh_MeshType>(
    YMesh_MeshType_descriptor(), name, value);
}
enum YMesh_XrefStatus {
  YMesh_XrefStatus_ORIGINAL = 0,
  YMesh_XrefStatus_XREF_HIGHT = 1,
  YMesh_XrefStatus_XREF_LOW = 2,
  YMesh_XrefStatus_XREF_LOW_DISPLAY = 3,
  YMesh_XrefStatus_BOX = 4,
  YMesh_XrefStatus_MERGED = 5,
  YMesh_XrefStatus_FINAL = 6,
  YMesh_XrefStatus_YMesh_XrefStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  YMesh_XrefStatus_YMesh_XrefStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool YMesh_XrefStatus_IsValid(int value);
const YMesh_XrefStatus YMesh_XrefStatus_XrefStatus_MIN = YMesh_XrefStatus_ORIGINAL;
const YMesh_XrefStatus YMesh_XrefStatus_XrefStatus_MAX = YMesh_XrefStatus_FINAL;
const int YMesh_XrefStatus_XrefStatus_ARRAYSIZE = YMesh_XrefStatus_XrefStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* YMesh_XrefStatus_descriptor();
inline const ::std::string& YMesh_XrefStatus_Name(YMesh_XrefStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    YMesh_XrefStatus_descriptor(), value);
}
inline bool YMesh_XrefStatus_Parse(
    const ::std::string& name, YMesh_XrefStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<YMesh_XrefStatus>(
    YMesh_XrefStatus_descriptor(), name, value);
}
enum CustomAttr_AType {
  CustomAttr_AType_STRING = 0,
  CustomAttr_AType_INT = 1,
  CustomAttr_AType_FLOAT = 2,
  CustomAttr_AType_BOOL = 3,
  CustomAttr_AType_POINT3 = 4,
  CustomAttr_AType_ARRAY_STRING = 5,
  CustomAttr_AType_ARRAY_INT = 6,
  CustomAttr_AType_ARRAY_FLOAT = 7,
  CustomAttr_AType_TEXT = 8,
  CustomAttr_AType_COLOR = 9,
  CustomAttr_AType_ONEOF = 10,
  CustomAttr_AType_OTHER = 11,
  CustomAttr_AType_CustomAttr_AType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CustomAttr_AType_CustomAttr_AType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CustomAttr_AType_IsValid(int value);
const CustomAttr_AType CustomAttr_AType_AType_MIN = CustomAttr_AType_STRING;
const CustomAttr_AType CustomAttr_AType_AType_MAX = CustomAttr_AType_OTHER;
const int CustomAttr_AType_AType_ARRAYSIZE = CustomAttr_AType_AType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CustomAttr_AType_descriptor();
inline const ::std::string& CustomAttr_AType_Name(CustomAttr_AType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CustomAttr_AType_descriptor(), value);
}
inline bool CustomAttr_AType_Parse(
    const ::std::string& name, CustomAttr_AType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CustomAttr_AType>(
    CustomAttr_AType_descriptor(), name, value);
}
enum ObjectType {
  GEOMETRY = 0,
  LIGHT = 1,
  CAMERA = 2,
  SHAPE = 3,
  OTHER = 4,
  ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ObjectType_IsValid(int value);
const ObjectType ObjectType_MIN = GEOMETRY;
const ObjectType ObjectType_MAX = OTHER;
const int ObjectType_ARRAYSIZE = ObjectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectType_descriptor();
inline const ::std::string& ObjectType_Name(ObjectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectType_descriptor(), value);
}
inline bool ObjectType_Parse(
    const ::std::string& name, ObjectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectType>(
    ObjectType_descriptor(), name, value);
}
enum GVerType {
  NO_VER = 0,
  ORIGINAL = 1,
  IN_BAKE = 2,
  STANDARD = 3,
  GVerType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GVerType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GVerType_IsValid(int value);
const GVerType GVerType_MIN = NO_VER;
const GVerType GVerType_MAX = STANDARD;
const int GVerType_ARRAYSIZE = GVerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GVerType_descriptor();
inline const ::std::string& GVerType_Name(GVerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GVerType_descriptor(), value);
}
inline bool GVerType_Parse(
    const ::std::string& name, GVerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GVerType>(
    GVerType_descriptor(), name, value);
}
// ===================================================================

class YColor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.YColor) */ {
 public:
  YColor();
  virtual ~YColor();

  YColor(const YColor& from);

  inline YColor& operator=(const YColor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YColor& default_instance();

  void Swap(YColor* other);

  // implements Message ----------------------------------------------

  inline YColor* New() const { return New(NULL); }

  YColor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YColor& from);
  void MergeFrom(const YColor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YColor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 argb = 2;
  void clear_argb();
  static const int kArgbFieldNumber = 2;
  ::google::protobuf::int32 argb() const;
  void set_argb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:y3d.YColor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 argb_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static YColor* default_instance_;
};
// -------------------------------------------------------------------

class YPoint3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.YPoint3) */ {
 public:
  YPoint3();
  virtual ~YPoint3();

  YPoint3(const YPoint3& from);

  inline YPoint3& operator=(const YPoint3& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YPoint3& default_instance();

  void Swap(YPoint3* other);

  // implements Message ----------------------------------------------

  inline YPoint3* New() const { return New(NULL); }

  YPoint3* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YPoint3& from);
  void MergeFrom(const YPoint3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YPoint3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:y3d.YPoint3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static YPoint3* default_instance_;
};
// -------------------------------------------------------------------

class YBox3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.YBox3) */ {
 public:
  YBox3();
  virtual ~YBox3();

  YBox3(const YBox3& from);

  inline YBox3& operator=(const YBox3& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YBox3& default_instance();

  void Swap(YBox3* other);

  // implements Message ----------------------------------------------

  inline YBox3* New() const { return New(NULL); }

  YBox3* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YBox3& from);
  void MergeFrom(const YBox3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YBox3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .y3d.YPoint3 pmin = 1;
  bool has_pmin() const;
  void clear_pmin();
  static const int kPminFieldNumber = 1;
  const ::y3d::YPoint3& pmin() const;
  ::y3d::YPoint3* mutable_pmin();
  ::y3d::YPoint3* release_pmin();
  void set_allocated_pmin(::y3d::YPoint3* pmin);

  // optional .y3d.YPoint3 pmax = 2;
  bool has_pmax() const;
  void clear_pmax();
  static const int kPmaxFieldNumber = 2;
  const ::y3d::YPoint3& pmax() const;
  ::y3d::YPoint3* mutable_pmax();
  ::y3d::YPoint3* release_pmax();
  void set_allocated_pmax(::y3d::YPoint3* pmax);

  // @@protoc_insertion_point(class_scope:y3d.YBox3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::y3d::YPoint3* pmin_;
  ::y3d::YPoint3* pmax_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static YBox3* default_instance_;
};
// -------------------------------------------------------------------

class YResource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.YResource) */ {
 public:
  YResource();
  virtual ~YResource();

  YResource(const YResource& from);

  inline YResource& operator=(const YResource& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YResource& default_instance();

  void Swap(YResource* other);

  // implements Message ----------------------------------------------

  inline YResource* New() const { return New(NULL); }

  YResource* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YResource& from);
  void MergeFrom(const YResource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YResource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef YResource_ResourceType ResourceType;
  static const ResourceType BINARY =
    YResource_ResourceType_BINARY;
  static const ResourceType IMAGE =
    YResource_ResourceType_IMAGE;
  static const ResourceType FLATBUFFER =
    YResource_ResourceType_FLATBUFFER;
  static const ResourceType PROTOBUF =
    YResource_ResourceType_PROTOBUF;
  static const ResourceType CAPNP =
    YResource_ResourceType_CAPNP;
  static inline bool ResourceType_IsValid(int value) {
    return YResource_ResourceType_IsValid(value);
  }
  static const ResourceType ResourceType_MIN =
    YResource_ResourceType_ResourceType_MIN;
  static const ResourceType ResourceType_MAX =
    YResource_ResourceType_ResourceType_MAX;
  static const int ResourceType_ARRAYSIZE =
    YResource_ResourceType_ResourceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResourceType_descriptor() {
    return YResource_ResourceType_descriptor();
  }
  static inline const ::std::string& ResourceType_Name(ResourceType value) {
    return YResource_ResourceType_Name(value);
  }
  static inline bool ResourceType_Parse(const ::std::string& name,
      ResourceType* value) {
    return YResource_ResourceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string rid = 1;
  void clear_rid();
  static const int kRidFieldNumber = 1;
  const ::std::string& rid() const;
  void set_rid(const ::std::string& value);
  void set_rid(const char* value);
  void set_rid(const char* value, size_t size);
  ::std::string* mutable_rid();
  ::std::string* release_rid();
  void set_allocated_rid(::std::string* rid);

  // optional .y3d.YResource.ResourceType rtype = 2;
  void clear_rtype();
  static const int kRtypeFieldNumber = 2;
  ::y3d::YResource_ResourceType rtype() const;
  void set_rtype(::y3d::YResource_ResourceType value);

  // optional string link = 3;
  void clear_link();
  static const int kLinkFieldNumber = 3;
  const ::std::string& link() const;
  void set_link(const ::std::string& value);
  void set_link(const char* value);
  void set_link(const char* value, size_t size);
  ::std::string* mutable_link();
  ::std::string* release_link();
  void set_allocated_link(::std::string* link);

  // @@protoc_insertion_point(class_scope:y3d.YResource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr rid_;
  ::google::protobuf::internal::ArenaStringPtr link_;
  int rtype_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static YResource* default_instance_;
};
// -------------------------------------------------------------------

class YLight : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.YLight) */ {
 public:
  YLight();
  virtual ~YLight();

  YLight(const YLight& from);

  inline YLight& operator=(const YLight& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YLight& default_instance();

  void Swap(YLight* other);

  // implements Message ----------------------------------------------

  inline YLight* New() const { return New(NULL); }

  YLight* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YLight& from);
  void MergeFrom(const YLight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YLight* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float diffuse = 3;
  int diffuse_size() const;
  void clear_diffuse();
  static const int kDiffuseFieldNumber = 3;
  float diffuse(int index) const;
  void set_diffuse(int index, float value);
  void add_diffuse(float value);
  const ::google::protobuf::RepeatedField< float >&
      diffuse() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_diffuse();

  // repeated float specular = 4;
  int specular_size() const;
  void clear_specular();
  static const int kSpecularFieldNumber = 4;
  float specular(int index) const;
  void set_specular(int index, float value);
  void add_specular(float value);
  const ::google::protobuf::RepeatedField< float >&
      specular() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_specular();

  // optional float intensity = 5;
  void clear_intensity();
  static const int kIntensityFieldNumber = 5;
  float intensity() const;
  void set_intensity(float value);

  // optional float range = 6;
  void clear_range();
  static const int kRangeFieldNumber = 6;
  float range() const;
  void set_range(float value);

  // optional float angle = 7;
  void clear_angle();
  static const int kAngleFieldNumber = 7;
  float angle() const;
  void set_angle(float value);

  // optional float exponent = 8;
  void clear_exponent();
  static const int kExponentFieldNumber = 8;
  float exponent() const;
  void set_exponent(float value);

  // repeated string excludedMeshesIds = 9;
  int excludedmeshesids_size() const;
  void clear_excludedmeshesids();
  static const int kExcludedMeshesIdsFieldNumber = 9;
  const ::std::string& excludedmeshesids(int index) const;
  ::std::string* mutable_excludedmeshesids(int index);
  void set_excludedmeshesids(int index, const ::std::string& value);
  void set_excludedmeshesids(int index, const char* value);
  void set_excludedmeshesids(int index, const char* value, size_t size);
  ::std::string* add_excludedmeshesids();
  void add_excludedmeshesids(const ::std::string& value);
  void add_excludedmeshesids(const char* value);
  void add_excludedmeshesids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& excludedmeshesids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_excludedmeshesids();

  // repeated string includedOnlyMeshesIds = 10;
  int includedonlymeshesids_size() const;
  void clear_includedonlymeshesids();
  static const int kIncludedOnlyMeshesIdsFieldNumber = 10;
  const ::std::string& includedonlymeshesids(int index) const;
  ::std::string* mutable_includedonlymeshesids(int index);
  void set_includedonlymeshesids(int index, const ::std::string& value);
  void set_includedonlymeshesids(int index, const char* value);
  void set_includedonlymeshesids(int index, const char* value, size_t size);
  ::std::string* add_includedonlymeshesids();
  void add_includedonlymeshesids(const ::std::string& value);
  void add_includedonlymeshesids(const char* value);
  void add_includedonlymeshesids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& includedonlymeshesids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_includedonlymeshesids();

  // @@protoc_insertion_point(class_scope:y3d.YLight)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< float > diffuse_;
  mutable int _diffuse_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > specular_;
  mutable int _specular_cached_byte_size_;
  float intensity_;
  float range_;
  float angle_;
  float exponent_;
  ::google::protobuf::RepeatedPtrField< ::std::string> excludedmeshesids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> includedonlymeshesids_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static YLight* default_instance_;
};
// -------------------------------------------------------------------

class YCamera : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.YCamera) */ {
 public:
  YCamera();
  virtual ~YCamera();

  YCamera(const YCamera& from);

  inline YCamera& operator=(const YCamera& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YCamera& default_instance();

  void Swap(YCamera* other);

  // implements Message ----------------------------------------------

  inline YCamera* New() const { return New(NULL); }

  YCamera* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YCamera& from);
  void MergeFrom(const YCamera& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YCamera* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float rotation = 3;
  int rotation_size() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 3;
  float rotation(int index) const;
  void set_rotation(int index, float value);
  void add_rotation(float value);
  const ::google::protobuf::RepeatedField< float >&
      rotation() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_rotation();

  // repeated float target = 4;
  int target_size() const;
  void clear_target();
  static const int kTargetFieldNumber = 4;
  float target(int index) const;
  void set_target(int index, float value);
  void add_target(float value);
  const ::google::protobuf::RepeatedField< float >&
      target() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_target();

  // optional float fov = 5;
  void clear_fov();
  static const int kFovFieldNumber = 5;
  float fov() const;
  void set_fov(float value);

  // @@protoc_insertion_point(class_scope:y3d.YCamera)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< float > rotation_;
  mutable int _rotation_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > target_;
  mutable int _target_cached_byte_size_;
  float fov_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static YCamera* default_instance_;
};
// -------------------------------------------------------------------

class YMesh : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.YMesh) */ {
 public:
  YMesh();
  virtual ~YMesh();

  YMesh(const YMesh& from);

  inline YMesh& operator=(const YMesh& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YMesh& default_instance();

  void Swap(YMesh* other);

  // implements Message ----------------------------------------------

  inline YMesh* New() const { return New(NULL); }

  YMesh* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YMesh& from);
  void MergeFrom(const YMesh& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YMesh* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef YMesh_MeshType MeshType;
  static const MeshType Unknown =
    YMesh_MeshType_Unknown;
  static const MeshType Editable_Mesh =
    YMesh_MeshType_Editable_Mesh;
  static const MeshType Editable_Poly =
    YMesh_MeshType_Editable_Poly;
  static const MeshType Box =
    YMesh_MeshType_Box;
  static const MeshType Sphere =
    YMesh_MeshType_Sphere;
  static const MeshType GeoSphere =
    YMesh_MeshType_GeoSphere;
  static const MeshType Cylinder =
    YMesh_MeshType_Cylinder;
  static const MeshType Tube =
    YMesh_MeshType_Tube;
  static const MeshType Torus =
    YMesh_MeshType_Torus;
  static const MeshType Pyramid =
    YMesh_MeshType_Pyramid;
  static const MeshType Teapot =
    YMesh_MeshType_Teapot;
  static const MeshType Plane =
    YMesh_MeshType_Plane;
  static const MeshType Target =
    YMesh_MeshType_Target;
  static const MeshType Cone =
    YMesh_MeshType_Cone;
  static inline bool MeshType_IsValid(int value) {
    return YMesh_MeshType_IsValid(value);
  }
  static const MeshType MeshType_MIN =
    YMesh_MeshType_MeshType_MIN;
  static const MeshType MeshType_MAX =
    YMesh_MeshType_MeshType_MAX;
  static const int MeshType_ARRAYSIZE =
    YMesh_MeshType_MeshType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MeshType_descriptor() {
    return YMesh_MeshType_descriptor();
  }
  static inline const ::std::string& MeshType_Name(MeshType value) {
    return YMesh_MeshType_Name(value);
  }
  static inline bool MeshType_Parse(const ::std::string& name,
      MeshType* value) {
    return YMesh_MeshType_Parse(name, value);
  }

  typedef YMesh_XrefStatus XrefStatus;
  static const XrefStatus ORIGINAL =
    YMesh_XrefStatus_ORIGINAL;
  static const XrefStatus XREF_HIGHT =
    YMesh_XrefStatus_XREF_HIGHT;
  static const XrefStatus XREF_LOW =
    YMesh_XrefStatus_XREF_LOW;
  static const XrefStatus XREF_LOW_DISPLAY =
    YMesh_XrefStatus_XREF_LOW_DISPLAY;
  static const XrefStatus BOX =
    YMesh_XrefStatus_BOX;
  static const XrefStatus MERGED =
    YMesh_XrefStatus_MERGED;
  static const XrefStatus FINAL =
    YMesh_XrefStatus_FINAL;
  static inline bool XrefStatus_IsValid(int value) {
    return YMesh_XrefStatus_IsValid(value);
  }
  static const XrefStatus XrefStatus_MIN =
    YMesh_XrefStatus_XrefStatus_MIN;
  static const XrefStatus XrefStatus_MAX =
    YMesh_XrefStatus_XrefStatus_MAX;
  static const int XrefStatus_ARRAYSIZE =
    YMesh_XrefStatus_XrefStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  XrefStatus_descriptor() {
    return YMesh_XrefStatus_descriptor();
  }
  static inline const ::std::string& XrefStatus_Name(XrefStatus value) {
    return YMesh_XrefStatus_Name(value);
  }
  static inline bool XrefStatus_Parse(const ::std::string& name,
      XrefStatus* value) {
    return YMesh_XrefStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 num_faces = 1;
  void clear_num_faces();
  static const int kNumFacesFieldNumber = 1;
  ::google::protobuf::int32 num_faces() const;
  void set_num_faces(::google::protobuf::int32 value);

  // optional .y3d.YBox3 bbox = 2;
  bool has_bbox() const;
  void clear_bbox();
  static const int kBboxFieldNumber = 2;
  const ::y3d::YBox3& bbox() const;
  ::y3d::YBox3* mutable_bbox();
  ::y3d::YBox3* release_bbox();
  void set_allocated_bbox(::y3d::YBox3* bbox);

  // optional string res_id = 3;
  void clear_res_id();
  static const int kResIdFieldNumber = 3;
  const ::std::string& res_id() const;
  void set_res_id(const ::std::string& value);
  void set_res_id(const char* value);
  void set_res_id(const char* value, size_t size);
  ::std::string* mutable_res_id();
  ::std::string* release_res_id();
  void set_allocated_res_id(::std::string* res_id);

  // repeated int32 xref = 4;
  int xref_size() const;
  void clear_xref();
  static const int kXrefFieldNumber = 4;
  ::google::protobuf::int32 xref(int index) const;
  void set_xref(int index, ::google::protobuf::int32 value);
  void add_xref(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      xref() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_xref();

  // optional .y3d.YMesh.XrefStatus xstatus = 5;
  void clear_xstatus();
  static const int kXstatusFieldNumber = 5;
  ::y3d::YMesh_XrefStatus xstatus() const;
  void set_xstatus(::y3d::YMesh_XrefStatus value);

  // optional .y3d.YMesh.MeshType mtype = 6;
  void clear_mtype();
  static const int kMtypeFieldNumber = 6;
  ::y3d::YMesh_MeshType mtype() const;
  void set_mtype(::y3d::YMesh_MeshType value);

  // @@protoc_insertion_point(class_scope:y3d.YMesh)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::y3d::YBox3* bbox_;
  ::google::protobuf::internal::ArenaStringPtr res_id_;
  ::google::protobuf::int32 num_faces_;
  int xstatus_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > xref_;
  mutable int _xref_cached_byte_size_;
  int mtype_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static YMesh* default_instance_;
};
// -------------------------------------------------------------------

class YObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.YObject) */ {
 public:
  YObject();
  virtual ~YObject();

  YObject(const YObject& from);

  inline YObject& operator=(const YObject& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YObject& default_instance();

  enum DataCase {
    kLight = 10,
    kCamera = 11,
    kMesh = 12,
    DATA_NOT_SET = 0,
  };

  void Swap(YObject* other);

  // implements Message ----------------------------------------------

  inline YObject* New() const { return New(NULL); }

  YObject* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YObject& from);
  void MergeFrom(const YObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .y3d.YPoint3 pos = 3;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 3;
  const ::y3d::YPoint3& pos() const;
  ::y3d::YPoint3* mutable_pos();
  ::y3d::YPoint3* release_pos();
  void set_allocated_pos(::y3d::YPoint3* pos);

  // map<string, .google.protobuf.Any> extra = 5;
  int extra_size() const;
  void clear_extra();
  static const int kExtraFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >&
      extra() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >*
      mutable_extra();

  // optional .y3d.ObjectType otype = 6;
  void clear_otype();
  static const int kOtypeFieldNumber = 6;
  ::y3d::ObjectType otype() const;
  void set_otype(::y3d::ObjectType value);

  // repeated string tags = 7;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 7;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // optional int32 cate_id = 8;
  void clear_cate_id();
  static const int kCateIdFieldNumber = 8;
  ::google::protobuf::int32 cate_id() const;
  void set_cate_id(::google::protobuf::int32 value);

  // optional .y3d.YLight light = 10;
  bool has_light() const;
  void clear_light();
  static const int kLightFieldNumber = 10;
  const ::y3d::YLight& light() const;
  ::y3d::YLight* mutable_light();
  ::y3d::YLight* release_light();
  void set_allocated_light(::y3d::YLight* light);

  // optional .y3d.YCamera camera = 11;
  bool has_camera() const;
  void clear_camera();
  static const int kCameraFieldNumber = 11;
  const ::y3d::YCamera& camera() const;
  ::y3d::YCamera* mutable_camera();
  ::y3d::YCamera* release_camera();
  void set_allocated_camera(::y3d::YCamera* camera);

  // optional .y3d.YMesh mesh = 12;
  bool has_mesh() const;
  void clear_mesh();
  static const int kMeshFieldNumber = 12;
  const ::y3d::YMesh& mesh() const;
  ::y3d::YMesh* mutable_mesh();
  ::y3d::YMesh* release_mesh();
  void set_allocated_mesh(::y3d::YMesh* mesh);

  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:y3d.YObject)
 private:
  inline void set_has_light();
  inline void set_has_camera();
  inline void set_has_mesh();

  inline bool has_data() const;
  void clear_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::y3d::YPoint3* pos_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::google::protobuf::Any,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      YObject_ExtraEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::google::protobuf::Any,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extra_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  int otype_;
  ::google::protobuf::int32 cate_id_;
  union DataUnion {
    DataUnion() {}
    ::y3d::YLight* light_;
    ::y3d::YCamera* camera_;
    ::y3d::YMesh* mesh_;
  } data_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static YObject* default_instance_;
};
// -------------------------------------------------------------------

class YArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.YArea) */ {
 public:
  YArea();
  virtual ~YArea();

  YArea(const YArea& from);

  inline YArea& operator=(const YArea& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YArea& default_instance();

  void Swap(YArea* other);

  // implements Message ----------------------------------------------

  inline YArea* New() const { return New(NULL); }

  YArea* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YArea& from);
  void MergeFrom(const YArea& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .y3d.YGroup groups = 2;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 2;
  const ::y3d::YGroup& groups(int index) const;
  ::y3d::YGroup* mutable_groups(int index);
  ::y3d::YGroup* add_groups();
  ::google::protobuf::RepeatedPtrField< ::y3d::YGroup >*
      mutable_groups();
  const ::google::protobuf::RepeatedPtrField< ::y3d::YGroup >&
      groups() const;

  // repeated .y3d.YObject objs = 3;
  int objs_size() const;
  void clear_objs();
  static const int kObjsFieldNumber = 3;
  const ::y3d::YObject& objs(int index) const;
  ::y3d::YObject* mutable_objs(int index);
  ::y3d::YObject* add_objs();
  ::google::protobuf::RepeatedPtrField< ::y3d::YObject >*
      mutable_objs();
  const ::google::protobuf::RepeatedPtrField< ::y3d::YObject >&
      objs() const;

  // map<string, .y3d.YGroupVer> gvers = 6;
  int gvers_size() const;
  void clear_gvers();
  static const int kGversFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::y3d::YGroupVer >&
      gvers() const;
  ::google::protobuf::Map< ::std::string, ::y3d::YGroupVer >*
      mutable_gvers();

  // @@protoc_insertion_point(class_scope:y3d.YArea)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::y3d::YGroup > groups_;
  ::google::protobuf::RepeatedPtrField< ::y3d::YObject > objs_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::y3d::YGroupVer,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      YArea_GversEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::y3d::YGroupVer,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > gvers_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static YArea* default_instance_;
};
// -------------------------------------------------------------------

class YLayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.YLayer) */ {
 public:
  YLayer();
  virtual ~YLayer();

  YLayer(const YLayer& from);

  inline YLayer& operator=(const YLayer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YLayer& default_instance();

  void Swap(YLayer* other);

  // implements Message ----------------------------------------------

  inline YLayer* New() const { return New(NULL); }

  YLayer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YLayer& from);
  void MergeFrom(const YLayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YLayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .y3d.YGroup groups = 2;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 2;
  const ::y3d::YGroup& groups(int index) const;
  ::y3d::YGroup* mutable_groups(int index);
  ::y3d::YGroup* add_groups();
  ::google::protobuf::RepeatedPtrField< ::y3d::YGroup >*
      mutable_groups();
  const ::google::protobuf::RepeatedPtrField< ::y3d::YGroup >&
      groups() const;

  // @@protoc_insertion_point(class_scope:y3d.YLayer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::y3d::YGroup > groups_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static YLayer* default_instance_;
};
// -------------------------------------------------------------------

class YGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.YGroup) */ {
 public:
  YGroup();
  virtual ~YGroup();

  YGroup(const YGroup& from);

  inline YGroup& operator=(const YGroup& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YGroup& default_instance();

  void Swap(YGroup* other);

  // implements Message ----------------------------------------------

  inline YGroup* New() const { return New(NULL); }

  YGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YGroup& from);
  void MergeFrom(const YGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .y3d.YObject objs = 2;
  int objs_size() const;
  void clear_objs();
  static const int kObjsFieldNumber = 2;
  const ::y3d::YObject& objs(int index) const;
  ::y3d::YObject* mutable_objs(int index);
  ::y3d::YObject* add_objs();
  ::google::protobuf::RepeatedPtrField< ::y3d::YObject >*
      mutable_objs();
  const ::google::protobuf::RepeatedPtrField< ::y3d::YObject >&
      objs() const;

  // repeated .y3d.YGroup children = 3;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 3;
  const ::y3d::YGroup& children(int index) const;
  ::y3d::YGroup* mutable_children(int index);
  ::y3d::YGroup* add_children();
  ::google::protobuf::RepeatedPtrField< ::y3d::YGroup >*
      mutable_children();
  const ::google::protobuf::RepeatedPtrField< ::y3d::YGroup >&
      children() const;

  // optional .y3d.GVerType gv_type = 4;
  void clear_gv_type();
  static const int kGvTypeFieldNumber = 4;
  ::y3d::GVerType gv_type() const;
  void set_gv_type(::y3d::GVerType value);

  // repeated string xref = 5;
  int xref_size() const;
  void clear_xref();
  static const int kXrefFieldNumber = 5;
  const ::std::string& xref(int index) const;
  ::std::string* mutable_xref(int index);
  void set_xref(int index, const ::std::string& value);
  void set_xref(int index, const char* value);
  void set_xref(int index, const char* value, size_t size);
  ::std::string* add_xref();
  void add_xref(const ::std::string& value);
  void add_xref(const char* value);
  void add_xref(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& xref() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_xref();

  // @@protoc_insertion_point(class_scope:y3d.YGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::y3d::YObject > objs_;
  ::google::protobuf::RepeatedPtrField< ::y3d::YGroup > children_;
  ::google::protobuf::RepeatedPtrField< ::std::string> xref_;
  int gv_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static YGroup* default_instance_;
};
// -------------------------------------------------------------------

class YGroupVer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.YGroupVer) */ {
 public:
  YGroupVer();
  virtual ~YGroupVer();

  YGroupVer(const YGroupVer& from);

  inline YGroupVer& operator=(const YGroupVer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YGroupVer& default_instance();

  void Swap(YGroupVer* other);

  // implements Message ----------------------------------------------

  inline YGroupVer* New() const { return New(NULL); }

  YGroupVer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YGroupVer& from);
  void MergeFrom(const YGroupVer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YGroupVer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string vname = 1;
  void clear_vname();
  static const int kVnameFieldNumber = 1;
  const ::std::string& vname() const;
  void set_vname(const ::std::string& value);
  void set_vname(const char* value);
  void set_vname(const char* value, size_t size);
  ::std::string* mutable_vname();
  ::std::string* release_vname();
  void set_allocated_vname(::std::string* vname);

  // optional .y3d.YGroup groupData = 2;
  bool has_groupdata() const;
  void clear_groupdata();
  static const int kGroupDataFieldNumber = 2;
  const ::y3d::YGroup& groupdata() const;
  ::y3d::YGroup* mutable_groupdata();
  ::y3d::YGroup* release_groupdata();
  void set_allocated_groupdata(::y3d::YGroup* groupdata);

  // optional int32 step = 3;
  void clear_step();
  static const int kStepFieldNumber = 3;
  ::google::protobuf::int32 step() const;
  void set_step(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:y3d.YGroupVer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr vname_;
  ::y3d::YGroup* groupdata_;
  ::google::protobuf::int32 step_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static YGroupVer* default_instance_;
};
// -------------------------------------------------------------------

class CustomAttr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.CustomAttr) */ {
 public:
  CustomAttr();
  virtual ~CustomAttr();

  CustomAttr(const CustomAttr& from);

  inline CustomAttr& operator=(const CustomAttr& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomAttr& default_instance();

  void Swap(CustomAttr* other);

  // implements Message ----------------------------------------------

  inline CustomAttr* New() const { return New(NULL); }

  CustomAttr* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CustomAttr& from);
  void MergeFrom(const CustomAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CustomAttr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CustomAttr_AType AType;
  static const AType STRING =
    CustomAttr_AType_STRING;
  static const AType INT =
    CustomAttr_AType_INT;
  static const AType FLOAT =
    CustomAttr_AType_FLOAT;
  static const AType BOOL =
    CustomAttr_AType_BOOL;
  static const AType POINT3 =
    CustomAttr_AType_POINT3;
  static const AType ARRAY_STRING =
    CustomAttr_AType_ARRAY_STRING;
  static const AType ARRAY_INT =
    CustomAttr_AType_ARRAY_INT;
  static const AType ARRAY_FLOAT =
    CustomAttr_AType_ARRAY_FLOAT;
  static const AType TEXT =
    CustomAttr_AType_TEXT;
  static const AType COLOR =
    CustomAttr_AType_COLOR;
  static const AType ONEOF =
    CustomAttr_AType_ONEOF;
  static const AType OTHER =
    CustomAttr_AType_OTHER;
  static inline bool AType_IsValid(int value) {
    return CustomAttr_AType_IsValid(value);
  }
  static const AType AType_MIN =
    CustomAttr_AType_AType_MIN;
  static const AType AType_MAX =
    CustomAttr_AType_AType_MAX;
  static const int AType_ARRAYSIZE =
    CustomAttr_AType_AType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AType_descriptor() {
    return CustomAttr_AType_descriptor();
  }
  static inline const ::std::string& AType_Name(AType value) {
    return CustomAttr_AType_Name(value);
  }
  static inline bool AType_Parse(const ::std::string& name,
      AType* value) {
    return CustomAttr_AType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .google.protobuf.Any value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::google::protobuf::Any& value() const;
  ::google::protobuf::Any* mutable_value();
  ::google::protobuf::Any* release_value();
  void set_allocated_value(::google::protobuf::Any* value);

  // optional .y3d.CustomAttr.AType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::y3d::CustomAttr_AType type() const;
  void set_type(::y3d::CustomAttr_AType value);

  // @@protoc_insertion_point(class_scope:y3d.CustomAttr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Any* value_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static CustomAttr* default_instance_;
};
// -------------------------------------------------------------------

class AttrSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.AttrSet) */ {
 public:
  AttrSet();
  virtual ~AttrSet();

  AttrSet(const AttrSet& from);

  inline AttrSet& operator=(const AttrSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttrSet& default_instance();

  void Swap(AttrSet* other);

  // implements Message ----------------------------------------------

  inline AttrSet* New() const { return New(NULL); }

  AttrSet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttrSet& from);
  void MergeFrom(const AttrSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AttrSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sname = 1;
  void clear_sname();
  static const int kSnameFieldNumber = 1;
  const ::std::string& sname() const;
  void set_sname(const ::std::string& value);
  void set_sname(const char* value);
  void set_sname(const char* value, size_t size);
  ::std::string* mutable_sname();
  ::std::string* release_sname();
  void set_allocated_sname(::std::string* sname);

  // repeated .y3d.CustomAttr attrs = 2;
  int attrs_size() const;
  void clear_attrs();
  static const int kAttrsFieldNumber = 2;
  const ::y3d::CustomAttr& attrs(int index) const;
  ::y3d::CustomAttr* mutable_attrs(int index);
  ::y3d::CustomAttr* add_attrs();
  ::google::protobuf::RepeatedPtrField< ::y3d::CustomAttr >*
      mutable_attrs();
  const ::google::protobuf::RepeatedPtrField< ::y3d::CustomAttr >&
      attrs() const;

  // @@protoc_insertion_point(class_scope:y3d.AttrSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr sname_;
  ::google::protobuf::RepeatedPtrField< ::y3d::CustomAttr > attrs_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static AttrSet* default_instance_;
};
// -------------------------------------------------------------------

class FilterView : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.FilterView) */ {
 public:
  FilterView();
  virtual ~FilterView();

  FilterView(const FilterView& from);

  inline FilterView& operator=(const FilterView& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FilterView& default_instance();

  void Swap(FilterView* other);

  // implements Message ----------------------------------------------

  inline FilterView* New() const { return New(NULL); }

  FilterView* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FilterView& from);
  void MergeFrom(const FilterView& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FilterView* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .y3d.ObjectType otype = 1;
  void clear_otype();
  static const int kOtypeFieldNumber = 1;
  ::y3d::ObjectType otype() const;
  void set_otype(::y3d::ObjectType value);

  // optional int32 face_range = 2;
  void clear_face_range();
  static const int kFaceRangeFieldNumber = 2;
  ::google::protobuf::int32 face_range() const;
  void set_face_range(::google::protobuf::int32 value);

  // optional string search = 3;
  void clear_search();
  static const int kSearchFieldNumber = 3;
  const ::std::string& search() const;
  void set_search(const ::std::string& value);
  void set_search(const char* value);
  void set_search(const char* value, size_t size);
  ::std::string* mutable_search();
  ::std::string* release_search();
  void set_allocated_search(::std::string* search);

  // optional int32 aid = 4;
  void clear_aid();
  static const int kAidFieldNumber = 4;
  ::google::protobuf::int32 aid() const;
  void set_aid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:y3d.FilterView)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int otype_;
  ::google::protobuf::int32 face_range_;
  ::google::protobuf::internal::ArenaStringPtr search_;
  ::google::protobuf::int32 aid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static FilterView* default_instance_;
};
// -------------------------------------------------------------------

class ProjectInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.ProjectInfo) */ {
 public:
  ProjectInfo();
  virtual ~ProjectInfo();

  ProjectInfo(const ProjectInfo& from);

  inline ProjectInfo& operator=(const ProjectInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjectInfo& default_instance();

  void Swap(ProjectInfo* other);

  // implements Message ----------------------------------------------

  inline ProjectInfo* New() const { return New(NULL); }

  ProjectInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProjectInfo& from);
  void MergeFrom(const ProjectInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProjectInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pname = 1;
  void clear_pname();
  static const int kPnameFieldNumber = 1;
  const ::std::string& pname() const;
  void set_pname(const ::std::string& value);
  void set_pname(const char* value);
  void set_pname(const char* value, size_t size);
  ::std::string* mutable_pname();
  ::std::string* release_pname();
  void set_allocated_pname(::std::string* pname);

  // optional string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // repeated int32 face_range = 3;
  int face_range_size() const;
  void clear_face_range();
  static const int kFaceRangeFieldNumber = 3;
  ::google::protobuf::int32 face_range(int index) const;
  void set_face_range(int index, ::google::protobuf::int32 value);
  void add_face_range(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      face_range() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_face_range();

  // repeated .y3d.YColor count_color = 4;
  int count_color_size() const;
  void clear_count_color();
  static const int kCountColorFieldNumber = 4;
  const ::y3d::YColor& count_color(int index) const;
  ::y3d::YColor* mutable_count_color(int index);
  ::y3d::YColor* add_count_color();
  ::google::protobuf::RepeatedPtrField< ::y3d::YColor >*
      mutable_count_color();
  const ::google::protobuf::RepeatedPtrField< ::y3d::YColor >&
      count_color() const;

  // repeated .y3d.FilterView fview = 5;
  int fview_size() const;
  void clear_fview();
  static const int kFviewFieldNumber = 5;
  const ::y3d::FilterView& fview(int index) const;
  ::y3d::FilterView* mutable_fview(int index);
  ::y3d::FilterView* add_fview();
  ::google::protobuf::RepeatedPtrField< ::y3d::FilterView >*
      mutable_fview();
  const ::google::protobuf::RepeatedPtrField< ::y3d::FilterView >&
      fview() const;

  // @@protoc_insertion_point(class_scope:y3d.ProjectInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr pname_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > face_range_;
  mutable int _face_range_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::y3d::YColor > count_color_;
  ::google::protobuf::RepeatedPtrField< ::y3d::FilterView > fview_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static ProjectInfo* default_instance_;
};
// -------------------------------------------------------------------

class YAreaList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.YAreaList) */ {
 public:
  YAreaList();
  virtual ~YAreaList();

  YAreaList(const YAreaList& from);

  inline YAreaList& operator=(const YAreaList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YAreaList& default_instance();

  void Swap(YAreaList* other);

  // implements Message ----------------------------------------------

  inline YAreaList* New() const { return New(NULL); }

  YAreaList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YAreaList& from);
  void MergeFrom(const YAreaList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YAreaList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .y3d.YArea areas = 1;
  int areas_size() const;
  void clear_areas();
  static const int kAreasFieldNumber = 1;
  const ::y3d::YArea& areas(int index) const;
  ::y3d::YArea* mutable_areas(int index);
  ::y3d::YArea* add_areas();
  ::google::protobuf::RepeatedPtrField< ::y3d::YArea >*
      mutable_areas();
  const ::google::protobuf::RepeatedPtrField< ::y3d::YArea >&
      areas() const;

  // @@protoc_insertion_point(class_scope:y3d.YAreaList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::y3d::YArea > areas_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static YAreaList* default_instance_;
};
// -------------------------------------------------------------------

class PSetting : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.PSetting) */ {
 public:
  PSetting();
  virtual ~PSetting();

  PSetting(const PSetting& from);

  inline PSetting& operator=(const PSetting& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PSetting& default_instance();

  void Swap(PSetting* other);

  // implements Message ----------------------------------------------

  inline PSetting* New() const { return New(NULL); }

  PSetting* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PSetting& from);
  void MergeFrom(const PSetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PSetting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .y3d.CustomAttr extra = 2;
  int extra_size() const;
  void clear_extra();
  static const int kExtraFieldNumber = 2;
  const ::y3d::CustomAttr& extra(int index) const;
  ::y3d::CustomAttr* mutable_extra(int index);
  ::y3d::CustomAttr* add_extra();
  ::google::protobuf::RepeatedPtrField< ::y3d::CustomAttr >*
      mutable_extra();
  const ::google::protobuf::RepeatedPtrField< ::y3d::CustomAttr >&
      extra() const;

  // optional int32 max_recent = 3;
  void clear_max_recent();
  static const int kMaxRecentFieldNumber = 3;
  ::google::protobuf::int32 max_recent() const;
  void set_max_recent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:y3d.PSetting)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::y3d::CustomAttr > extra_;
  ::google::protobuf::int32 max_recent_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static PSetting* default_instance_;
};
// -------------------------------------------------------------------

class YSystem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:y3d.YSystem) */ {
 public:
  YSystem();
  virtual ~YSystem();

  YSystem(const YSystem& from);

  inline YSystem& operator=(const YSystem& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YSystem& default_instance();

  void Swap(YSystem* other);

  // implements Message ----------------------------------------------

  inline YSystem* New() const { return New(NULL); }

  YSystem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YSystem& from);
  void MergeFrom(const YSystem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(YSystem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional .y3d.ProjectInfo default_info = 1;
  bool has_default_info() const;
  void clear_default_info();
  static const int kDefaultInfoFieldNumber = 1;
  const ::y3d::ProjectInfo& default_info() const;
  ::y3d::ProjectInfo* mutable_default_info();
  ::y3d::ProjectInfo* release_default_info();
  void set_allocated_default_info(::y3d::ProjectInfo* default_info);

  // optional .y3d.PSetting default_setting = 2;
  bool has_default_setting() const;
  void clear_default_setting();
  static const int kDefaultSettingFieldNumber = 2;
  const ::y3d::PSetting& default_setting() const;
  ::y3d::PSetting* mutable_default_setting();
  ::y3d::PSetting* release_default_setting();
  void set_allocated_default_setting(::y3d::PSetting* default_setting);

  // map<string, string> name_path = 3;
  int name_path_size() const;
  void clear_name_path();
  static const int kNamePathFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      name_path() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_name_path();

  // @@protoc_insertion_point(class_scope:y3d.YSystem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::y3d::ProjectInfo* default_info_;
  ::y3d::PSetting* default_setting_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 >
      YSystem_NamePathEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > name_path_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_y3d_2eproto();
  friend void protobuf_AssignDesc_y3d_2eproto();
  friend void protobuf_ShutdownFile_y3d_2eproto();

  void InitAsDefaultInstance();
  static YSystem* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// YColor

// optional string name = 1;
inline void YColor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& YColor::name() const {
  // @@protoc_insertion_point(field_get:y3d.YColor.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YColor::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YColor.name)
}
inline void YColor::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YColor.name)
}
inline void YColor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YColor.name)
}
inline ::std::string* YColor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YColor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YColor::release_name() {
  // @@protoc_insertion_point(field_release:y3d.YColor.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YColor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:y3d.YColor.name)
}

// optional int32 argb = 2;
inline void YColor::clear_argb() {
  argb_ = 0;
}
inline ::google::protobuf::int32 YColor::argb() const {
  // @@protoc_insertion_point(field_get:y3d.YColor.argb)
  return argb_;
}
inline void YColor::set_argb(::google::protobuf::int32 value) {
  
  argb_ = value;
  // @@protoc_insertion_point(field_set:y3d.YColor.argb)
}

// -------------------------------------------------------------------

// YPoint3

// optional float x = 1;
inline void YPoint3::clear_x() {
  x_ = 0;
}
inline float YPoint3::x() const {
  // @@protoc_insertion_point(field_get:y3d.YPoint3.x)
  return x_;
}
inline void YPoint3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:y3d.YPoint3.x)
}

// optional float y = 2;
inline void YPoint3::clear_y() {
  y_ = 0;
}
inline float YPoint3::y() const {
  // @@protoc_insertion_point(field_get:y3d.YPoint3.y)
  return y_;
}
inline void YPoint3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:y3d.YPoint3.y)
}

// optional float z = 3;
inline void YPoint3::clear_z() {
  z_ = 0;
}
inline float YPoint3::z() const {
  // @@protoc_insertion_point(field_get:y3d.YPoint3.z)
  return z_;
}
inline void YPoint3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:y3d.YPoint3.z)
}

// -------------------------------------------------------------------

// YBox3

// optional .y3d.YPoint3 pmin = 1;
inline bool YBox3::has_pmin() const {
  return !_is_default_instance_ && pmin_ != NULL;
}
inline void YBox3::clear_pmin() {
  if (GetArenaNoVirtual() == NULL && pmin_ != NULL) delete pmin_;
  pmin_ = NULL;
}
inline const ::y3d::YPoint3& YBox3::pmin() const {
  // @@protoc_insertion_point(field_get:y3d.YBox3.pmin)
  return pmin_ != NULL ? *pmin_ : *default_instance_->pmin_;
}
inline ::y3d::YPoint3* YBox3::mutable_pmin() {
  
  if (pmin_ == NULL) {
    pmin_ = new ::y3d::YPoint3;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YBox3.pmin)
  return pmin_;
}
inline ::y3d::YPoint3* YBox3::release_pmin() {
  // @@protoc_insertion_point(field_release:y3d.YBox3.pmin)
  
  ::y3d::YPoint3* temp = pmin_;
  pmin_ = NULL;
  return temp;
}
inline void YBox3::set_allocated_pmin(::y3d::YPoint3* pmin) {
  delete pmin_;
  pmin_ = pmin;
  if (pmin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YBox3.pmin)
}

// optional .y3d.YPoint3 pmax = 2;
inline bool YBox3::has_pmax() const {
  return !_is_default_instance_ && pmax_ != NULL;
}
inline void YBox3::clear_pmax() {
  if (GetArenaNoVirtual() == NULL && pmax_ != NULL) delete pmax_;
  pmax_ = NULL;
}
inline const ::y3d::YPoint3& YBox3::pmax() const {
  // @@protoc_insertion_point(field_get:y3d.YBox3.pmax)
  return pmax_ != NULL ? *pmax_ : *default_instance_->pmax_;
}
inline ::y3d::YPoint3* YBox3::mutable_pmax() {
  
  if (pmax_ == NULL) {
    pmax_ = new ::y3d::YPoint3;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YBox3.pmax)
  return pmax_;
}
inline ::y3d::YPoint3* YBox3::release_pmax() {
  // @@protoc_insertion_point(field_release:y3d.YBox3.pmax)
  
  ::y3d::YPoint3* temp = pmax_;
  pmax_ = NULL;
  return temp;
}
inline void YBox3::set_allocated_pmax(::y3d::YPoint3* pmax) {
  delete pmax_;
  pmax_ = pmax;
  if (pmax) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YBox3.pmax)
}

// -------------------------------------------------------------------

// YResource

// optional string rid = 1;
inline void YResource::clear_rid() {
  rid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& YResource::rid() const {
  // @@protoc_insertion_point(field_get:y3d.YResource.rid)
  return rid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YResource::set_rid(const ::std::string& value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YResource.rid)
}
inline void YResource::set_rid(const char* value) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YResource.rid)
}
inline void YResource::set_rid(const char* value, size_t size) {
  
  rid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YResource.rid)
}
inline ::std::string* YResource::mutable_rid() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YResource.rid)
  return rid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YResource::release_rid() {
  // @@protoc_insertion_point(field_release:y3d.YResource.rid)
  
  return rid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YResource::set_allocated_rid(::std::string* rid) {
  if (rid != NULL) {
    
  } else {
    
  }
  rid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rid);
  // @@protoc_insertion_point(field_set_allocated:y3d.YResource.rid)
}

// optional .y3d.YResource.ResourceType rtype = 2;
inline void YResource::clear_rtype() {
  rtype_ = 0;
}
inline ::y3d::YResource_ResourceType YResource::rtype() const {
  // @@protoc_insertion_point(field_get:y3d.YResource.rtype)
  return static_cast< ::y3d::YResource_ResourceType >(rtype_);
}
inline void YResource::set_rtype(::y3d::YResource_ResourceType value) {
  
  rtype_ = value;
  // @@protoc_insertion_point(field_set:y3d.YResource.rtype)
}

// optional string link = 3;
inline void YResource::clear_link() {
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& YResource::link() const {
  // @@protoc_insertion_point(field_get:y3d.YResource.link)
  return link_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YResource::set_link(const ::std::string& value) {
  
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YResource.link)
}
inline void YResource::set_link(const char* value) {
  
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YResource.link)
}
inline void YResource::set_link(const char* value, size_t size) {
  
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YResource.link)
}
inline ::std::string* YResource::mutable_link() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YResource.link)
  return link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YResource::release_link() {
  // @@protoc_insertion_point(field_release:y3d.YResource.link)
  
  return link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YResource::set_allocated_link(::std::string* link) {
  if (link != NULL) {
    
  } else {
    
  }
  link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:y3d.YResource.link)
}

// -------------------------------------------------------------------

// YLight

// repeated float diffuse = 3;
inline int YLight::diffuse_size() const {
  return diffuse_.size();
}
inline void YLight::clear_diffuse() {
  diffuse_.Clear();
}
inline float YLight::diffuse(int index) const {
  // @@protoc_insertion_point(field_get:y3d.YLight.diffuse)
  return diffuse_.Get(index);
}
inline void YLight::set_diffuse(int index, float value) {
  diffuse_.Set(index, value);
  // @@protoc_insertion_point(field_set:y3d.YLight.diffuse)
}
inline void YLight::add_diffuse(float value) {
  diffuse_.Add(value);
  // @@protoc_insertion_point(field_add:y3d.YLight.diffuse)
}
inline const ::google::protobuf::RepeatedField< float >&
YLight::diffuse() const {
  // @@protoc_insertion_point(field_list:y3d.YLight.diffuse)
  return diffuse_;
}
inline ::google::protobuf::RepeatedField< float >*
YLight::mutable_diffuse() {
  // @@protoc_insertion_point(field_mutable_list:y3d.YLight.diffuse)
  return &diffuse_;
}

// repeated float specular = 4;
inline int YLight::specular_size() const {
  return specular_.size();
}
inline void YLight::clear_specular() {
  specular_.Clear();
}
inline float YLight::specular(int index) const {
  // @@protoc_insertion_point(field_get:y3d.YLight.specular)
  return specular_.Get(index);
}
inline void YLight::set_specular(int index, float value) {
  specular_.Set(index, value);
  // @@protoc_insertion_point(field_set:y3d.YLight.specular)
}
inline void YLight::add_specular(float value) {
  specular_.Add(value);
  // @@protoc_insertion_point(field_add:y3d.YLight.specular)
}
inline const ::google::protobuf::RepeatedField< float >&
YLight::specular() const {
  // @@protoc_insertion_point(field_list:y3d.YLight.specular)
  return specular_;
}
inline ::google::protobuf::RepeatedField< float >*
YLight::mutable_specular() {
  // @@protoc_insertion_point(field_mutable_list:y3d.YLight.specular)
  return &specular_;
}

// optional float intensity = 5;
inline void YLight::clear_intensity() {
  intensity_ = 0;
}
inline float YLight::intensity() const {
  // @@protoc_insertion_point(field_get:y3d.YLight.intensity)
  return intensity_;
}
inline void YLight::set_intensity(float value) {
  
  intensity_ = value;
  // @@protoc_insertion_point(field_set:y3d.YLight.intensity)
}

// optional float range = 6;
inline void YLight::clear_range() {
  range_ = 0;
}
inline float YLight::range() const {
  // @@protoc_insertion_point(field_get:y3d.YLight.range)
  return range_;
}
inline void YLight::set_range(float value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:y3d.YLight.range)
}

// optional float angle = 7;
inline void YLight::clear_angle() {
  angle_ = 0;
}
inline float YLight::angle() const {
  // @@protoc_insertion_point(field_get:y3d.YLight.angle)
  return angle_;
}
inline void YLight::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:y3d.YLight.angle)
}

// optional float exponent = 8;
inline void YLight::clear_exponent() {
  exponent_ = 0;
}
inline float YLight::exponent() const {
  // @@protoc_insertion_point(field_get:y3d.YLight.exponent)
  return exponent_;
}
inline void YLight::set_exponent(float value) {
  
  exponent_ = value;
  // @@protoc_insertion_point(field_set:y3d.YLight.exponent)
}

// repeated string excludedMeshesIds = 9;
inline int YLight::excludedmeshesids_size() const {
  return excludedmeshesids_.size();
}
inline void YLight::clear_excludedmeshesids() {
  excludedmeshesids_.Clear();
}
inline const ::std::string& YLight::excludedmeshesids(int index) const {
  // @@protoc_insertion_point(field_get:y3d.YLight.excludedMeshesIds)
  return excludedmeshesids_.Get(index);
}
inline ::std::string* YLight::mutable_excludedmeshesids(int index) {
  // @@protoc_insertion_point(field_mutable:y3d.YLight.excludedMeshesIds)
  return excludedmeshesids_.Mutable(index);
}
inline void YLight::set_excludedmeshesids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:y3d.YLight.excludedMeshesIds)
  excludedmeshesids_.Mutable(index)->assign(value);
}
inline void YLight::set_excludedmeshesids(int index, const char* value) {
  excludedmeshesids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:y3d.YLight.excludedMeshesIds)
}
inline void YLight::set_excludedmeshesids(int index, const char* value, size_t size) {
  excludedmeshesids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:y3d.YLight.excludedMeshesIds)
}
inline ::std::string* YLight::add_excludedmeshesids() {
  // @@protoc_insertion_point(field_add_mutable:y3d.YLight.excludedMeshesIds)
  return excludedmeshesids_.Add();
}
inline void YLight::add_excludedmeshesids(const ::std::string& value) {
  excludedmeshesids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:y3d.YLight.excludedMeshesIds)
}
inline void YLight::add_excludedmeshesids(const char* value) {
  excludedmeshesids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:y3d.YLight.excludedMeshesIds)
}
inline void YLight::add_excludedmeshesids(const char* value, size_t size) {
  excludedmeshesids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:y3d.YLight.excludedMeshesIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
YLight::excludedmeshesids() const {
  // @@protoc_insertion_point(field_list:y3d.YLight.excludedMeshesIds)
  return excludedmeshesids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
YLight::mutable_excludedmeshesids() {
  // @@protoc_insertion_point(field_mutable_list:y3d.YLight.excludedMeshesIds)
  return &excludedmeshesids_;
}

// repeated string includedOnlyMeshesIds = 10;
inline int YLight::includedonlymeshesids_size() const {
  return includedonlymeshesids_.size();
}
inline void YLight::clear_includedonlymeshesids() {
  includedonlymeshesids_.Clear();
}
inline const ::std::string& YLight::includedonlymeshesids(int index) const {
  // @@protoc_insertion_point(field_get:y3d.YLight.includedOnlyMeshesIds)
  return includedonlymeshesids_.Get(index);
}
inline ::std::string* YLight::mutable_includedonlymeshesids(int index) {
  // @@protoc_insertion_point(field_mutable:y3d.YLight.includedOnlyMeshesIds)
  return includedonlymeshesids_.Mutable(index);
}
inline void YLight::set_includedonlymeshesids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:y3d.YLight.includedOnlyMeshesIds)
  includedonlymeshesids_.Mutable(index)->assign(value);
}
inline void YLight::set_includedonlymeshesids(int index, const char* value) {
  includedonlymeshesids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:y3d.YLight.includedOnlyMeshesIds)
}
inline void YLight::set_includedonlymeshesids(int index, const char* value, size_t size) {
  includedonlymeshesids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:y3d.YLight.includedOnlyMeshesIds)
}
inline ::std::string* YLight::add_includedonlymeshesids() {
  // @@protoc_insertion_point(field_add_mutable:y3d.YLight.includedOnlyMeshesIds)
  return includedonlymeshesids_.Add();
}
inline void YLight::add_includedonlymeshesids(const ::std::string& value) {
  includedonlymeshesids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:y3d.YLight.includedOnlyMeshesIds)
}
inline void YLight::add_includedonlymeshesids(const char* value) {
  includedonlymeshesids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:y3d.YLight.includedOnlyMeshesIds)
}
inline void YLight::add_includedonlymeshesids(const char* value, size_t size) {
  includedonlymeshesids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:y3d.YLight.includedOnlyMeshesIds)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
YLight::includedonlymeshesids() const {
  // @@protoc_insertion_point(field_list:y3d.YLight.includedOnlyMeshesIds)
  return includedonlymeshesids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
YLight::mutable_includedonlymeshesids() {
  // @@protoc_insertion_point(field_mutable_list:y3d.YLight.includedOnlyMeshesIds)
  return &includedonlymeshesids_;
}

// -------------------------------------------------------------------

// YCamera

// repeated float rotation = 3;
inline int YCamera::rotation_size() const {
  return rotation_.size();
}
inline void YCamera::clear_rotation() {
  rotation_.Clear();
}
inline float YCamera::rotation(int index) const {
  // @@protoc_insertion_point(field_get:y3d.YCamera.rotation)
  return rotation_.Get(index);
}
inline void YCamera::set_rotation(int index, float value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:y3d.YCamera.rotation)
}
inline void YCamera::add_rotation(float value) {
  rotation_.Add(value);
  // @@protoc_insertion_point(field_add:y3d.YCamera.rotation)
}
inline const ::google::protobuf::RepeatedField< float >&
YCamera::rotation() const {
  // @@protoc_insertion_point(field_list:y3d.YCamera.rotation)
  return rotation_;
}
inline ::google::protobuf::RepeatedField< float >*
YCamera::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:y3d.YCamera.rotation)
  return &rotation_;
}

// repeated float target = 4;
inline int YCamera::target_size() const {
  return target_.size();
}
inline void YCamera::clear_target() {
  target_.Clear();
}
inline float YCamera::target(int index) const {
  // @@protoc_insertion_point(field_get:y3d.YCamera.target)
  return target_.Get(index);
}
inline void YCamera::set_target(int index, float value) {
  target_.Set(index, value);
  // @@protoc_insertion_point(field_set:y3d.YCamera.target)
}
inline void YCamera::add_target(float value) {
  target_.Add(value);
  // @@protoc_insertion_point(field_add:y3d.YCamera.target)
}
inline const ::google::protobuf::RepeatedField< float >&
YCamera::target() const {
  // @@protoc_insertion_point(field_list:y3d.YCamera.target)
  return target_;
}
inline ::google::protobuf::RepeatedField< float >*
YCamera::mutable_target() {
  // @@protoc_insertion_point(field_mutable_list:y3d.YCamera.target)
  return &target_;
}

// optional float fov = 5;
inline void YCamera::clear_fov() {
  fov_ = 0;
}
inline float YCamera::fov() const {
  // @@protoc_insertion_point(field_get:y3d.YCamera.fov)
  return fov_;
}
inline void YCamera::set_fov(float value) {
  
  fov_ = value;
  // @@protoc_insertion_point(field_set:y3d.YCamera.fov)
}

// -------------------------------------------------------------------

// YMesh

// optional int32 num_faces = 1;
inline void YMesh::clear_num_faces() {
  num_faces_ = 0;
}
inline ::google::protobuf::int32 YMesh::num_faces() const {
  // @@protoc_insertion_point(field_get:y3d.YMesh.num_faces)
  return num_faces_;
}
inline void YMesh::set_num_faces(::google::protobuf::int32 value) {
  
  num_faces_ = value;
  // @@protoc_insertion_point(field_set:y3d.YMesh.num_faces)
}

// optional .y3d.YBox3 bbox = 2;
inline bool YMesh::has_bbox() const {
  return !_is_default_instance_ && bbox_ != NULL;
}
inline void YMesh::clear_bbox() {
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) delete bbox_;
  bbox_ = NULL;
}
inline const ::y3d::YBox3& YMesh::bbox() const {
  // @@protoc_insertion_point(field_get:y3d.YMesh.bbox)
  return bbox_ != NULL ? *bbox_ : *default_instance_->bbox_;
}
inline ::y3d::YBox3* YMesh::mutable_bbox() {
  
  if (bbox_ == NULL) {
    bbox_ = new ::y3d::YBox3;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YMesh.bbox)
  return bbox_;
}
inline ::y3d::YBox3* YMesh::release_bbox() {
  // @@protoc_insertion_point(field_release:y3d.YMesh.bbox)
  
  ::y3d::YBox3* temp = bbox_;
  bbox_ = NULL;
  return temp;
}
inline void YMesh::set_allocated_bbox(::y3d::YBox3* bbox) {
  delete bbox_;
  bbox_ = bbox;
  if (bbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YMesh.bbox)
}

// optional string res_id = 3;
inline void YMesh::clear_res_id() {
  res_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& YMesh::res_id() const {
  // @@protoc_insertion_point(field_get:y3d.YMesh.res_id)
  return res_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YMesh::set_res_id(const ::std::string& value) {
  
  res_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YMesh.res_id)
}
inline void YMesh::set_res_id(const char* value) {
  
  res_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YMesh.res_id)
}
inline void YMesh::set_res_id(const char* value, size_t size) {
  
  res_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YMesh.res_id)
}
inline ::std::string* YMesh::mutable_res_id() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YMesh.res_id)
  return res_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YMesh::release_res_id() {
  // @@protoc_insertion_point(field_release:y3d.YMesh.res_id)
  
  return res_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YMesh::set_allocated_res_id(::std::string* res_id) {
  if (res_id != NULL) {
    
  } else {
    
  }
  res_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), res_id);
  // @@protoc_insertion_point(field_set_allocated:y3d.YMesh.res_id)
}

// repeated int32 xref = 4;
inline int YMesh::xref_size() const {
  return xref_.size();
}
inline void YMesh::clear_xref() {
  xref_.Clear();
}
inline ::google::protobuf::int32 YMesh::xref(int index) const {
  // @@protoc_insertion_point(field_get:y3d.YMesh.xref)
  return xref_.Get(index);
}
inline void YMesh::set_xref(int index, ::google::protobuf::int32 value) {
  xref_.Set(index, value);
  // @@protoc_insertion_point(field_set:y3d.YMesh.xref)
}
inline void YMesh::add_xref(::google::protobuf::int32 value) {
  xref_.Add(value);
  // @@protoc_insertion_point(field_add:y3d.YMesh.xref)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
YMesh::xref() const {
  // @@protoc_insertion_point(field_list:y3d.YMesh.xref)
  return xref_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
YMesh::mutable_xref() {
  // @@protoc_insertion_point(field_mutable_list:y3d.YMesh.xref)
  return &xref_;
}

// optional .y3d.YMesh.XrefStatus xstatus = 5;
inline void YMesh::clear_xstatus() {
  xstatus_ = 0;
}
inline ::y3d::YMesh_XrefStatus YMesh::xstatus() const {
  // @@protoc_insertion_point(field_get:y3d.YMesh.xstatus)
  return static_cast< ::y3d::YMesh_XrefStatus >(xstatus_);
}
inline void YMesh::set_xstatus(::y3d::YMesh_XrefStatus value) {
  
  xstatus_ = value;
  // @@protoc_insertion_point(field_set:y3d.YMesh.xstatus)
}

// optional .y3d.YMesh.MeshType mtype = 6;
inline void YMesh::clear_mtype() {
  mtype_ = 0;
}
inline ::y3d::YMesh_MeshType YMesh::mtype() const {
  // @@protoc_insertion_point(field_get:y3d.YMesh.mtype)
  return static_cast< ::y3d::YMesh_MeshType >(mtype_);
}
inline void YMesh::set_mtype(::y3d::YMesh_MeshType value) {
  
  mtype_ = value;
  // @@protoc_insertion_point(field_set:y3d.YMesh.mtype)
}

// -------------------------------------------------------------------

// YObject

// optional string name = 1;
inline void YObject::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& YObject::name() const {
  // @@protoc_insertion_point(field_get:y3d.YObject.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YObject::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YObject.name)
}
inline void YObject::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YObject.name)
}
inline void YObject::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YObject.name)
}
inline ::std::string* YObject::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YObject.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YObject::release_name() {
  // @@protoc_insertion_point(field_release:y3d.YObject.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YObject::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:y3d.YObject.name)
}

// optional .y3d.YPoint3 pos = 3;
inline bool YObject::has_pos() const {
  return !_is_default_instance_ && pos_ != NULL;
}
inline void YObject::clear_pos() {
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) delete pos_;
  pos_ = NULL;
}
inline const ::y3d::YPoint3& YObject::pos() const {
  // @@protoc_insertion_point(field_get:y3d.YObject.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::y3d::YPoint3* YObject::mutable_pos() {
  
  if (pos_ == NULL) {
    pos_ = new ::y3d::YPoint3;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YObject.pos)
  return pos_;
}
inline ::y3d::YPoint3* YObject::release_pos() {
  // @@protoc_insertion_point(field_release:y3d.YObject.pos)
  
  ::y3d::YPoint3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void YObject::set_allocated_pos(::y3d::YPoint3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YObject.pos)
}

// map<string, .google.protobuf.Any> extra = 5;
inline int YObject::extra_size() const {
  return extra_.size();
}
inline void YObject::clear_extra() {
  extra_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >&
YObject::extra() const {
  // @@protoc_insertion_point(field_map:y3d.YObject.extra)
  return extra_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >*
YObject::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_map:y3d.YObject.extra)
  return extra_.MutableMap();
}

// optional .y3d.ObjectType otype = 6;
inline void YObject::clear_otype() {
  otype_ = 0;
}
inline ::y3d::ObjectType YObject::otype() const {
  // @@protoc_insertion_point(field_get:y3d.YObject.otype)
  return static_cast< ::y3d::ObjectType >(otype_);
}
inline void YObject::set_otype(::y3d::ObjectType value) {
  
  otype_ = value;
  // @@protoc_insertion_point(field_set:y3d.YObject.otype)
}

// repeated string tags = 7;
inline int YObject::tags_size() const {
  return tags_.size();
}
inline void YObject::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& YObject::tags(int index) const {
  // @@protoc_insertion_point(field_get:y3d.YObject.tags)
  return tags_.Get(index);
}
inline ::std::string* YObject::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:y3d.YObject.tags)
  return tags_.Mutable(index);
}
inline void YObject::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:y3d.YObject.tags)
  tags_.Mutable(index)->assign(value);
}
inline void YObject::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:y3d.YObject.tags)
}
inline void YObject::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:y3d.YObject.tags)
}
inline ::std::string* YObject::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:y3d.YObject.tags)
  return tags_.Add();
}
inline void YObject::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:y3d.YObject.tags)
}
inline void YObject::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:y3d.YObject.tags)
}
inline void YObject::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:y3d.YObject.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
YObject::tags() const {
  // @@protoc_insertion_point(field_list:y3d.YObject.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
YObject::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:y3d.YObject.tags)
  return &tags_;
}

// optional int32 cate_id = 8;
inline void YObject::clear_cate_id() {
  cate_id_ = 0;
}
inline ::google::protobuf::int32 YObject::cate_id() const {
  // @@protoc_insertion_point(field_get:y3d.YObject.cate_id)
  return cate_id_;
}
inline void YObject::set_cate_id(::google::protobuf::int32 value) {
  
  cate_id_ = value;
  // @@protoc_insertion_point(field_set:y3d.YObject.cate_id)
}

// optional .y3d.YLight light = 10;
inline bool YObject::has_light() const {
  return data_case() == kLight;
}
inline void YObject::set_has_light() {
  _oneof_case_[0] = kLight;
}
inline void YObject::clear_light() {
  if (has_light()) {
    delete data_.light_;
    clear_has_data();
  }
}
inline  const ::y3d::YLight& YObject::light() const {
  // @@protoc_insertion_point(field_get:y3d.YObject.light)
  return has_light()
      ? *data_.light_
      : ::y3d::YLight::default_instance();
}
inline ::y3d::YLight* YObject::mutable_light() {
  if (!has_light()) {
    clear_data();
    set_has_light();
    data_.light_ = new ::y3d::YLight;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YObject.light)
  return data_.light_;
}
inline ::y3d::YLight* YObject::release_light() {
  // @@protoc_insertion_point(field_release:y3d.YObject.light)
  if (has_light()) {
    clear_has_data();
    ::y3d::YLight* temp = data_.light_;
    data_.light_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void YObject::set_allocated_light(::y3d::YLight* light) {
  clear_data();
  if (light) {
    set_has_light();
    data_.light_ = light;
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YObject.light)
}

// optional .y3d.YCamera camera = 11;
inline bool YObject::has_camera() const {
  return data_case() == kCamera;
}
inline void YObject::set_has_camera() {
  _oneof_case_[0] = kCamera;
}
inline void YObject::clear_camera() {
  if (has_camera()) {
    delete data_.camera_;
    clear_has_data();
  }
}
inline  const ::y3d::YCamera& YObject::camera() const {
  // @@protoc_insertion_point(field_get:y3d.YObject.camera)
  return has_camera()
      ? *data_.camera_
      : ::y3d::YCamera::default_instance();
}
inline ::y3d::YCamera* YObject::mutable_camera() {
  if (!has_camera()) {
    clear_data();
    set_has_camera();
    data_.camera_ = new ::y3d::YCamera;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YObject.camera)
  return data_.camera_;
}
inline ::y3d::YCamera* YObject::release_camera() {
  // @@protoc_insertion_point(field_release:y3d.YObject.camera)
  if (has_camera()) {
    clear_has_data();
    ::y3d::YCamera* temp = data_.camera_;
    data_.camera_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void YObject::set_allocated_camera(::y3d::YCamera* camera) {
  clear_data();
  if (camera) {
    set_has_camera();
    data_.camera_ = camera;
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YObject.camera)
}

// optional .y3d.YMesh mesh = 12;
inline bool YObject::has_mesh() const {
  return data_case() == kMesh;
}
inline void YObject::set_has_mesh() {
  _oneof_case_[0] = kMesh;
}
inline void YObject::clear_mesh() {
  if (has_mesh()) {
    delete data_.mesh_;
    clear_has_data();
  }
}
inline  const ::y3d::YMesh& YObject::mesh() const {
  // @@protoc_insertion_point(field_get:y3d.YObject.mesh)
  return has_mesh()
      ? *data_.mesh_
      : ::y3d::YMesh::default_instance();
}
inline ::y3d::YMesh* YObject::mutable_mesh() {
  if (!has_mesh()) {
    clear_data();
    set_has_mesh();
    data_.mesh_ = new ::y3d::YMesh;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YObject.mesh)
  return data_.mesh_;
}
inline ::y3d::YMesh* YObject::release_mesh() {
  // @@protoc_insertion_point(field_release:y3d.YObject.mesh)
  if (has_mesh()) {
    clear_has_data();
    ::y3d::YMesh* temp = data_.mesh_;
    data_.mesh_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void YObject::set_allocated_mesh(::y3d::YMesh* mesh) {
  clear_data();
  if (mesh) {
    set_has_mesh();
    data_.mesh_ = mesh;
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YObject.mesh)
}

inline bool YObject::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void YObject::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline YObject::DataCase YObject::data_case() const {
  return YObject::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// YArea

// optional string name = 1;
inline void YArea::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& YArea::name() const {
  // @@protoc_insertion_point(field_get:y3d.YArea.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YArea::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YArea.name)
}
inline void YArea::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YArea.name)
}
inline void YArea::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YArea.name)
}
inline ::std::string* YArea::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YArea.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YArea::release_name() {
  // @@protoc_insertion_point(field_release:y3d.YArea.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YArea::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:y3d.YArea.name)
}

// repeated .y3d.YGroup groups = 2;
inline int YArea::groups_size() const {
  return groups_.size();
}
inline void YArea::clear_groups() {
  groups_.Clear();
}
inline const ::y3d::YGroup& YArea::groups(int index) const {
  // @@protoc_insertion_point(field_get:y3d.YArea.groups)
  return groups_.Get(index);
}
inline ::y3d::YGroup* YArea::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:y3d.YArea.groups)
  return groups_.Mutable(index);
}
inline ::y3d::YGroup* YArea::add_groups() {
  // @@protoc_insertion_point(field_add:y3d.YArea.groups)
  return groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::y3d::YGroup >*
YArea::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:y3d.YArea.groups)
  return &groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::y3d::YGroup >&
YArea::groups() const {
  // @@protoc_insertion_point(field_list:y3d.YArea.groups)
  return groups_;
}

// repeated .y3d.YObject objs = 3;
inline int YArea::objs_size() const {
  return objs_.size();
}
inline void YArea::clear_objs() {
  objs_.Clear();
}
inline const ::y3d::YObject& YArea::objs(int index) const {
  // @@protoc_insertion_point(field_get:y3d.YArea.objs)
  return objs_.Get(index);
}
inline ::y3d::YObject* YArea::mutable_objs(int index) {
  // @@protoc_insertion_point(field_mutable:y3d.YArea.objs)
  return objs_.Mutable(index);
}
inline ::y3d::YObject* YArea::add_objs() {
  // @@protoc_insertion_point(field_add:y3d.YArea.objs)
  return objs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::y3d::YObject >*
YArea::mutable_objs() {
  // @@protoc_insertion_point(field_mutable_list:y3d.YArea.objs)
  return &objs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::y3d::YObject >&
YArea::objs() const {
  // @@protoc_insertion_point(field_list:y3d.YArea.objs)
  return objs_;
}

// map<string, .y3d.YGroupVer> gvers = 6;
inline int YArea::gvers_size() const {
  return gvers_.size();
}
inline void YArea::clear_gvers() {
  gvers_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::y3d::YGroupVer >&
YArea::gvers() const {
  // @@protoc_insertion_point(field_map:y3d.YArea.gvers)
  return gvers_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::y3d::YGroupVer >*
YArea::mutable_gvers() {
  // @@protoc_insertion_point(field_mutable_map:y3d.YArea.gvers)
  return gvers_.MutableMap();
}

// -------------------------------------------------------------------

// YLayer

// optional string name = 1;
inline void YLayer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& YLayer::name() const {
  // @@protoc_insertion_point(field_get:y3d.YLayer.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YLayer::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YLayer.name)
}
inline void YLayer::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YLayer.name)
}
inline void YLayer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YLayer.name)
}
inline ::std::string* YLayer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YLayer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YLayer::release_name() {
  // @@protoc_insertion_point(field_release:y3d.YLayer.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YLayer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:y3d.YLayer.name)
}

// repeated .y3d.YGroup groups = 2;
inline int YLayer::groups_size() const {
  return groups_.size();
}
inline void YLayer::clear_groups() {
  groups_.Clear();
}
inline const ::y3d::YGroup& YLayer::groups(int index) const {
  // @@protoc_insertion_point(field_get:y3d.YLayer.groups)
  return groups_.Get(index);
}
inline ::y3d::YGroup* YLayer::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:y3d.YLayer.groups)
  return groups_.Mutable(index);
}
inline ::y3d::YGroup* YLayer::add_groups() {
  // @@protoc_insertion_point(field_add:y3d.YLayer.groups)
  return groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::y3d::YGroup >*
YLayer::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:y3d.YLayer.groups)
  return &groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::y3d::YGroup >&
YLayer::groups() const {
  // @@protoc_insertion_point(field_list:y3d.YLayer.groups)
  return groups_;
}

// -------------------------------------------------------------------

// YGroup

// optional string name = 1;
inline void YGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& YGroup::name() const {
  // @@protoc_insertion_point(field_get:y3d.YGroup.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YGroup::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YGroup.name)
}
inline void YGroup::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YGroup.name)
}
inline void YGroup::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YGroup.name)
}
inline ::std::string* YGroup::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YGroup::release_name() {
  // @@protoc_insertion_point(field_release:y3d.YGroup.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:y3d.YGroup.name)
}

// repeated .y3d.YObject objs = 2;
inline int YGroup::objs_size() const {
  return objs_.size();
}
inline void YGroup::clear_objs() {
  objs_.Clear();
}
inline const ::y3d::YObject& YGroup::objs(int index) const {
  // @@protoc_insertion_point(field_get:y3d.YGroup.objs)
  return objs_.Get(index);
}
inline ::y3d::YObject* YGroup::mutable_objs(int index) {
  // @@protoc_insertion_point(field_mutable:y3d.YGroup.objs)
  return objs_.Mutable(index);
}
inline ::y3d::YObject* YGroup::add_objs() {
  // @@protoc_insertion_point(field_add:y3d.YGroup.objs)
  return objs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::y3d::YObject >*
YGroup::mutable_objs() {
  // @@protoc_insertion_point(field_mutable_list:y3d.YGroup.objs)
  return &objs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::y3d::YObject >&
YGroup::objs() const {
  // @@protoc_insertion_point(field_list:y3d.YGroup.objs)
  return objs_;
}

// repeated .y3d.YGroup children = 3;
inline int YGroup::children_size() const {
  return children_.size();
}
inline void YGroup::clear_children() {
  children_.Clear();
}
inline const ::y3d::YGroup& YGroup::children(int index) const {
  // @@protoc_insertion_point(field_get:y3d.YGroup.children)
  return children_.Get(index);
}
inline ::y3d::YGroup* YGroup::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:y3d.YGroup.children)
  return children_.Mutable(index);
}
inline ::y3d::YGroup* YGroup::add_children() {
  // @@protoc_insertion_point(field_add:y3d.YGroup.children)
  return children_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::y3d::YGroup >*
YGroup::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:y3d.YGroup.children)
  return &children_;
}
inline const ::google::protobuf::RepeatedPtrField< ::y3d::YGroup >&
YGroup::children() const {
  // @@protoc_insertion_point(field_list:y3d.YGroup.children)
  return children_;
}

// optional .y3d.GVerType gv_type = 4;
inline void YGroup::clear_gv_type() {
  gv_type_ = 0;
}
inline ::y3d::GVerType YGroup::gv_type() const {
  // @@protoc_insertion_point(field_get:y3d.YGroup.gv_type)
  return static_cast< ::y3d::GVerType >(gv_type_);
}
inline void YGroup::set_gv_type(::y3d::GVerType value) {
  
  gv_type_ = value;
  // @@protoc_insertion_point(field_set:y3d.YGroup.gv_type)
}

// repeated string xref = 5;
inline int YGroup::xref_size() const {
  return xref_.size();
}
inline void YGroup::clear_xref() {
  xref_.Clear();
}
inline const ::std::string& YGroup::xref(int index) const {
  // @@protoc_insertion_point(field_get:y3d.YGroup.xref)
  return xref_.Get(index);
}
inline ::std::string* YGroup::mutable_xref(int index) {
  // @@protoc_insertion_point(field_mutable:y3d.YGroup.xref)
  return xref_.Mutable(index);
}
inline void YGroup::set_xref(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:y3d.YGroup.xref)
  xref_.Mutable(index)->assign(value);
}
inline void YGroup::set_xref(int index, const char* value) {
  xref_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:y3d.YGroup.xref)
}
inline void YGroup::set_xref(int index, const char* value, size_t size) {
  xref_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:y3d.YGroup.xref)
}
inline ::std::string* YGroup::add_xref() {
  // @@protoc_insertion_point(field_add_mutable:y3d.YGroup.xref)
  return xref_.Add();
}
inline void YGroup::add_xref(const ::std::string& value) {
  xref_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:y3d.YGroup.xref)
}
inline void YGroup::add_xref(const char* value) {
  xref_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:y3d.YGroup.xref)
}
inline void YGroup::add_xref(const char* value, size_t size) {
  xref_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:y3d.YGroup.xref)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
YGroup::xref() const {
  // @@protoc_insertion_point(field_list:y3d.YGroup.xref)
  return xref_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
YGroup::mutable_xref() {
  // @@protoc_insertion_point(field_mutable_list:y3d.YGroup.xref)
  return &xref_;
}

// -------------------------------------------------------------------

// YGroupVer

// optional string vname = 1;
inline void YGroupVer::clear_vname() {
  vname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& YGroupVer::vname() const {
  // @@protoc_insertion_point(field_get:y3d.YGroupVer.vname)
  return vname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YGroupVer::set_vname(const ::std::string& value) {
  
  vname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YGroupVer.vname)
}
inline void YGroupVer::set_vname(const char* value) {
  
  vname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YGroupVer.vname)
}
inline void YGroupVer::set_vname(const char* value, size_t size) {
  
  vname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YGroupVer.vname)
}
inline ::std::string* YGroupVer::mutable_vname() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YGroupVer.vname)
  return vname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* YGroupVer::release_vname() {
  // @@protoc_insertion_point(field_release:y3d.YGroupVer.vname)
  
  return vname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void YGroupVer::set_allocated_vname(::std::string* vname) {
  if (vname != NULL) {
    
  } else {
    
  }
  vname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vname);
  // @@protoc_insertion_point(field_set_allocated:y3d.YGroupVer.vname)
}

// optional .y3d.YGroup groupData = 2;
inline bool YGroupVer::has_groupdata() const {
  return !_is_default_instance_ && groupdata_ != NULL;
}
inline void YGroupVer::clear_groupdata() {
  if (GetArenaNoVirtual() == NULL && groupdata_ != NULL) delete groupdata_;
  groupdata_ = NULL;
}
inline const ::y3d::YGroup& YGroupVer::groupdata() const {
  // @@protoc_insertion_point(field_get:y3d.YGroupVer.groupData)
  return groupdata_ != NULL ? *groupdata_ : *default_instance_->groupdata_;
}
inline ::y3d::YGroup* YGroupVer::mutable_groupdata() {
  
  if (groupdata_ == NULL) {
    groupdata_ = new ::y3d::YGroup;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YGroupVer.groupData)
  return groupdata_;
}
inline ::y3d::YGroup* YGroupVer::release_groupdata() {
  // @@protoc_insertion_point(field_release:y3d.YGroupVer.groupData)
  
  ::y3d::YGroup* temp = groupdata_;
  groupdata_ = NULL;
  return temp;
}
inline void YGroupVer::set_allocated_groupdata(::y3d::YGroup* groupdata) {
  delete groupdata_;
  groupdata_ = groupdata;
  if (groupdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YGroupVer.groupData)
}

// optional int32 step = 3;
inline void YGroupVer::clear_step() {
  step_ = 0;
}
inline ::google::protobuf::int32 YGroupVer::step() const {
  // @@protoc_insertion_point(field_get:y3d.YGroupVer.step)
  return step_;
}
inline void YGroupVer::set_step(::google::protobuf::int32 value) {
  
  step_ = value;
  // @@protoc_insertion_point(field_set:y3d.YGroupVer.step)
}

// -------------------------------------------------------------------

// CustomAttr

// optional string name = 1;
inline void CustomAttr::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CustomAttr::name() const {
  // @@protoc_insertion_point(field_get:y3d.CustomAttr.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomAttr::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.CustomAttr.name)
}
inline void CustomAttr::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.CustomAttr.name)
}
inline void CustomAttr::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.CustomAttr.name)
}
inline ::std::string* CustomAttr::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:y3d.CustomAttr.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CustomAttr::release_name() {
  // @@protoc_insertion_point(field_release:y3d.CustomAttr.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CustomAttr::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:y3d.CustomAttr.name)
}

// optional .google.protobuf.Any value = 2;
inline bool CustomAttr::has_value() const {
  return !_is_default_instance_ && value_ != NULL;
}
inline void CustomAttr::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::google::protobuf::Any& CustomAttr::value() const {
  // @@protoc_insertion_point(field_get:y3d.CustomAttr.value)
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::google::protobuf::Any* CustomAttr::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:y3d.CustomAttr.value)
  return value_;
}
inline ::google::protobuf::Any* CustomAttr::release_value() {
  // @@protoc_insertion_point(field_release:y3d.CustomAttr.value)
  
  ::google::protobuf::Any* temp = value_;
  value_ = NULL;
  return temp;
}
inline void CustomAttr::set_allocated_value(::google::protobuf::Any* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.CustomAttr.value)
}

// optional .y3d.CustomAttr.AType type = 3;
inline void CustomAttr::clear_type() {
  type_ = 0;
}
inline ::y3d::CustomAttr_AType CustomAttr::type() const {
  // @@protoc_insertion_point(field_get:y3d.CustomAttr.type)
  return static_cast< ::y3d::CustomAttr_AType >(type_);
}
inline void CustomAttr::set_type(::y3d::CustomAttr_AType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:y3d.CustomAttr.type)
}

// -------------------------------------------------------------------

// AttrSet

// optional string sname = 1;
inline void AttrSet::clear_sname() {
  sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttrSet::sname() const {
  // @@protoc_insertion_point(field_get:y3d.AttrSet.sname)
  return sname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttrSet::set_sname(const ::std::string& value) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.AttrSet.sname)
}
inline void AttrSet::set_sname(const char* value) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.AttrSet.sname)
}
inline void AttrSet::set_sname(const char* value, size_t size) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.AttrSet.sname)
}
inline ::std::string* AttrSet::mutable_sname() {
  
  // @@protoc_insertion_point(field_mutable:y3d.AttrSet.sname)
  return sname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttrSet::release_sname() {
  // @@protoc_insertion_point(field_release:y3d.AttrSet.sname)
  
  return sname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttrSet::set_allocated_sname(::std::string* sname) {
  if (sname != NULL) {
    
  } else {
    
  }
  sname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sname);
  // @@protoc_insertion_point(field_set_allocated:y3d.AttrSet.sname)
}

// repeated .y3d.CustomAttr attrs = 2;
inline int AttrSet::attrs_size() const {
  return attrs_.size();
}
inline void AttrSet::clear_attrs() {
  attrs_.Clear();
}
inline const ::y3d::CustomAttr& AttrSet::attrs(int index) const {
  // @@protoc_insertion_point(field_get:y3d.AttrSet.attrs)
  return attrs_.Get(index);
}
inline ::y3d::CustomAttr* AttrSet::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:y3d.AttrSet.attrs)
  return attrs_.Mutable(index);
}
inline ::y3d::CustomAttr* AttrSet::add_attrs() {
  // @@protoc_insertion_point(field_add:y3d.AttrSet.attrs)
  return attrs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::y3d::CustomAttr >*
AttrSet::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:y3d.AttrSet.attrs)
  return &attrs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::y3d::CustomAttr >&
AttrSet::attrs() const {
  // @@protoc_insertion_point(field_list:y3d.AttrSet.attrs)
  return attrs_;
}

// -------------------------------------------------------------------

// FilterView

// optional .y3d.ObjectType otype = 1;
inline void FilterView::clear_otype() {
  otype_ = 0;
}
inline ::y3d::ObjectType FilterView::otype() const {
  // @@protoc_insertion_point(field_get:y3d.FilterView.otype)
  return static_cast< ::y3d::ObjectType >(otype_);
}
inline void FilterView::set_otype(::y3d::ObjectType value) {
  
  otype_ = value;
  // @@protoc_insertion_point(field_set:y3d.FilterView.otype)
}

// optional int32 face_range = 2;
inline void FilterView::clear_face_range() {
  face_range_ = 0;
}
inline ::google::protobuf::int32 FilterView::face_range() const {
  // @@protoc_insertion_point(field_get:y3d.FilterView.face_range)
  return face_range_;
}
inline void FilterView::set_face_range(::google::protobuf::int32 value) {
  
  face_range_ = value;
  // @@protoc_insertion_point(field_set:y3d.FilterView.face_range)
}

// optional string search = 3;
inline void FilterView::clear_search() {
  search_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FilterView::search() const {
  // @@protoc_insertion_point(field_get:y3d.FilterView.search)
  return search_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterView::set_search(const ::std::string& value) {
  
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.FilterView.search)
}
inline void FilterView::set_search(const char* value) {
  
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.FilterView.search)
}
inline void FilterView::set_search(const char* value, size_t size) {
  
  search_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.FilterView.search)
}
inline ::std::string* FilterView::mutable_search() {
  
  // @@protoc_insertion_point(field_mutable:y3d.FilterView.search)
  return search_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FilterView::release_search() {
  // @@protoc_insertion_point(field_release:y3d.FilterView.search)
  
  return search_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FilterView::set_allocated_search(::std::string* search) {
  if (search != NULL) {
    
  } else {
    
  }
  search_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search);
  // @@protoc_insertion_point(field_set_allocated:y3d.FilterView.search)
}

// optional int32 aid = 4;
inline void FilterView::clear_aid() {
  aid_ = 0;
}
inline ::google::protobuf::int32 FilterView::aid() const {
  // @@protoc_insertion_point(field_get:y3d.FilterView.aid)
  return aid_;
}
inline void FilterView::set_aid(::google::protobuf::int32 value) {
  
  aid_ = value;
  // @@protoc_insertion_point(field_set:y3d.FilterView.aid)
}

// -------------------------------------------------------------------

// ProjectInfo

// optional string pname = 1;
inline void ProjectInfo::clear_pname() {
  pname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProjectInfo::pname() const {
  // @@protoc_insertion_point(field_get:y3d.ProjectInfo.pname)
  return pname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjectInfo::set_pname(const ::std::string& value) {
  
  pname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.ProjectInfo.pname)
}
inline void ProjectInfo::set_pname(const char* value) {
  
  pname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.ProjectInfo.pname)
}
inline void ProjectInfo::set_pname(const char* value, size_t size) {
  
  pname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.ProjectInfo.pname)
}
inline ::std::string* ProjectInfo::mutable_pname() {
  
  // @@protoc_insertion_point(field_mutable:y3d.ProjectInfo.pname)
  return pname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjectInfo::release_pname() {
  // @@protoc_insertion_point(field_release:y3d.ProjectInfo.pname)
  
  return pname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjectInfo::set_allocated_pname(::std::string* pname) {
  if (pname != NULL) {
    
  } else {
    
  }
  pname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pname);
  // @@protoc_insertion_point(field_set_allocated:y3d.ProjectInfo.pname)
}

// optional string path = 2;
inline void ProjectInfo::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProjectInfo::path() const {
  // @@protoc_insertion_point(field_get:y3d.ProjectInfo.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjectInfo::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.ProjectInfo.path)
}
inline void ProjectInfo::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.ProjectInfo.path)
}
inline void ProjectInfo::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.ProjectInfo.path)
}
inline ::std::string* ProjectInfo::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:y3d.ProjectInfo.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProjectInfo::release_path() {
  // @@protoc_insertion_point(field_release:y3d.ProjectInfo.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProjectInfo::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:y3d.ProjectInfo.path)
}

// repeated int32 face_range = 3;
inline int ProjectInfo::face_range_size() const {
  return face_range_.size();
}
inline void ProjectInfo::clear_face_range() {
  face_range_.Clear();
}
inline ::google::protobuf::int32 ProjectInfo::face_range(int index) const {
  // @@protoc_insertion_point(field_get:y3d.ProjectInfo.face_range)
  return face_range_.Get(index);
}
inline void ProjectInfo::set_face_range(int index, ::google::protobuf::int32 value) {
  face_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:y3d.ProjectInfo.face_range)
}
inline void ProjectInfo::add_face_range(::google::protobuf::int32 value) {
  face_range_.Add(value);
  // @@protoc_insertion_point(field_add:y3d.ProjectInfo.face_range)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProjectInfo::face_range() const {
  // @@protoc_insertion_point(field_list:y3d.ProjectInfo.face_range)
  return face_range_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProjectInfo::mutable_face_range() {
  // @@protoc_insertion_point(field_mutable_list:y3d.ProjectInfo.face_range)
  return &face_range_;
}

// repeated .y3d.YColor count_color = 4;
inline int ProjectInfo::count_color_size() const {
  return count_color_.size();
}
inline void ProjectInfo::clear_count_color() {
  count_color_.Clear();
}
inline const ::y3d::YColor& ProjectInfo::count_color(int index) const {
  // @@protoc_insertion_point(field_get:y3d.ProjectInfo.count_color)
  return count_color_.Get(index);
}
inline ::y3d::YColor* ProjectInfo::mutable_count_color(int index) {
  // @@protoc_insertion_point(field_mutable:y3d.ProjectInfo.count_color)
  return count_color_.Mutable(index);
}
inline ::y3d::YColor* ProjectInfo::add_count_color() {
  // @@protoc_insertion_point(field_add:y3d.ProjectInfo.count_color)
  return count_color_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::y3d::YColor >*
ProjectInfo::mutable_count_color() {
  // @@protoc_insertion_point(field_mutable_list:y3d.ProjectInfo.count_color)
  return &count_color_;
}
inline const ::google::protobuf::RepeatedPtrField< ::y3d::YColor >&
ProjectInfo::count_color() const {
  // @@protoc_insertion_point(field_list:y3d.ProjectInfo.count_color)
  return count_color_;
}

// repeated .y3d.FilterView fview = 5;
inline int ProjectInfo::fview_size() const {
  return fview_.size();
}
inline void ProjectInfo::clear_fview() {
  fview_.Clear();
}
inline const ::y3d::FilterView& ProjectInfo::fview(int index) const {
  // @@protoc_insertion_point(field_get:y3d.ProjectInfo.fview)
  return fview_.Get(index);
}
inline ::y3d::FilterView* ProjectInfo::mutable_fview(int index) {
  // @@protoc_insertion_point(field_mutable:y3d.ProjectInfo.fview)
  return fview_.Mutable(index);
}
inline ::y3d::FilterView* ProjectInfo::add_fview() {
  // @@protoc_insertion_point(field_add:y3d.ProjectInfo.fview)
  return fview_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::y3d::FilterView >*
ProjectInfo::mutable_fview() {
  // @@protoc_insertion_point(field_mutable_list:y3d.ProjectInfo.fview)
  return &fview_;
}
inline const ::google::protobuf::RepeatedPtrField< ::y3d::FilterView >&
ProjectInfo::fview() const {
  // @@protoc_insertion_point(field_list:y3d.ProjectInfo.fview)
  return fview_;
}

// -------------------------------------------------------------------

// YAreaList

// repeated .y3d.YArea areas = 1;
inline int YAreaList::areas_size() const {
  return areas_.size();
}
inline void YAreaList::clear_areas() {
  areas_.Clear();
}
inline const ::y3d::YArea& YAreaList::areas(int index) const {
  // @@protoc_insertion_point(field_get:y3d.YAreaList.areas)
  return areas_.Get(index);
}
inline ::y3d::YArea* YAreaList::mutable_areas(int index) {
  // @@protoc_insertion_point(field_mutable:y3d.YAreaList.areas)
  return areas_.Mutable(index);
}
inline ::y3d::YArea* YAreaList::add_areas() {
  // @@protoc_insertion_point(field_add:y3d.YAreaList.areas)
  return areas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::y3d::YArea >*
YAreaList::mutable_areas() {
  // @@protoc_insertion_point(field_mutable_list:y3d.YAreaList.areas)
  return &areas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::y3d::YArea >&
YAreaList::areas() const {
  // @@protoc_insertion_point(field_list:y3d.YAreaList.areas)
  return areas_;
}

// -------------------------------------------------------------------

// PSetting

// repeated .y3d.CustomAttr extra = 2;
inline int PSetting::extra_size() const {
  return extra_.size();
}
inline void PSetting::clear_extra() {
  extra_.Clear();
}
inline const ::y3d::CustomAttr& PSetting::extra(int index) const {
  // @@protoc_insertion_point(field_get:y3d.PSetting.extra)
  return extra_.Get(index);
}
inline ::y3d::CustomAttr* PSetting::mutable_extra(int index) {
  // @@protoc_insertion_point(field_mutable:y3d.PSetting.extra)
  return extra_.Mutable(index);
}
inline ::y3d::CustomAttr* PSetting::add_extra() {
  // @@protoc_insertion_point(field_add:y3d.PSetting.extra)
  return extra_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::y3d::CustomAttr >*
PSetting::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_list:y3d.PSetting.extra)
  return &extra_;
}
inline const ::google::protobuf::RepeatedPtrField< ::y3d::CustomAttr >&
PSetting::extra() const {
  // @@protoc_insertion_point(field_list:y3d.PSetting.extra)
  return extra_;
}

// optional int32 max_recent = 3;
inline void PSetting::clear_max_recent() {
  max_recent_ = 0;
}
inline ::google::protobuf::int32 PSetting::max_recent() const {
  // @@protoc_insertion_point(field_get:y3d.PSetting.max_recent)
  return max_recent_;
}
inline void PSetting::set_max_recent(::google::protobuf::int32 value) {
  
  max_recent_ = value;
  // @@protoc_insertion_point(field_set:y3d.PSetting.max_recent)
}

// -------------------------------------------------------------------

// YSystem

// optional .y3d.ProjectInfo default_info = 1;
inline bool YSystem::has_default_info() const {
  return !_is_default_instance_ && default_info_ != NULL;
}
inline void YSystem::clear_default_info() {
  if (GetArenaNoVirtual() == NULL && default_info_ != NULL) delete default_info_;
  default_info_ = NULL;
}
inline const ::y3d::ProjectInfo& YSystem::default_info() const {
  // @@protoc_insertion_point(field_get:y3d.YSystem.default_info)
  return default_info_ != NULL ? *default_info_ : *default_instance_->default_info_;
}
inline ::y3d::ProjectInfo* YSystem::mutable_default_info() {
  
  if (default_info_ == NULL) {
    default_info_ = new ::y3d::ProjectInfo;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YSystem.default_info)
  return default_info_;
}
inline ::y3d::ProjectInfo* YSystem::release_default_info() {
  // @@protoc_insertion_point(field_release:y3d.YSystem.default_info)
  
  ::y3d::ProjectInfo* temp = default_info_;
  default_info_ = NULL;
  return temp;
}
inline void YSystem::set_allocated_default_info(::y3d::ProjectInfo* default_info) {
  delete default_info_;
  default_info_ = default_info;
  if (default_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YSystem.default_info)
}

// optional .y3d.PSetting default_setting = 2;
inline bool YSystem::has_default_setting() const {
  return !_is_default_instance_ && default_setting_ != NULL;
}
inline void YSystem::clear_default_setting() {
  if (GetArenaNoVirtual() == NULL && default_setting_ != NULL) delete default_setting_;
  default_setting_ = NULL;
}
inline const ::y3d::PSetting& YSystem::default_setting() const {
  // @@protoc_insertion_point(field_get:y3d.YSystem.default_setting)
  return default_setting_ != NULL ? *default_setting_ : *default_instance_->default_setting_;
}
inline ::y3d::PSetting* YSystem::mutable_default_setting() {
  
  if (default_setting_ == NULL) {
    default_setting_ = new ::y3d::PSetting;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YSystem.default_setting)
  return default_setting_;
}
inline ::y3d::PSetting* YSystem::release_default_setting() {
  // @@protoc_insertion_point(field_release:y3d.YSystem.default_setting)
  
  ::y3d::PSetting* temp = default_setting_;
  default_setting_ = NULL;
  return temp;
}
inline void YSystem::set_allocated_default_setting(::y3d::PSetting* default_setting) {
  delete default_setting_;
  default_setting_ = default_setting;
  if (default_setting) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YSystem.default_setting)
}

// map<string, string> name_path = 3;
inline int YSystem::name_path_size() const {
  return name_path_.size();
}
inline void YSystem::clear_name_path() {
  name_path_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
YSystem::name_path() const {
  // @@protoc_insertion_point(field_map:y3d.YSystem.name_path)
  return name_path_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
YSystem::mutable_name_path() {
  // @@protoc_insertion_point(field_mutable_map:y3d.YSystem.name_path)
  return name_path_.MutableMap();
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace y3d

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::y3d::YResource_ResourceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::y3d::YResource_ResourceType>() {
  return ::y3d::YResource_ResourceType_descriptor();
}
template <> struct is_proto_enum< ::y3d::YMesh_MeshType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::y3d::YMesh_MeshType>() {
  return ::y3d::YMesh_MeshType_descriptor();
}
template <> struct is_proto_enum< ::y3d::YMesh_XrefStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::y3d::YMesh_XrefStatus>() {
  return ::y3d::YMesh_XrefStatus_descriptor();
}
template <> struct is_proto_enum< ::y3d::CustomAttr_AType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::y3d::CustomAttr_AType>() {
  return ::y3d::CustomAttr_AType_descriptor();
}
template <> struct is_proto_enum< ::y3d::ObjectType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::y3d::ObjectType>() {
  return ::y3d::ObjectType_descriptor();
}
template <> struct is_proto_enum< ::y3d::GVerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::y3d::GVerType>() {
  return ::y3d::GVerType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_y3d_2eproto__INCLUDED
