// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ymaxcoreinterface.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Y3D {

  /// <summary>Holder for reflection information generated from ymaxcoreinterface.proto</summary>
  public static partial class YmaxcoreinterfaceReflection {

    #region Descriptor
    /// <summary>File descriptor for ymaxcoreinterface.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static YmaxcoreinterfaceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chd5bWF4Y29yZWludGVyZmFjZS5wcm90bxIDeTNkIukIChJJQmF0Y2hQcm9P",
            "cHRpbWl6ZXISFgoOU291cmNlRmlsZU1vZGUYASABKAUSFwoPU291cmNlRmls",
            "ZUZpbGVzGAIgAygJEhUKDVNvdXJjZUZpbGVEaXIYAyABKAkSGAoQU291cmNl",
            "RmlsZVN1YkRpchgEIAEoCBIaChJPcHRpbWl6YXRpb25MZXZlbDEYBSABKAUS",
            "GgoST3B0aW1pemF0aW9uTGV2ZWwyGAYgASgFEhoKEk9wdGltaXphdGlvbkxl",
            "dmVsNRgHIAEoBRIaChJPcHRpbWl6YXRpb25MZXZlbDQYCCABKAUSGgoST3B0",
            "aW1pemF0aW9uTGV2ZWwzGAkgASgFEh4KFk9wdGltaXphdGlvbkxldmVsU3Rl",
            "cHMYCiABKAUSHQoVT3B0aW1pemF0aW9uTGV2ZWxNb2RlGAsgASgFEhsKE09w",
            "dGltaXplQm9yZGVyc01vZGUYDCABKAUSFgoOT3B0aW1pemVIaWRkZW4YDSAB",
            "KAgSEwoLTWVyZ2VQb2ludHMYDiABKAgSHAoUTWVyZ2VQb2ludHNUaHJlc2hv",
            "bGQYDyABKAISEgoKTWVyZ2VGYWNlcxgQIAEoCBIbChNNZXJnZUZhY2VzVGhy",
            "ZXNob2xkGBEgASgCEh4KFktlZXBNYXRlcmlhbEJvdW5kYXJpZXMYEiABKAgS",
            "FAoMQ29tcGFjdEZhY2VzGBMgASgIEh0KFVByZXZlbnRGbGlwcGVkTm9ybWFs",
            "cxgUIAEoCBIYChBLZWVwVmVydGV4Q29sb3JzGBUgASgIEiIKGktlZXBWZXJ0",
            "ZXhDb2xvcnNCb3VuZGFyaWVzGBYgASgIEh0KFVZlcnRleENvbG9yc1RvbGVy",
            "YW5jZRgXIAEoBRITCgtLZWVwVGV4dHVyZRgYIAEoCBIYChBLZWVwVVZCb3Vu",
            "ZGFyaWVzGBkgASgIEhMKC1VWVG9sZXJhbmNlGBogASgCEhMKC0tlZXBOb3Jt",
            "YWxzGBsgASgIEhIKCk5vcm1hbE1vZGUYHCABKAUSFwoPTm9ybWFsVGhyZXNo",
            "b2xkGB0gASgCEhQKDFN5bW1ldHJ5TW9kZRgeIAEoBRIZChFTeW1tZXRyeVRv",
            "bGVyYW5jZRgfIAEoBRIYChBEZXN0RmlsZU5hbWVNb2RlGCAgASgFEhIKCkF1",
            "dG9SZW5hbWUYISABKAgSGgoSRGVzdEZpbGVOYW1lUHJlZml4GCIgASgJEhoK",
            "EkRlc3RGaWxlTmFtZVN1ZmZpeBgjIAEoCRIWCg5EZXN0Rm9sZGVyTW9kZRgk",
            "IAEoBRIWCg5EZXN0Rm9sZGVyTmFtZRglIAEoCRIaChJSZWNyZWF0ZUZvbGRl",
            "clRyZWUYJiABKAgSFgoORGVzdEZvcm1hdE1vZGUYJyABKAUSFQoNRGVzdEZv",
            "cm1hdEV4dBgoIAEoCRITCgtMb2dGaWxlUGF0aBgpIAEoCRIVCg1BcHBseU1v",
            "ZGlmaWVyGCogASgIEhcKD1ZhbGlkYXRlRGlhbG9ncxgrIAEoCGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Y3D.IBatchProOptimizer), global::Y3D.IBatchProOptimizer.Parser, new[]{ "SourceFileMode", "SourceFileFiles", "SourceFileDir", "SourceFileSubDir", "OptimizationLevel1", "OptimizationLevel2", "OptimizationLevel5", "OptimizationLevel4", "OptimizationLevel3", "OptimizationLevelSteps", "OptimizationLevelMode", "OptimizeBordersMode", "OptimizeHidden", "MergePoints", "MergePointsThreshold", "MergeFaces", "MergeFacesThreshold", "KeepMaterialBoundaries", "CompactFaces", "PreventFlippedNormals", "KeepVertexColors", "KeepVertexColorsBoundaries", "VertexColorsTolerance", "KeepTexture", "KeepUVBoundaries", "UVTolerance", "KeepNormals", "NormalMode", "NormalThreshold", "SymmetryMode", "SymmetryTolerance", "DestFileNameMode", "AutoRename", "DestFileNamePrefix", "DestFileNameSuffix", "DestFolderMode", "DestFolderName", "RecreateFolderTree", "DestFormatMode", "DestFormatExt", "LogFilePath", "ApplyModifier", "ValidateDialogs" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class IBatchProOptimizer : pb::IMessage<IBatchProOptimizer> {
    private static readonly pb::MessageParser<IBatchProOptimizer> _parser = new pb::MessageParser<IBatchProOptimizer>(() => new IBatchProOptimizer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IBatchProOptimizer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Y3D.YmaxcoreinterfaceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IBatchProOptimizer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IBatchProOptimizer(IBatchProOptimizer other) : this() {
      sourceFileMode_ = other.sourceFileMode_;
      sourceFileFiles_ = other.sourceFileFiles_.Clone();
      sourceFileDir_ = other.sourceFileDir_;
      sourceFileSubDir_ = other.sourceFileSubDir_;
      optimizationLevel1_ = other.optimizationLevel1_;
      optimizationLevel2_ = other.optimizationLevel2_;
      optimizationLevel5_ = other.optimizationLevel5_;
      optimizationLevel4_ = other.optimizationLevel4_;
      optimizationLevel3_ = other.optimizationLevel3_;
      optimizationLevelSteps_ = other.optimizationLevelSteps_;
      optimizationLevelMode_ = other.optimizationLevelMode_;
      optimizeBordersMode_ = other.optimizeBordersMode_;
      optimizeHidden_ = other.optimizeHidden_;
      mergePoints_ = other.mergePoints_;
      mergePointsThreshold_ = other.mergePointsThreshold_;
      mergeFaces_ = other.mergeFaces_;
      mergeFacesThreshold_ = other.mergeFacesThreshold_;
      keepMaterialBoundaries_ = other.keepMaterialBoundaries_;
      compactFaces_ = other.compactFaces_;
      preventFlippedNormals_ = other.preventFlippedNormals_;
      keepVertexColors_ = other.keepVertexColors_;
      keepVertexColorsBoundaries_ = other.keepVertexColorsBoundaries_;
      vertexColorsTolerance_ = other.vertexColorsTolerance_;
      keepTexture_ = other.keepTexture_;
      keepUVBoundaries_ = other.keepUVBoundaries_;
      uVTolerance_ = other.uVTolerance_;
      keepNormals_ = other.keepNormals_;
      normalMode_ = other.normalMode_;
      normalThreshold_ = other.normalThreshold_;
      symmetryMode_ = other.symmetryMode_;
      symmetryTolerance_ = other.symmetryTolerance_;
      destFileNameMode_ = other.destFileNameMode_;
      autoRename_ = other.autoRename_;
      destFileNamePrefix_ = other.destFileNamePrefix_;
      destFileNameSuffix_ = other.destFileNameSuffix_;
      destFolderMode_ = other.destFolderMode_;
      destFolderName_ = other.destFolderName_;
      recreateFolderTree_ = other.recreateFolderTree_;
      destFormatMode_ = other.destFormatMode_;
      destFormatExt_ = other.destFormatExt_;
      logFilePath_ = other.logFilePath_;
      applyModifier_ = other.applyModifier_;
      validateDialogs_ = other.validateDialogs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IBatchProOptimizer Clone() {
      return new IBatchProOptimizer(this);
    }

    /// <summary>Field number for the "SourceFileMode" field.</summary>
    public const int SourceFileModeFieldNumber = 1;
    private int sourceFileMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceFileMode {
      get { return sourceFileMode_; }
      set {
        sourceFileMode_ = value;
      }
    }

    /// <summary>Field number for the "SourceFileFiles" field.</summary>
    public const int SourceFileFilesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_sourceFileFiles_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> sourceFileFiles_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SourceFileFiles {
      get { return sourceFileFiles_; }
    }

    /// <summary>Field number for the "SourceFileDir" field.</summary>
    public const int SourceFileDirFieldNumber = 3;
    private string sourceFileDir_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourceFileDir {
      get { return sourceFileDir_; }
      set {
        sourceFileDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SourceFileSubDir" field.</summary>
    public const int SourceFileSubDirFieldNumber = 4;
    private bool sourceFileSubDir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SourceFileSubDir {
      get { return sourceFileSubDir_; }
      set {
        sourceFileSubDir_ = value;
      }
    }

    /// <summary>Field number for the "OptimizationLevel1" field.</summary>
    public const int OptimizationLevel1FieldNumber = 5;
    private int optimizationLevel1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OptimizationLevel1 {
      get { return optimizationLevel1_; }
      set {
        optimizationLevel1_ = value;
      }
    }

    /// <summary>Field number for the "OptimizationLevel2" field.</summary>
    public const int OptimizationLevel2FieldNumber = 6;
    private int optimizationLevel2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OptimizationLevel2 {
      get { return optimizationLevel2_; }
      set {
        optimizationLevel2_ = value;
      }
    }

    /// <summary>Field number for the "OptimizationLevel5" field.</summary>
    public const int OptimizationLevel5FieldNumber = 7;
    private int optimizationLevel5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OptimizationLevel5 {
      get { return optimizationLevel5_; }
      set {
        optimizationLevel5_ = value;
      }
    }

    /// <summary>Field number for the "OptimizationLevel4" field.</summary>
    public const int OptimizationLevel4FieldNumber = 8;
    private int optimizationLevel4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OptimizationLevel4 {
      get { return optimizationLevel4_; }
      set {
        optimizationLevel4_ = value;
      }
    }

    /// <summary>Field number for the "OptimizationLevel3" field.</summary>
    public const int OptimizationLevel3FieldNumber = 9;
    private int optimizationLevel3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OptimizationLevel3 {
      get { return optimizationLevel3_; }
      set {
        optimizationLevel3_ = value;
      }
    }

    /// <summary>Field number for the "OptimizationLevelSteps" field.</summary>
    public const int OptimizationLevelStepsFieldNumber = 10;
    private int optimizationLevelSteps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OptimizationLevelSteps {
      get { return optimizationLevelSteps_; }
      set {
        optimizationLevelSteps_ = value;
      }
    }

    /// <summary>Field number for the "OptimizationLevelMode" field.</summary>
    public const int OptimizationLevelModeFieldNumber = 11;
    private int optimizationLevelMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OptimizationLevelMode {
      get { return optimizationLevelMode_; }
      set {
        optimizationLevelMode_ = value;
      }
    }

    /// <summary>Field number for the "OptimizeBordersMode" field.</summary>
    public const int OptimizeBordersModeFieldNumber = 12;
    private int optimizeBordersMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OptimizeBordersMode {
      get { return optimizeBordersMode_; }
      set {
        optimizeBordersMode_ = value;
      }
    }

    /// <summary>Field number for the "OptimizeHidden" field.</summary>
    public const int OptimizeHiddenFieldNumber = 13;
    private bool optimizeHidden_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OptimizeHidden {
      get { return optimizeHidden_; }
      set {
        optimizeHidden_ = value;
      }
    }

    /// <summary>Field number for the "MergePoints" field.</summary>
    public const int MergePointsFieldNumber = 14;
    private bool mergePoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MergePoints {
      get { return mergePoints_; }
      set {
        mergePoints_ = value;
      }
    }

    /// <summary>Field number for the "MergePointsThreshold" field.</summary>
    public const int MergePointsThresholdFieldNumber = 15;
    private float mergePointsThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MergePointsThreshold {
      get { return mergePointsThreshold_; }
      set {
        mergePointsThreshold_ = value;
      }
    }

    /// <summary>Field number for the "MergeFaces" field.</summary>
    public const int MergeFacesFieldNumber = 16;
    private bool mergeFaces_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MergeFaces {
      get { return mergeFaces_; }
      set {
        mergeFaces_ = value;
      }
    }

    /// <summary>Field number for the "MergeFacesThreshold" field.</summary>
    public const int MergeFacesThresholdFieldNumber = 17;
    private float mergeFacesThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MergeFacesThreshold {
      get { return mergeFacesThreshold_; }
      set {
        mergeFacesThreshold_ = value;
      }
    }

    /// <summary>Field number for the "KeepMaterialBoundaries" field.</summary>
    public const int KeepMaterialBoundariesFieldNumber = 18;
    private bool keepMaterialBoundaries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KeepMaterialBoundaries {
      get { return keepMaterialBoundaries_; }
      set {
        keepMaterialBoundaries_ = value;
      }
    }

    /// <summary>Field number for the "CompactFaces" field.</summary>
    public const int CompactFacesFieldNumber = 19;
    private bool compactFaces_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CompactFaces {
      get { return compactFaces_; }
      set {
        compactFaces_ = value;
      }
    }

    /// <summary>Field number for the "PreventFlippedNormals" field.</summary>
    public const int PreventFlippedNormalsFieldNumber = 20;
    private bool preventFlippedNormals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PreventFlippedNormals {
      get { return preventFlippedNormals_; }
      set {
        preventFlippedNormals_ = value;
      }
    }

    /// <summary>Field number for the "KeepVertexColors" field.</summary>
    public const int KeepVertexColorsFieldNumber = 21;
    private bool keepVertexColors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KeepVertexColors {
      get { return keepVertexColors_; }
      set {
        keepVertexColors_ = value;
      }
    }

    /// <summary>Field number for the "KeepVertexColorsBoundaries" field.</summary>
    public const int KeepVertexColorsBoundariesFieldNumber = 22;
    private bool keepVertexColorsBoundaries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KeepVertexColorsBoundaries {
      get { return keepVertexColorsBoundaries_; }
      set {
        keepVertexColorsBoundaries_ = value;
      }
    }

    /// <summary>Field number for the "VertexColorsTolerance" field.</summary>
    public const int VertexColorsToleranceFieldNumber = 23;
    private int vertexColorsTolerance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VertexColorsTolerance {
      get { return vertexColorsTolerance_; }
      set {
        vertexColorsTolerance_ = value;
      }
    }

    /// <summary>Field number for the "KeepTexture" field.</summary>
    public const int KeepTextureFieldNumber = 24;
    private bool keepTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KeepTexture {
      get { return keepTexture_; }
      set {
        keepTexture_ = value;
      }
    }

    /// <summary>Field number for the "KeepUVBoundaries" field.</summary>
    public const int KeepUVBoundariesFieldNumber = 25;
    private bool keepUVBoundaries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KeepUVBoundaries {
      get { return keepUVBoundaries_; }
      set {
        keepUVBoundaries_ = value;
      }
    }

    /// <summary>Field number for the "UVTolerance" field.</summary>
    public const int UVToleranceFieldNumber = 26;
    private float uVTolerance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UVTolerance {
      get { return uVTolerance_; }
      set {
        uVTolerance_ = value;
      }
    }

    /// <summary>Field number for the "KeepNormals" field.</summary>
    public const int KeepNormalsFieldNumber = 27;
    private bool keepNormals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool KeepNormals {
      get { return keepNormals_; }
      set {
        keepNormals_ = value;
      }
    }

    /// <summary>Field number for the "NormalMode" field.</summary>
    public const int NormalModeFieldNumber = 28;
    private int normalMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NormalMode {
      get { return normalMode_; }
      set {
        normalMode_ = value;
      }
    }

    /// <summary>Field number for the "NormalThreshold" field.</summary>
    public const int NormalThresholdFieldNumber = 29;
    private float normalThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NormalThreshold {
      get { return normalThreshold_; }
      set {
        normalThreshold_ = value;
      }
    }

    /// <summary>Field number for the "SymmetryMode" field.</summary>
    public const int SymmetryModeFieldNumber = 30;
    private int symmetryMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SymmetryMode {
      get { return symmetryMode_; }
      set {
        symmetryMode_ = value;
      }
    }

    /// <summary>Field number for the "SymmetryTolerance" field.</summary>
    public const int SymmetryToleranceFieldNumber = 31;
    private int symmetryTolerance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SymmetryTolerance {
      get { return symmetryTolerance_; }
      set {
        symmetryTolerance_ = value;
      }
    }

    /// <summary>Field number for the "DestFileNameMode" field.</summary>
    public const int DestFileNameModeFieldNumber = 32;
    private int destFileNameMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestFileNameMode {
      get { return destFileNameMode_; }
      set {
        destFileNameMode_ = value;
      }
    }

    /// <summary>Field number for the "AutoRename" field.</summary>
    public const int AutoRenameFieldNumber = 33;
    private bool autoRename_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoRename {
      get { return autoRename_; }
      set {
        autoRename_ = value;
      }
    }

    /// <summary>Field number for the "DestFileNamePrefix" field.</summary>
    public const int DestFileNamePrefixFieldNumber = 34;
    private string destFileNamePrefix_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestFileNamePrefix {
      get { return destFileNamePrefix_; }
      set {
        destFileNamePrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DestFileNameSuffix" field.</summary>
    public const int DestFileNameSuffixFieldNumber = 35;
    private string destFileNameSuffix_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestFileNameSuffix {
      get { return destFileNameSuffix_; }
      set {
        destFileNameSuffix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DestFolderMode" field.</summary>
    public const int DestFolderModeFieldNumber = 36;
    private int destFolderMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestFolderMode {
      get { return destFolderMode_; }
      set {
        destFolderMode_ = value;
      }
    }

    /// <summary>Field number for the "DestFolderName" field.</summary>
    public const int DestFolderNameFieldNumber = 37;
    private string destFolderName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestFolderName {
      get { return destFolderName_; }
      set {
        destFolderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RecreateFolderTree" field.</summary>
    public const int RecreateFolderTreeFieldNumber = 38;
    private bool recreateFolderTree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RecreateFolderTree {
      get { return recreateFolderTree_; }
      set {
        recreateFolderTree_ = value;
      }
    }

    /// <summary>Field number for the "DestFormatMode" field.</summary>
    public const int DestFormatModeFieldNumber = 39;
    private int destFormatMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DestFormatMode {
      get { return destFormatMode_; }
      set {
        destFormatMode_ = value;
      }
    }

    /// <summary>Field number for the "DestFormatExt" field.</summary>
    public const int DestFormatExtFieldNumber = 40;
    private string destFormatExt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestFormatExt {
      get { return destFormatExt_; }
      set {
        destFormatExt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LogFilePath" field.</summary>
    public const int LogFilePathFieldNumber = 41;
    private string logFilePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogFilePath {
      get { return logFilePath_; }
      set {
        logFilePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ApplyModifier" field.</summary>
    public const int ApplyModifierFieldNumber = 42;
    private bool applyModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ApplyModifier {
      get { return applyModifier_; }
      set {
        applyModifier_ = value;
      }
    }

    /// <summary>Field number for the "ValidateDialogs" field.</summary>
    public const int ValidateDialogsFieldNumber = 43;
    private bool validateDialogs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ValidateDialogs {
      get { return validateDialogs_; }
      set {
        validateDialogs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IBatchProOptimizer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IBatchProOptimizer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceFileMode != other.SourceFileMode) return false;
      if(!sourceFileFiles_.Equals(other.sourceFileFiles_)) return false;
      if (SourceFileDir != other.SourceFileDir) return false;
      if (SourceFileSubDir != other.SourceFileSubDir) return false;
      if (OptimizationLevel1 != other.OptimizationLevel1) return false;
      if (OptimizationLevel2 != other.OptimizationLevel2) return false;
      if (OptimizationLevel5 != other.OptimizationLevel5) return false;
      if (OptimizationLevel4 != other.OptimizationLevel4) return false;
      if (OptimizationLevel3 != other.OptimizationLevel3) return false;
      if (OptimizationLevelSteps != other.OptimizationLevelSteps) return false;
      if (OptimizationLevelMode != other.OptimizationLevelMode) return false;
      if (OptimizeBordersMode != other.OptimizeBordersMode) return false;
      if (OptimizeHidden != other.OptimizeHidden) return false;
      if (MergePoints != other.MergePoints) return false;
      if (MergePointsThreshold != other.MergePointsThreshold) return false;
      if (MergeFaces != other.MergeFaces) return false;
      if (MergeFacesThreshold != other.MergeFacesThreshold) return false;
      if (KeepMaterialBoundaries != other.KeepMaterialBoundaries) return false;
      if (CompactFaces != other.CompactFaces) return false;
      if (PreventFlippedNormals != other.PreventFlippedNormals) return false;
      if (KeepVertexColors != other.KeepVertexColors) return false;
      if (KeepVertexColorsBoundaries != other.KeepVertexColorsBoundaries) return false;
      if (VertexColorsTolerance != other.VertexColorsTolerance) return false;
      if (KeepTexture != other.KeepTexture) return false;
      if (KeepUVBoundaries != other.KeepUVBoundaries) return false;
      if (UVTolerance != other.UVTolerance) return false;
      if (KeepNormals != other.KeepNormals) return false;
      if (NormalMode != other.NormalMode) return false;
      if (NormalThreshold != other.NormalThreshold) return false;
      if (SymmetryMode != other.SymmetryMode) return false;
      if (SymmetryTolerance != other.SymmetryTolerance) return false;
      if (DestFileNameMode != other.DestFileNameMode) return false;
      if (AutoRename != other.AutoRename) return false;
      if (DestFileNamePrefix != other.DestFileNamePrefix) return false;
      if (DestFileNameSuffix != other.DestFileNameSuffix) return false;
      if (DestFolderMode != other.DestFolderMode) return false;
      if (DestFolderName != other.DestFolderName) return false;
      if (RecreateFolderTree != other.RecreateFolderTree) return false;
      if (DestFormatMode != other.DestFormatMode) return false;
      if (DestFormatExt != other.DestFormatExt) return false;
      if (LogFilePath != other.LogFilePath) return false;
      if (ApplyModifier != other.ApplyModifier) return false;
      if (ValidateDialogs != other.ValidateDialogs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceFileMode != 0) hash ^= SourceFileMode.GetHashCode();
      hash ^= sourceFileFiles_.GetHashCode();
      if (SourceFileDir.Length != 0) hash ^= SourceFileDir.GetHashCode();
      if (SourceFileSubDir != false) hash ^= SourceFileSubDir.GetHashCode();
      if (OptimizationLevel1 != 0) hash ^= OptimizationLevel1.GetHashCode();
      if (OptimizationLevel2 != 0) hash ^= OptimizationLevel2.GetHashCode();
      if (OptimizationLevel5 != 0) hash ^= OptimizationLevel5.GetHashCode();
      if (OptimizationLevel4 != 0) hash ^= OptimizationLevel4.GetHashCode();
      if (OptimizationLevel3 != 0) hash ^= OptimizationLevel3.GetHashCode();
      if (OptimizationLevelSteps != 0) hash ^= OptimizationLevelSteps.GetHashCode();
      if (OptimizationLevelMode != 0) hash ^= OptimizationLevelMode.GetHashCode();
      if (OptimizeBordersMode != 0) hash ^= OptimizeBordersMode.GetHashCode();
      if (OptimizeHidden != false) hash ^= OptimizeHidden.GetHashCode();
      if (MergePoints != false) hash ^= MergePoints.GetHashCode();
      if (MergePointsThreshold != 0F) hash ^= MergePointsThreshold.GetHashCode();
      if (MergeFaces != false) hash ^= MergeFaces.GetHashCode();
      if (MergeFacesThreshold != 0F) hash ^= MergeFacesThreshold.GetHashCode();
      if (KeepMaterialBoundaries != false) hash ^= KeepMaterialBoundaries.GetHashCode();
      if (CompactFaces != false) hash ^= CompactFaces.GetHashCode();
      if (PreventFlippedNormals != false) hash ^= PreventFlippedNormals.GetHashCode();
      if (KeepVertexColors != false) hash ^= KeepVertexColors.GetHashCode();
      if (KeepVertexColorsBoundaries != false) hash ^= KeepVertexColorsBoundaries.GetHashCode();
      if (VertexColorsTolerance != 0) hash ^= VertexColorsTolerance.GetHashCode();
      if (KeepTexture != false) hash ^= KeepTexture.GetHashCode();
      if (KeepUVBoundaries != false) hash ^= KeepUVBoundaries.GetHashCode();
      if (UVTolerance != 0F) hash ^= UVTolerance.GetHashCode();
      if (KeepNormals != false) hash ^= KeepNormals.GetHashCode();
      if (NormalMode != 0) hash ^= NormalMode.GetHashCode();
      if (NormalThreshold != 0F) hash ^= NormalThreshold.GetHashCode();
      if (SymmetryMode != 0) hash ^= SymmetryMode.GetHashCode();
      if (SymmetryTolerance != 0) hash ^= SymmetryTolerance.GetHashCode();
      if (DestFileNameMode != 0) hash ^= DestFileNameMode.GetHashCode();
      if (AutoRename != false) hash ^= AutoRename.GetHashCode();
      if (DestFileNamePrefix.Length != 0) hash ^= DestFileNamePrefix.GetHashCode();
      if (DestFileNameSuffix.Length != 0) hash ^= DestFileNameSuffix.GetHashCode();
      if (DestFolderMode != 0) hash ^= DestFolderMode.GetHashCode();
      if (DestFolderName.Length != 0) hash ^= DestFolderName.GetHashCode();
      if (RecreateFolderTree != false) hash ^= RecreateFolderTree.GetHashCode();
      if (DestFormatMode != 0) hash ^= DestFormatMode.GetHashCode();
      if (DestFormatExt.Length != 0) hash ^= DestFormatExt.GetHashCode();
      if (LogFilePath.Length != 0) hash ^= LogFilePath.GetHashCode();
      if (ApplyModifier != false) hash ^= ApplyModifier.GetHashCode();
      if (ValidateDialogs != false) hash ^= ValidateDialogs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceFileMode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceFileMode);
      }
      sourceFileFiles_.WriteTo(output, _repeated_sourceFileFiles_codec);
      if (SourceFileDir.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SourceFileDir);
      }
      if (SourceFileSubDir != false) {
        output.WriteRawTag(32);
        output.WriteBool(SourceFileSubDir);
      }
      if (OptimizationLevel1 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(OptimizationLevel1);
      }
      if (OptimizationLevel2 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OptimizationLevel2);
      }
      if (OptimizationLevel5 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(OptimizationLevel5);
      }
      if (OptimizationLevel4 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(OptimizationLevel4);
      }
      if (OptimizationLevel3 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(OptimizationLevel3);
      }
      if (OptimizationLevelSteps != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(OptimizationLevelSteps);
      }
      if (OptimizationLevelMode != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(OptimizationLevelMode);
      }
      if (OptimizeBordersMode != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(OptimizeBordersMode);
      }
      if (OptimizeHidden != false) {
        output.WriteRawTag(104);
        output.WriteBool(OptimizeHidden);
      }
      if (MergePoints != false) {
        output.WriteRawTag(112);
        output.WriteBool(MergePoints);
      }
      if (MergePointsThreshold != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(MergePointsThreshold);
      }
      if (MergeFaces != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(MergeFaces);
      }
      if (MergeFacesThreshold != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(MergeFacesThreshold);
      }
      if (KeepMaterialBoundaries != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(KeepMaterialBoundaries);
      }
      if (CompactFaces != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(CompactFaces);
      }
      if (PreventFlippedNormals != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(PreventFlippedNormals);
      }
      if (KeepVertexColors != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(KeepVertexColors);
      }
      if (KeepVertexColorsBoundaries != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(KeepVertexColorsBoundaries);
      }
      if (VertexColorsTolerance != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(VertexColorsTolerance);
      }
      if (KeepTexture != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(KeepTexture);
      }
      if (KeepUVBoundaries != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(KeepUVBoundaries);
      }
      if (UVTolerance != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(UVTolerance);
      }
      if (KeepNormals != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(KeepNormals);
      }
      if (NormalMode != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(NormalMode);
      }
      if (NormalThreshold != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(NormalThreshold);
      }
      if (SymmetryMode != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(SymmetryMode);
      }
      if (SymmetryTolerance != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(SymmetryTolerance);
      }
      if (DestFileNameMode != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(DestFileNameMode);
      }
      if (AutoRename != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(AutoRename);
      }
      if (DestFileNamePrefix.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(DestFileNamePrefix);
      }
      if (DestFileNameSuffix.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(DestFileNameSuffix);
      }
      if (DestFolderMode != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(DestFolderMode);
      }
      if (DestFolderName.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(DestFolderName);
      }
      if (RecreateFolderTree != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(RecreateFolderTree);
      }
      if (DestFormatMode != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(DestFormatMode);
      }
      if (DestFormatExt.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(DestFormatExt);
      }
      if (LogFilePath.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(LogFilePath);
      }
      if (ApplyModifier != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(ApplyModifier);
      }
      if (ValidateDialogs != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(ValidateDialogs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceFileMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceFileMode);
      }
      size += sourceFileFiles_.CalculateSize(_repeated_sourceFileFiles_codec);
      if (SourceFileDir.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceFileDir);
      }
      if (SourceFileSubDir != false) {
        size += 1 + 1;
      }
      if (OptimizationLevel1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OptimizationLevel1);
      }
      if (OptimizationLevel2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OptimizationLevel2);
      }
      if (OptimizationLevel5 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OptimizationLevel5);
      }
      if (OptimizationLevel4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OptimizationLevel4);
      }
      if (OptimizationLevel3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OptimizationLevel3);
      }
      if (OptimizationLevelSteps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OptimizationLevelSteps);
      }
      if (OptimizationLevelMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OptimizationLevelMode);
      }
      if (OptimizeBordersMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OptimizeBordersMode);
      }
      if (OptimizeHidden != false) {
        size += 1 + 1;
      }
      if (MergePoints != false) {
        size += 1 + 1;
      }
      if (MergePointsThreshold != 0F) {
        size += 1 + 4;
      }
      if (MergeFaces != false) {
        size += 2 + 1;
      }
      if (MergeFacesThreshold != 0F) {
        size += 2 + 4;
      }
      if (KeepMaterialBoundaries != false) {
        size += 2 + 1;
      }
      if (CompactFaces != false) {
        size += 2 + 1;
      }
      if (PreventFlippedNormals != false) {
        size += 2 + 1;
      }
      if (KeepVertexColors != false) {
        size += 2 + 1;
      }
      if (KeepVertexColorsBoundaries != false) {
        size += 2 + 1;
      }
      if (VertexColorsTolerance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VertexColorsTolerance);
      }
      if (KeepTexture != false) {
        size += 2 + 1;
      }
      if (KeepUVBoundaries != false) {
        size += 2 + 1;
      }
      if (UVTolerance != 0F) {
        size += 2 + 4;
      }
      if (KeepNormals != false) {
        size += 2 + 1;
      }
      if (NormalMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NormalMode);
      }
      if (NormalThreshold != 0F) {
        size += 2 + 4;
      }
      if (SymmetryMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SymmetryMode);
      }
      if (SymmetryTolerance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SymmetryTolerance);
      }
      if (DestFileNameMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DestFileNameMode);
      }
      if (AutoRename != false) {
        size += 2 + 1;
      }
      if (DestFileNamePrefix.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DestFileNamePrefix);
      }
      if (DestFileNameSuffix.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DestFileNameSuffix);
      }
      if (DestFolderMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DestFolderMode);
      }
      if (DestFolderName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DestFolderName);
      }
      if (RecreateFolderTree != false) {
        size += 2 + 1;
      }
      if (DestFormatMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DestFormatMode);
      }
      if (DestFormatExt.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DestFormatExt);
      }
      if (LogFilePath.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LogFilePath);
      }
      if (ApplyModifier != false) {
        size += 2 + 1;
      }
      if (ValidateDialogs != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IBatchProOptimizer other) {
      if (other == null) {
        return;
      }
      if (other.SourceFileMode != 0) {
        SourceFileMode = other.SourceFileMode;
      }
      sourceFileFiles_.Add(other.sourceFileFiles_);
      if (other.SourceFileDir.Length != 0) {
        SourceFileDir = other.SourceFileDir;
      }
      if (other.SourceFileSubDir != false) {
        SourceFileSubDir = other.SourceFileSubDir;
      }
      if (other.OptimizationLevel1 != 0) {
        OptimizationLevel1 = other.OptimizationLevel1;
      }
      if (other.OptimizationLevel2 != 0) {
        OptimizationLevel2 = other.OptimizationLevel2;
      }
      if (other.OptimizationLevel5 != 0) {
        OptimizationLevel5 = other.OptimizationLevel5;
      }
      if (other.OptimizationLevel4 != 0) {
        OptimizationLevel4 = other.OptimizationLevel4;
      }
      if (other.OptimizationLevel3 != 0) {
        OptimizationLevel3 = other.OptimizationLevel3;
      }
      if (other.OptimizationLevelSteps != 0) {
        OptimizationLevelSteps = other.OptimizationLevelSteps;
      }
      if (other.OptimizationLevelMode != 0) {
        OptimizationLevelMode = other.OptimizationLevelMode;
      }
      if (other.OptimizeBordersMode != 0) {
        OptimizeBordersMode = other.OptimizeBordersMode;
      }
      if (other.OptimizeHidden != false) {
        OptimizeHidden = other.OptimizeHidden;
      }
      if (other.MergePoints != false) {
        MergePoints = other.MergePoints;
      }
      if (other.MergePointsThreshold != 0F) {
        MergePointsThreshold = other.MergePointsThreshold;
      }
      if (other.MergeFaces != false) {
        MergeFaces = other.MergeFaces;
      }
      if (other.MergeFacesThreshold != 0F) {
        MergeFacesThreshold = other.MergeFacesThreshold;
      }
      if (other.KeepMaterialBoundaries != false) {
        KeepMaterialBoundaries = other.KeepMaterialBoundaries;
      }
      if (other.CompactFaces != false) {
        CompactFaces = other.CompactFaces;
      }
      if (other.PreventFlippedNormals != false) {
        PreventFlippedNormals = other.PreventFlippedNormals;
      }
      if (other.KeepVertexColors != false) {
        KeepVertexColors = other.KeepVertexColors;
      }
      if (other.KeepVertexColorsBoundaries != false) {
        KeepVertexColorsBoundaries = other.KeepVertexColorsBoundaries;
      }
      if (other.VertexColorsTolerance != 0) {
        VertexColorsTolerance = other.VertexColorsTolerance;
      }
      if (other.KeepTexture != false) {
        KeepTexture = other.KeepTexture;
      }
      if (other.KeepUVBoundaries != false) {
        KeepUVBoundaries = other.KeepUVBoundaries;
      }
      if (other.UVTolerance != 0F) {
        UVTolerance = other.UVTolerance;
      }
      if (other.KeepNormals != false) {
        KeepNormals = other.KeepNormals;
      }
      if (other.NormalMode != 0) {
        NormalMode = other.NormalMode;
      }
      if (other.NormalThreshold != 0F) {
        NormalThreshold = other.NormalThreshold;
      }
      if (other.SymmetryMode != 0) {
        SymmetryMode = other.SymmetryMode;
      }
      if (other.SymmetryTolerance != 0) {
        SymmetryTolerance = other.SymmetryTolerance;
      }
      if (other.DestFileNameMode != 0) {
        DestFileNameMode = other.DestFileNameMode;
      }
      if (other.AutoRename != false) {
        AutoRename = other.AutoRename;
      }
      if (other.DestFileNamePrefix.Length != 0) {
        DestFileNamePrefix = other.DestFileNamePrefix;
      }
      if (other.DestFileNameSuffix.Length != 0) {
        DestFileNameSuffix = other.DestFileNameSuffix;
      }
      if (other.DestFolderMode != 0) {
        DestFolderMode = other.DestFolderMode;
      }
      if (other.DestFolderName.Length != 0) {
        DestFolderName = other.DestFolderName;
      }
      if (other.RecreateFolderTree != false) {
        RecreateFolderTree = other.RecreateFolderTree;
      }
      if (other.DestFormatMode != 0) {
        DestFormatMode = other.DestFormatMode;
      }
      if (other.DestFormatExt.Length != 0) {
        DestFormatExt = other.DestFormatExt;
      }
      if (other.LogFilePath.Length != 0) {
        LogFilePath = other.LogFilePath;
      }
      if (other.ApplyModifier != false) {
        ApplyModifier = other.ApplyModifier;
      }
      if (other.ValidateDialogs != false) {
        ValidateDialogs = other.ValidateDialogs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SourceFileMode = input.ReadInt32();
            break;
          }
          case 18: {
            sourceFileFiles_.AddEntriesFrom(input, _repeated_sourceFileFiles_codec);
            break;
          }
          case 26: {
            SourceFileDir = input.ReadString();
            break;
          }
          case 32: {
            SourceFileSubDir = input.ReadBool();
            break;
          }
          case 40: {
            OptimizationLevel1 = input.ReadInt32();
            break;
          }
          case 48: {
            OptimizationLevel2 = input.ReadInt32();
            break;
          }
          case 56: {
            OptimizationLevel5 = input.ReadInt32();
            break;
          }
          case 64: {
            OptimizationLevel4 = input.ReadInt32();
            break;
          }
          case 72: {
            OptimizationLevel3 = input.ReadInt32();
            break;
          }
          case 80: {
            OptimizationLevelSteps = input.ReadInt32();
            break;
          }
          case 88: {
            OptimizationLevelMode = input.ReadInt32();
            break;
          }
          case 96: {
            OptimizeBordersMode = input.ReadInt32();
            break;
          }
          case 104: {
            OptimizeHidden = input.ReadBool();
            break;
          }
          case 112: {
            MergePoints = input.ReadBool();
            break;
          }
          case 125: {
            MergePointsThreshold = input.ReadFloat();
            break;
          }
          case 128: {
            MergeFaces = input.ReadBool();
            break;
          }
          case 141: {
            MergeFacesThreshold = input.ReadFloat();
            break;
          }
          case 144: {
            KeepMaterialBoundaries = input.ReadBool();
            break;
          }
          case 152: {
            CompactFaces = input.ReadBool();
            break;
          }
          case 160: {
            PreventFlippedNormals = input.ReadBool();
            break;
          }
          case 168: {
            KeepVertexColors = input.ReadBool();
            break;
          }
          case 176: {
            KeepVertexColorsBoundaries = input.ReadBool();
            break;
          }
          case 184: {
            VertexColorsTolerance = input.ReadInt32();
            break;
          }
          case 192: {
            KeepTexture = input.ReadBool();
            break;
          }
          case 200: {
            KeepUVBoundaries = input.ReadBool();
            break;
          }
          case 213: {
            UVTolerance = input.ReadFloat();
            break;
          }
          case 216: {
            KeepNormals = input.ReadBool();
            break;
          }
          case 224: {
            NormalMode = input.ReadInt32();
            break;
          }
          case 237: {
            NormalThreshold = input.ReadFloat();
            break;
          }
          case 240: {
            SymmetryMode = input.ReadInt32();
            break;
          }
          case 248: {
            SymmetryTolerance = input.ReadInt32();
            break;
          }
          case 256: {
            DestFileNameMode = input.ReadInt32();
            break;
          }
          case 264: {
            AutoRename = input.ReadBool();
            break;
          }
          case 274: {
            DestFileNamePrefix = input.ReadString();
            break;
          }
          case 282: {
            DestFileNameSuffix = input.ReadString();
            break;
          }
          case 288: {
            DestFolderMode = input.ReadInt32();
            break;
          }
          case 298: {
            DestFolderName = input.ReadString();
            break;
          }
          case 304: {
            RecreateFolderTree = input.ReadBool();
            break;
          }
          case 312: {
            DestFormatMode = input.ReadInt32();
            break;
          }
          case 322: {
            DestFormatExt = input.ReadString();
            break;
          }
          case 330: {
            LogFilePath = input.ReadString();
            break;
          }
          case 336: {
            ApplyModifier = input.ReadBool();
            break;
          }
          case 344: {
            ValidateDialogs = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
