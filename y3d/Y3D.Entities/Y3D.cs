// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: y3d.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace y3d.e {

  /// <summary>Holder for reflection information generated from y3d.proto</summary>
  public static partial class Y3DReflection {

    #region Descriptor
    /// <summary>File descriptor for y3d.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Y3DReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgl5M2QucHJvdG8SA3kzZBoZZ29vZ2xlL3Byb3RvYnVmL2FueS5wcm90bxof",
            "Z29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoNeG5vcm1hbC5wcm90",
            "bxoKeW1hdC5wcm90byIqCgdZUG9pbnQzEgkKAXgYASABKAISCQoBeRgCIAEo",
            "AhIJCgF6GAMgASgCIj8KBVlCb3gzEhoKBHBtaW4YASABKAsyDC55M2QuWVBv",
            "aW50MxIaCgRwbWF4GAIgASgLMgwueTNkLllQb2ludDMiogEKCVlSZXNvdXJj",
            "ZRILCgNyaWQYASABKAkSKgoFcnR5cGUYAiABKA4yGy55M2QuWVJlc291cmNl",
            "LlJlc291cmNlVHlwZRIMCgRsaW5rGAMgASgJIk4KDFJlc291cmNlVHlwZRIK",
            "CgZCSU5BUlkQABIJCgVJTUFHRRABEg4KCkZMQVRCVUZGRVIQAhIMCghQUk9U",
            "T0JVRhADEgkKBUNBUE5QEAQiqAEKBllMaWdodBIPCgdkaWZmdXNlGAMgAygC",
            "EhAKCHNwZWN1bGFyGAQgAygCEhEKCWludGVuc2l0eRgFIAEoAhINCgVyYW5n",
            "ZRgGIAEoAhINCgVhbmdsZRgHIAEoAhIQCghleHBvbmVudBgIIAEoAhIZChFl",
            "eGNsdWRlZE1lc2hlc0lkcxgJIAMoCRIdChVpbmNsdWRlZE9ubHlNZXNoZXNJ",
            "ZHMYCiADKAkiOAoHWUNhbWVyYRIQCghyb3RhdGlvbhgDIAMoAhIOCgZ0YXJn",
            "ZXQYBCADKAISCwoDZm92GAUgASgCIt8DCgVZTWVzaBIRCgludW1fZmFjZXMY",
            "ASABKAUSGAoEYmJveBgCIAEoCzIKLnkzZC5ZQm94MxIbCgNyZXMYAyABKAsy",
            "Di55M2QuWVJlc291cmNlEiYKB3hzdGF0dXMYBSABKA4yFS55M2QuWU1lc2gu",
            "WHJlZlN0YXR1cxIiCgVtdHlwZRgGIAEoDjITLnkzZC5ZTWVzaC5NZXNoVHlw",
            "ZRIPCgd2ZXJuYW1lGAcgASgJIr4BCghNZXNoVHlwZRILCgdVbmtub3duEAAS",
            "EQoNRWRpdGFibGVfTWVzaBABEhEKDUVkaXRhYmxlX1BvbHkQAhIHCgNCb3gQ",
            "AxIKCgZTcGhlcmUQBBINCglHZW9TcGhlcmUQBRIMCghDeWxpbmRlchAGEggK",
            "BFR1YmUQBxIJCgVUb3J1cxAIEgsKB1B5cmFtaWQQCRIKCgZUZWFwb3QQChIJ",
            "CgVQbGFuZRALEgoKBlRhcmdldBAMEggKBENvbmUQDSJuCgpYcmVmU3RhdHVz",
            "EgwKCE9SSUdJTkFMEAASDgoKWFJFRl9ISUdIVBABEgwKCFhSRUZfTE9XEAIS",
            "FAoQWFJFRl9MT1dfRElTUExBWRADEgcKA0JPWBAEEgoKBk1FUkdFRBAFEgkK",
            "BUZJTkFMEAYi1AIKB1lPYmplY3QSDAoEbmFtZRgBIAEoCRIZCgNwb3MYAyAB",
            "KAsyDC55M2QuWVBvaW50MxImCgVleHRyYRgFIAMoCzIXLnkzZC5ZT2JqZWN0",
            "LkV4dHJhRW50cnkSHgoFb3R5cGUYBiABKA4yDy55M2QuT2JqZWN0VHlwZRIM",
            "CgR0YWdzGAcgAygJEg8KB2NhdGVfaWQYCCABKAUSHAoFbGlnaHQYCiABKAsy",
            "Cy55M2QuWUxpZ2h0SAASHgoGY2FtZXJhGAsgASgLMgwueTNkLllDYW1lcmFI",
            "ABIaCgRtZXNoGAwgASgLMgoueTNkLllNZXNoSAASEwoLY3VycmVudF92ZXIY",
            "DSABKAkaQgoKRXh0cmFFbnRyeRILCgNrZXkYASABKAkSIwoFdmFsdWUYAiAB",
            "KAsyFC5nb29nbGUucHJvdG9idWYuQW55OgI4AUIGCgRkYXRhIrIBCgVZQXJl",
            "YRIMCgRuYW1lGAEgASgJEhsKBmdyb3VwcxgCIAMoCzILLnkzZC5ZR3JvdXAS",
            "GgoEb2JqcxgDIAMoCzIMLnkzZC5ZT2JqZWN0EiQKBWd2ZXJzGAYgAygLMhUu",
            "eTNkLllBcmVhLkd2ZXJzRW50cnkaPAoKR3ZlcnNFbnRyeRILCgNrZXkYASAB",
            "KAkSHQoFdmFsdWUYAiABKAsyDi55M2QuWUdyb3VwVmVyOgI4ASImCglZQXJl",
            "YUxpc3QSGQoFYXJlYXMYASADKAsyCi55M2QuWUFyZWEiMwoGWUxheWVyEgwK",
            "BG5hbWUYASABKAkSGwoGZ3JvdXBzGAIgAygLMgsueTNkLllHcm91cCJ/CgZZ",
            "R3JvdXASDAoEbmFtZRgBIAEoCRIaCgRvYmpzGAIgAygLMgwueTNkLllPYmpl",
            "Y3QSHQoIY2hpbGRyZW4YAyADKAsyCy55M2QuWUdyb3VwEh4KB2d2X3R5cGUY",
            "BCABKA4yDS55M2QuR1ZlclR5cGUSDAoEeHJlZhgFIAMoCSJICglZR3JvdXBW",
            "ZXISDQoFdm5hbWUYASABKAkSHgoJZ3JvdXBEYXRhGAIgASgLMgsueTNkLllH",
            "cm91cBIMCgRzdGVwGAMgASgFIl0KCkZpbHRlclZpZXcSHgoFb3R5cGUYASAB",
            "KA4yDy55M2QuT2JqZWN0VHlwZRISCgpmYWNlX3JhbmdlGAIgASgFEg4KBnNl",
            "YXJjaBgDIAEoCRILCgNhaWQYBCABKAUibAoKRlJhbmdlSXRlbRIPCgdmX3N0",
            "YXJ0GAEgASgFEg0KBWZfZW5kGAIgASgFEh0KCGZyX2NvbG9yGAMgASgLMgsu",
            "eTNkLllDb2xvchINCgVyYXRpbxgEIAEoAhIQCghoYXNfeHJlZhgFIAEoCCJt",
            "Cg9PcHRpbWl6ZU9wdGlvbnMSEQoJdXNlX3JhbmdlGAEgASgIEhsKAmZyGAIg",
            "AygLMg8ueTNkLkZSYW5nZUl0ZW0SEQoJbWluX2hwb2x5GAMgASgFEhcKD291",
            "dF9yYW5nZV9jb3VudBgEIAEoBSItCgtSZXN1bHRSZXBseRINCgVlcnJvchgB",
            "IAEoCBIPCgdtZXNzYWdlGAIgASgJIgwKCkVtcHR5UGFyYW0iIQoLUmVuYW1l",
            "UGFyYW0SEgoKdXNlX3NlbGVjdBgBIAEoCCIeCg1PcHRpbWl6ZVBhcmFtEg0K",
            "BXJhdGlvGAEgASgCIkUKEkJhdGNoT3B0aW1pemVQYXJhbRINCgVyYXRpbxgB",
            "IAEoAhIOCgZmb2xkZXIYAiABKAkSEAoIZmlsZW5hbWUYAyABKAkiGgoLU3Ry",
            "aW5nUGFyYW0SCwoDc3RyGAEgASgJIh0KCEludFBhcmFtEhEKCWludF92YWx1",
            "ZRgBIAEoBSJGCglUZXN0UGFyYW0SEQoJdGVzdF9uYW1lGAEgASgJEiYKCGFu",
            "eXRoaW5nGAIgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueSIyCgxSZWFkeVJl",
            "c3BvbmUSIgoGc3RhdHVzGBEgASgOMhIueTNkLlNlcnZpbmdTdGF0dXMikgIK",
            "BllFdmVudBIdCgdub2V2ZW50GAEgASgLMgoueTNkLkVOb25lSAASHgoGc2Vs",
            "ZWN0GAIgASgLMgwueTNkLkVTZWxlY3RIABIaCgRtb3ZlGAMgASgLMgoueTNk",
            "LkVNb3ZlSAASHgoGcm90YXRlGAQgASgLMgwueTNkLkVSb3RhdGVIABIbCgNk",
            "ZWwYBSABKAsyDC55M2QuRURlbGV0ZUgAEicKC3NlbGVjdF9tYW55GAYgASgL",
            "MhAueTNkLkVTZWxlY3RNYW55SAASIAoHaXNvbGF0ZRgHIAEoCzINLnkzZC5F",
            "SXNvbGF0ZUgAEhwKBWNsb3NlGAggASgLMgsueTNkLkVDbG9zZUgAQgcKBWV2",
            "ZW50IgcKBUVOb25lIigKB0VTZWxlY3QSDAoEbmFtZRgBIAEoCRIPCgdpc29s",
            "YXRlGAIgASgIIiwKC0VTZWxlY3RNYW55EgwKBG5hbWUYASADKAkSDwoHaXNv",
            "bGF0ZRgCIAEoCCIWCgVFTW92ZRINCgVwb2ludBgBIAMoAiIZCgdFUm90YXRl",
            "Eg4KBnJvdGF0ZRgBIAMoAiIXCgdFRGVsZXRlEgwKBG5hbWUYASABKAkiLAoI",
            "RUlzb2xhdGUSDAoEbmFtZRgBIAEoCRISCgplbmRJc29sYXRlGAIgASgIIhgK",
            "BkVDbG9zZRIOCgZieXBhc3MYASABKAgiKwoNUmVzcG9uc2VFdmVudBINCgVl",
            "cnJvchgBIAEoCBILCgNtc2cYAiABKAkifAoHRVVud3JhcBINCgVvbmFtZRgB",
            "IAEoCRIPCgdjaGFubmVsGAIgASgFEh8KBW1heDNkGAMgASgLMg4ueTNkLk1h",
            "eFVud3JhcEgAEiUKB2JsZW5kZXIYBCABKAsyEi55M2QuQmxlbmRlclVud3Jh",
            "cEgAQgkKB3NldHRpbmciDwoNQmxlbmRlclVud3JhcCIrCglNYXhVbndyYXAS",
            "DQoFYW5nbGUYASABKAISDwoHc3BhY2luZxgCIAEoAiKKAQoIRVBhY2tpbmcS",
            "DQoFb25hbWUYASABKAkSDgoGdXZuYW1lGAIgASgJEhEKCXRpbGVfU2l6ZRgD",
            "IAEoBRIhCgdwYWNrbWF4GAQgASgLMg4ueTNkLlBhY2szRE1heEgAEiEKCHBh",
            "Y2tyZWN0GAUgASgLMg0ueTNkLlBhY2tSZWN0SABCBgoEcGFjayIsCghQYWNr",
            "UmVjdBIPCgdkZW5zaXR5GAEgASgFEg8KB3BhZGRpbmcYAiABKAIibQoJUGFj",
            "azNETWF4Eg8KB251bVRpbGUYASABKAUSEQoJbm9ybWFsaXplGAIgASgIEhcK",
            "D3JvdGF0ZV9jbHVzdGVycxgDIAEoCBISCgpmaWxsX2hvbGVzGAQgASgIEg8K",
            "B3BhZGRpbmcYBSABKAgimwEKCEVMb3dwb2x5Eg0KBW9uYW1lGAEgASgJEiMK",
            "CGxwXzNkbWF4GAIgASgLMg8ueTNkLkxQb2x5M0RNYXhIABInCgpscF9ibGVu",
            "ZGVyGAMgASgLMhEueTNkLkxQb2x5QmxlbmRlckgAEicKCmxwX21lc2hsYWIY",
            "BCABKAsyES55M2QuTFBvbHlNZXNobGFiSABCCQoHbG93dHlwZSKKAwoKTFBv",
            "bHkzRE1heBIWCg52ZXJ0ZXhfcGVyY2VudBgBIAEoAhIUCgx2ZXJ0ZXhfY291",
            "bnQYAiABKAUSMQoRb3B0aW1pemF0aW9uX21vZGUYAyABKA4yFi55M2QuTFBv",
            "bHkzRE1heC5PcE1vZGUSKwoHbm9ybWFscxgEIAEoDjIaLnkzZC5MUG9seTNE",
            "TWF4Lk5vcm1hbE1vZGUSGwoTZmF2b3JfY29tcGFjdF9mYWNlcxgFIAEoCBIf",
            "ChdwcmV2ZW50X2ZsaXBwZWRfbm9ybWFscxgGIAEoCBIcChRsb2NrX3ZlcnRl",
            "eF9wb3NpdGlvbhgHIAEoCCJGCgZPcE1vZGUSEgoOQ1JVTkNIX0JPUkRFUlMQ",
            "ABITCg9QUk9URUNUX0JPUkRFUlMQARITCg9FWENMVURFX0JPUkRFUlMQAiJK",
            "CgpOb3JtYWxNb2RlEhIKDkNSVU5DSF9OT1JNQUxTEAASEwoPUFJPVEVDVF9O",
            "T1JNQUxTEAESEwoPRVhDTFVERV9OT1JNQUxTEAIiHQoMTFBvbHlCbGVuZGVy",
            "Eg0KBXJhdGlvGAEgASgCIg4KDExQb2x5TWVzaGxhYiK+AQoHRU5vcm1hbBIN",
            "CgVvbmFtZRgBIAEoCRIPCgdsb3dwb2x5GAIgASgJEhAKCGhpZ2hwb2x5GAMg",
            "ASgJEhAKCHRleF9zaXplGAQgASgNEg8KB291dF90ZXgYBSABKAkSKAoMbm9y",
            "bWFsXzNkbWF4GAYgASgLMhAueTNkLk5vcm1hbDNETWF4SAASKwoObm9ybWFs",
            "X3hub3JtYWwYByABKAsyES54bm9ybWFsLlNldHRpbmdzSABCBwoFbnR5cGUi",
            "DQoLTm9ybWFsM0RNYXgi1QEKC1Byb2plY3RJbmZvEg0KBXBuYW1lGAEgASgJ",
            "EhQKDHByb2plY3RfcGF0aBgCIAEoCRImCgJ0cxgDIAEoCzIaLmdvb2dsZS5w",
            "cm90b2J1Zi5UaW1lc3RhbXASKgoMb3B0aW1pemVfb3BzGAUgASgLMhQueTNk",
            "Lk9wdGltaXplT3B0aW9ucxIeCgVmdmlldxgGIAMoCzIPLnkzZC5GaWx0ZXJW",
            "aWV3EhYKDm9wdGltaXplX3JhdGlvGAcgASgCEhUKDW9yaWdpbmFsX3BhdGgY",
            "CCABKAkijQEKC1NldHRpbmdEYXRhEhEKCWFzZXRfbmFtZRgBIAEoCRIoCgRk",
            "YXRhGAIgAygLMhoueTNkLlNldHRpbmdEYXRhLkRhdGFFbnRyeRpBCglEYXRh",
            "RW50cnkSCwoDa2V5GAEgASgJEiMKBXZhbHVlGAIgASgLMhQuZ29vZ2xlLnBy",
            "b3RvYnVmLkFueToCOAEiPwoIUFNldHRpbmcSHwoFZXh0cmEYASABKAsyEC55",
            "M2QuU2V0dGluZ0RhdGESEgoKbWF4X3JlY2VudBgCIAEoBSKmAgoHWVN5c3Rl",
            "bRIWCg53b3JraW5nX2ZvbGRlchgBIAEoCRImCgxkZWZhdWx0X2luZm8YAiAB",
            "KAsyEC55M2QuUHJvamVjdEluZm8SJgoPZGVmYXVsdF9zZXR0aW5nGAMgASgL",
            "Mg0ueTNkLlBTZXR0aW5nEiIKCHByb2plY3RzGAQgAygLMhAueTNkLlByb2pl",
            "Y3RJbmZvEiQKBGFwcHMYBSADKAsyFi55M2QuWVN5c3RlbS5BcHBzRW50cnkS",
            "LAoNbWFzdGVyX3NlcnZlchgGIAEoCzIVLnkzZC5NYXN0ZXJTZXJ2ZXJJbmZv",
            "GjsKCUFwcHNFbnRyeRILCgNrZXkYASABKAkSHQoFdmFsdWUYAiABKAsyDi55",
            "M2QuV29ya2VyQXBwOgI4ASJGCg9OZXdQcm9qZWN0UGFyYW0SDQoFZm5hbWUY",
            "ASABKAkSDgoGZm9sZGVyGAIgASgJEhQKDHByb2plY3RfcGF0aBgDIAEoCSJu",
            "ChBSZXNwb25zZU5Qcm9qZWN0Eh8KBXBJbmZvGAEgASgLMhAueTNkLlByb2pl",
            "Y3RJbmZvEhsKA3lhbBgCIAEoCzIOLnkzZC5ZQXJlYUxpc3QSCwoDZXJyGAMg",
            "ASgIEg8KB21lc3NhZ2UYBCABKAkinAEKCllKb2JBY3Rpb24SHgoGdW53cmFw",
            "GAEgASgLMgwueTNkLkVVbndyYXBIABIdCgRwYWNrGAIgASgLMg0ueTNkLkVQ",
            "YWNraW5nSAASIAoHbG93cG9seRgDIAEoCzINLnkzZC5FTG93cG9seUgAEiMK",
            "C2Jha2Vfbm9ybWFsGAQgASgLMgwueTNkLkVOb3JtYWxIAEIICgZhY3Rpb24i",
            "pwEKBFlKb2ISDQoFam5hbWUYASABKAkSHAoDYWN0GAIgAygLMg8ueTNkLllK",
            "b2JBY3Rpb24SGQoDb2JqGAMgASgLMgwueTNkLllPYmplY3QSGgoEb2JqcxgE",
            "IAMoCzIMLnkzZC5ZT2JqZWN0EhsKA291dBgFIAEoCzIOLnkzZC5ZSXRlbU1l",
            "c2gSHgoFdGVzdHMYByADKAsyDy55M2QuVGVzdE9iamVjdCIjCghZSm9iTGlz",
            "dBIXCgRqb2JzGAEgAygLMgkueTNkLllKb2IiywEKB1lXb3JrZXISCwoDd2lk",
            "GAEgASgFEg0KBXduYW1lGAIgASgJEhIKCm1hY2hpbmVfaXAYAyABKAkSEwoL",
            "cG9ydF9sb2FkZXIYBCABKAUSEAoIcG9ydF9tYXgYBSABKAUSEgoKcHJvY2Vz",
            "c19pZBgGIAEoBRIiCgZzdGF0dXMYByABKA4yEi55M2QuU2VydmluZ1N0YXR1",
            "cxIeCgV3dHlwZRgIIAEoDjIPLnkzZC5Xb3JrZXJUeXBlEhEKCW5ldF9zdGF0",
            "ZRgKIAEoBSIsCgtZV29ya2VyTGlzdBIdCgd3b3JrZXJzGAEgAygLMgwueTNk",
            "LllXb3JrZXIiZAoLV29ya2VyUGFyYW0SDQoDd2lkGAEgASgFSAASDwoFd25h",
            "bWUYAiABKAlIABIeCgZ3b3JrZXIYAyABKAsyDC55M2QuWVdvcmtlckgAEgwK",
            "AmlwGAQgASgJSABCBwoFd3R5cGUiUQoOQWxsV29ya2VyUGFyYW0SDgoGc3Rh",
            "dHVzGAEgASgFEg8KB3JlZnJlc2gYAiABKAgSHgoHbWFjaGluZRgDIAEoCzIN",
            "LnkzZC5ZTWFjaGluZSKSAQoOWVdvcmtlclJlcXVlc3QSEwoLY2FsbF9pbl9h",
            "cHAYASABKAgSDgoGc2xpZW50GAIgASgIEhsKA2FwcBgDIAEoCzIOLnkzZC5X",
            "b3JrZXJBcHASHgoHbWFjaGluZRgEIAEoCzINLnkzZC5ZTWFjaGluZRIeCgV3",
            "dHlwZRgFIAEoDjIPLnkzZC5Xb3JrZXJUeXBlIjsKCVdvcmtlckFwcBINCgV3",
            "bmFtZRgBIAEoCRIQCghwYXRoX3J1bhgCIAEoCRINCgVleHRyYRgDIAEoCSJ9",
            "Cg9ZV29ya2VyUmVzcG9uc2USHwoFd2xpc3QYASABKAsyEC55M2QuWVdvcmtl",
            "ckxpc3QSHAoGd29ya2VyGAIgASgLMgwueTNkLllXb3JrZXISDQoFZXJyb3IY",
            "AyABKAgSDwoHbWVzc2FnZRgEIAEoCRILCgN3aWQYBSABKAUiVwoQTWFzdGVy",
            "U2VydmVySW5mbxINCgVtbmFtZRgBIAEoCRIPCgdhZGRyZXNzGAIgASgJEgwK",
            "BHBvcnQYBSABKAUSFQoNc2hhcmVkX2ZvbGRlchgDIAEoCSJFCghZTWFjaGlu",
            "ZRINCgVtbmFtZRgBIAEoCRISCgppcF9hZGRyZXNzGAIgASgJEhYKDndvcmtp",
            "bmdfZm9sZGVyGAMgASgJIsABCgVZVXNlchIKCgJpZBgBIAEoCRIQCgh1c2Vy",
            "bmFtZRgCIAEoCRIQCghwYXNzd29yZBgDIAEoCRIOCgZhcGlrZXkYBCABKAkS",
            "IgoEcm9sZRgFIAEoDjIULnkzZC5ZVXNlci5ZVXNlclJvbGUSIgoIc2V0dGlu",
            "Z3MYBiABKAsyEC55M2QuVXNlclNldHRpbmciLwoJWVVzZXJSb2xlEgkKBUFE",
            "TUlOEAASCgoGTEVBREVSEAESCwoHREVGQVVMVBACIqECCgtVc2VyU2V0dGlu",
            "ZxIRCgl3b3Jrc3BhY2UYAiABKAkSEAoIbmlja25hbWUYAyABKAkSEQoJbWFz",
            "dGVyX2lwGAQgASgJEjAKCHByb2plY3RzGAUgAygLMh4ueTNkLlVzZXJTZXR0",
            "aW5nLlByb2plY3RzRW50cnkSKAoEYXBwcxgBIAMoCzIaLnkzZC5Vc2VyU2V0",
            "dGluZy5BcHBzRW50cnkaQQoNUHJvamVjdHNFbnRyeRILCgNrZXkYASABKAkS",
            "HwoFdmFsdWUYAiABKAsyEC55M2QuUHJvamVjdEluZm86AjgBGjsKCUFwcHNF",
            "bnRyeRILCgNrZXkYASABKAkSHQoFdmFsdWUYAiABKAsyDi55M2QuV29ya2Vy",
            "QXBwOgI4ASJfCglVc2VyUGFyYW0SDQoFdW5hbWUYASABKAkSEAoIcGFzc3dv",
            "cmQYAiABKAkSDQoFdG9rZW4YAyABKAkSIgoIdXNldHRpbmcYBCABKAsyEC55",
            "M2QuVXNlclNldHRpbmcijAEKDFVzZXJSZXNwb25zZRIYCgR1c2VyGAEgASgL",
            "MgoueTNkLllVc2VyEh0KA3JlcBgCIAEoCzIQLnkzZC5SZXN1bHRSZXBseRIf",
            "CgV3bGlzdBgDIAEoCzIQLnkzZC5ZV29ya2VyTGlzdBIiCgh1c2V0dGluZxgE",
            "IAEoCzIQLnkzZC5Vc2VyU2V0dGluZyK0AQoHVmVyVGVzdBIKCgJpZBgBIAEo",
            "CRINCgV2bm90ZRgCIAEoCRIPCgVvbmFtZRgEIAEoCUgAEg8KBWduYW1lGAUg",
            "ASgJSAASFgoDbWF0GAcgASgLMgkueTNkLllNYXQSHAoEbW1hdBgIIAEoCzIO",
            "LnkzZC5ZTXVsdGlNYXQSDQoFdXZtYXAYCSADKAkSHgoHbWFwX291dBgKIAEo",
            "CzINLnkzZC5ZQmFzZU1hcEIHCgV0bmFtZSJHCglZTGlzdFRlc3QSHAoGb3Rl",
            "c3RzGAEgAygLMgwueTNkLlZlclRlc3QSHAoGZ3Rlc3RzGAIgAygLMgwueTNk",
            "LlZlclRlc3Qi8AEKDFVzZXJUZXN0RGF0YRItCgZ1dGVzdHMYASADKAsyHS55",
            "M2QuVXNlclRlc3REYXRhLlV0ZXN0c0VudHJ5EjEKCHZlcnNpb25zGAIgAygL",
            "Mh8ueTNkLlVzZXJUZXN0RGF0YS5WZXJzaW9uc0VudHJ5Gj0KC1V0ZXN0c0Vu",
            "dHJ5EgsKA2tleRgBIAEoCRIdCgV2YWx1ZRgCIAEoCzIOLnkzZC5ZTGlzdFRl",
            "c3Q6AjgBGj8KDVZlcnNpb25zRW50cnkSCwoDa2V5GAEgASgJEh0KBXZhbHVl",
            "GAIgASgLMg4ueTNkLllMaXN0VGVzdDoCOAEiegoJWUl0ZW1NZXNoEhsKCGJh",
            "a2VfbWF0GAEgASgLMgkueTNkLllNYXQSGgoDbWFwGAIgASgLMg0ueTNkLllC",
            "YXNlTWFwEhgKBG1lc2gYAyABKAsyCi55M2QuWU1lc2gSGgoGbWVzaGVzGAQg",
            "AygLMgoueTNkLllNZXNoIosBCgpUZXN0T2JqZWN0Eg4KBmFjdGl2ZRgBIAEo",
            "CBIfCgxvcmlnaW5hbF9tYXQYAiABKAsyCS55M2QuWU1hdBINCgV0bmFtZRgD",
            "IAEoCRINCgVvbmFtZRgEIAEoCRIRCglzYXZlX3BhdGgYCSABKAkSGwoDb3V0",
            "GAogASgLMg4ueTNkLllJdGVtTWVzaCI/Cg5NYWtlNFRlc3RQYXJhbRINCgVv",
            "bmFtZRgBIAEoCRIeCgdsb3dwb2x5GAIgAygLMg0ueTNkLkVMb3dwb2x5IjoK",
            "ClRlc3RPUGFyYW0SCgoCaWQYASABKAUSDQoFb25hbWUYAiABKAkSEQoJbG93",
            "X3JhdGlvGAMgASgCIr4BCg1Jbml0VGVzdFBhcmFtEg0KBXRuYW1lGAEgASgJ",
            "EgsKA3RpZBgCIAEoCRITCgt0ZXN0X2ZvbGRlchgDIAEoCRIeCgdsb3dwb2x5",
            "GAQgASgLMg0ueTNkLkVMb3dwb2x5EhwKBnVud3JhcBgFIAEoCzIMLnkzZC5F",
            "VW53cmFwEhsKBHBhY2sYBiABKAsyDS55M2QuRVBhY2tpbmcSIQoLYmFrZV9u",
            "b3JtYWwYByABKAsyDC55M2QuRU5vcm1hbCKTAQoQSW5pdFRlc3RSZXNwb25z",
            "ZRIdCgNyZXAYASABKAsyEC55M2QuUmVzdWx0UmVwbHkSEgoKaGFzX3Vud3Jh",
            "cBgCIAEoCBIQCghoYXNfcGFjaxgDIAEoCBIPCgdoYXNfbG93GAQgASgIEhIK",
            "Cmhhc19ub3JtYWwYBSABKAgSFQoNaHNzX2Jha2VfZnVsbBgGIAEoCCpHCgpP",
            "YmplY3RUeXBlEgwKCEdFT01FVFJZEAASCQoFTElHSFQQARIKCgZDQU1FUkEQ",
            "AhIJCgVTSEFQRRADEgkKBU9USEVSEAQqPwoIR1ZlclR5cGUSCgoGTk9fVkVS",
            "EAASDAoIT1JJR0lOQUwQARILCgdJTl9CQUtFEAISDAoIU1RBTkRBUkQQAypS",
            "Cg1TZXJ2aW5nU3RhdHVzEgsKB1VOS05PV04QABILCgdTRVJWSU5HEAESDwoL",
            "Tk9UX1NFUlZJTkcQAhIWChJOT1RfQ09OTkVDVF9NQVNURVIQAypKCgpXb3Jr",
            "ZXJUeXBlEggKBEZSRUUQABIPCgtNQUlOX1dPUktFUhABEg4KClNVQl9XT1JL",
            "RVIQAhIRCg1SRU1PVEVfV09SS0VSEANCCKoCBXkzZC5lYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::xnormal.XnormalReflection.Descriptor, global::y3d.e.YmatReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::y3d.e.ObjectType), typeof(global::y3d.e.GVerType), typeof(global::y3d.e.ServingStatus), typeof(global::y3d.e.WorkerType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YPoint3), global::y3d.e.YPoint3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YBox3), global::y3d.e.YBox3.Parser, new[]{ "Pmin", "Pmax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YResource), global::y3d.e.YResource.Parser, new[]{ "Rid", "Rtype", "Link" }, null, new[]{ typeof(global::y3d.e.YResource.Types.ResourceType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YLight), global::y3d.e.YLight.Parser, new[]{ "Diffuse", "Specular", "Intensity", "Range", "Angle", "Exponent", "ExcludedMeshesIds", "IncludedOnlyMeshesIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YCamera), global::y3d.e.YCamera.Parser, new[]{ "Rotation", "Target", "Fov" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YMesh), global::y3d.e.YMesh.Parser, new[]{ "NumFaces", "Bbox", "Res", "Xstatus", "Mtype", "Vername" }, null, new[]{ typeof(global::y3d.e.YMesh.Types.MeshType), typeof(global::y3d.e.YMesh.Types.XrefStatus) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YObject), global::y3d.e.YObject.Parser, new[]{ "Name", "Pos", "Extra", "Otype", "Tags", "CateId", "Light", "Camera", "Mesh", "CurrentVer" }, new[]{ "Data" }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YArea), global::y3d.e.YArea.Parser, new[]{ "Name", "Groups", "Objs", "Gvers" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YAreaList), global::y3d.e.YAreaList.Parser, new[]{ "Areas" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YLayer), global::y3d.e.YLayer.Parser, new[]{ "Name", "Groups" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YGroup), global::y3d.e.YGroup.Parser, new[]{ "Name", "Objs", "Children", "GvType", "Xref" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YGroupVer), global::y3d.e.YGroupVer.Parser, new[]{ "Vname", "GroupData", "Step" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.FilterView), global::y3d.e.FilterView.Parser, new[]{ "Otype", "FaceRange", "Search", "Aid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.FRangeItem), global::y3d.e.FRangeItem.Parser, new[]{ "FStart", "FEnd", "FrColor", "Ratio", "HasXref" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.OptimizeOptions), global::y3d.e.OptimizeOptions.Parser, new[]{ "UseRange", "Fr", "MinHpoly", "OutRangeCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ResultReply), global::y3d.e.ResultReply.Parser, new[]{ "Error", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.EmptyParam), global::y3d.e.EmptyParam.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.RenameParam), global::y3d.e.RenameParam.Parser, new[]{ "UseSelect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.OptimizeParam), global::y3d.e.OptimizeParam.Parser, new[]{ "Ratio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.BatchOptimizeParam), global::y3d.e.BatchOptimizeParam.Parser, new[]{ "Ratio", "Folder", "Filename" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.StringParam), global::y3d.e.StringParam.Parser, new[]{ "Str" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.IntParam), global::y3d.e.IntParam.Parser, new[]{ "IntValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.TestParam), global::y3d.e.TestParam.Parser, new[]{ "TestName", "Anything" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ReadyRespone), global::y3d.e.ReadyRespone.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YEvent), global::y3d.e.YEvent.Parser, new[]{ "Noevent", "Select", "Move", "Rotate", "Del", "SelectMany", "Isolate", "Close" }, new[]{ "Event" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ENone), global::y3d.e.ENone.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ESelect), global::y3d.e.ESelect.Parser, new[]{ "Name", "Isolate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ESelectMany), global::y3d.e.ESelectMany.Parser, new[]{ "Name", "Isolate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.EMove), global::y3d.e.EMove.Parser, new[]{ "Point" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ERotate), global::y3d.e.ERotate.Parser, new[]{ "Rotate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.EDelete), global::y3d.e.EDelete.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.EIsolate), global::y3d.e.EIsolate.Parser, new[]{ "Name", "EndIsolate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.EClose), global::y3d.e.EClose.Parser, new[]{ "Bypass" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ResponseEvent), global::y3d.e.ResponseEvent.Parser, new[]{ "Error", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.EUnwrap), global::y3d.e.EUnwrap.Parser, new[]{ "Oname", "Channel", "Max3D", "Blender" }, new[]{ "Setting" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.BlenderUnwrap), global::y3d.e.BlenderUnwrap.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.MaxUnwrap), global::y3d.e.MaxUnwrap.Parser, new[]{ "Angle", "Spacing" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.EPacking), global::y3d.e.EPacking.Parser, new[]{ "Oname", "Uvname", "TileSize", "Packmax", "Packrect" }, new[]{ "Pack" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.PackRect), global::y3d.e.PackRect.Parser, new[]{ "Density", "Padding" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.Pack3DMax), global::y3d.e.Pack3DMax.Parser, new[]{ "NumTile", "Normalize", "RotateClusters", "FillHoles", "Padding" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ELowpoly), global::y3d.e.ELowpoly.Parser, new[]{ "Oname", "Lp3Dmax", "LpBlender", "LpMeshlab" }, new[]{ "Lowtype" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.LPoly3DMax), global::y3d.e.LPoly3DMax.Parser, new[]{ "VertexPercent", "VertexCount", "OptimizationMode", "Normals", "FavorCompactFaces", "PreventFlippedNormals", "LockVertexPosition" }, null, new[]{ typeof(global::y3d.e.LPoly3DMax.Types.OpMode), typeof(global::y3d.e.LPoly3DMax.Types.NormalMode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.LPolyBlender), global::y3d.e.LPolyBlender.Parser, new[]{ "Ratio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.LPolyMeshlab), global::y3d.e.LPolyMeshlab.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ENormal), global::y3d.e.ENormal.Parser, new[]{ "Oname", "Lowpoly", "Highpoly", "TexSize", "OutTex", "Normal3Dmax", "NormalXnormal" }, new[]{ "Ntype" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.Normal3DMax), global::y3d.e.Normal3DMax.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ProjectInfo), global::y3d.e.ProjectInfo.Parser, new[]{ "Pname", "ProjectPath", "Ts", "OptimizeOps", "Fview", "OptimizeRatio", "OriginalPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.SettingData), global::y3d.e.SettingData.Parser, new[]{ "AsetName", "Data" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.PSetting), global::y3d.e.PSetting.Parser, new[]{ "Extra", "MaxRecent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YSystem), global::y3d.e.YSystem.Parser, new[]{ "WorkingFolder", "DefaultInfo", "DefaultSetting", "Projects", "Apps", "MasterServer" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.NewProjectParam), global::y3d.e.NewProjectParam.Parser, new[]{ "Fname", "Folder", "ProjectPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.ResponseNProject), global::y3d.e.ResponseNProject.Parser, new[]{ "PInfo", "Yal", "Err", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YJobAction), global::y3d.e.YJobAction.Parser, new[]{ "Unwrap", "Pack", "Lowpoly", "BakeNormal" }, new[]{ "Action" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YJob), global::y3d.e.YJob.Parser, new[]{ "Jname", "Act", "Obj", "Objs", "Out", "Tests" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YJobList), global::y3d.e.YJobList.Parser, new[]{ "Jobs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YWorker), global::y3d.e.YWorker.Parser, new[]{ "Wid", "Wname", "MachineIp", "PortLoader", "PortMax", "ProcessId", "Status", "Wtype", "NetState" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YWorkerList), global::y3d.e.YWorkerList.Parser, new[]{ "Workers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.WorkerParam), global::y3d.e.WorkerParam.Parser, new[]{ "Wid", "Wname", "Worker", "Ip" }, new[]{ "Wtype" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.AllWorkerParam), global::y3d.e.AllWorkerParam.Parser, new[]{ "Status", "Refresh", "Machine" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YWorkerRequest), global::y3d.e.YWorkerRequest.Parser, new[]{ "CallInApp", "Slient", "App", "Machine", "Wtype" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.WorkerApp), global::y3d.e.WorkerApp.Parser, new[]{ "Wname", "PathRun", "Extra" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YWorkerResponse), global::y3d.e.YWorkerResponse.Parser, new[]{ "Wlist", "Worker", "Error", "Message", "Wid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.MasterServerInfo), global::y3d.e.MasterServerInfo.Parser, new[]{ "Mname", "Address", "Port", "SharedFolder" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YMachine), global::y3d.e.YMachine.Parser, new[]{ "Mname", "IpAddress", "WorkingFolder" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YUser), global::y3d.e.YUser.Parser, new[]{ "Id", "Username", "Password", "Apikey", "Role", "Settings" }, null, new[]{ typeof(global::y3d.e.YUser.Types.YUserRole) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.UserSetting), global::y3d.e.UserSetting.Parser, new[]{ "Workspace", "Nickname", "MasterIp", "Projects", "Apps" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.UserParam), global::y3d.e.UserParam.Parser, new[]{ "Uname", "Password", "Token", "Usetting" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.UserResponse), global::y3d.e.UserResponse.Parser, new[]{ "User", "Rep", "Wlist", "Usetting" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.VerTest), global::y3d.e.VerTest.Parser, new[]{ "Id", "Vnote", "Oname", "Gname", "Mat", "Mmat", "Uvmap", "MapOut" }, new[]{ "Tname" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YListTest), global::y3d.e.YListTest.Parser, new[]{ "Otests", "Gtests" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.UserTestData), global::y3d.e.UserTestData.Parser, new[]{ "Utests", "Versions" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.YItemMesh), global::y3d.e.YItemMesh.Parser, new[]{ "BakeMat", "Map", "Mesh", "Meshes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.TestObject), global::y3d.e.TestObject.Parser, new[]{ "Active", "OriginalMat", "Tname", "Oname", "SavePath", "Out" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.Make4TestParam), global::y3d.e.Make4TestParam.Parser, new[]{ "Oname", "Lowpoly" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.TestOParam), global::y3d.e.TestOParam.Parser, new[]{ "Id", "Oname", "LowRatio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.InitTestParam), global::y3d.e.InitTestParam.Parser, new[]{ "Tname", "Tid", "TestFolder", "Lowpoly", "Unwrap", "Pack", "BakeNormal" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::y3d.e.InitTestResponse), global::y3d.e.InitTestResponse.Parser, new[]{ "Rep", "HasUnwrap", "HasPack", "HasLow", "HasNormal", "HssBakeFull" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///  ------------------------------ 
  /// </summary>
  public enum ObjectType {
    [pbr::OriginalName("GEOMETRY")] Geometry = 0,
    [pbr::OriginalName("LIGHT")] Light = 1,
    [pbr::OriginalName("CAMERA")] Camera = 2,
    [pbr::OriginalName("SHAPE")] Shape = 3,
    [pbr::OriginalName("OTHER")] Other = 4,
  }

  public enum GVerType {
    [pbr::OriginalName("NO_VER")] NoVer = 0,
    [pbr::OriginalName("ORIGINAL")] Original = 1,
    [pbr::OriginalName("IN_BAKE")] InBake = 2,
    [pbr::OriginalName("STANDARD")] Standard = 3,
  }

  public enum ServingStatus {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("SERVING")] Serving = 1,
    [pbr::OriginalName("NOT_SERVING")] NotServing = 2,
    [pbr::OriginalName("NOT_CONNECT_MASTER")] NotConnectMaster = 3,
  }

  /// <summary>
  ///  ------------------------------ WORKER,
  /// </summary>
  public enum WorkerType {
    [pbr::OriginalName("FREE")] Free = 0,
    [pbr::OriginalName("MAIN_WORKER")] MainWorker = 1,
    [pbr::OriginalName("SUB_WORKER")] SubWorker = 2,
    [pbr::OriginalName("REMOTE_WORKER")] RemoteWorker = 3,
  }

  #endregion

  #region Messages
  public sealed partial class YPoint3 : pb::IMessage<YPoint3> {
    private static readonly pb::MessageParser<YPoint3> _parser = new pb::MessageParser<YPoint3>(() => new YPoint3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YPoint3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YPoint3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YPoint3(YPoint3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YPoint3 Clone() {
      return new YPoint3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YPoint3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YPoint3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YPoint3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YBox3 : pb::IMessage<YBox3> {
    private static readonly pb::MessageParser<YBox3> _parser = new pb::MessageParser<YBox3>(() => new YBox3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YBox3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YBox3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YBox3(YBox3 other) : this() {
      Pmin = other.pmin_ != null ? other.Pmin.Clone() : null;
      Pmax = other.pmax_ != null ? other.Pmax.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YBox3 Clone() {
      return new YBox3(this);
    }

    /// <summary>Field number for the "pmin" field.</summary>
    public const int PminFieldNumber = 1;
    private global::y3d.e.YPoint3 pmin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YPoint3 Pmin {
      get { return pmin_; }
      set {
        pmin_ = value;
      }
    }

    /// <summary>Field number for the "pmax" field.</summary>
    public const int PmaxFieldNumber = 2;
    private global::y3d.e.YPoint3 pmax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YPoint3 Pmax {
      get { return pmax_; }
      set {
        pmax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YBox3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YBox3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pmin, other.Pmin)) return false;
      if (!object.Equals(Pmax, other.Pmax)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pmin_ != null) hash ^= Pmin.GetHashCode();
      if (pmax_ != null) hash ^= Pmax.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pmin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pmin);
      }
      if (pmax_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pmax);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pmin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pmin);
      }
      if (pmax_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pmax);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YBox3 other) {
      if (other == null) {
        return;
      }
      if (other.pmin_ != null) {
        if (pmin_ == null) {
          pmin_ = new global::y3d.e.YPoint3();
        }
        Pmin.MergeFrom(other.Pmin);
      }
      if (other.pmax_ != null) {
        if (pmax_ == null) {
          pmax_ = new global::y3d.e.YPoint3();
        }
        Pmax.MergeFrom(other.Pmax);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pmin_ == null) {
              pmin_ = new global::y3d.e.YPoint3();
            }
            input.ReadMessage(pmin_);
            break;
          }
          case 18: {
            if (pmax_ == null) {
              pmax_ = new global::y3d.e.YPoint3();
            }
            input.ReadMessage(pmax_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YResource : pb::IMessage<YResource> {
    private static readonly pb::MessageParser<YResource> _parser = new pb::MessageParser<YResource>(() => new YResource());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YResource> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YResource() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YResource(YResource other) : this() {
      rid_ = other.rid_;
      rtype_ = other.rtype_;
      link_ = other.link_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YResource Clone() {
      return new YResource(this);
    }

    /// <summary>Field number for the "rid" field.</summary>
    public const int RidFieldNumber = 1;
    private string rid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Rid {
      get { return rid_; }
      set {
        rid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rtype" field.</summary>
    public const int RtypeFieldNumber = 2;
    private global::y3d.e.YResource.Types.ResourceType rtype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YResource.Types.ResourceType Rtype {
      get { return rtype_; }
      set {
        rtype_ = value;
      }
    }

    /// <summary>Field number for the "link" field.</summary>
    public const int LinkFieldNumber = 3;
    private string link_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Link {
      get { return link_; }
      set {
        link_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YResource);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YResource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rid != other.Rid) return false;
      if (Rtype != other.Rtype) return false;
      if (Link != other.Link) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rid.Length != 0) hash ^= Rid.GetHashCode();
      if (Rtype != 0) hash ^= Rtype.GetHashCode();
      if (Link.Length != 0) hash ^= Link.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Rid);
      }
      if (Rtype != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Rtype);
      }
      if (Link.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Link);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Rid);
      }
      if (Rtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Rtype);
      }
      if (Link.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Link);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YResource other) {
      if (other == null) {
        return;
      }
      if (other.Rid.Length != 0) {
        Rid = other.Rid;
      }
      if (other.Rtype != 0) {
        Rtype = other.Rtype;
      }
      if (other.Link.Length != 0) {
        Link = other.Link;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Rid = input.ReadString();
            break;
          }
          case 16: {
            rtype_ = (global::y3d.e.YResource.Types.ResourceType) input.ReadEnum();
            break;
          }
          case 26: {
            Link = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the YResource message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ResourceType {
        [pbr::OriginalName("BINARY")] Binary = 0,
        [pbr::OriginalName("IMAGE")] Image = 1,
        [pbr::OriginalName("FLATBUFFER")] Flatbuffer = 2,
        [pbr::OriginalName("PROTOBUF")] Protobuf = 3,
        [pbr::OriginalName("CAPNP")] Capnp = 4,
      }

    }
    #endregion

  }

  public sealed partial class YLight : pb::IMessage<YLight> {
    private static readonly pb::MessageParser<YLight> _parser = new pb::MessageParser<YLight>(() => new YLight());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YLight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YLight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YLight(YLight other) : this() {
      diffuse_ = other.diffuse_.Clone();
      specular_ = other.specular_.Clone();
      intensity_ = other.intensity_;
      range_ = other.range_;
      angle_ = other.angle_;
      exponent_ = other.exponent_;
      excludedMeshesIds_ = other.excludedMeshesIds_.Clone();
      includedOnlyMeshesIds_ = other.includedOnlyMeshesIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YLight Clone() {
      return new YLight(this);
    }

    /// <summary>Field number for the "diffuse" field.</summary>
    public const int DiffuseFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_diffuse_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> diffuse_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Diffuse {
      get { return diffuse_; }
    }

    /// <summary>Field number for the "specular" field.</summary>
    public const int SpecularFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_specular_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> specular_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Specular {
      get { return specular_; }
    }

    /// <summary>Field number for the "intensity" field.</summary>
    public const int IntensityFieldNumber = 5;
    private float intensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Intensity {
      get { return intensity_; }
      set {
        intensity_ = value;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 6;
    private float range_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 7;
    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "exponent" field.</summary>
    public const int ExponentFieldNumber = 8;
    private float exponent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Exponent {
      get { return exponent_; }
      set {
        exponent_ = value;
      }
    }

    /// <summary>Field number for the "excludedMeshesIds" field.</summary>
    public const int ExcludedMeshesIdsFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_excludedMeshesIds_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> excludedMeshesIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ExcludedMeshesIds {
      get { return excludedMeshesIds_; }
    }

    /// <summary>Field number for the "includedOnlyMeshesIds" field.</summary>
    public const int IncludedOnlyMeshesIdsFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_includedOnlyMeshesIds_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> includedOnlyMeshesIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> IncludedOnlyMeshesIds {
      get { return includedOnlyMeshesIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YLight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YLight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!diffuse_.Equals(other.diffuse_)) return false;
      if(!specular_.Equals(other.specular_)) return false;
      if (Intensity != other.Intensity) return false;
      if (Range != other.Range) return false;
      if (Angle != other.Angle) return false;
      if (Exponent != other.Exponent) return false;
      if(!excludedMeshesIds_.Equals(other.excludedMeshesIds_)) return false;
      if(!includedOnlyMeshesIds_.Equals(other.includedOnlyMeshesIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= diffuse_.GetHashCode();
      hash ^= specular_.GetHashCode();
      if (Intensity != 0F) hash ^= Intensity.GetHashCode();
      if (Range != 0F) hash ^= Range.GetHashCode();
      if (Angle != 0F) hash ^= Angle.GetHashCode();
      if (Exponent != 0F) hash ^= Exponent.GetHashCode();
      hash ^= excludedMeshesIds_.GetHashCode();
      hash ^= includedOnlyMeshesIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      diffuse_.WriteTo(output, _repeated_diffuse_codec);
      specular_.WriteTo(output, _repeated_specular_codec);
      if (Intensity != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Intensity);
      }
      if (Range != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Range);
      }
      if (Angle != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Angle);
      }
      if (Exponent != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Exponent);
      }
      excludedMeshesIds_.WriteTo(output, _repeated_excludedMeshesIds_codec);
      includedOnlyMeshesIds_.WriteTo(output, _repeated_includedOnlyMeshesIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += diffuse_.CalculateSize(_repeated_diffuse_codec);
      size += specular_.CalculateSize(_repeated_specular_codec);
      if (Intensity != 0F) {
        size += 1 + 4;
      }
      if (Range != 0F) {
        size += 1 + 4;
      }
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (Exponent != 0F) {
        size += 1 + 4;
      }
      size += excludedMeshesIds_.CalculateSize(_repeated_excludedMeshesIds_codec);
      size += includedOnlyMeshesIds_.CalculateSize(_repeated_includedOnlyMeshesIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YLight other) {
      if (other == null) {
        return;
      }
      diffuse_.Add(other.diffuse_);
      specular_.Add(other.specular_);
      if (other.Intensity != 0F) {
        Intensity = other.Intensity;
      }
      if (other.Range != 0F) {
        Range = other.Range;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      if (other.Exponent != 0F) {
        Exponent = other.Exponent;
      }
      excludedMeshesIds_.Add(other.excludedMeshesIds_);
      includedOnlyMeshesIds_.Add(other.includedOnlyMeshesIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26:
          case 29: {
            diffuse_.AddEntriesFrom(input, _repeated_diffuse_codec);
            break;
          }
          case 34:
          case 37: {
            specular_.AddEntriesFrom(input, _repeated_specular_codec);
            break;
          }
          case 45: {
            Intensity = input.ReadFloat();
            break;
          }
          case 53: {
            Range = input.ReadFloat();
            break;
          }
          case 61: {
            Angle = input.ReadFloat();
            break;
          }
          case 69: {
            Exponent = input.ReadFloat();
            break;
          }
          case 74: {
            excludedMeshesIds_.AddEntriesFrom(input, _repeated_excludedMeshesIds_codec);
            break;
          }
          case 82: {
            includedOnlyMeshesIds_.AddEntriesFrom(input, _repeated_includedOnlyMeshesIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YCamera : pb::IMessage<YCamera> {
    private static readonly pb::MessageParser<YCamera> _parser = new pb::MessageParser<YCamera>(() => new YCamera());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YCamera> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YCamera() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YCamera(YCamera other) : this() {
      rotation_ = other.rotation_.Clone();
      target_ = other.target_.Clone();
      fov_ = other.fov_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YCamera Clone() {
      return new YCamera(this);
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_rotation_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> rotation_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Rotation {
      get { return rotation_; }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_target_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> target_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Target {
      get { return target_; }
    }

    /// <summary>Field number for the "fov" field.</summary>
    public const int FovFieldNumber = 5;
    private float fov_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Fov {
      get { return fov_; }
      set {
        fov_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YCamera);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YCamera other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rotation_.Equals(other.rotation_)) return false;
      if(!target_.Equals(other.target_)) return false;
      if (Fov != other.Fov) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rotation_.GetHashCode();
      hash ^= target_.GetHashCode();
      if (Fov != 0F) hash ^= Fov.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rotation_.WriteTo(output, _repeated_rotation_codec);
      target_.WriteTo(output, _repeated_target_codec);
      if (Fov != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Fov);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rotation_.CalculateSize(_repeated_rotation_codec);
      size += target_.CalculateSize(_repeated_target_codec);
      if (Fov != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YCamera other) {
      if (other == null) {
        return;
      }
      rotation_.Add(other.rotation_);
      target_.Add(other.target_);
      if (other.Fov != 0F) {
        Fov = other.Fov;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26:
          case 29: {
            rotation_.AddEntriesFrom(input, _repeated_rotation_codec);
            break;
          }
          case 34:
          case 37: {
            target_.AddEntriesFrom(input, _repeated_target_codec);
            break;
          }
          case 45: {
            Fov = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YMesh : pb::IMessage<YMesh> {
    private static readonly pb::MessageParser<YMesh> _parser = new pb::MessageParser<YMesh>(() => new YMesh());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YMesh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMesh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMesh(YMesh other) : this() {
      numFaces_ = other.numFaces_;
      Bbox = other.bbox_ != null ? other.Bbox.Clone() : null;
      Res = other.res_ != null ? other.Res.Clone() : null;
      xstatus_ = other.xstatus_;
      mtype_ = other.mtype_;
      vername_ = other.vername_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMesh Clone() {
      return new YMesh(this);
    }

    /// <summary>Field number for the "num_faces" field.</summary>
    public const int NumFacesFieldNumber = 1;
    private int numFaces_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumFaces {
      get { return numFaces_; }
      set {
        numFaces_ = value;
      }
    }

    /// <summary>Field number for the "bbox" field.</summary>
    public const int BboxFieldNumber = 2;
    private global::y3d.e.YBox3 bbox_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YBox3 Bbox {
      get { return bbox_; }
      set {
        bbox_ = value;
      }
    }

    /// <summary>Field number for the "res" field.</summary>
    public const int ResFieldNumber = 3;
    private global::y3d.e.YResource res_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YResource Res {
      get { return res_; }
      set {
        res_ = value;
      }
    }

    /// <summary>Field number for the "xstatus" field.</summary>
    public const int XstatusFieldNumber = 5;
    private global::y3d.e.YMesh.Types.XrefStatus xstatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMesh.Types.XrefStatus Xstatus {
      get { return xstatus_; }
      set {
        xstatus_ = value;
      }
    }

    /// <summary>Field number for the "mtype" field.</summary>
    public const int MtypeFieldNumber = 6;
    private global::y3d.e.YMesh.Types.MeshType mtype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMesh.Types.MeshType Mtype {
      get { return mtype_; }
      set {
        mtype_ = value;
      }
    }

    /// <summary>Field number for the "vername" field.</summary>
    public const int VernameFieldNumber = 7;
    private string vername_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Vername {
      get { return vername_; }
      set {
        vername_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YMesh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YMesh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumFaces != other.NumFaces) return false;
      if (!object.Equals(Bbox, other.Bbox)) return false;
      if (!object.Equals(Res, other.Res)) return false;
      if (Xstatus != other.Xstatus) return false;
      if (Mtype != other.Mtype) return false;
      if (Vername != other.Vername) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumFaces != 0) hash ^= NumFaces.GetHashCode();
      if (bbox_ != null) hash ^= Bbox.GetHashCode();
      if (res_ != null) hash ^= Res.GetHashCode();
      if (Xstatus != 0) hash ^= Xstatus.GetHashCode();
      if (Mtype != 0) hash ^= Mtype.GetHashCode();
      if (Vername.Length != 0) hash ^= Vername.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumFaces != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumFaces);
      }
      if (bbox_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Bbox);
      }
      if (res_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Res);
      }
      if (Xstatus != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Xstatus);
      }
      if (Mtype != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Mtype);
      }
      if (Vername.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Vername);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumFaces != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumFaces);
      }
      if (bbox_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bbox);
      }
      if (res_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Res);
      }
      if (Xstatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Xstatus);
      }
      if (Mtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mtype);
      }
      if (Vername.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Vername);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YMesh other) {
      if (other == null) {
        return;
      }
      if (other.NumFaces != 0) {
        NumFaces = other.NumFaces;
      }
      if (other.bbox_ != null) {
        if (bbox_ == null) {
          bbox_ = new global::y3d.e.YBox3();
        }
        Bbox.MergeFrom(other.Bbox);
      }
      if (other.res_ != null) {
        if (res_ == null) {
          res_ = new global::y3d.e.YResource();
        }
        Res.MergeFrom(other.Res);
      }
      if (other.Xstatus != 0) {
        Xstatus = other.Xstatus;
      }
      if (other.Mtype != 0) {
        Mtype = other.Mtype;
      }
      if (other.Vername.Length != 0) {
        Vername = other.Vername;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumFaces = input.ReadInt32();
            break;
          }
          case 18: {
            if (bbox_ == null) {
              bbox_ = new global::y3d.e.YBox3();
            }
            input.ReadMessage(bbox_);
            break;
          }
          case 26: {
            if (res_ == null) {
              res_ = new global::y3d.e.YResource();
            }
            input.ReadMessage(res_);
            break;
          }
          case 40: {
            xstatus_ = (global::y3d.e.YMesh.Types.XrefStatus) input.ReadEnum();
            break;
          }
          case 48: {
            mtype_ = (global::y3d.e.YMesh.Types.MeshType) input.ReadEnum();
            break;
          }
          case 58: {
            Vername = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the YMesh message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum MeshType {
        [pbr::OriginalName("Unknown")] Unknown = 0,
        [pbr::OriginalName("Editable_Mesh")] EditableMesh = 1,
        [pbr::OriginalName("Editable_Poly")] EditablePoly = 2,
        [pbr::OriginalName("Box")] Box = 3,
        [pbr::OriginalName("Sphere")] Sphere = 4,
        [pbr::OriginalName("GeoSphere")] GeoSphere = 5,
        [pbr::OriginalName("Cylinder")] Cylinder = 6,
        [pbr::OriginalName("Tube")] Tube = 7,
        [pbr::OriginalName("Torus")] Torus = 8,
        [pbr::OriginalName("Pyramid")] Pyramid = 9,
        [pbr::OriginalName("Teapot")] Teapot = 10,
        [pbr::OriginalName("Plane")] Plane = 11,
        [pbr::OriginalName("Target")] Target = 12,
        [pbr::OriginalName("Cone")] Cone = 13,
      }

      public enum XrefStatus {
        [pbr::OriginalName("ORIGINAL")] Original = 0,
        [pbr::OriginalName("XREF_HIGHT")] XrefHight = 1,
        [pbr::OriginalName("XREF_LOW")] XrefLow = 2,
        [pbr::OriginalName("XREF_LOW_DISPLAY")] XrefLowDisplay = 3,
        [pbr::OriginalName("BOX")] Box = 4,
        [pbr::OriginalName("MERGED")] Merged = 5,
        [pbr::OriginalName("FINAL")] Final = 6,
      }

    }
    #endregion

  }

  public sealed partial class YObject : pb::IMessage<YObject> {
    private static readonly pb::MessageParser<YObject> _parser = new pb::MessageParser<YObject>(() => new YObject());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YObject(YObject other) : this() {
      name_ = other.name_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      extra_ = other.extra_.Clone();
      otype_ = other.otype_;
      tags_ = other.tags_.Clone();
      cateId_ = other.cateId_;
      currentVer_ = other.currentVer_;
      switch (other.DataCase) {
        case DataOneofCase.Light:
          Light = other.Light.Clone();
          break;
        case DataOneofCase.Camera:
          Camera = other.Camera.Clone();
          break;
        case DataOneofCase.Mesh:
          Mesh = other.Mesh.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YObject Clone() {
      return new YObject(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private global::y3d.e.YPoint3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YPoint3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 5;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_extra_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 42);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> extra_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Extra {
      get { return extra_; }
    }

    /// <summary>Field number for the "otype" field.</summary>
    public const int OtypeFieldNumber = 6;
    private global::y3d.e.ObjectType otype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ObjectType Otype {
      get { return otype_; }
      set {
        otype_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_tags_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> tags_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "cate_id" field.</summary>
    public const int CateIdFieldNumber = 8;
    private int cateId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CateId {
      get { return cateId_; }
      set {
        cateId_ = value;
      }
    }

    /// <summary>Field number for the "light" field.</summary>
    public const int LightFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YLight Light {
      get { return dataCase_ == DataOneofCase.Light ? (global::y3d.e.YLight) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Light;
      }
    }

    /// <summary>Field number for the "camera" field.</summary>
    public const int CameraFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YCamera Camera {
      get { return dataCase_ == DataOneofCase.Camera ? (global::y3d.e.YCamera) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Camera;
      }
    }

    /// <summary>Field number for the "mesh" field.</summary>
    public const int MeshFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMesh Mesh {
      get { return dataCase_ == DataOneofCase.Mesh ? (global::y3d.e.YMesh) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Mesh;
      }
    }

    /// <summary>Field number for the "current_ver" field.</summary>
    public const int CurrentVerFieldNumber = 13;
    private string currentVer_ = "";
    /// <summary>
    ///  TestObject ver_obj=13;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentVer {
      get { return currentVer_; }
      set {
        currentVer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Light = 10,
      Camera = 11,
      Mesh = 12,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (!Extra.Equals(other.Extra)) return false;
      if (Otype != other.Otype) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if (CateId != other.CateId) return false;
      if (!object.Equals(Light, other.Light)) return false;
      if (!object.Equals(Camera, other.Camera)) return false;
      if (!object.Equals(Mesh, other.Mesh)) return false;
      if (CurrentVer != other.CurrentVer) return false;
      if (DataCase != other.DataCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      hash ^= Extra.GetHashCode();
      if (Otype != 0) hash ^= Otype.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (CateId != 0) hash ^= CateId.GetHashCode();
      if (dataCase_ == DataOneofCase.Light) hash ^= Light.GetHashCode();
      if (dataCase_ == DataOneofCase.Camera) hash ^= Camera.GetHashCode();
      if (dataCase_ == DataOneofCase.Mesh) hash ^= Mesh.GetHashCode();
      if (CurrentVer.Length != 0) hash ^= CurrentVer.GetHashCode();
      hash ^= (int) dataCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (pos_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pos);
      }
      extra_.WriteTo(output, _map_extra_codec);
      if (Otype != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Otype);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (CateId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CateId);
      }
      if (dataCase_ == DataOneofCase.Light) {
        output.WriteRawTag(82);
        output.WriteMessage(Light);
      }
      if (dataCase_ == DataOneofCase.Camera) {
        output.WriteRawTag(90);
        output.WriteMessage(Camera);
      }
      if (dataCase_ == DataOneofCase.Mesh) {
        output.WriteRawTag(98);
        output.WriteMessage(Mesh);
      }
      if (CurrentVer.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(CurrentVer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      size += extra_.CalculateSize(_map_extra_codec);
      if (Otype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Otype);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (CateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CateId);
      }
      if (dataCase_ == DataOneofCase.Light) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Light);
      }
      if (dataCase_ == DataOneofCase.Camera) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Camera);
      }
      if (dataCase_ == DataOneofCase.Mesh) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mesh);
      }
      if (CurrentVer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentVer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YObject other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::y3d.e.YPoint3();
        }
        Pos.MergeFrom(other.Pos);
      }
      extra_.Add(other.extra_);
      if (other.Otype != 0) {
        Otype = other.Otype;
      }
      tags_.Add(other.tags_);
      if (other.CateId != 0) {
        CateId = other.CateId;
      }
      if (other.CurrentVer.Length != 0) {
        CurrentVer = other.CurrentVer;
      }
      switch (other.DataCase) {
        case DataOneofCase.Light:
          Light = other.Light;
          break;
        case DataOneofCase.Camera:
          Camera = other.Camera;
          break;
        case DataOneofCase.Mesh:
          Mesh = other.Mesh;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            if (pos_ == null) {
              pos_ = new global::y3d.e.YPoint3();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 42: {
            extra_.AddEntriesFrom(input, _map_extra_codec);
            break;
          }
          case 48: {
            otype_ = (global::y3d.e.ObjectType) input.ReadEnum();
            break;
          }
          case 58: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 64: {
            CateId = input.ReadInt32();
            break;
          }
          case 82: {
            global::y3d.e.YLight subBuilder = new global::y3d.e.YLight();
            if (dataCase_ == DataOneofCase.Light) {
              subBuilder.MergeFrom(Light);
            }
            input.ReadMessage(subBuilder);
            Light = subBuilder;
            break;
          }
          case 90: {
            global::y3d.e.YCamera subBuilder = new global::y3d.e.YCamera();
            if (dataCase_ == DataOneofCase.Camera) {
              subBuilder.MergeFrom(Camera);
            }
            input.ReadMessage(subBuilder);
            Camera = subBuilder;
            break;
          }
          case 98: {
            global::y3d.e.YMesh subBuilder = new global::y3d.e.YMesh();
            if (dataCase_ == DataOneofCase.Mesh) {
              subBuilder.MergeFrom(Mesh);
            }
            input.ReadMessage(subBuilder);
            Mesh = subBuilder;
            break;
          }
          case 106: {
            CurrentVer = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YArea : pb::IMessage<YArea> {
    private static readonly pb::MessageParser<YArea> _parser = new pb::MessageParser<YArea>(() => new YArea());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YArea> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YArea() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YArea(YArea other) : this() {
      name_ = other.name_;
      groups_ = other.groups_.Clone();
      objs_ = other.objs_.Clone();
      gvers_ = other.gvers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YArea Clone() {
      return new YArea(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::y3d.e.YGroup> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(18, global::y3d.e.YGroup.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YGroup> groups_ = new pbc::RepeatedField<global::y3d.e.YGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YGroup> Groups {
      get { return groups_; }
    }

    /// <summary>Field number for the "objs" field.</summary>
    public const int ObjsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::y3d.e.YObject> _repeated_objs_codec
        = pb::FieldCodec.ForMessage(26, global::y3d.e.YObject.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YObject> objs_ = new pbc::RepeatedField<global::y3d.e.YObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YObject> Objs {
      get { return objs_; }
    }

    /// <summary>Field number for the "gvers" field.</summary>
    public const int GversFieldNumber = 6;
    private static readonly pbc::MapField<string, global::y3d.e.YGroupVer>.Codec _map_gvers_codec
        = new pbc::MapField<string, global::y3d.e.YGroupVer>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::y3d.e.YGroupVer.Parser), 50);
    private readonly pbc::MapField<string, global::y3d.e.YGroupVer> gvers_ = new pbc::MapField<string, global::y3d.e.YGroupVer>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::y3d.e.YGroupVer> Gvers {
      get { return gvers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YArea);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YArea other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!groups_.Equals(other.groups_)) return false;
      if(!objs_.Equals(other.objs_)) return false;
      if (!Gvers.Equals(other.Gvers)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= groups_.GetHashCode();
      hash ^= objs_.GetHashCode();
      hash ^= Gvers.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      groups_.WriteTo(output, _repeated_groups_codec);
      objs_.WriteTo(output, _repeated_objs_codec);
      gvers_.WriteTo(output, _map_gvers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += groups_.CalculateSize(_repeated_groups_codec);
      size += objs_.CalculateSize(_repeated_objs_codec);
      size += gvers_.CalculateSize(_map_gvers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YArea other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      groups_.Add(other.groups_);
      objs_.Add(other.objs_);
      gvers_.Add(other.gvers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
          case 26: {
            objs_.AddEntriesFrom(input, _repeated_objs_codec);
            break;
          }
          case 50: {
            gvers_.AddEntriesFrom(input, _map_gvers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YAreaList : pb::IMessage<YAreaList> {
    private static readonly pb::MessageParser<YAreaList> _parser = new pb::MessageParser<YAreaList>(() => new YAreaList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YAreaList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YAreaList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YAreaList(YAreaList other) : this() {
      areas_ = other.areas_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YAreaList Clone() {
      return new YAreaList(this);
    }

    /// <summary>Field number for the "areas" field.</summary>
    public const int AreasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::y3d.e.YArea> _repeated_areas_codec
        = pb::FieldCodec.ForMessage(10, global::y3d.e.YArea.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YArea> areas_ = new pbc::RepeatedField<global::y3d.e.YArea>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YArea> Areas {
      get { return areas_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YAreaList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YAreaList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!areas_.Equals(other.areas_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= areas_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      areas_.WriteTo(output, _repeated_areas_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += areas_.CalculateSize(_repeated_areas_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YAreaList other) {
      if (other == null) {
        return;
      }
      areas_.Add(other.areas_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            areas_.AddEntriesFrom(input, _repeated_areas_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YLayer : pb::IMessage<YLayer> {
    private static readonly pb::MessageParser<YLayer> _parser = new pb::MessageParser<YLayer>(() => new YLayer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YLayer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YLayer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YLayer(YLayer other) : this() {
      name_ = other.name_;
      groups_ = other.groups_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YLayer Clone() {
      return new YLayer(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groups" field.</summary>
    public const int GroupsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::y3d.e.YGroup> _repeated_groups_codec
        = pb::FieldCodec.ForMessage(18, global::y3d.e.YGroup.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YGroup> groups_ = new pbc::RepeatedField<global::y3d.e.YGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YGroup> Groups {
      get { return groups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YLayer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YLayer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!groups_.Equals(other.groups_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= groups_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      groups_.WriteTo(output, _repeated_groups_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += groups_.CalculateSize(_repeated_groups_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YLayer other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      groups_.Add(other.groups_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            groups_.AddEntriesFrom(input, _repeated_groups_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YGroup : pb::IMessage<YGroup> {
    private static readonly pb::MessageParser<YGroup> _parser = new pb::MessageParser<YGroup>(() => new YGroup());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YGroup(YGroup other) : this() {
      name_ = other.name_;
      objs_ = other.objs_.Clone();
      children_ = other.children_.Clone();
      gvType_ = other.gvType_;
      xref_ = other.xref_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YGroup Clone() {
      return new YGroup(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "objs" field.</summary>
    public const int ObjsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::y3d.e.YObject> _repeated_objs_codec
        = pb::FieldCodec.ForMessage(18, global::y3d.e.YObject.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YObject> objs_ = new pbc::RepeatedField<global::y3d.e.YObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YObject> Objs {
      get { return objs_; }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 3;
    private static readonly pb::FieldCodec<global::y3d.e.YGroup> _repeated_children_codec
        = pb::FieldCodec.ForMessage(26, global::y3d.e.YGroup.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YGroup> children_ = new pbc::RepeatedField<global::y3d.e.YGroup>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YGroup> Children {
      get { return children_; }
    }

    /// <summary>Field number for the "gv_type" field.</summary>
    public const int GvTypeFieldNumber = 4;
    private global::y3d.e.GVerType gvType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.GVerType GvType {
      get { return gvType_; }
      set {
        gvType_ = value;
      }
    }

    /// <summary>Field number for the "xref" field.</summary>
    public const int XrefFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_xref_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> xref_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Xref {
      get { return xref_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!objs_.Equals(other.objs_)) return false;
      if(!children_.Equals(other.children_)) return false;
      if (GvType != other.GvType) return false;
      if(!xref_.Equals(other.xref_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= objs_.GetHashCode();
      hash ^= children_.GetHashCode();
      if (GvType != 0) hash ^= GvType.GetHashCode();
      hash ^= xref_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      objs_.WriteTo(output, _repeated_objs_codec);
      children_.WriteTo(output, _repeated_children_codec);
      if (GvType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) GvType);
      }
      xref_.WriteTo(output, _repeated_xref_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += objs_.CalculateSize(_repeated_objs_codec);
      size += children_.CalculateSize(_repeated_children_codec);
      if (GvType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GvType);
      }
      size += xref_.CalculateSize(_repeated_xref_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YGroup other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      objs_.Add(other.objs_);
      children_.Add(other.children_);
      if (other.GvType != 0) {
        GvType = other.GvType;
      }
      xref_.Add(other.xref_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            objs_.AddEntriesFrom(input, _repeated_objs_codec);
            break;
          }
          case 26: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
          case 32: {
            gvType_ = (global::y3d.e.GVerType) input.ReadEnum();
            break;
          }
          case 42: {
            xref_.AddEntriesFrom(input, _repeated_xref_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YGroupVer : pb::IMessage<YGroupVer> {
    private static readonly pb::MessageParser<YGroupVer> _parser = new pb::MessageParser<YGroupVer>(() => new YGroupVer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YGroupVer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YGroupVer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YGroupVer(YGroupVer other) : this() {
      vname_ = other.vname_;
      GroupData = other.groupData_ != null ? other.GroupData.Clone() : null;
      step_ = other.step_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YGroupVer Clone() {
      return new YGroupVer(this);
    }

    /// <summary>Field number for the "vname" field.</summary>
    public const int VnameFieldNumber = 1;
    private string vname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Vname {
      get { return vname_; }
      set {
        vname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "groupData" field.</summary>
    public const int GroupDataFieldNumber = 2;
    private global::y3d.e.YGroup groupData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YGroup GroupData {
      get { return groupData_; }
      set {
        groupData_ = value;
      }
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 3;
    private int step_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YGroupVer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YGroupVer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Vname != other.Vname) return false;
      if (!object.Equals(GroupData, other.GroupData)) return false;
      if (Step != other.Step) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Vname.Length != 0) hash ^= Vname.GetHashCode();
      if (groupData_ != null) hash ^= GroupData.GetHashCode();
      if (Step != 0) hash ^= Step.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Vname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Vname);
      }
      if (groupData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GroupData);
      }
      if (Step != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Step);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Vname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Vname);
      }
      if (groupData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupData);
      }
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Step);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YGroupVer other) {
      if (other == null) {
        return;
      }
      if (other.Vname.Length != 0) {
        Vname = other.Vname;
      }
      if (other.groupData_ != null) {
        if (groupData_ == null) {
          groupData_ = new global::y3d.e.YGroup();
        }
        GroupData.MergeFrom(other.GroupData);
      }
      if (other.Step != 0) {
        Step = other.Step;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Vname = input.ReadString();
            break;
          }
          case 18: {
            if (groupData_ == null) {
              groupData_ = new global::y3d.e.YGroup();
            }
            input.ReadMessage(groupData_);
            break;
          }
          case 24: {
            Step = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FilterView : pb::IMessage<FilterView> {
    private static readonly pb::MessageParser<FilterView> _parser = new pb::MessageParser<FilterView>(() => new FilterView());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FilterView> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterView() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterView(FilterView other) : this() {
      otype_ = other.otype_;
      faceRange_ = other.faceRange_;
      search_ = other.search_;
      aid_ = other.aid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterView Clone() {
      return new FilterView(this);
    }

    /// <summary>Field number for the "otype" field.</summary>
    public const int OtypeFieldNumber = 1;
    private global::y3d.e.ObjectType otype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ObjectType Otype {
      get { return otype_; }
      set {
        otype_ = value;
      }
    }

    /// <summary>Field number for the "face_range" field.</summary>
    public const int FaceRangeFieldNumber = 2;
    private int faceRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceRange {
      get { return faceRange_; }
      set {
        faceRange_ = value;
      }
    }

    /// <summary>Field number for the "search" field.</summary>
    public const int SearchFieldNumber = 3;
    private string search_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Search {
      get { return search_; }
      set {
        search_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "aid" field.</summary>
    public const int AidFieldNumber = 4;
    private int aid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Aid {
      get { return aid_; }
      set {
        aid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FilterView);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FilterView other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Otype != other.Otype) return false;
      if (FaceRange != other.FaceRange) return false;
      if (Search != other.Search) return false;
      if (Aid != other.Aid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Otype != 0) hash ^= Otype.GetHashCode();
      if (FaceRange != 0) hash ^= FaceRange.GetHashCode();
      if (Search.Length != 0) hash ^= Search.GetHashCode();
      if (Aid != 0) hash ^= Aid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Otype != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Otype);
      }
      if (FaceRange != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FaceRange);
      }
      if (Search.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Search);
      }
      if (Aid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Aid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Otype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Otype);
      }
      if (FaceRange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceRange);
      }
      if (Search.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Search);
      }
      if (Aid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Aid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FilterView other) {
      if (other == null) {
        return;
      }
      if (other.Otype != 0) {
        Otype = other.Otype;
      }
      if (other.FaceRange != 0) {
        FaceRange = other.FaceRange;
      }
      if (other.Search.Length != 0) {
        Search = other.Search;
      }
      if (other.Aid != 0) {
        Aid = other.Aid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            otype_ = (global::y3d.e.ObjectType) input.ReadEnum();
            break;
          }
          case 16: {
            FaceRange = input.ReadInt32();
            break;
          }
          case 26: {
            Search = input.ReadString();
            break;
          }
          case 32: {
            Aid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  ------------------------------ Optimize highpoly by faces count
  /// </summary>
  public sealed partial class FRangeItem : pb::IMessage<FRangeItem> {
    private static readonly pb::MessageParser<FRangeItem> _parser = new pb::MessageParser<FRangeItem>(() => new FRangeItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FRangeItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FRangeItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FRangeItem(FRangeItem other) : this() {
      fStart_ = other.fStart_;
      fEnd_ = other.fEnd_;
      FrColor = other.frColor_ != null ? other.FrColor.Clone() : null;
      ratio_ = other.ratio_;
      hasXref_ = other.hasXref_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FRangeItem Clone() {
      return new FRangeItem(this);
    }

    /// <summary>Field number for the "f_start" field.</summary>
    public const int FStartFieldNumber = 1;
    private int fStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FStart {
      get { return fStart_; }
      set {
        fStart_ = value;
      }
    }

    /// <summary>Field number for the "f_end" field.</summary>
    public const int FEndFieldNumber = 2;
    private int fEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FEnd {
      get { return fEnd_; }
      set {
        fEnd_ = value;
      }
    }

    /// <summary>Field number for the "fr_color" field.</summary>
    public const int FrColorFieldNumber = 3;
    private global::y3d.e.YColor frColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YColor FrColor {
      get { return frColor_; }
      set {
        frColor_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 4;
    private float ratio_;
    /// <summary>
    ///  lowpoly ratio
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "has_xref" field.</summary>
    public const int HasXrefFieldNumber = 5;
    private bool hasXref_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasXref {
      get { return hasXref_; }
      set {
        hasXref_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FRangeItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FRangeItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FStart != other.FStart) return false;
      if (FEnd != other.FEnd) return false;
      if (!object.Equals(FrColor, other.FrColor)) return false;
      if (Ratio != other.Ratio) return false;
      if (HasXref != other.HasXref) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FStart != 0) hash ^= FStart.GetHashCode();
      if (FEnd != 0) hash ^= FEnd.GetHashCode();
      if (frColor_ != null) hash ^= FrColor.GetHashCode();
      if (Ratio != 0F) hash ^= Ratio.GetHashCode();
      if (HasXref != false) hash ^= HasXref.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FStart != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FStart);
      }
      if (FEnd != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FEnd);
      }
      if (frColor_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FrColor);
      }
      if (Ratio != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Ratio);
      }
      if (HasXref != false) {
        output.WriteRawTag(40);
        output.WriteBool(HasXref);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FStart);
      }
      if (FEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FEnd);
      }
      if (frColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrColor);
      }
      if (Ratio != 0F) {
        size += 1 + 4;
      }
      if (HasXref != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FRangeItem other) {
      if (other == null) {
        return;
      }
      if (other.FStart != 0) {
        FStart = other.FStart;
      }
      if (other.FEnd != 0) {
        FEnd = other.FEnd;
      }
      if (other.frColor_ != null) {
        if (frColor_ == null) {
          frColor_ = new global::y3d.e.YColor();
        }
        FrColor.MergeFrom(other.FrColor);
      }
      if (other.Ratio != 0F) {
        Ratio = other.Ratio;
      }
      if (other.HasXref != false) {
        HasXref = other.HasXref;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FStart = input.ReadInt32();
            break;
          }
          case 16: {
            FEnd = input.ReadInt32();
            break;
          }
          case 26: {
            if (frColor_ == null) {
              frColor_ = new global::y3d.e.YColor();
            }
            input.ReadMessage(frColor_);
            break;
          }
          case 37: {
            Ratio = input.ReadFloat();
            break;
          }
          case 40: {
            HasXref = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OptimizeOptions : pb::IMessage<OptimizeOptions> {
    private static readonly pb::MessageParser<OptimizeOptions> _parser = new pb::MessageParser<OptimizeOptions>(() => new OptimizeOptions());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OptimizeOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptimizeOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptimizeOptions(OptimizeOptions other) : this() {
      useRange_ = other.useRange_;
      fr_ = other.fr_.Clone();
      minHpoly_ = other.minHpoly_;
      outRangeCount_ = other.outRangeCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptimizeOptions Clone() {
      return new OptimizeOptions(this);
    }

    /// <summary>Field number for the "use_range" field.</summary>
    public const int UseRangeFieldNumber = 1;
    private bool useRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseRange {
      get { return useRange_; }
      set {
        useRange_ = value;
      }
    }

    /// <summary>Field number for the "fr" field.</summary>
    public const int FrFieldNumber = 2;
    private static readonly pb::FieldCodec<global::y3d.e.FRangeItem> _repeated_fr_codec
        = pb::FieldCodec.ForMessage(18, global::y3d.e.FRangeItem.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.FRangeItem> fr_ = new pbc::RepeatedField<global::y3d.e.FRangeItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.FRangeItem> Fr {
      get { return fr_; }
    }

    /// <summary>Field number for the "min_hpoly" field.</summary>
    public const int MinHpolyFieldNumber = 3;
    private int minHpoly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinHpoly {
      get { return minHpoly_; }
      set {
        minHpoly_ = value;
      }
    }

    /// <summary>Field number for the "out_range_count" field.</summary>
    public const int OutRangeCountFieldNumber = 4;
    private int outRangeCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutRangeCount {
      get { return outRangeCount_; }
      set {
        outRangeCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OptimizeOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OptimizeOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UseRange != other.UseRange) return false;
      if(!fr_.Equals(other.fr_)) return false;
      if (MinHpoly != other.MinHpoly) return false;
      if (OutRangeCount != other.OutRangeCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UseRange != false) hash ^= UseRange.GetHashCode();
      hash ^= fr_.GetHashCode();
      if (MinHpoly != 0) hash ^= MinHpoly.GetHashCode();
      if (OutRangeCount != 0) hash ^= OutRangeCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UseRange != false) {
        output.WriteRawTag(8);
        output.WriteBool(UseRange);
      }
      fr_.WriteTo(output, _repeated_fr_codec);
      if (MinHpoly != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MinHpoly);
      }
      if (OutRangeCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OutRangeCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UseRange != false) {
        size += 1 + 1;
      }
      size += fr_.CalculateSize(_repeated_fr_codec);
      if (MinHpoly != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinHpoly);
      }
      if (OutRangeCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutRangeCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OptimizeOptions other) {
      if (other == null) {
        return;
      }
      if (other.UseRange != false) {
        UseRange = other.UseRange;
      }
      fr_.Add(other.fr_);
      if (other.MinHpoly != 0) {
        MinHpoly = other.MinHpoly;
      }
      if (other.OutRangeCount != 0) {
        OutRangeCount = other.OutRangeCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UseRange = input.ReadBool();
            break;
          }
          case 18: {
            fr_.AddEntriesFrom(input, _repeated_fr_codec);
            break;
          }
          case 24: {
            MinHpoly = input.ReadInt32();
            break;
          }
          case 32: {
            OutRangeCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResultReply : pb::IMessage<ResultReply> {
    private static readonly pb::MessageParser<ResultReply> _parser = new pb::MessageParser<ResultReply>(() => new ResultReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResultReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultReply(ResultReply other) : this() {
      error_ = other.error_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultReply Clone() {
      return new ResultReply(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private bool error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResultReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResultReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error != false) hash ^= Error.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error != false) {
        output.WriteRawTag(8);
        output.WriteBool(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResultReply other) {
      if (other == null) {
        return;
      }
      if (other.Error != false) {
        Error = other.Error;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Error = input.ReadBool();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EmptyParam : pb::IMessage<EmptyParam> {
    private static readonly pb::MessageParser<EmptyParam> _parser = new pb::MessageParser<EmptyParam>(() => new EmptyParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmptyParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyParam(EmptyParam other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmptyParam Clone() {
      return new EmptyParam(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmptyParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmptyParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmptyParam other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RenameParam : pb::IMessage<RenameParam> {
    private static readonly pb::MessageParser<RenameParam> _parser = new pb::MessageParser<RenameParam>(() => new RenameParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenameParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameParam(RenameParam other) : this() {
      useSelect_ = other.useSelect_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameParam Clone() {
      return new RenameParam(this);
    }

    /// <summary>Field number for the "use_select" field.</summary>
    public const int UseSelectFieldNumber = 1;
    private bool useSelect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseSelect {
      get { return useSelect_; }
      set {
        useSelect_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenameParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenameParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UseSelect != other.UseSelect) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UseSelect != false) hash ^= UseSelect.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UseSelect != false) {
        output.WriteRawTag(8);
        output.WriteBool(UseSelect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UseSelect != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenameParam other) {
      if (other == null) {
        return;
      }
      if (other.UseSelect != false) {
        UseSelect = other.UseSelect;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UseSelect = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OptimizeParam : pb::IMessage<OptimizeParam> {
    private static readonly pb::MessageParser<OptimizeParam> _parser = new pb::MessageParser<OptimizeParam>(() => new OptimizeParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OptimizeParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptimizeParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptimizeParam(OptimizeParam other) : this() {
      ratio_ = other.ratio_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OptimizeParam Clone() {
      return new OptimizeParam(this);
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 1;
    private float ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OptimizeParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OptimizeParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ratio != other.Ratio) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ratio != 0F) hash ^= Ratio.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ratio != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Ratio);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ratio != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OptimizeParam other) {
      if (other == null) {
        return;
      }
      if (other.Ratio != 0F) {
        Ratio = other.Ratio;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Ratio = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BatchOptimizeParam : pb::IMessage<BatchOptimizeParam> {
    private static readonly pb::MessageParser<BatchOptimizeParam> _parser = new pb::MessageParser<BatchOptimizeParam>(() => new BatchOptimizeParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchOptimizeParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchOptimizeParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchOptimizeParam(BatchOptimizeParam other) : this() {
      ratio_ = other.ratio_;
      folder_ = other.folder_;
      filename_ = other.filename_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchOptimizeParam Clone() {
      return new BatchOptimizeParam(this);
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 1;
    private float ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "folder" field.</summary>
    public const int FolderFieldNumber = 2;
    private string folder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Folder {
      get { return folder_; }
      set {
        folder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "filename" field.</summary>
    public const int FilenameFieldNumber = 3;
    private string filename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Filename {
      get { return filename_; }
      set {
        filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchOptimizeParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchOptimizeParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ratio != other.Ratio) return false;
      if (Folder != other.Folder) return false;
      if (Filename != other.Filename) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ratio != 0F) hash ^= Ratio.GetHashCode();
      if (Folder.Length != 0) hash ^= Folder.GetHashCode();
      if (Filename.Length != 0) hash ^= Filename.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ratio != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Ratio);
      }
      if (Folder.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Folder);
      }
      if (Filename.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Filename);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ratio != 0F) {
        size += 1 + 4;
      }
      if (Folder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Folder);
      }
      if (Filename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchOptimizeParam other) {
      if (other == null) {
        return;
      }
      if (other.Ratio != 0F) {
        Ratio = other.Ratio;
      }
      if (other.Folder.Length != 0) {
        Folder = other.Folder;
      }
      if (other.Filename.Length != 0) {
        Filename = other.Filename;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Ratio = input.ReadFloat();
            break;
          }
          case 18: {
            Folder = input.ReadString();
            break;
          }
          case 26: {
            Filename = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StringParam : pb::IMessage<StringParam> {
    private static readonly pb::MessageParser<StringParam> _parser = new pb::MessageParser<StringParam>(() => new StringParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringParam(StringParam other) : this() {
      str_ = other.str_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringParam Clone() {
      return new StringParam(this);
    }

    /// <summary>Field number for the "str" field.</summary>
    public const int StrFieldNumber = 1;
    private string str_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Str {
      get { return str_; }
      set {
        str_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Str != other.Str) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Str.Length != 0) hash ^= Str.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Str.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Str);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Str.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Str);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringParam other) {
      if (other == null) {
        return;
      }
      if (other.Str.Length != 0) {
        Str = other.Str;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Str = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IntParam : pb::IMessage<IntParam> {
    private static readonly pb::MessageParser<IntParam> _parser = new pb::MessageParser<IntParam>(() => new IntParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntParam(IntParam other) : this() {
      intValue_ = other.intValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntParam Clone() {
      return new IntParam(this);
    }

    /// <summary>Field number for the "int_value" field.</summary>
    public const int IntValueFieldNumber = 1;
    private int intValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntValue {
      get { return intValue_; }
      set {
        intValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntValue != other.IntValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IntValue != 0) hash ^= IntValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IntValue != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IntValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IntValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntParam other) {
      if (other == null) {
        return;
      }
      if (other.IntValue != 0) {
        IntValue = other.IntValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IntValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestParam : pb::IMessage<TestParam> {
    private static readonly pb::MessageParser<TestParam> _parser = new pb::MessageParser<TestParam>(() => new TestParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestParam(TestParam other) : this() {
      testName_ = other.testName_;
      Anything = other.anything_ != null ? other.Anything.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestParam Clone() {
      return new TestParam(this);
    }

    /// <summary>Field number for the "test_name" field.</summary>
    public const int TestNameFieldNumber = 1;
    private string testName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestName {
      get { return testName_; }
      set {
        testName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "anything" field.</summary>
    public const int AnythingFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Any anything_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Anything {
      get { return anything_; }
      set {
        anything_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TestName != other.TestName) return false;
      if (!object.Equals(Anything, other.Anything)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TestName.Length != 0) hash ^= TestName.GetHashCode();
      if (anything_ != null) hash ^= Anything.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TestName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TestName);
      }
      if (anything_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Anything);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TestName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestName);
      }
      if (anything_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Anything);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestParam other) {
      if (other == null) {
        return;
      }
      if (other.TestName.Length != 0) {
        TestName = other.TestName;
      }
      if (other.anything_ != null) {
        if (anything_ == null) {
          anything_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Anything.MergeFrom(other.Anything);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TestName = input.ReadString();
            break;
          }
          case 18: {
            if (anything_ == null) {
              anything_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(anything_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReadyRespone : pb::IMessage<ReadyRespone> {
    private static readonly pb::MessageParser<ReadyRespone> _parser = new pb::MessageParser<ReadyRespone>(() => new ReadyRespone());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadyRespone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyRespone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyRespone(ReadyRespone other) : this() {
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyRespone Clone() {
      return new ReadyRespone(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 17;
    private global::y3d.e.ServingStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ServingStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadyRespone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadyRespone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadyRespone other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 136: {
            status_ = (global::y3d.e.ServingStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  ------------------------------ Event
  /// </summary>
  public sealed partial class YEvent : pb::IMessage<YEvent> {
    private static readonly pb::MessageParser<YEvent> _parser = new pb::MessageParser<YEvent>(() => new YEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YEvent(YEvent other) : this() {
      switch (other.EventCase) {
        case EventOneofCase.Noevent:
          Noevent = other.Noevent.Clone();
          break;
        case EventOneofCase.Select:
          Select = other.Select.Clone();
          break;
        case EventOneofCase.Move:
          Move = other.Move.Clone();
          break;
        case EventOneofCase.Rotate:
          Rotate = other.Rotate.Clone();
          break;
        case EventOneofCase.Del:
          Del = other.Del.Clone();
          break;
        case EventOneofCase.SelectMany:
          SelectMany = other.SelectMany.Clone();
          break;
        case EventOneofCase.Isolate:
          Isolate = other.Isolate.Clone();
          break;
        case EventOneofCase.Close:
          Close = other.Close.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YEvent Clone() {
      return new YEvent(this);
    }

    /// <summary>Field number for the "noevent" field.</summary>
    public const int NoeventFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ENone Noevent {
      get { return eventCase_ == EventOneofCase.Noevent ? (global::y3d.e.ENone) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.Noevent;
      }
    }

    /// <summary>Field number for the "select" field.</summary>
    public const int SelectFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ESelect Select {
      get { return eventCase_ == EventOneofCase.Select ? (global::y3d.e.ESelect) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.Select;
      }
    }

    /// <summary>Field number for the "move" field.</summary>
    public const int MoveFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.EMove Move {
      get { return eventCase_ == EventOneofCase.Move ? (global::y3d.e.EMove) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.Move;
      }
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ERotate Rotate {
      get { return eventCase_ == EventOneofCase.Rotate ? (global::y3d.e.ERotate) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.Rotate;
      }
    }

    /// <summary>Field number for the "del" field.</summary>
    public const int DelFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.EDelete Del {
      get { return eventCase_ == EventOneofCase.Del ? (global::y3d.e.EDelete) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.Del;
      }
    }

    /// <summary>Field number for the "select_many" field.</summary>
    public const int SelectManyFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ESelectMany SelectMany {
      get { return eventCase_ == EventOneofCase.SelectMany ? (global::y3d.e.ESelectMany) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.SelectMany;
      }
    }

    /// <summary>Field number for the "isolate" field.</summary>
    public const int IsolateFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.EIsolate Isolate {
      get { return eventCase_ == EventOneofCase.Isolate ? (global::y3d.e.EIsolate) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.Isolate;
      }
    }

    /// <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.EClose Close {
      get { return eventCase_ == EventOneofCase.Close ? (global::y3d.e.EClose) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.Close;
      }
    }

    private object event_;
    /// <summary>Enum of possible cases for the "event" oneof.</summary>
    public enum EventOneofCase {
      None = 0,
      Noevent = 1,
      Select = 2,
      Move = 3,
      Rotate = 4,
      Del = 5,
      SelectMany = 6,
      Isolate = 7,
      Close = 8,
    }
    private EventOneofCase eventCase_ = EventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventOneofCase EventCase {
      get { return eventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvent() {
      eventCase_ = EventOneofCase.None;
      event_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Noevent, other.Noevent)) return false;
      if (!object.Equals(Select, other.Select)) return false;
      if (!object.Equals(Move, other.Move)) return false;
      if (!object.Equals(Rotate, other.Rotate)) return false;
      if (!object.Equals(Del, other.Del)) return false;
      if (!object.Equals(SelectMany, other.SelectMany)) return false;
      if (!object.Equals(Isolate, other.Isolate)) return false;
      if (!object.Equals(Close, other.Close)) return false;
      if (EventCase != other.EventCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventCase_ == EventOneofCase.Noevent) hash ^= Noevent.GetHashCode();
      if (eventCase_ == EventOneofCase.Select) hash ^= Select.GetHashCode();
      if (eventCase_ == EventOneofCase.Move) hash ^= Move.GetHashCode();
      if (eventCase_ == EventOneofCase.Rotate) hash ^= Rotate.GetHashCode();
      if (eventCase_ == EventOneofCase.Del) hash ^= Del.GetHashCode();
      if (eventCase_ == EventOneofCase.SelectMany) hash ^= SelectMany.GetHashCode();
      if (eventCase_ == EventOneofCase.Isolate) hash ^= Isolate.GetHashCode();
      if (eventCase_ == EventOneofCase.Close) hash ^= Close.GetHashCode();
      hash ^= (int) eventCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (eventCase_ == EventOneofCase.Noevent) {
        output.WriteRawTag(10);
        output.WriteMessage(Noevent);
      }
      if (eventCase_ == EventOneofCase.Select) {
        output.WriteRawTag(18);
        output.WriteMessage(Select);
      }
      if (eventCase_ == EventOneofCase.Move) {
        output.WriteRawTag(26);
        output.WriteMessage(Move);
      }
      if (eventCase_ == EventOneofCase.Rotate) {
        output.WriteRawTag(34);
        output.WriteMessage(Rotate);
      }
      if (eventCase_ == EventOneofCase.Del) {
        output.WriteRawTag(42);
        output.WriteMessage(Del);
      }
      if (eventCase_ == EventOneofCase.SelectMany) {
        output.WriteRawTag(50);
        output.WriteMessage(SelectMany);
      }
      if (eventCase_ == EventOneofCase.Isolate) {
        output.WriteRawTag(58);
        output.WriteMessage(Isolate);
      }
      if (eventCase_ == EventOneofCase.Close) {
        output.WriteRawTag(66);
        output.WriteMessage(Close);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventCase_ == EventOneofCase.Noevent) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Noevent);
      }
      if (eventCase_ == EventOneofCase.Select) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Select);
      }
      if (eventCase_ == EventOneofCase.Move) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Move);
      }
      if (eventCase_ == EventOneofCase.Rotate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotate);
      }
      if (eventCase_ == EventOneofCase.Del) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Del);
      }
      if (eventCase_ == EventOneofCase.SelectMany) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectMany);
      }
      if (eventCase_ == EventOneofCase.Isolate) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Isolate);
      }
      if (eventCase_ == EventOneofCase.Close) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Close);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YEvent other) {
      if (other == null) {
        return;
      }
      switch (other.EventCase) {
        case EventOneofCase.Noevent:
          Noevent = other.Noevent;
          break;
        case EventOneofCase.Select:
          Select = other.Select;
          break;
        case EventOneofCase.Move:
          Move = other.Move;
          break;
        case EventOneofCase.Rotate:
          Rotate = other.Rotate;
          break;
        case EventOneofCase.Del:
          Del = other.Del;
          break;
        case EventOneofCase.SelectMany:
          SelectMany = other.SelectMany;
          break;
        case EventOneofCase.Isolate:
          Isolate = other.Isolate;
          break;
        case EventOneofCase.Close:
          Close = other.Close;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::y3d.e.ENone subBuilder = new global::y3d.e.ENone();
            if (eventCase_ == EventOneofCase.Noevent) {
              subBuilder.MergeFrom(Noevent);
            }
            input.ReadMessage(subBuilder);
            Noevent = subBuilder;
            break;
          }
          case 18: {
            global::y3d.e.ESelect subBuilder = new global::y3d.e.ESelect();
            if (eventCase_ == EventOneofCase.Select) {
              subBuilder.MergeFrom(Select);
            }
            input.ReadMessage(subBuilder);
            Select = subBuilder;
            break;
          }
          case 26: {
            global::y3d.e.EMove subBuilder = new global::y3d.e.EMove();
            if (eventCase_ == EventOneofCase.Move) {
              subBuilder.MergeFrom(Move);
            }
            input.ReadMessage(subBuilder);
            Move = subBuilder;
            break;
          }
          case 34: {
            global::y3d.e.ERotate subBuilder = new global::y3d.e.ERotate();
            if (eventCase_ == EventOneofCase.Rotate) {
              subBuilder.MergeFrom(Rotate);
            }
            input.ReadMessage(subBuilder);
            Rotate = subBuilder;
            break;
          }
          case 42: {
            global::y3d.e.EDelete subBuilder = new global::y3d.e.EDelete();
            if (eventCase_ == EventOneofCase.Del) {
              subBuilder.MergeFrom(Del);
            }
            input.ReadMessage(subBuilder);
            Del = subBuilder;
            break;
          }
          case 50: {
            global::y3d.e.ESelectMany subBuilder = new global::y3d.e.ESelectMany();
            if (eventCase_ == EventOneofCase.SelectMany) {
              subBuilder.MergeFrom(SelectMany);
            }
            input.ReadMessage(subBuilder);
            SelectMany = subBuilder;
            break;
          }
          case 58: {
            global::y3d.e.EIsolate subBuilder = new global::y3d.e.EIsolate();
            if (eventCase_ == EventOneofCase.Isolate) {
              subBuilder.MergeFrom(Isolate);
            }
            input.ReadMessage(subBuilder);
            Isolate = subBuilder;
            break;
          }
          case 66: {
            global::y3d.e.EClose subBuilder = new global::y3d.e.EClose();
            if (eventCase_ == EventOneofCase.Close) {
              subBuilder.MergeFrom(Close);
            }
            input.ReadMessage(subBuilder);
            Close = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ENone : pb::IMessage<ENone> {
    private static readonly pb::MessageParser<ENone> _parser = new pb::MessageParser<ENone>(() => new ENone());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ENone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENone(ENone other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENone Clone() {
      return new ENone(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ENone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ENone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ENone other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ESelect : pb::IMessage<ESelect> {
    private static readonly pb::MessageParser<ESelect> _parser = new pb::MessageParser<ESelect>(() => new ESelect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESelect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESelect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESelect(ESelect other) : this() {
      name_ = other.name_;
      isolate_ = other.isolate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESelect Clone() {
      return new ESelect(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isolate" field.</summary>
    public const int IsolateFieldNumber = 2;
    private bool isolate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isolate {
      get { return isolate_; }
      set {
        isolate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESelect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESelect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Isolate != other.Isolate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Isolate != false) hash ^= Isolate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Isolate != false) {
        output.WriteRawTag(16);
        output.WriteBool(Isolate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Isolate != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESelect other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Isolate != false) {
        Isolate = other.Isolate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Isolate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ESelectMany : pb::IMessage<ESelectMany> {
    private static readonly pb::MessageParser<ESelectMany> _parser = new pb::MessageParser<ESelectMany>(() => new ESelectMany());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ESelectMany> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESelectMany() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESelectMany(ESelectMany other) : this() {
      name_ = other.name_.Clone();
      isolate_ = other.isolate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ESelectMany Clone() {
      return new ESelectMany(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_name_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> name_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Name {
      get { return name_; }
    }

    /// <summary>Field number for the "isolate" field.</summary>
    public const int IsolateFieldNumber = 2;
    private bool isolate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isolate {
      get { return isolate_; }
      set {
        isolate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ESelectMany);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ESelectMany other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!name_.Equals(other.name_)) return false;
      if (Isolate != other.Isolate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= name_.GetHashCode();
      if (Isolate != false) hash ^= Isolate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      name_.WriteTo(output, _repeated_name_codec);
      if (Isolate != false) {
        output.WriteRawTag(16);
        output.WriteBool(Isolate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += name_.CalculateSize(_repeated_name_codec);
      if (Isolate != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ESelectMany other) {
      if (other == null) {
        return;
      }
      name_.Add(other.name_);
      if (other.Isolate != false) {
        Isolate = other.Isolate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            name_.AddEntriesFrom(input, _repeated_name_codec);
            break;
          }
          case 16: {
            Isolate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EMove : pb::IMessage<EMove> {
    private static readonly pb::MessageParser<EMove> _parser = new pb::MessageParser<EMove>(() => new EMove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EMove(EMove other) : this() {
      point_ = other.point_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EMove Clone() {
      return new EMove(this);
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_point_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> point_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Point {
      get { return point_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!point_.Equals(other.point_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= point_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      point_.WriteTo(output, _repeated_point_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += point_.CalculateSize(_repeated_point_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EMove other) {
      if (other == null) {
        return;
      }
      point_.Add(other.point_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 13: {
            point_.AddEntriesFrom(input, _repeated_point_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ERotate : pb::IMessage<ERotate> {
    private static readonly pb::MessageParser<ERotate> _parser = new pb::MessageParser<ERotate>(() => new ERotate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ERotate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ERotate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ERotate(ERotate other) : this() {
      rotate_ = other.rotate_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ERotate Clone() {
      return new ERotate(this);
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_rotate_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> rotate_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Rotate {
      get { return rotate_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ERotate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ERotate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rotate_.Equals(other.rotate_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rotate_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rotate_.WriteTo(output, _repeated_rotate_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rotate_.CalculateSize(_repeated_rotate_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ERotate other) {
      if (other == null) {
        return;
      }
      rotate_.Add(other.rotate_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 13: {
            rotate_.AddEntriesFrom(input, _repeated_rotate_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EDelete : pb::IMessage<EDelete> {
    private static readonly pb::MessageParser<EDelete> _parser = new pb::MessageParser<EDelete>(() => new EDelete());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EDelete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EDelete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EDelete(EDelete other) : this() {
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EDelete Clone() {
      return new EDelete(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EDelete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EDelete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EDelete other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EIsolate : pb::IMessage<EIsolate> {
    private static readonly pb::MessageParser<EIsolate> _parser = new pb::MessageParser<EIsolate>(() => new EIsolate());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EIsolate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EIsolate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EIsolate(EIsolate other) : this() {
      name_ = other.name_;
      endIsolate_ = other.endIsolate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EIsolate Clone() {
      return new EIsolate(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endIsolate" field.</summary>
    public const int EndIsolateFieldNumber = 2;
    private bool endIsolate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EndIsolate {
      get { return endIsolate_; }
      set {
        endIsolate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EIsolate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EIsolate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (EndIsolate != other.EndIsolate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (EndIsolate != false) hash ^= EndIsolate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (EndIsolate != false) {
        output.WriteRawTag(16);
        output.WriteBool(EndIsolate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (EndIsolate != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EIsolate other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.EndIsolate != false) {
        EndIsolate = other.EndIsolate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            EndIsolate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EClose : pb::IMessage<EClose> {
    private static readonly pb::MessageParser<EClose> _parser = new pb::MessageParser<EClose>(() => new EClose());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EClose> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EClose() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EClose(EClose other) : this() {
      bypass_ = other.bypass_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EClose Clone() {
      return new EClose(this);
    }

    /// <summary>Field number for the "bypass" field.</summary>
    public const int BypassFieldNumber = 1;
    private bool bypass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bypass {
      get { return bypass_; }
      set {
        bypass_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EClose);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EClose other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Bypass != other.Bypass) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Bypass != false) hash ^= Bypass.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Bypass != false) {
        output.WriteRawTag(8);
        output.WriteBool(Bypass);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bypass != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EClose other) {
      if (other == null) {
        return;
      }
      if (other.Bypass != false) {
        Bypass = other.Bypass;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Bypass = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponseEvent : pb::IMessage<ResponseEvent> {
    private static readonly pb::MessageParser<ResponseEvent> _parser = new pb::MessageParser<ResponseEvent>(() => new ResponseEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseEvent(ResponseEvent other) : this() {
      error_ = other.error_;
      msg_ = other.msg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseEvent Clone() {
      return new ResponseEvent(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private bool error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private string msg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if (Msg != other.Msg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error != false) hash ^= Error.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error != false) {
        output.WriteRawTag(8);
        output.WriteBool(Error);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error != false) {
        size += 1 + 1;
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseEvent other) {
      if (other == null) {
        return;
      }
      if (other.Error != false) {
        Error = other.Error;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Error = input.ReadBool();
            break;
          }
          case 18: {
            Msg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EUnwrap : pb::IMessage<EUnwrap> {
    private static readonly pb::MessageParser<EUnwrap> _parser = new pb::MessageParser<EUnwrap>(() => new EUnwrap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EUnwrap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EUnwrap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EUnwrap(EUnwrap other) : this() {
      oname_ = other.oname_;
      channel_ = other.channel_;
      switch (other.SettingCase) {
        case SettingOneofCase.Max3D:
          Max3D = other.Max3D.Clone();
          break;
        case SettingOneofCase.Blender:
          Blender = other.Blender.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EUnwrap Clone() {
      return new EUnwrap(this);
    }

    /// <summary>Field number for the "oname" field.</summary>
    public const int OnameFieldNumber = 1;
    private string oname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oname {
      get { return oname_; }
      set {
        oname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private int channel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "max3d" field.</summary>
    public const int Max3DFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.MaxUnwrap Max3D {
      get { return settingCase_ == SettingOneofCase.Max3D ? (global::y3d.e.MaxUnwrap) setting_ : null; }
      set {
        setting_ = value;
        settingCase_ = value == null ? SettingOneofCase.None : SettingOneofCase.Max3D;
      }
    }

    /// <summary>Field number for the "blender" field.</summary>
    public const int BlenderFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.BlenderUnwrap Blender {
      get { return settingCase_ == SettingOneofCase.Blender ? (global::y3d.e.BlenderUnwrap) setting_ : null; }
      set {
        setting_ = value;
        settingCase_ = value == null ? SettingOneofCase.None : SettingOneofCase.Blender;
      }
    }

    private object setting_;
    /// <summary>Enum of possible cases for the "setting" oneof.</summary>
    public enum SettingOneofCase {
      None = 0,
      Max3D = 3,
      Blender = 4,
    }
    private SettingOneofCase settingCase_ = SettingOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingOneofCase SettingCase {
      get { return settingCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSetting() {
      settingCase_ = SettingOneofCase.None;
      setting_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EUnwrap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EUnwrap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oname != other.Oname) return false;
      if (Channel != other.Channel) return false;
      if (!object.Equals(Max3D, other.Max3D)) return false;
      if (!object.Equals(Blender, other.Blender)) return false;
      if (SettingCase != other.SettingCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Oname.Length != 0) hash ^= Oname.GetHashCode();
      if (Channel != 0) hash ^= Channel.GetHashCode();
      if (settingCase_ == SettingOneofCase.Max3D) hash ^= Max3D.GetHashCode();
      if (settingCase_ == SettingOneofCase.Blender) hash ^= Blender.GetHashCode();
      hash ^= (int) settingCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Oname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Oname);
      }
      if (Channel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Channel);
      }
      if (settingCase_ == SettingOneofCase.Max3D) {
        output.WriteRawTag(26);
        output.WriteMessage(Max3D);
      }
      if (settingCase_ == SettingOneofCase.Blender) {
        output.WriteRawTag(34);
        output.WriteMessage(Blender);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Oname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oname);
      }
      if (Channel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
      }
      if (settingCase_ == SettingOneofCase.Max3D) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Max3D);
      }
      if (settingCase_ == SettingOneofCase.Blender) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blender);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EUnwrap other) {
      if (other == null) {
        return;
      }
      if (other.Oname.Length != 0) {
        Oname = other.Oname;
      }
      if (other.Channel != 0) {
        Channel = other.Channel;
      }
      switch (other.SettingCase) {
        case SettingOneofCase.Max3D:
          Max3D = other.Max3D;
          break;
        case SettingOneofCase.Blender:
          Blender = other.Blender;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Oname = input.ReadString();
            break;
          }
          case 16: {
            Channel = input.ReadInt32();
            break;
          }
          case 26: {
            global::y3d.e.MaxUnwrap subBuilder = new global::y3d.e.MaxUnwrap();
            if (settingCase_ == SettingOneofCase.Max3D) {
              subBuilder.MergeFrom(Max3D);
            }
            input.ReadMessage(subBuilder);
            Max3D = subBuilder;
            break;
          }
          case 34: {
            global::y3d.e.BlenderUnwrap subBuilder = new global::y3d.e.BlenderUnwrap();
            if (settingCase_ == SettingOneofCase.Blender) {
              subBuilder.MergeFrom(Blender);
            }
            input.ReadMessage(subBuilder);
            Blender = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlenderUnwrap : pb::IMessage<BlenderUnwrap> {
    private static readonly pb::MessageParser<BlenderUnwrap> _parser = new pb::MessageParser<BlenderUnwrap>(() => new BlenderUnwrap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlenderUnwrap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlenderUnwrap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlenderUnwrap(BlenderUnwrap other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlenderUnwrap Clone() {
      return new BlenderUnwrap(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlenderUnwrap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlenderUnwrap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlenderUnwrap other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class MaxUnwrap : pb::IMessage<MaxUnwrap> {
    private static readonly pb::MessageParser<MaxUnwrap> _parser = new pb::MessageParser<MaxUnwrap>(() => new MaxUnwrap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MaxUnwrap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaxUnwrap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaxUnwrap(MaxUnwrap other) : this() {
      angle_ = other.angle_;
      spacing_ = other.spacing_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MaxUnwrap Clone() {
      return new MaxUnwrap(this);
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 1;
    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "spacing" field.</summary>
    public const int SpacingFieldNumber = 2;
    private float spacing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Spacing {
      get { return spacing_; }
      set {
        spacing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MaxUnwrap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MaxUnwrap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Angle != other.Angle) return false;
      if (Spacing != other.Spacing) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Angle != 0F) hash ^= Angle.GetHashCode();
      if (Spacing != 0F) hash ^= Spacing.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Angle != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Angle);
      }
      if (Spacing != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Spacing);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Angle != 0F) {
        size += 1 + 4;
      }
      if (Spacing != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MaxUnwrap other) {
      if (other == null) {
        return;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      if (other.Spacing != 0F) {
        Spacing = other.Spacing;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Angle = input.ReadFloat();
            break;
          }
          case 21: {
            Spacing = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  ------------------------------ Packing
  /// </summary>
  public sealed partial class EPacking : pb::IMessage<EPacking> {
    private static readonly pb::MessageParser<EPacking> _parser = new pb::MessageParser<EPacking>(() => new EPacking());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EPacking> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPacking() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPacking(EPacking other) : this() {
      oname_ = other.oname_;
      uvname_ = other.uvname_;
      tileSize_ = other.tileSize_;
      switch (other.PackCase) {
        case PackOneofCase.Packmax:
          Packmax = other.Packmax.Clone();
          break;
        case PackOneofCase.Packrect:
          Packrect = other.Packrect.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EPacking Clone() {
      return new EPacking(this);
    }

    /// <summary>Field number for the "oname" field.</summary>
    public const int OnameFieldNumber = 1;
    private string oname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oname {
      get { return oname_; }
      set {
        oname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uvname" field.</summary>
    public const int UvnameFieldNumber = 2;
    private string uvname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uvname {
      get { return uvname_; }
      set {
        uvname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tile_Size" field.</summary>
    public const int TileSizeFieldNumber = 3;
    private int tileSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TileSize {
      get { return tileSize_; }
      set {
        tileSize_ = value;
      }
    }

    /// <summary>Field number for the "packmax" field.</summary>
    public const int PackmaxFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.Pack3DMax Packmax {
      get { return packCase_ == PackOneofCase.Packmax ? (global::y3d.e.Pack3DMax) pack_ : null; }
      set {
        pack_ = value;
        packCase_ = value == null ? PackOneofCase.None : PackOneofCase.Packmax;
      }
    }

    /// <summary>Field number for the "packrect" field.</summary>
    public const int PackrectFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.PackRect Packrect {
      get { return packCase_ == PackOneofCase.Packrect ? (global::y3d.e.PackRect) pack_ : null; }
      set {
        pack_ = value;
        packCase_ = value == null ? PackOneofCase.None : PackOneofCase.Packrect;
      }
    }

    private object pack_;
    /// <summary>Enum of possible cases for the "pack" oneof.</summary>
    public enum PackOneofCase {
      None = 0,
      Packmax = 4,
      Packrect = 5,
    }
    private PackOneofCase packCase_ = PackOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackOneofCase PackCase {
      get { return packCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPack() {
      packCase_ = PackOneofCase.None;
      pack_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EPacking);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EPacking other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oname != other.Oname) return false;
      if (Uvname != other.Uvname) return false;
      if (TileSize != other.TileSize) return false;
      if (!object.Equals(Packmax, other.Packmax)) return false;
      if (!object.Equals(Packrect, other.Packrect)) return false;
      if (PackCase != other.PackCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Oname.Length != 0) hash ^= Oname.GetHashCode();
      if (Uvname.Length != 0) hash ^= Uvname.GetHashCode();
      if (TileSize != 0) hash ^= TileSize.GetHashCode();
      if (packCase_ == PackOneofCase.Packmax) hash ^= Packmax.GetHashCode();
      if (packCase_ == PackOneofCase.Packrect) hash ^= Packrect.GetHashCode();
      hash ^= (int) packCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Oname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Oname);
      }
      if (Uvname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uvname);
      }
      if (TileSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TileSize);
      }
      if (packCase_ == PackOneofCase.Packmax) {
        output.WriteRawTag(34);
        output.WriteMessage(Packmax);
      }
      if (packCase_ == PackOneofCase.Packrect) {
        output.WriteRawTag(42);
        output.WriteMessage(Packrect);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Oname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oname);
      }
      if (Uvname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uvname);
      }
      if (TileSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TileSize);
      }
      if (packCase_ == PackOneofCase.Packmax) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Packmax);
      }
      if (packCase_ == PackOneofCase.Packrect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Packrect);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EPacking other) {
      if (other == null) {
        return;
      }
      if (other.Oname.Length != 0) {
        Oname = other.Oname;
      }
      if (other.Uvname.Length != 0) {
        Uvname = other.Uvname;
      }
      if (other.TileSize != 0) {
        TileSize = other.TileSize;
      }
      switch (other.PackCase) {
        case PackOneofCase.Packmax:
          Packmax = other.Packmax;
          break;
        case PackOneofCase.Packrect:
          Packrect = other.Packrect;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Oname = input.ReadString();
            break;
          }
          case 18: {
            Uvname = input.ReadString();
            break;
          }
          case 24: {
            TileSize = input.ReadInt32();
            break;
          }
          case 34: {
            global::y3d.e.Pack3DMax subBuilder = new global::y3d.e.Pack3DMax();
            if (packCase_ == PackOneofCase.Packmax) {
              subBuilder.MergeFrom(Packmax);
            }
            input.ReadMessage(subBuilder);
            Packmax = subBuilder;
            break;
          }
          case 42: {
            global::y3d.e.PackRect subBuilder = new global::y3d.e.PackRect();
            if (packCase_ == PackOneofCase.Packrect) {
              subBuilder.MergeFrom(Packrect);
            }
            input.ReadMessage(subBuilder);
            Packrect = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class PackRect : pb::IMessage<PackRect> {
    private static readonly pb::MessageParser<PackRect> _parser = new pb::MessageParser<PackRect>(() => new PackRect());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackRect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackRect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackRect(PackRect other) : this() {
      density_ = other.density_;
      padding_ = other.padding_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PackRect Clone() {
      return new PackRect(this);
    }

    /// <summary>Field number for the "density" field.</summary>
    public const int DensityFieldNumber = 1;
    private int density_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Density {
      get { return density_; }
      set {
        density_ = value;
      }
    }

    /// <summary>Field number for the "padding" field.</summary>
    public const int PaddingFieldNumber = 2;
    private float padding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Padding {
      get { return padding_; }
      set {
        padding_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PackRect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PackRect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Density != other.Density) return false;
      if (Padding != other.Padding) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Density != 0) hash ^= Density.GetHashCode();
      if (Padding != 0F) hash ^= Padding.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Density != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Density);
      }
      if (Padding != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Padding);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Density != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Density);
      }
      if (Padding != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PackRect other) {
      if (other == null) {
        return;
      }
      if (other.Density != 0) {
        Density = other.Density;
      }
      if (other.Padding != 0F) {
        Padding = other.Padding;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Density = input.ReadInt32();
            break;
          }
          case 21: {
            Padding = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Pack3DMax : pb::IMessage<Pack3DMax> {
    private static readonly pb::MessageParser<Pack3DMax> _parser = new pb::MessageParser<Pack3DMax>(() => new Pack3DMax());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Pack3DMax> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pack3DMax() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pack3DMax(Pack3DMax other) : this() {
      numTile_ = other.numTile_;
      normalize_ = other.normalize_;
      rotateClusters_ = other.rotateClusters_;
      fillHoles_ = other.fillHoles_;
      padding_ = other.padding_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Pack3DMax Clone() {
      return new Pack3DMax(this);
    }

    /// <summary>Field number for the "numTile" field.</summary>
    public const int NumTileFieldNumber = 1;
    private int numTile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumTile {
      get { return numTile_; }
      set {
        numTile_ = value;
      }
    }

    /// <summary>Field number for the "normalize" field.</summary>
    public const int NormalizeFieldNumber = 2;
    private bool normalize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Normalize {
      get { return normalize_; }
      set {
        normalize_ = value;
      }
    }

    /// <summary>Field number for the "rotate_clusters" field.</summary>
    public const int RotateClustersFieldNumber = 3;
    private bool rotateClusters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RotateClusters {
      get { return rotateClusters_; }
      set {
        rotateClusters_ = value;
      }
    }

    /// <summary>Field number for the "fill_holes" field.</summary>
    public const int FillHolesFieldNumber = 4;
    private bool fillHoles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FillHoles {
      get { return fillHoles_; }
      set {
        fillHoles_ = value;
      }
    }

    /// <summary>Field number for the "padding" field.</summary>
    public const int PaddingFieldNumber = 5;
    private bool padding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Padding {
      get { return padding_; }
      set {
        padding_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Pack3DMax);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Pack3DMax other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumTile != other.NumTile) return false;
      if (Normalize != other.Normalize) return false;
      if (RotateClusters != other.RotateClusters) return false;
      if (FillHoles != other.FillHoles) return false;
      if (Padding != other.Padding) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumTile != 0) hash ^= NumTile.GetHashCode();
      if (Normalize != false) hash ^= Normalize.GetHashCode();
      if (RotateClusters != false) hash ^= RotateClusters.GetHashCode();
      if (FillHoles != false) hash ^= FillHoles.GetHashCode();
      if (Padding != false) hash ^= Padding.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumTile != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NumTile);
      }
      if (Normalize != false) {
        output.WriteRawTag(16);
        output.WriteBool(Normalize);
      }
      if (RotateClusters != false) {
        output.WriteRawTag(24);
        output.WriteBool(RotateClusters);
      }
      if (FillHoles != false) {
        output.WriteRawTag(32);
        output.WriteBool(FillHoles);
      }
      if (Padding != false) {
        output.WriteRawTag(40);
        output.WriteBool(Padding);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumTile != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumTile);
      }
      if (Normalize != false) {
        size += 1 + 1;
      }
      if (RotateClusters != false) {
        size += 1 + 1;
      }
      if (FillHoles != false) {
        size += 1 + 1;
      }
      if (Padding != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Pack3DMax other) {
      if (other == null) {
        return;
      }
      if (other.NumTile != 0) {
        NumTile = other.NumTile;
      }
      if (other.Normalize != false) {
        Normalize = other.Normalize;
      }
      if (other.RotateClusters != false) {
        RotateClusters = other.RotateClusters;
      }
      if (other.FillHoles != false) {
        FillHoles = other.FillHoles;
      }
      if (other.Padding != false) {
        Padding = other.Padding;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            NumTile = input.ReadInt32();
            break;
          }
          case 16: {
            Normalize = input.ReadBool();
            break;
          }
          case 24: {
            RotateClusters = input.ReadBool();
            break;
          }
          case 32: {
            FillHoles = input.ReadBool();
            break;
          }
          case 40: {
            Padding = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  ------------------------------ Low Poly
  /// </summary>
  public sealed partial class ELowpoly : pb::IMessage<ELowpoly> {
    private static readonly pb::MessageParser<ELowpoly> _parser = new pb::MessageParser<ELowpoly>(() => new ELowpoly());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ELowpoly> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ELowpoly() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ELowpoly(ELowpoly other) : this() {
      oname_ = other.oname_;
      switch (other.LowtypeCase) {
        case LowtypeOneofCase.Lp3Dmax:
          Lp3Dmax = other.Lp3Dmax.Clone();
          break;
        case LowtypeOneofCase.LpBlender:
          LpBlender = other.LpBlender.Clone();
          break;
        case LowtypeOneofCase.LpMeshlab:
          LpMeshlab = other.LpMeshlab.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ELowpoly Clone() {
      return new ELowpoly(this);
    }

    /// <summary>Field number for the "oname" field.</summary>
    public const int OnameFieldNumber = 1;
    private string oname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oname {
      get { return oname_; }
      set {
        oname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lp_3dmax" field.</summary>
    public const int Lp3DmaxFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.LPoly3DMax Lp3Dmax {
      get { return lowtypeCase_ == LowtypeOneofCase.Lp3Dmax ? (global::y3d.e.LPoly3DMax) lowtype_ : null; }
      set {
        lowtype_ = value;
        lowtypeCase_ = value == null ? LowtypeOneofCase.None : LowtypeOneofCase.Lp3Dmax;
      }
    }

    /// <summary>Field number for the "lp_blender" field.</summary>
    public const int LpBlenderFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.LPolyBlender LpBlender {
      get { return lowtypeCase_ == LowtypeOneofCase.LpBlender ? (global::y3d.e.LPolyBlender) lowtype_ : null; }
      set {
        lowtype_ = value;
        lowtypeCase_ = value == null ? LowtypeOneofCase.None : LowtypeOneofCase.LpBlender;
      }
    }

    /// <summary>Field number for the "lp_meshlab" field.</summary>
    public const int LpMeshlabFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.LPolyMeshlab LpMeshlab {
      get { return lowtypeCase_ == LowtypeOneofCase.LpMeshlab ? (global::y3d.e.LPolyMeshlab) lowtype_ : null; }
      set {
        lowtype_ = value;
        lowtypeCase_ = value == null ? LowtypeOneofCase.None : LowtypeOneofCase.LpMeshlab;
      }
    }

    private object lowtype_;
    /// <summary>Enum of possible cases for the "lowtype" oneof.</summary>
    public enum LowtypeOneofCase {
      None = 0,
      Lp3Dmax = 2,
      LpBlender = 3,
      LpMeshlab = 4,
    }
    private LowtypeOneofCase lowtypeCase_ = LowtypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LowtypeOneofCase LowtypeCase {
      get { return lowtypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLowtype() {
      lowtypeCase_ = LowtypeOneofCase.None;
      lowtype_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ELowpoly);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ELowpoly other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oname != other.Oname) return false;
      if (!object.Equals(Lp3Dmax, other.Lp3Dmax)) return false;
      if (!object.Equals(LpBlender, other.LpBlender)) return false;
      if (!object.Equals(LpMeshlab, other.LpMeshlab)) return false;
      if (LowtypeCase != other.LowtypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Oname.Length != 0) hash ^= Oname.GetHashCode();
      if (lowtypeCase_ == LowtypeOneofCase.Lp3Dmax) hash ^= Lp3Dmax.GetHashCode();
      if (lowtypeCase_ == LowtypeOneofCase.LpBlender) hash ^= LpBlender.GetHashCode();
      if (lowtypeCase_ == LowtypeOneofCase.LpMeshlab) hash ^= LpMeshlab.GetHashCode();
      hash ^= (int) lowtypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Oname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Oname);
      }
      if (lowtypeCase_ == LowtypeOneofCase.Lp3Dmax) {
        output.WriteRawTag(18);
        output.WriteMessage(Lp3Dmax);
      }
      if (lowtypeCase_ == LowtypeOneofCase.LpBlender) {
        output.WriteRawTag(26);
        output.WriteMessage(LpBlender);
      }
      if (lowtypeCase_ == LowtypeOneofCase.LpMeshlab) {
        output.WriteRawTag(34);
        output.WriteMessage(LpMeshlab);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Oname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oname);
      }
      if (lowtypeCase_ == LowtypeOneofCase.Lp3Dmax) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lp3Dmax);
      }
      if (lowtypeCase_ == LowtypeOneofCase.LpBlender) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LpBlender);
      }
      if (lowtypeCase_ == LowtypeOneofCase.LpMeshlab) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LpMeshlab);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ELowpoly other) {
      if (other == null) {
        return;
      }
      if (other.Oname.Length != 0) {
        Oname = other.Oname;
      }
      switch (other.LowtypeCase) {
        case LowtypeOneofCase.Lp3Dmax:
          Lp3Dmax = other.Lp3Dmax;
          break;
        case LowtypeOneofCase.LpBlender:
          LpBlender = other.LpBlender;
          break;
        case LowtypeOneofCase.LpMeshlab:
          LpMeshlab = other.LpMeshlab;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Oname = input.ReadString();
            break;
          }
          case 18: {
            global::y3d.e.LPoly3DMax subBuilder = new global::y3d.e.LPoly3DMax();
            if (lowtypeCase_ == LowtypeOneofCase.Lp3Dmax) {
              subBuilder.MergeFrom(Lp3Dmax);
            }
            input.ReadMessage(subBuilder);
            Lp3Dmax = subBuilder;
            break;
          }
          case 26: {
            global::y3d.e.LPolyBlender subBuilder = new global::y3d.e.LPolyBlender();
            if (lowtypeCase_ == LowtypeOneofCase.LpBlender) {
              subBuilder.MergeFrom(LpBlender);
            }
            input.ReadMessage(subBuilder);
            LpBlender = subBuilder;
            break;
          }
          case 34: {
            global::y3d.e.LPolyMeshlab subBuilder = new global::y3d.e.LPolyMeshlab();
            if (lowtypeCase_ == LowtypeOneofCase.LpMeshlab) {
              subBuilder.MergeFrom(LpMeshlab);
            }
            input.ReadMessage(subBuilder);
            LpMeshlab = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class LPoly3DMax : pb::IMessage<LPoly3DMax> {
    private static readonly pb::MessageParser<LPoly3DMax> _parser = new pb::MessageParser<LPoly3DMax>(() => new LPoly3DMax());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LPoly3DMax> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPoly3DMax() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPoly3DMax(LPoly3DMax other) : this() {
      vertexPercent_ = other.vertexPercent_;
      vertexCount_ = other.vertexCount_;
      optimizationMode_ = other.optimizationMode_;
      normals_ = other.normals_;
      favorCompactFaces_ = other.favorCompactFaces_;
      preventFlippedNormals_ = other.preventFlippedNormals_;
      lockVertexPosition_ = other.lockVertexPosition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPoly3DMax Clone() {
      return new LPoly3DMax(this);
    }

    /// <summary>Field number for the "vertex_percent" field.</summary>
    public const int VertexPercentFieldNumber = 1;
    private float vertexPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VertexPercent {
      get { return vertexPercent_; }
      set {
        vertexPercent_ = value;
      }
    }

    /// <summary>Field number for the "vertex_count" field.</summary>
    public const int VertexCountFieldNumber = 2;
    private int vertexCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VertexCount {
      get { return vertexCount_; }
      set {
        vertexCount_ = value;
      }
    }

    /// <summary>Field number for the "optimization_mode" field.</summary>
    public const int OptimizationModeFieldNumber = 3;
    private global::y3d.e.LPoly3DMax.Types.OpMode optimizationMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.LPoly3DMax.Types.OpMode OptimizationMode {
      get { return optimizationMode_; }
      set {
        optimizationMode_ = value;
      }
    }

    /// <summary>Field number for the "normals" field.</summary>
    public const int NormalsFieldNumber = 4;
    private global::y3d.e.LPoly3DMax.Types.NormalMode normals_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.LPoly3DMax.Types.NormalMode Normals {
      get { return normals_; }
      set {
        normals_ = value;
      }
    }

    /// <summary>Field number for the "favor_compact_faces" field.</summary>
    public const int FavorCompactFacesFieldNumber = 5;
    private bool favorCompactFaces_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FavorCompactFaces {
      get { return favorCompactFaces_; }
      set {
        favorCompactFaces_ = value;
      }
    }

    /// <summary>Field number for the "prevent_flipped_normals" field.</summary>
    public const int PreventFlippedNormalsFieldNumber = 6;
    private bool preventFlippedNormals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PreventFlippedNormals {
      get { return preventFlippedNormals_; }
      set {
        preventFlippedNormals_ = value;
      }
    }

    /// <summary>Field number for the "lock_vertex_position" field.</summary>
    public const int LockVertexPositionFieldNumber = 7;
    private bool lockVertexPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LockVertexPosition {
      get { return lockVertexPosition_; }
      set {
        lockVertexPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LPoly3DMax);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LPoly3DMax other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VertexPercent != other.VertexPercent) return false;
      if (VertexCount != other.VertexCount) return false;
      if (OptimizationMode != other.OptimizationMode) return false;
      if (Normals != other.Normals) return false;
      if (FavorCompactFaces != other.FavorCompactFaces) return false;
      if (PreventFlippedNormals != other.PreventFlippedNormals) return false;
      if (LockVertexPosition != other.LockVertexPosition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VertexPercent != 0F) hash ^= VertexPercent.GetHashCode();
      if (VertexCount != 0) hash ^= VertexCount.GetHashCode();
      if (OptimizationMode != 0) hash ^= OptimizationMode.GetHashCode();
      if (Normals != 0) hash ^= Normals.GetHashCode();
      if (FavorCompactFaces != false) hash ^= FavorCompactFaces.GetHashCode();
      if (PreventFlippedNormals != false) hash ^= PreventFlippedNormals.GetHashCode();
      if (LockVertexPosition != false) hash ^= LockVertexPosition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VertexPercent != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(VertexPercent);
      }
      if (VertexCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VertexCount);
      }
      if (OptimizationMode != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) OptimizationMode);
      }
      if (Normals != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Normals);
      }
      if (FavorCompactFaces != false) {
        output.WriteRawTag(40);
        output.WriteBool(FavorCompactFaces);
      }
      if (PreventFlippedNormals != false) {
        output.WriteRawTag(48);
        output.WriteBool(PreventFlippedNormals);
      }
      if (LockVertexPosition != false) {
        output.WriteRawTag(56);
        output.WriteBool(LockVertexPosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VertexPercent != 0F) {
        size += 1 + 4;
      }
      if (VertexCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VertexCount);
      }
      if (OptimizationMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OptimizationMode);
      }
      if (Normals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Normals);
      }
      if (FavorCompactFaces != false) {
        size += 1 + 1;
      }
      if (PreventFlippedNormals != false) {
        size += 1 + 1;
      }
      if (LockVertexPosition != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LPoly3DMax other) {
      if (other == null) {
        return;
      }
      if (other.VertexPercent != 0F) {
        VertexPercent = other.VertexPercent;
      }
      if (other.VertexCount != 0) {
        VertexCount = other.VertexCount;
      }
      if (other.OptimizationMode != 0) {
        OptimizationMode = other.OptimizationMode;
      }
      if (other.Normals != 0) {
        Normals = other.Normals;
      }
      if (other.FavorCompactFaces != false) {
        FavorCompactFaces = other.FavorCompactFaces;
      }
      if (other.PreventFlippedNormals != false) {
        PreventFlippedNormals = other.PreventFlippedNormals;
      }
      if (other.LockVertexPosition != false) {
        LockVertexPosition = other.LockVertexPosition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            VertexPercent = input.ReadFloat();
            break;
          }
          case 16: {
            VertexCount = input.ReadInt32();
            break;
          }
          case 24: {
            optimizationMode_ = (global::y3d.e.LPoly3DMax.Types.OpMode) input.ReadEnum();
            break;
          }
          case 32: {
            normals_ = (global::y3d.e.LPoly3DMax.Types.NormalMode) input.ReadEnum();
            break;
          }
          case 40: {
            FavorCompactFaces = input.ReadBool();
            break;
          }
          case 48: {
            PreventFlippedNormals = input.ReadBool();
            break;
          }
          case 56: {
            LockVertexPosition = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LPoly3DMax message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum OpMode {
        [pbr::OriginalName("CRUNCH_BORDERS")] CrunchBorders = 0,
        [pbr::OriginalName("PROTECT_BORDERS")] ProtectBorders = 1,
        [pbr::OriginalName("EXCLUDE_BORDERS")] ExcludeBorders = 2,
      }

      public enum NormalMode {
        [pbr::OriginalName("CRUNCH_NORMALS")] CrunchNormals = 0,
        [pbr::OriginalName("PROTECT_NORMALS")] ProtectNormals = 1,
        [pbr::OriginalName("EXCLUDE_NORMALS")] ExcludeNormals = 2,
      }

    }
    #endregion

  }

  public sealed partial class LPolyBlender : pb::IMessage<LPolyBlender> {
    private static readonly pb::MessageParser<LPolyBlender> _parser = new pb::MessageParser<LPolyBlender>(() => new LPolyBlender());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LPolyBlender> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPolyBlender() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPolyBlender(LPolyBlender other) : this() {
      ratio_ = other.ratio_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPolyBlender Clone() {
      return new LPolyBlender(this);
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 1;
    private float ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LPolyBlender);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LPolyBlender other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ratio != other.Ratio) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ratio != 0F) hash ^= Ratio.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ratio != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Ratio);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ratio != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LPolyBlender other) {
      if (other == null) {
        return;
      }
      if (other.Ratio != 0F) {
        Ratio = other.Ratio;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Ratio = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LPolyMeshlab : pb::IMessage<LPolyMeshlab> {
    private static readonly pb::MessageParser<LPolyMeshlab> _parser = new pb::MessageParser<LPolyMeshlab>(() => new LPolyMeshlab());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LPolyMeshlab> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPolyMeshlab() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPolyMeshlab(LPolyMeshlab other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LPolyMeshlab Clone() {
      return new LPolyMeshlab(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LPolyMeshlab);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LPolyMeshlab other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LPolyMeshlab other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///  ------------------------------ Normal
  /// </summary>
  public sealed partial class ENormal : pb::IMessage<ENormal> {
    private static readonly pb::MessageParser<ENormal> _parser = new pb::MessageParser<ENormal>(() => new ENormal());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ENormal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENormal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENormal(ENormal other) : this() {
      oname_ = other.oname_;
      lowpoly_ = other.lowpoly_;
      highpoly_ = other.highpoly_;
      texSize_ = other.texSize_;
      outTex_ = other.outTex_;
      switch (other.NtypeCase) {
        case NtypeOneofCase.Normal3Dmax:
          Normal3Dmax = other.Normal3Dmax.Clone();
          break;
        case NtypeOneofCase.NormalXnormal:
          NormalXnormal = other.NormalXnormal.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ENormal Clone() {
      return new ENormal(this);
    }

    /// <summary>Field number for the "oname" field.</summary>
    public const int OnameFieldNumber = 1;
    private string oname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oname {
      get { return oname_; }
      set {
        oname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lowpoly" field.</summary>
    public const int LowpolyFieldNumber = 2;
    private string lowpoly_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lowpoly {
      get { return lowpoly_; }
      set {
        lowpoly_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "highpoly" field.</summary>
    public const int HighpolyFieldNumber = 3;
    private string highpoly_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Highpoly {
      get { return highpoly_; }
      set {
        highpoly_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tex_size" field.</summary>
    public const int TexSizeFieldNumber = 4;
    private uint texSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TexSize {
      get { return texSize_; }
      set {
        texSize_ = value;
      }
    }

    /// <summary>Field number for the "out_tex" field.</summary>
    public const int OutTexFieldNumber = 5;
    private string outTex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OutTex {
      get { return outTex_; }
      set {
        outTex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "normal_3dmax" field.</summary>
    public const int Normal3DmaxFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.Normal3DMax Normal3Dmax {
      get { return ntypeCase_ == NtypeOneofCase.Normal3Dmax ? (global::y3d.e.Normal3DMax) ntype_ : null; }
      set {
        ntype_ = value;
        ntypeCase_ = value == null ? NtypeOneofCase.None : NtypeOneofCase.Normal3Dmax;
      }
    }

    /// <summary>Field number for the "normal_xnormal" field.</summary>
    public const int NormalXnormalFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.Settings NormalXnormal {
      get { return ntypeCase_ == NtypeOneofCase.NormalXnormal ? (global::xnormal.Settings) ntype_ : null; }
      set {
        ntype_ = value;
        ntypeCase_ = value == null ? NtypeOneofCase.None : NtypeOneofCase.NormalXnormal;
      }
    }

    private object ntype_;
    /// <summary>Enum of possible cases for the "ntype" oneof.</summary>
    public enum NtypeOneofCase {
      None = 0,
      Normal3Dmax = 6,
      NormalXnormal = 7,
    }
    private NtypeOneofCase ntypeCase_ = NtypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NtypeOneofCase NtypeCase {
      get { return ntypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearNtype() {
      ntypeCase_ = NtypeOneofCase.None;
      ntype_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ENormal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ENormal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oname != other.Oname) return false;
      if (Lowpoly != other.Lowpoly) return false;
      if (Highpoly != other.Highpoly) return false;
      if (TexSize != other.TexSize) return false;
      if (OutTex != other.OutTex) return false;
      if (!object.Equals(Normal3Dmax, other.Normal3Dmax)) return false;
      if (!object.Equals(NormalXnormal, other.NormalXnormal)) return false;
      if (NtypeCase != other.NtypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Oname.Length != 0) hash ^= Oname.GetHashCode();
      if (Lowpoly.Length != 0) hash ^= Lowpoly.GetHashCode();
      if (Highpoly.Length != 0) hash ^= Highpoly.GetHashCode();
      if (TexSize != 0) hash ^= TexSize.GetHashCode();
      if (OutTex.Length != 0) hash ^= OutTex.GetHashCode();
      if (ntypeCase_ == NtypeOneofCase.Normal3Dmax) hash ^= Normal3Dmax.GetHashCode();
      if (ntypeCase_ == NtypeOneofCase.NormalXnormal) hash ^= NormalXnormal.GetHashCode();
      hash ^= (int) ntypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Oname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Oname);
      }
      if (Lowpoly.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Lowpoly);
      }
      if (Highpoly.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Highpoly);
      }
      if (TexSize != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(TexSize);
      }
      if (OutTex.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OutTex);
      }
      if (ntypeCase_ == NtypeOneofCase.Normal3Dmax) {
        output.WriteRawTag(50);
        output.WriteMessage(Normal3Dmax);
      }
      if (ntypeCase_ == NtypeOneofCase.NormalXnormal) {
        output.WriteRawTag(58);
        output.WriteMessage(NormalXnormal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Oname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oname);
      }
      if (Lowpoly.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lowpoly);
      }
      if (Highpoly.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Highpoly);
      }
      if (TexSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TexSize);
      }
      if (OutTex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OutTex);
      }
      if (ntypeCase_ == NtypeOneofCase.Normal3Dmax) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Normal3Dmax);
      }
      if (ntypeCase_ == NtypeOneofCase.NormalXnormal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NormalXnormal);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ENormal other) {
      if (other == null) {
        return;
      }
      if (other.Oname.Length != 0) {
        Oname = other.Oname;
      }
      if (other.Lowpoly.Length != 0) {
        Lowpoly = other.Lowpoly;
      }
      if (other.Highpoly.Length != 0) {
        Highpoly = other.Highpoly;
      }
      if (other.TexSize != 0) {
        TexSize = other.TexSize;
      }
      if (other.OutTex.Length != 0) {
        OutTex = other.OutTex;
      }
      switch (other.NtypeCase) {
        case NtypeOneofCase.Normal3Dmax:
          Normal3Dmax = other.Normal3Dmax;
          break;
        case NtypeOneofCase.NormalXnormal:
          NormalXnormal = other.NormalXnormal;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Oname = input.ReadString();
            break;
          }
          case 18: {
            Lowpoly = input.ReadString();
            break;
          }
          case 26: {
            Highpoly = input.ReadString();
            break;
          }
          case 32: {
            TexSize = input.ReadUInt32();
            break;
          }
          case 42: {
            OutTex = input.ReadString();
            break;
          }
          case 50: {
            global::y3d.e.Normal3DMax subBuilder = new global::y3d.e.Normal3DMax();
            if (ntypeCase_ == NtypeOneofCase.Normal3Dmax) {
              subBuilder.MergeFrom(Normal3Dmax);
            }
            input.ReadMessage(subBuilder);
            Normal3Dmax = subBuilder;
            break;
          }
          case 58: {
            global::xnormal.Settings subBuilder = new global::xnormal.Settings();
            if (ntypeCase_ == NtypeOneofCase.NormalXnormal) {
              subBuilder.MergeFrom(NormalXnormal);
            }
            input.ReadMessage(subBuilder);
            NormalXnormal = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class Normal3DMax : pb::IMessage<Normal3DMax> {
    private static readonly pb::MessageParser<Normal3DMax> _parser = new pb::MessageParser<Normal3DMax>(() => new Normal3DMax());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Normal3DMax> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Normal3DMax() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Normal3DMax(Normal3DMax other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Normal3DMax Clone() {
      return new Normal3DMax(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Normal3DMax);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Normal3DMax other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Normal3DMax other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ProjectInfo : pb::IMessage<ProjectInfo> {
    private static readonly pb::MessageParser<ProjectInfo> _parser = new pb::MessageParser<ProjectInfo>(() => new ProjectInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectInfo(ProjectInfo other) : this() {
      pname_ = other.pname_;
      projectPath_ = other.projectPath_;
      Ts = other.ts_ != null ? other.Ts.Clone() : null;
      OptimizeOps = other.optimizeOps_ != null ? other.OptimizeOps.Clone() : null;
      fview_ = other.fview_.Clone();
      optimizeRatio_ = other.optimizeRatio_;
      originalPath_ = other.originalPath_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectInfo Clone() {
      return new ProjectInfo(this);
    }

    /// <summary>Field number for the "pname" field.</summary>
    public const int PnameFieldNumber = 1;
    private string pname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pname {
      get { return pname_; }
      set {
        pname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project_path" field.</summary>
    public const int ProjectPathFieldNumber = 2;
    private string projectPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectPath {
      get { return projectPath_; }
      set {
        projectPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ts" field.</summary>
    public const int TsFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp ts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Ts {
      get { return ts_; }
      set {
        ts_ = value;
      }
    }

    /// <summary>Field number for the "optimize_ops" field.</summary>
    public const int OptimizeOpsFieldNumber = 5;
    private global::y3d.e.OptimizeOptions optimizeOps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.OptimizeOptions OptimizeOps {
      get { return optimizeOps_; }
      set {
        optimizeOps_ = value;
      }
    }

    /// <summary>Field number for the "fview" field.</summary>
    public const int FviewFieldNumber = 6;
    private static readonly pb::FieldCodec<global::y3d.e.FilterView> _repeated_fview_codec
        = pb::FieldCodec.ForMessage(50, global::y3d.e.FilterView.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.FilterView> fview_ = new pbc::RepeatedField<global::y3d.e.FilterView>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.FilterView> Fview {
      get { return fview_; }
    }

    /// <summary>Field number for the "optimize_ratio" field.</summary>
    public const int OptimizeRatioFieldNumber = 7;
    private float optimizeRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OptimizeRatio {
      get { return optimizeRatio_; }
      set {
        optimizeRatio_ = value;
      }
    }

    /// <summary>Field number for the "original_path" field.</summary>
    public const int OriginalPathFieldNumber = 8;
    private string originalPath_ = "";
    /// <summary>
    ///  repeated YWorker workers=9;
    ///  YAreaList alist=6;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OriginalPath {
      get { return originalPath_; }
      set {
        originalPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pname != other.Pname) return false;
      if (ProjectPath != other.ProjectPath) return false;
      if (!object.Equals(Ts, other.Ts)) return false;
      if (!object.Equals(OptimizeOps, other.OptimizeOps)) return false;
      if(!fview_.Equals(other.fview_)) return false;
      if (OptimizeRatio != other.OptimizeRatio) return false;
      if (OriginalPath != other.OriginalPath) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pname.Length != 0) hash ^= Pname.GetHashCode();
      if (ProjectPath.Length != 0) hash ^= ProjectPath.GetHashCode();
      if (ts_ != null) hash ^= Ts.GetHashCode();
      if (optimizeOps_ != null) hash ^= OptimizeOps.GetHashCode();
      hash ^= fview_.GetHashCode();
      if (OptimizeRatio != 0F) hash ^= OptimizeRatio.GetHashCode();
      if (OriginalPath.Length != 0) hash ^= OriginalPath.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Pname);
      }
      if (ProjectPath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProjectPath);
      }
      if (ts_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Ts);
      }
      if (optimizeOps_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(OptimizeOps);
      }
      fview_.WriteTo(output, _repeated_fview_codec);
      if (OptimizeRatio != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(OptimizeRatio);
      }
      if (OriginalPath.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(OriginalPath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pname);
      }
      if (ProjectPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectPath);
      }
      if (ts_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ts);
      }
      if (optimizeOps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OptimizeOps);
      }
      size += fview_.CalculateSize(_repeated_fview_codec);
      if (OptimizeRatio != 0F) {
        size += 1 + 4;
      }
      if (OriginalPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalPath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectInfo other) {
      if (other == null) {
        return;
      }
      if (other.Pname.Length != 0) {
        Pname = other.Pname;
      }
      if (other.ProjectPath.Length != 0) {
        ProjectPath = other.ProjectPath;
      }
      if (other.ts_ != null) {
        if (ts_ == null) {
          ts_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Ts.MergeFrom(other.Ts);
      }
      if (other.optimizeOps_ != null) {
        if (optimizeOps_ == null) {
          optimizeOps_ = new global::y3d.e.OptimizeOptions();
        }
        OptimizeOps.MergeFrom(other.OptimizeOps);
      }
      fview_.Add(other.fview_);
      if (other.OptimizeRatio != 0F) {
        OptimizeRatio = other.OptimizeRatio;
      }
      if (other.OriginalPath.Length != 0) {
        OriginalPath = other.OriginalPath;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Pname = input.ReadString();
            break;
          }
          case 18: {
            ProjectPath = input.ReadString();
            break;
          }
          case 26: {
            if (ts_ == null) {
              ts_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ts_);
            break;
          }
          case 42: {
            if (optimizeOps_ == null) {
              optimizeOps_ = new global::y3d.e.OptimizeOptions();
            }
            input.ReadMessage(optimizeOps_);
            break;
          }
          case 50: {
            fview_.AddEntriesFrom(input, _repeated_fview_codec);
            break;
          }
          case 61: {
            OptimizeRatio = input.ReadFloat();
            break;
          }
          case 66: {
            OriginalPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SettingData : pb::IMessage<SettingData> {
    private static readonly pb::MessageParser<SettingData> _parser = new pb::MessageParser<SettingData>(() => new SettingData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SettingData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingData(SettingData other) : this() {
      asetName_ = other.asetName_;
      data_ = other.data_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingData Clone() {
      return new SettingData(this);
    }

    /// <summary>Field number for the "aset_name" field.</summary>
    public const int AsetNameFieldNumber = 1;
    private string asetName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AsetName {
      get { return asetName_; }
      set {
        asetName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec _map_data_codec
        = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Google.Protobuf.WellKnownTypes.Any.Parser), 18);
    private readonly pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> data_ = new pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Google.Protobuf.WellKnownTypes.Any> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SettingData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SettingData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AsetName != other.AsetName) return false;
      if (!Data.Equals(other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AsetName.Length != 0) hash ^= AsetName.GetHashCode();
      hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AsetName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AsetName);
      }
      data_.WriteTo(output, _map_data_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AsetName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AsetName);
      }
      size += data_.CalculateSize(_map_data_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SettingData other) {
      if (other == null) {
        return;
      }
      if (other.AsetName.Length != 0) {
        AsetName = other.AsetName;
      }
      data_.Add(other.data_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AsetName = input.ReadString();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _map_data_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PSetting : pb::IMessage<PSetting> {
    private static readonly pb::MessageParser<PSetting> _parser = new pb::MessageParser<PSetting>(() => new PSetting());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSetting(PSetting other) : this() {
      Extra = other.extra_ != null ? other.Extra.Clone() : null;
      maxRecent_ = other.maxRecent_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PSetting Clone() {
      return new PSetting(this);
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 1;
    private global::y3d.e.SettingData extra_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.SettingData Extra {
      get { return extra_; }
      set {
        extra_ = value;
      }
    }

    /// <summary>Field number for the "max_recent" field.</summary>
    public const int MaxRecentFieldNumber = 2;
    private int maxRecent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRecent {
      get { return maxRecent_; }
      set {
        maxRecent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Extra, other.Extra)) return false;
      if (MaxRecent != other.MaxRecent) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (extra_ != null) hash ^= Extra.GetHashCode();
      if (MaxRecent != 0) hash ^= MaxRecent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (extra_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Extra);
      }
      if (MaxRecent != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxRecent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (extra_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extra);
      }
      if (MaxRecent != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRecent);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PSetting other) {
      if (other == null) {
        return;
      }
      if (other.extra_ != null) {
        if (extra_ == null) {
          extra_ = new global::y3d.e.SettingData();
        }
        Extra.MergeFrom(other.Extra);
      }
      if (other.MaxRecent != 0) {
        MaxRecent = other.MaxRecent;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (extra_ == null) {
              extra_ = new global::y3d.e.SettingData();
            }
            input.ReadMessage(extra_);
            break;
          }
          case 16: {
            MaxRecent = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YSystem : pb::IMessage<YSystem> {
    private static readonly pb::MessageParser<YSystem> _parser = new pb::MessageParser<YSystem>(() => new YSystem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YSystem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YSystem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YSystem(YSystem other) : this() {
      workingFolder_ = other.workingFolder_;
      DefaultInfo = other.defaultInfo_ != null ? other.DefaultInfo.Clone() : null;
      DefaultSetting = other.defaultSetting_ != null ? other.DefaultSetting.Clone() : null;
      projects_ = other.projects_.Clone();
      apps_ = other.apps_.Clone();
      MasterServer = other.masterServer_ != null ? other.MasterServer.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YSystem Clone() {
      return new YSystem(this);
    }

    /// <summary>Field number for the "working_folder" field.</summary>
    public const int WorkingFolderFieldNumber = 1;
    private string workingFolder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkingFolder {
      get { return workingFolder_; }
      set {
        workingFolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "default_info" field.</summary>
    public const int DefaultInfoFieldNumber = 2;
    private global::y3d.e.ProjectInfo defaultInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ProjectInfo DefaultInfo {
      get { return defaultInfo_; }
      set {
        defaultInfo_ = value;
      }
    }

    /// <summary>Field number for the "default_setting" field.</summary>
    public const int DefaultSettingFieldNumber = 3;
    private global::y3d.e.PSetting defaultSetting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.PSetting DefaultSetting {
      get { return defaultSetting_; }
      set {
        defaultSetting_ = value;
      }
    }

    /// <summary>Field number for the "projects" field.</summary>
    public const int ProjectsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::y3d.e.ProjectInfo> _repeated_projects_codec
        = pb::FieldCodec.ForMessage(34, global::y3d.e.ProjectInfo.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.ProjectInfo> projects_ = new pbc::RepeatedField<global::y3d.e.ProjectInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.ProjectInfo> Projects {
      get { return projects_; }
    }

    /// <summary>Field number for the "apps" field.</summary>
    public const int AppsFieldNumber = 5;
    private static readonly pbc::MapField<string, global::y3d.e.WorkerApp>.Codec _map_apps_codec
        = new pbc::MapField<string, global::y3d.e.WorkerApp>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::y3d.e.WorkerApp.Parser), 42);
    private readonly pbc::MapField<string, global::y3d.e.WorkerApp> apps_ = new pbc::MapField<string, global::y3d.e.WorkerApp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::y3d.e.WorkerApp> Apps {
      get { return apps_; }
    }

    /// <summary>Field number for the "master_server" field.</summary>
    public const int MasterServerFieldNumber = 6;
    private global::y3d.e.MasterServerInfo masterServer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.MasterServerInfo MasterServer {
      get { return masterServer_; }
      set {
        masterServer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YSystem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YSystem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WorkingFolder != other.WorkingFolder) return false;
      if (!object.Equals(DefaultInfo, other.DefaultInfo)) return false;
      if (!object.Equals(DefaultSetting, other.DefaultSetting)) return false;
      if(!projects_.Equals(other.projects_)) return false;
      if (!Apps.Equals(other.Apps)) return false;
      if (!object.Equals(MasterServer, other.MasterServer)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WorkingFolder.Length != 0) hash ^= WorkingFolder.GetHashCode();
      if (defaultInfo_ != null) hash ^= DefaultInfo.GetHashCode();
      if (defaultSetting_ != null) hash ^= DefaultSetting.GetHashCode();
      hash ^= projects_.GetHashCode();
      hash ^= Apps.GetHashCode();
      if (masterServer_ != null) hash ^= MasterServer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WorkingFolder.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(WorkingFolder);
      }
      if (defaultInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DefaultInfo);
      }
      if (defaultSetting_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DefaultSetting);
      }
      projects_.WriteTo(output, _repeated_projects_codec);
      apps_.WriteTo(output, _map_apps_codec);
      if (masterServer_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(MasterServer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WorkingFolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkingFolder);
      }
      if (defaultInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultInfo);
      }
      if (defaultSetting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultSetting);
      }
      size += projects_.CalculateSize(_repeated_projects_codec);
      size += apps_.CalculateSize(_map_apps_codec);
      if (masterServer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MasterServer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YSystem other) {
      if (other == null) {
        return;
      }
      if (other.WorkingFolder.Length != 0) {
        WorkingFolder = other.WorkingFolder;
      }
      if (other.defaultInfo_ != null) {
        if (defaultInfo_ == null) {
          defaultInfo_ = new global::y3d.e.ProjectInfo();
        }
        DefaultInfo.MergeFrom(other.DefaultInfo);
      }
      if (other.defaultSetting_ != null) {
        if (defaultSetting_ == null) {
          defaultSetting_ = new global::y3d.e.PSetting();
        }
        DefaultSetting.MergeFrom(other.DefaultSetting);
      }
      projects_.Add(other.projects_);
      apps_.Add(other.apps_);
      if (other.masterServer_ != null) {
        if (masterServer_ == null) {
          masterServer_ = new global::y3d.e.MasterServerInfo();
        }
        MasterServer.MergeFrom(other.MasterServer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            WorkingFolder = input.ReadString();
            break;
          }
          case 18: {
            if (defaultInfo_ == null) {
              defaultInfo_ = new global::y3d.e.ProjectInfo();
            }
            input.ReadMessage(defaultInfo_);
            break;
          }
          case 26: {
            if (defaultSetting_ == null) {
              defaultSetting_ = new global::y3d.e.PSetting();
            }
            input.ReadMessage(defaultSetting_);
            break;
          }
          case 34: {
            projects_.AddEntriesFrom(input, _repeated_projects_codec);
            break;
          }
          case 42: {
            apps_.AddEntriesFrom(input, _map_apps_codec);
            break;
          }
          case 50: {
            if (masterServer_ == null) {
              masterServer_ = new global::y3d.e.MasterServerInfo();
            }
            input.ReadMessage(masterServer_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewProjectParam : pb::IMessage<NewProjectParam> {
    private static readonly pb::MessageParser<NewProjectParam> _parser = new pb::MessageParser<NewProjectParam>(() => new NewProjectParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewProjectParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewProjectParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewProjectParam(NewProjectParam other) : this() {
      fname_ = other.fname_;
      folder_ = other.folder_;
      projectPath_ = other.projectPath_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewProjectParam Clone() {
      return new NewProjectParam(this);
    }

    /// <summary>Field number for the "fname" field.</summary>
    public const int FnameFieldNumber = 1;
    private string fname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fname {
      get { return fname_; }
      set {
        fname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "folder" field.</summary>
    public const int FolderFieldNumber = 2;
    private string folder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Folder {
      get { return folder_; }
      set {
        folder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "project_path" field.</summary>
    public const int ProjectPathFieldNumber = 3;
    private string projectPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectPath {
      get { return projectPath_; }
      set {
        projectPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewProjectParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewProjectParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fname != other.Fname) return false;
      if (Folder != other.Folder) return false;
      if (ProjectPath != other.ProjectPath) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fname.Length != 0) hash ^= Fname.GetHashCode();
      if (Folder.Length != 0) hash ^= Folder.GetHashCode();
      if (ProjectPath.Length != 0) hash ^= ProjectPath.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Fname);
      }
      if (Folder.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Folder);
      }
      if (ProjectPath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ProjectPath);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fname);
      }
      if (Folder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Folder);
      }
      if (ProjectPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectPath);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewProjectParam other) {
      if (other == null) {
        return;
      }
      if (other.Fname.Length != 0) {
        Fname = other.Fname;
      }
      if (other.Folder.Length != 0) {
        Folder = other.Folder;
      }
      if (other.ProjectPath.Length != 0) {
        ProjectPath = other.ProjectPath;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Fname = input.ReadString();
            break;
          }
          case 18: {
            Folder = input.ReadString();
            break;
          }
          case 26: {
            ProjectPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponseNProject : pb::IMessage<ResponseNProject> {
    private static readonly pb::MessageParser<ResponseNProject> _parser = new pb::MessageParser<ResponseNProject>(() => new ResponseNProject());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseNProject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseNProject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseNProject(ResponseNProject other) : this() {
      PInfo = other.pInfo_ != null ? other.PInfo.Clone() : null;
      Yal = other.yal_ != null ? other.Yal.Clone() : null;
      err_ = other.err_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseNProject Clone() {
      return new ResponseNProject(this);
    }

    /// <summary>Field number for the "pInfo" field.</summary>
    public const int PInfoFieldNumber = 1;
    private global::y3d.e.ProjectInfo pInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ProjectInfo PInfo {
      get { return pInfo_; }
      set {
        pInfo_ = value;
      }
    }

    /// <summary>Field number for the "yal" field.</summary>
    public const int YalFieldNumber = 2;
    private global::y3d.e.YAreaList yal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YAreaList Yal {
      get { return yal_; }
      set {
        yal_ = value;
      }
    }

    /// <summary>Field number for the "err" field.</summary>
    public const int ErrFieldNumber = 3;
    private bool err_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Err {
      get { return err_; }
      set {
        err_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseNProject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseNProject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PInfo, other.PInfo)) return false;
      if (!object.Equals(Yal, other.Yal)) return false;
      if (Err != other.Err) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pInfo_ != null) hash ^= PInfo.GetHashCode();
      if (yal_ != null) hash ^= Yal.GetHashCode();
      if (Err != false) hash ^= Err.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PInfo);
      }
      if (yal_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Yal);
      }
      if (Err != false) {
        output.WriteRawTag(24);
        output.WriteBool(Err);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PInfo);
      }
      if (yal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Yal);
      }
      if (Err != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseNProject other) {
      if (other == null) {
        return;
      }
      if (other.pInfo_ != null) {
        if (pInfo_ == null) {
          pInfo_ = new global::y3d.e.ProjectInfo();
        }
        PInfo.MergeFrom(other.PInfo);
      }
      if (other.yal_ != null) {
        if (yal_ == null) {
          yal_ = new global::y3d.e.YAreaList();
        }
        Yal.MergeFrom(other.Yal);
      }
      if (other.Err != false) {
        Err = other.Err;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (pInfo_ == null) {
              pInfo_ = new global::y3d.e.ProjectInfo();
            }
            input.ReadMessage(pInfo_);
            break;
          }
          case 18: {
            if (yal_ == null) {
              yal_ = new global::y3d.e.YAreaList();
            }
            input.ReadMessage(yal_);
            break;
          }
          case 24: {
            Err = input.ReadBool();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  ------------------------------ Task,Worker,Job...
  /// </summary>
  public sealed partial class YJobAction : pb::IMessage<YJobAction> {
    private static readonly pb::MessageParser<YJobAction> _parser = new pb::MessageParser<YJobAction>(() => new YJobAction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YJobAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YJobAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YJobAction(YJobAction other) : this() {
      switch (other.ActionCase) {
        case ActionOneofCase.Unwrap:
          Unwrap = other.Unwrap.Clone();
          break;
        case ActionOneofCase.Pack:
          Pack = other.Pack.Clone();
          break;
        case ActionOneofCase.Lowpoly:
          Lowpoly = other.Lowpoly.Clone();
          break;
        case ActionOneofCase.BakeNormal:
          BakeNormal = other.BakeNormal.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YJobAction Clone() {
      return new YJobAction(this);
    }

    /// <summary>Field number for the "unwrap" field.</summary>
    public const int UnwrapFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.EUnwrap Unwrap {
      get { return actionCase_ == ActionOneofCase.Unwrap ? (global::y3d.e.EUnwrap) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Unwrap;
      }
    }

    /// <summary>Field number for the "pack" field.</summary>
    public const int PackFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.EPacking Pack {
      get { return actionCase_ == ActionOneofCase.Pack ? (global::y3d.e.EPacking) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Pack;
      }
    }

    /// <summary>Field number for the "lowpoly" field.</summary>
    public const int LowpolyFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ELowpoly Lowpoly {
      get { return actionCase_ == ActionOneofCase.Lowpoly ? (global::y3d.e.ELowpoly) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.Lowpoly;
      }
    }

    /// <summary>Field number for the "bake_normal" field.</summary>
    public const int BakeNormalFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ENormal BakeNormal {
      get { return actionCase_ == ActionOneofCase.BakeNormal ? (global::y3d.e.ENormal) action_ : null; }
      set {
        action_ = value;
        actionCase_ = value == null ? ActionOneofCase.None : ActionOneofCase.BakeNormal;
      }
    }

    private object action_;
    /// <summary>Enum of possible cases for the "action" oneof.</summary>
    public enum ActionOneofCase {
      None = 0,
      Unwrap = 1,
      Pack = 2,
      Lowpoly = 3,
      BakeNormal = 4,
    }
    private ActionOneofCase actionCase_ = ActionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionOneofCase ActionCase {
      get { return actionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      actionCase_ = ActionOneofCase.None;
      action_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YJobAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YJobAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Unwrap, other.Unwrap)) return false;
      if (!object.Equals(Pack, other.Pack)) return false;
      if (!object.Equals(Lowpoly, other.Lowpoly)) return false;
      if (!object.Equals(BakeNormal, other.BakeNormal)) return false;
      if (ActionCase != other.ActionCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (actionCase_ == ActionOneofCase.Unwrap) hash ^= Unwrap.GetHashCode();
      if (actionCase_ == ActionOneofCase.Pack) hash ^= Pack.GetHashCode();
      if (actionCase_ == ActionOneofCase.Lowpoly) hash ^= Lowpoly.GetHashCode();
      if (actionCase_ == ActionOneofCase.BakeNormal) hash ^= BakeNormal.GetHashCode();
      hash ^= (int) actionCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (actionCase_ == ActionOneofCase.Unwrap) {
        output.WriteRawTag(10);
        output.WriteMessage(Unwrap);
      }
      if (actionCase_ == ActionOneofCase.Pack) {
        output.WriteRawTag(18);
        output.WriteMessage(Pack);
      }
      if (actionCase_ == ActionOneofCase.Lowpoly) {
        output.WriteRawTag(26);
        output.WriteMessage(Lowpoly);
      }
      if (actionCase_ == ActionOneofCase.BakeNormal) {
        output.WriteRawTag(34);
        output.WriteMessage(BakeNormal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (actionCase_ == ActionOneofCase.Unwrap) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unwrap);
      }
      if (actionCase_ == ActionOneofCase.Pack) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pack);
      }
      if (actionCase_ == ActionOneofCase.Lowpoly) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lowpoly);
      }
      if (actionCase_ == ActionOneofCase.BakeNormal) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BakeNormal);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YJobAction other) {
      if (other == null) {
        return;
      }
      switch (other.ActionCase) {
        case ActionOneofCase.Unwrap:
          Unwrap = other.Unwrap;
          break;
        case ActionOneofCase.Pack:
          Pack = other.Pack;
          break;
        case ActionOneofCase.Lowpoly:
          Lowpoly = other.Lowpoly;
          break;
        case ActionOneofCase.BakeNormal:
          BakeNormal = other.BakeNormal;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::y3d.e.EUnwrap subBuilder = new global::y3d.e.EUnwrap();
            if (actionCase_ == ActionOneofCase.Unwrap) {
              subBuilder.MergeFrom(Unwrap);
            }
            input.ReadMessage(subBuilder);
            Unwrap = subBuilder;
            break;
          }
          case 18: {
            global::y3d.e.EPacking subBuilder = new global::y3d.e.EPacking();
            if (actionCase_ == ActionOneofCase.Pack) {
              subBuilder.MergeFrom(Pack);
            }
            input.ReadMessage(subBuilder);
            Pack = subBuilder;
            break;
          }
          case 26: {
            global::y3d.e.ELowpoly subBuilder = new global::y3d.e.ELowpoly();
            if (actionCase_ == ActionOneofCase.Lowpoly) {
              subBuilder.MergeFrom(Lowpoly);
            }
            input.ReadMessage(subBuilder);
            Lowpoly = subBuilder;
            break;
          }
          case 34: {
            global::y3d.e.ENormal subBuilder = new global::y3d.e.ENormal();
            if (actionCase_ == ActionOneofCase.BakeNormal) {
              subBuilder.MergeFrom(BakeNormal);
            }
            input.ReadMessage(subBuilder);
            BakeNormal = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class YJob : pb::IMessage<YJob> {
    private static readonly pb::MessageParser<YJob> _parser = new pb::MessageParser<YJob>(() => new YJob());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YJob> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YJob() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YJob(YJob other) : this() {
      jname_ = other.jname_;
      act_ = other.act_.Clone();
      Obj = other.obj_ != null ? other.Obj.Clone() : null;
      objs_ = other.objs_.Clone();
      Out = other.out_ != null ? other.Out.Clone() : null;
      tests_ = other.tests_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YJob Clone() {
      return new YJob(this);
    }

    /// <summary>Field number for the "jname" field.</summary>
    public const int JnameFieldNumber = 1;
    private string jname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Jname {
      get { return jname_; }
      set {
        jname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "act" field.</summary>
    public const int ActFieldNumber = 2;
    private static readonly pb::FieldCodec<global::y3d.e.YJobAction> _repeated_act_codec
        = pb::FieldCodec.ForMessage(18, global::y3d.e.YJobAction.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YJobAction> act_ = new pbc::RepeatedField<global::y3d.e.YJobAction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YJobAction> Act {
      get { return act_; }
    }

    /// <summary>Field number for the "obj" field.</summary>
    public const int ObjFieldNumber = 3;
    private global::y3d.e.YObject obj_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YObject Obj {
      get { return obj_; }
      set {
        obj_ = value;
      }
    }

    /// <summary>Field number for the "objs" field.</summary>
    public const int ObjsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::y3d.e.YObject> _repeated_objs_codec
        = pb::FieldCodec.ForMessage(34, global::y3d.e.YObject.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YObject> objs_ = new pbc::RepeatedField<global::y3d.e.YObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YObject> Objs {
      get { return objs_; }
    }

    /// <summary>Field number for the "out" field.</summary>
    public const int OutFieldNumber = 5;
    private global::y3d.e.YItemMesh out_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YItemMesh Out {
      get { return out_; }
      set {
        out_ = value;
      }
    }

    /// <summary>Field number for the "tests" field.</summary>
    public const int TestsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::y3d.e.TestObject> _repeated_tests_codec
        = pb::FieldCodec.ForMessage(58, global::y3d.e.TestObject.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.TestObject> tests_ = new pbc::RepeatedField<global::y3d.e.TestObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.TestObject> Tests {
      get { return tests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YJob);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YJob other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Jname != other.Jname) return false;
      if(!act_.Equals(other.act_)) return false;
      if (!object.Equals(Obj, other.Obj)) return false;
      if(!objs_.Equals(other.objs_)) return false;
      if (!object.Equals(Out, other.Out)) return false;
      if(!tests_.Equals(other.tests_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Jname.Length != 0) hash ^= Jname.GetHashCode();
      hash ^= act_.GetHashCode();
      if (obj_ != null) hash ^= Obj.GetHashCode();
      hash ^= objs_.GetHashCode();
      if (out_ != null) hash ^= Out.GetHashCode();
      hash ^= tests_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Jname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Jname);
      }
      act_.WriteTo(output, _repeated_act_codec);
      if (obj_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Obj);
      }
      objs_.WriteTo(output, _repeated_objs_codec);
      if (out_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Out);
      }
      tests_.WriteTo(output, _repeated_tests_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Jname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Jname);
      }
      size += act_.CalculateSize(_repeated_act_codec);
      if (obj_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Obj);
      }
      size += objs_.CalculateSize(_repeated_objs_codec);
      if (out_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Out);
      }
      size += tests_.CalculateSize(_repeated_tests_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YJob other) {
      if (other == null) {
        return;
      }
      if (other.Jname.Length != 0) {
        Jname = other.Jname;
      }
      act_.Add(other.act_);
      if (other.obj_ != null) {
        if (obj_ == null) {
          obj_ = new global::y3d.e.YObject();
        }
        Obj.MergeFrom(other.Obj);
      }
      objs_.Add(other.objs_);
      if (other.out_ != null) {
        if (out_ == null) {
          out_ = new global::y3d.e.YItemMesh();
        }
        Out.MergeFrom(other.Out);
      }
      tests_.Add(other.tests_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Jname = input.ReadString();
            break;
          }
          case 18: {
            act_.AddEntriesFrom(input, _repeated_act_codec);
            break;
          }
          case 26: {
            if (obj_ == null) {
              obj_ = new global::y3d.e.YObject();
            }
            input.ReadMessage(obj_);
            break;
          }
          case 34: {
            objs_.AddEntriesFrom(input, _repeated_objs_codec);
            break;
          }
          case 42: {
            if (out_ == null) {
              out_ = new global::y3d.e.YItemMesh();
            }
            input.ReadMessage(out_);
            break;
          }
          case 58: {
            tests_.AddEntriesFrom(input, _repeated_tests_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YJobList : pb::IMessage<YJobList> {
    private static readonly pb::MessageParser<YJobList> _parser = new pb::MessageParser<YJobList>(() => new YJobList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YJobList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YJobList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YJobList(YJobList other) : this() {
      jobs_ = other.jobs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YJobList Clone() {
      return new YJobList(this);
    }

    /// <summary>Field number for the "jobs" field.</summary>
    public const int JobsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::y3d.e.YJob> _repeated_jobs_codec
        = pb::FieldCodec.ForMessage(10, global::y3d.e.YJob.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YJob> jobs_ = new pbc::RepeatedField<global::y3d.e.YJob>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YJob> Jobs {
      get { return jobs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YJobList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YJobList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!jobs_.Equals(other.jobs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= jobs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      jobs_.WriteTo(output, _repeated_jobs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += jobs_.CalculateSize(_repeated_jobs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YJobList other) {
      if (other == null) {
        return;
      }
      jobs_.Add(other.jobs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            jobs_.AddEntriesFrom(input, _repeated_jobs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YWorker : pb::IMessage<YWorker> {
    private static readonly pb::MessageParser<YWorker> _parser = new pb::MessageParser<YWorker>(() => new YWorker());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YWorker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YWorker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YWorker(YWorker other) : this() {
      wid_ = other.wid_;
      wname_ = other.wname_;
      machineIp_ = other.machineIp_;
      portLoader_ = other.portLoader_;
      portMax_ = other.portMax_;
      processId_ = other.processId_;
      status_ = other.status_;
      wtype_ = other.wtype_;
      netState_ = other.netState_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YWorker Clone() {
      return new YWorker(this);
    }

    /// <summary>Field number for the "wid" field.</summary>
    public const int WidFieldNumber = 1;
    private int wid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wid {
      get { return wid_; }
      set {
        wid_ = value;
      }
    }

    /// <summary>Field number for the "wname" field.</summary>
    public const int WnameFieldNumber = 2;
    private string wname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Wname {
      get { return wname_; }
      set {
        wname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "machine_ip" field.</summary>
    public const int MachineIpFieldNumber = 3;
    private string machineIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MachineIp {
      get { return machineIp_; }
      set {
        machineIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port_loader" field.</summary>
    public const int PortLoaderFieldNumber = 4;
    private int portLoader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PortLoader {
      get { return portLoader_; }
      set {
        portLoader_ = value;
      }
    }

    /// <summary>Field number for the "port_max" field.</summary>
    public const int PortMaxFieldNumber = 5;
    private int portMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PortMax {
      get { return portMax_; }
      set {
        portMax_ = value;
      }
    }

    /// <summary>Field number for the "process_id" field.</summary>
    public const int ProcessIdFieldNumber = 6;
    private int processId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProcessId {
      get { return processId_; }
      set {
        processId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 7;
    private global::y3d.e.ServingStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ServingStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "wtype" field.</summary>
    public const int WtypeFieldNumber = 8;
    private global::y3d.e.WorkerType wtype_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.WorkerType Wtype {
      get { return wtype_; }
      set {
        wtype_ = value;
      }
    }

    /// <summary>Field number for the "net_state" field.</summary>
    public const int NetStateFieldNumber = 10;
    private int netState_;
    /// <summary>
    ///  bool no_app = 9; // crash or waiting for app
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetState {
      get { return netState_; }
      set {
        netState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YWorker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YWorker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Wid != other.Wid) return false;
      if (Wname != other.Wname) return false;
      if (MachineIp != other.MachineIp) return false;
      if (PortLoader != other.PortLoader) return false;
      if (PortMax != other.PortMax) return false;
      if (ProcessId != other.ProcessId) return false;
      if (Status != other.Status) return false;
      if (Wtype != other.Wtype) return false;
      if (NetState != other.NetState) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Wid != 0) hash ^= Wid.GetHashCode();
      if (Wname.Length != 0) hash ^= Wname.GetHashCode();
      if (MachineIp.Length != 0) hash ^= MachineIp.GetHashCode();
      if (PortLoader != 0) hash ^= PortLoader.GetHashCode();
      if (PortMax != 0) hash ^= PortMax.GetHashCode();
      if (ProcessId != 0) hash ^= ProcessId.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Wtype != 0) hash ^= Wtype.GetHashCode();
      if (NetState != 0) hash ^= NetState.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Wid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Wid);
      }
      if (Wname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Wname);
      }
      if (MachineIp.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MachineIp);
      }
      if (PortLoader != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PortLoader);
      }
      if (PortMax != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PortMax);
      }
      if (ProcessId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ProcessId);
      }
      if (Status != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Status);
      }
      if (Wtype != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Wtype);
      }
      if (NetState != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NetState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Wid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wid);
      }
      if (Wname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Wname);
      }
      if (MachineIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineIp);
      }
      if (PortLoader != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PortLoader);
      }
      if (PortMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PortMax);
      }
      if (ProcessId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProcessId);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Wtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Wtype);
      }
      if (NetState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YWorker other) {
      if (other == null) {
        return;
      }
      if (other.Wid != 0) {
        Wid = other.Wid;
      }
      if (other.Wname.Length != 0) {
        Wname = other.Wname;
      }
      if (other.MachineIp.Length != 0) {
        MachineIp = other.MachineIp;
      }
      if (other.PortLoader != 0) {
        PortLoader = other.PortLoader;
      }
      if (other.PortMax != 0) {
        PortMax = other.PortMax;
      }
      if (other.ProcessId != 0) {
        ProcessId = other.ProcessId;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Wtype != 0) {
        Wtype = other.Wtype;
      }
      if (other.NetState != 0) {
        NetState = other.NetState;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Wid = input.ReadInt32();
            break;
          }
          case 18: {
            Wname = input.ReadString();
            break;
          }
          case 26: {
            MachineIp = input.ReadString();
            break;
          }
          case 32: {
            PortLoader = input.ReadInt32();
            break;
          }
          case 40: {
            PortMax = input.ReadInt32();
            break;
          }
          case 48: {
            ProcessId = input.ReadInt32();
            break;
          }
          case 56: {
            status_ = (global::y3d.e.ServingStatus) input.ReadEnum();
            break;
          }
          case 64: {
            wtype_ = (global::y3d.e.WorkerType) input.ReadEnum();
            break;
          }
          case 80: {
            NetState = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YWorkerList : pb::IMessage<YWorkerList> {
    private static readonly pb::MessageParser<YWorkerList> _parser = new pb::MessageParser<YWorkerList>(() => new YWorkerList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YWorkerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YWorkerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YWorkerList(YWorkerList other) : this() {
      workers_ = other.workers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YWorkerList Clone() {
      return new YWorkerList(this);
    }

    /// <summary>Field number for the "workers" field.</summary>
    public const int WorkersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::y3d.e.YWorker> _repeated_workers_codec
        = pb::FieldCodec.ForMessage(10, global::y3d.e.YWorker.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YWorker> workers_ = new pbc::RepeatedField<global::y3d.e.YWorker>();
    /// <summary>
    ///  YWorker master = 1;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YWorker> Workers {
      get { return workers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YWorkerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YWorkerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!workers_.Equals(other.workers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= workers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      workers_.WriteTo(output, _repeated_workers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += workers_.CalculateSize(_repeated_workers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YWorkerList other) {
      if (other == null) {
        return;
      }
      workers_.Add(other.workers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            workers_.AddEntriesFrom(input, _repeated_workers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkerParam : pb::IMessage<WorkerParam> {
    private static readonly pb::MessageParser<WorkerParam> _parser = new pb::MessageParser<WorkerParam>(() => new WorkerParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkerParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerParam(WorkerParam other) : this() {
      switch (other.WtypeCase) {
        case WtypeOneofCase.Wid:
          Wid = other.Wid;
          break;
        case WtypeOneofCase.Wname:
          Wname = other.Wname;
          break;
        case WtypeOneofCase.Worker:
          Worker = other.Worker.Clone();
          break;
        case WtypeOneofCase.Ip:
          Ip = other.Ip;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerParam Clone() {
      return new WorkerParam(this);
    }

    /// <summary>Field number for the "wid" field.</summary>
    public const int WidFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wid {
      get { return wtypeCase_ == WtypeOneofCase.Wid ? (int) wtype_ : 0; }
      set {
        wtype_ = value;
        wtypeCase_ = WtypeOneofCase.Wid;
      }
    }

    /// <summary>Field number for the "wname" field.</summary>
    public const int WnameFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Wname {
      get { return wtypeCase_ == WtypeOneofCase.Wname ? (string) wtype_ : ""; }
      set {
        wtype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        wtypeCase_ = WtypeOneofCase.Wname;
      }
    }

    /// <summary>Field number for the "worker" field.</summary>
    public const int WorkerFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YWorker Worker {
      get { return wtypeCase_ == WtypeOneofCase.Worker ? (global::y3d.e.YWorker) wtype_ : null; }
      set {
        wtype_ = value;
        wtypeCase_ = value == null ? WtypeOneofCase.None : WtypeOneofCase.Worker;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return wtypeCase_ == WtypeOneofCase.Ip ? (string) wtype_ : ""; }
      set {
        wtype_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        wtypeCase_ = WtypeOneofCase.Ip;
      }
    }

    private object wtype_;
    /// <summary>Enum of possible cases for the "wtype" oneof.</summary>
    public enum WtypeOneofCase {
      None = 0,
      Wid = 1,
      Wname = 2,
      Worker = 3,
      Ip = 4,
    }
    private WtypeOneofCase wtypeCase_ = WtypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WtypeOneofCase WtypeCase {
      get { return wtypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWtype() {
      wtypeCase_ = WtypeOneofCase.None;
      wtype_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkerParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkerParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Wid != other.Wid) return false;
      if (Wname != other.Wname) return false;
      if (!object.Equals(Worker, other.Worker)) return false;
      if (Ip != other.Ip) return false;
      if (WtypeCase != other.WtypeCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (wtypeCase_ == WtypeOneofCase.Wid) hash ^= Wid.GetHashCode();
      if (wtypeCase_ == WtypeOneofCase.Wname) hash ^= Wname.GetHashCode();
      if (wtypeCase_ == WtypeOneofCase.Worker) hash ^= Worker.GetHashCode();
      if (wtypeCase_ == WtypeOneofCase.Ip) hash ^= Ip.GetHashCode();
      hash ^= (int) wtypeCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (wtypeCase_ == WtypeOneofCase.Wid) {
        output.WriteRawTag(8);
        output.WriteInt32(Wid);
      }
      if (wtypeCase_ == WtypeOneofCase.Wname) {
        output.WriteRawTag(18);
        output.WriteString(Wname);
      }
      if (wtypeCase_ == WtypeOneofCase.Worker) {
        output.WriteRawTag(26);
        output.WriteMessage(Worker);
      }
      if (wtypeCase_ == WtypeOneofCase.Ip) {
        output.WriteRawTag(34);
        output.WriteString(Ip);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (wtypeCase_ == WtypeOneofCase.Wid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wid);
      }
      if (wtypeCase_ == WtypeOneofCase.Wname) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Wname);
      }
      if (wtypeCase_ == WtypeOneofCase.Worker) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Worker);
      }
      if (wtypeCase_ == WtypeOneofCase.Ip) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkerParam other) {
      if (other == null) {
        return;
      }
      switch (other.WtypeCase) {
        case WtypeOneofCase.Wid:
          Wid = other.Wid;
          break;
        case WtypeOneofCase.Wname:
          Wname = other.Wname;
          break;
        case WtypeOneofCase.Worker:
          Worker = other.Worker;
          break;
        case WtypeOneofCase.Ip:
          Ip = other.Ip;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Wid = input.ReadInt32();
            break;
          }
          case 18: {
            Wname = input.ReadString();
            break;
          }
          case 26: {
            global::y3d.e.YWorker subBuilder = new global::y3d.e.YWorker();
            if (wtypeCase_ == WtypeOneofCase.Worker) {
              subBuilder.MergeFrom(Worker);
            }
            input.ReadMessage(subBuilder);
            Worker = subBuilder;
            break;
          }
          case 34: {
            Ip = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AllWorkerParam : pb::IMessage<AllWorkerParam> {
    private static readonly pb::MessageParser<AllWorkerParam> _parser = new pb::MessageParser<AllWorkerParam>(() => new AllWorkerParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AllWorkerParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllWorkerParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllWorkerParam(AllWorkerParam other) : this() {
      status_ = other.status_;
      refresh_ = other.refresh_;
      Machine = other.machine_ != null ? other.Machine.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AllWorkerParam Clone() {
      return new AllWorkerParam(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "refresh" field.</summary>
    public const int RefreshFieldNumber = 2;
    private bool refresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Refresh {
      get { return refresh_; }
      set {
        refresh_ = value;
      }
    }

    /// <summary>Field number for the "machine" field.</summary>
    public const int MachineFieldNumber = 3;
    private global::y3d.e.YMachine machine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMachine Machine {
      get { return machine_; }
      set {
        machine_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AllWorkerParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AllWorkerParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (Refresh != other.Refresh) return false;
      if (!object.Equals(Machine, other.Machine)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Refresh != false) hash ^= Refresh.GetHashCode();
      if (machine_ != null) hash ^= Machine.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Status);
      }
      if (Refresh != false) {
        output.WriteRawTag(16);
        output.WriteBool(Refresh);
      }
      if (machine_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Machine);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      if (Refresh != false) {
        size += 1 + 1;
      }
      if (machine_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Machine);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AllWorkerParam other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Refresh != false) {
        Refresh = other.Refresh;
      }
      if (other.machine_ != null) {
        if (machine_ == null) {
          machine_ = new global::y3d.e.YMachine();
        }
        Machine.MergeFrom(other.Machine);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Status = input.ReadInt32();
            break;
          }
          case 16: {
            Refresh = input.ReadBool();
            break;
          }
          case 26: {
            if (machine_ == null) {
              machine_ = new global::y3d.e.YMachine();
            }
            input.ReadMessage(machine_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YWorkerRequest : pb::IMessage<YWorkerRequest> {
    private static readonly pb::MessageParser<YWorkerRequest> _parser = new pb::MessageParser<YWorkerRequest>(() => new YWorkerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YWorkerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YWorkerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YWorkerRequest(YWorkerRequest other) : this() {
      callInApp_ = other.callInApp_;
      slient_ = other.slient_;
      App = other.app_ != null ? other.App.Clone() : null;
      Machine = other.machine_ != null ? other.Machine.Clone() : null;
      wtype_ = other.wtype_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YWorkerRequest Clone() {
      return new YWorkerRequest(this);
    }

    /// <summary>Field number for the "call_in_app" field.</summary>
    public const int CallInAppFieldNumber = 1;
    private bool callInApp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CallInApp {
      get { return callInApp_; }
      set {
        callInApp_ = value;
      }
    }

    /// <summary>Field number for the "slient" field.</summary>
    public const int SlientFieldNumber = 2;
    private bool slient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Slient {
      get { return slient_; }
      set {
        slient_ = value;
      }
    }

    /// <summary>Field number for the "app" field.</summary>
    public const int AppFieldNumber = 3;
    private global::y3d.e.WorkerApp app_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.WorkerApp App {
      get { return app_; }
      set {
        app_ = value;
      }
    }

    /// <summary>Field number for the "machine" field.</summary>
    public const int MachineFieldNumber = 4;
    private global::y3d.e.YMachine machine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMachine Machine {
      get { return machine_; }
      set {
        machine_ = value;
      }
    }

    /// <summary>Field number for the "wtype" field.</summary>
    public const int WtypeFieldNumber = 5;
    private global::y3d.e.WorkerType wtype_ = 0;
    /// <summary>
    ///  bool other_machine=5;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.WorkerType Wtype {
      get { return wtype_; }
      set {
        wtype_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YWorkerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YWorkerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CallInApp != other.CallInApp) return false;
      if (Slient != other.Slient) return false;
      if (!object.Equals(App, other.App)) return false;
      if (!object.Equals(Machine, other.Machine)) return false;
      if (Wtype != other.Wtype) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CallInApp != false) hash ^= CallInApp.GetHashCode();
      if (Slient != false) hash ^= Slient.GetHashCode();
      if (app_ != null) hash ^= App.GetHashCode();
      if (machine_ != null) hash ^= Machine.GetHashCode();
      if (Wtype != 0) hash ^= Wtype.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CallInApp != false) {
        output.WriteRawTag(8);
        output.WriteBool(CallInApp);
      }
      if (Slient != false) {
        output.WriteRawTag(16);
        output.WriteBool(Slient);
      }
      if (app_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(App);
      }
      if (machine_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Machine);
      }
      if (Wtype != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Wtype);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CallInApp != false) {
        size += 1 + 1;
      }
      if (Slient != false) {
        size += 1 + 1;
      }
      if (app_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(App);
      }
      if (machine_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Machine);
      }
      if (Wtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Wtype);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YWorkerRequest other) {
      if (other == null) {
        return;
      }
      if (other.CallInApp != false) {
        CallInApp = other.CallInApp;
      }
      if (other.Slient != false) {
        Slient = other.Slient;
      }
      if (other.app_ != null) {
        if (app_ == null) {
          app_ = new global::y3d.e.WorkerApp();
        }
        App.MergeFrom(other.App);
      }
      if (other.machine_ != null) {
        if (machine_ == null) {
          machine_ = new global::y3d.e.YMachine();
        }
        Machine.MergeFrom(other.Machine);
      }
      if (other.Wtype != 0) {
        Wtype = other.Wtype;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CallInApp = input.ReadBool();
            break;
          }
          case 16: {
            Slient = input.ReadBool();
            break;
          }
          case 26: {
            if (app_ == null) {
              app_ = new global::y3d.e.WorkerApp();
            }
            input.ReadMessage(app_);
            break;
          }
          case 34: {
            if (machine_ == null) {
              machine_ = new global::y3d.e.YMachine();
            }
            input.ReadMessage(machine_);
            break;
          }
          case 40: {
            wtype_ = (global::y3d.e.WorkerType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkerApp : pb::IMessage<WorkerApp> {
    private static readonly pb::MessageParser<WorkerApp> _parser = new pb::MessageParser<WorkerApp>(() => new WorkerApp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkerApp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerApp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerApp(WorkerApp other) : this() {
      wname_ = other.wname_;
      pathRun_ = other.pathRun_;
      extra_ = other.extra_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkerApp Clone() {
      return new WorkerApp(this);
    }

    /// <summary>Field number for the "wname" field.</summary>
    public const int WnameFieldNumber = 1;
    private string wname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Wname {
      get { return wname_; }
      set {
        wname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "path_run" field.</summary>
    public const int PathRunFieldNumber = 2;
    private string pathRun_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PathRun {
      get { return pathRun_; }
      set {
        pathRun_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extra" field.</summary>
    public const int ExtraFieldNumber = 3;
    private string extra_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Extra {
      get { return extra_; }
      set {
        extra_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkerApp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkerApp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Wname != other.Wname) return false;
      if (PathRun != other.PathRun) return false;
      if (Extra != other.Extra) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Wname.Length != 0) hash ^= Wname.GetHashCode();
      if (PathRun.Length != 0) hash ^= PathRun.GetHashCode();
      if (Extra.Length != 0) hash ^= Extra.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Wname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Wname);
      }
      if (PathRun.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PathRun);
      }
      if (Extra.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Extra);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Wname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Wname);
      }
      if (PathRun.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PathRun);
      }
      if (Extra.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Extra);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkerApp other) {
      if (other == null) {
        return;
      }
      if (other.Wname.Length != 0) {
        Wname = other.Wname;
      }
      if (other.PathRun.Length != 0) {
        PathRun = other.PathRun;
      }
      if (other.Extra.Length != 0) {
        Extra = other.Extra;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Wname = input.ReadString();
            break;
          }
          case 18: {
            PathRun = input.ReadString();
            break;
          }
          case 26: {
            Extra = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YWorkerResponse : pb::IMessage<YWorkerResponse> {
    private static readonly pb::MessageParser<YWorkerResponse> _parser = new pb::MessageParser<YWorkerResponse>(() => new YWorkerResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YWorkerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YWorkerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YWorkerResponse(YWorkerResponse other) : this() {
      Wlist = other.wlist_ != null ? other.Wlist.Clone() : null;
      Worker = other.worker_ != null ? other.Worker.Clone() : null;
      error_ = other.error_;
      message_ = other.message_;
      wid_ = other.wid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YWorkerResponse Clone() {
      return new YWorkerResponse(this);
    }

    /// <summary>Field number for the "wlist" field.</summary>
    public const int WlistFieldNumber = 1;
    private global::y3d.e.YWorkerList wlist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YWorkerList Wlist {
      get { return wlist_; }
      set {
        wlist_ = value;
      }
    }

    /// <summary>Field number for the "worker" field.</summary>
    public const int WorkerFieldNumber = 2;
    private global::y3d.e.YWorker worker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YWorker Worker {
      get { return worker_; }
      set {
        worker_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private bool error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wid" field.</summary>
    public const int WidFieldNumber = 5;
    private int wid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Wid {
      get { return wid_; }
      set {
        wid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YWorkerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YWorkerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Wlist, other.Wlist)) return false;
      if (!object.Equals(Worker, other.Worker)) return false;
      if (Error != other.Error) return false;
      if (Message != other.Message) return false;
      if (Wid != other.Wid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (wlist_ != null) hash ^= Wlist.GetHashCode();
      if (worker_ != null) hash ^= Worker.GetHashCode();
      if (Error != false) hash ^= Error.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Wid != 0) hash ^= Wid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (wlist_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Wlist);
      }
      if (worker_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Worker);
      }
      if (Error != false) {
        output.WriteRawTag(24);
        output.WriteBool(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
      if (Wid != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Wid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (wlist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wlist);
      }
      if (worker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Worker);
      }
      if (Error != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Wid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YWorkerResponse other) {
      if (other == null) {
        return;
      }
      if (other.wlist_ != null) {
        if (wlist_ == null) {
          wlist_ = new global::y3d.e.YWorkerList();
        }
        Wlist.MergeFrom(other.Wlist);
      }
      if (other.worker_ != null) {
        if (worker_ == null) {
          worker_ = new global::y3d.e.YWorker();
        }
        Worker.MergeFrom(other.Worker);
      }
      if (other.Error != false) {
        Error = other.Error;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Wid != 0) {
        Wid = other.Wid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (wlist_ == null) {
              wlist_ = new global::y3d.e.YWorkerList();
            }
            input.ReadMessage(wlist_);
            break;
          }
          case 18: {
            if (worker_ == null) {
              worker_ = new global::y3d.e.YWorker();
            }
            input.ReadMessage(worker_);
            break;
          }
          case 24: {
            Error = input.ReadBool();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
          case 40: {
            Wid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MasterServerInfo : pb::IMessage<MasterServerInfo> {
    private static readonly pb::MessageParser<MasterServerInfo> _parser = new pb::MessageParser<MasterServerInfo>(() => new MasterServerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MasterServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterServerInfo(MasterServerInfo other) : this() {
      mname_ = other.mname_;
      address_ = other.address_;
      port_ = other.port_;
      sharedFolder_ = other.sharedFolder_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MasterServerInfo Clone() {
      return new MasterServerInfo(this);
    }

    /// <summary>Field number for the "mname" field.</summary>
    public const int MnameFieldNumber = 1;
    private string mname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mname {
      get { return mname_; }
      set {
        mname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 5;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "shared_folder" field.</summary>
    public const int SharedFolderFieldNumber = 3;
    private string sharedFolder_ = "";
    /// <summary>
    ///  repeated YMainWorker main_workers = 4;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SharedFolder {
      get { return sharedFolder_; }
      set {
        sharedFolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MasterServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MasterServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mname != other.Mname) return false;
      if (Address != other.Address) return false;
      if (Port != other.Port) return false;
      if (SharedFolder != other.SharedFolder) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mname.Length != 0) hash ^= Mname.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (SharedFolder.Length != 0) hash ^= SharedFolder.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mname);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Address);
      }
      if (SharedFolder.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SharedFolder);
      }
      if (Port != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Port);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mname);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (SharedFolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SharedFolder);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MasterServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Mname.Length != 0) {
        Mname = other.Mname;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.SharedFolder.Length != 0) {
        SharedFolder = other.SharedFolder;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Mname = input.ReadString();
            break;
          }
          case 18: {
            Address = input.ReadString();
            break;
          }
          case 26: {
            SharedFolder = input.ReadString();
            break;
          }
          case 40: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  ------------------------------ User,
  /// </summary>
  public sealed partial class YMachine : pb::IMessage<YMachine> {
    private static readonly pb::MessageParser<YMachine> _parser = new pb::MessageParser<YMachine>(() => new YMachine());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YMachine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMachine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMachine(YMachine other) : this() {
      mname_ = other.mname_;
      ipAddress_ = other.ipAddress_;
      workingFolder_ = other.workingFolder_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YMachine Clone() {
      return new YMachine(this);
    }

    /// <summary>Field number for the "mname" field.</summary>
    public const int MnameFieldNumber = 1;
    private string mname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mname {
      get { return mname_; }
      set {
        mname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip_address" field.</summary>
    public const int IpAddressFieldNumber = 2;
    private string ipAddress_ = "";
    /// <summary>
    ///  string uname = 2;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpAddress {
      get { return ipAddress_; }
      set {
        ipAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "working_folder" field.</summary>
    public const int WorkingFolderFieldNumber = 3;
    private string workingFolder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkingFolder {
      get { return workingFolder_; }
      set {
        workingFolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YMachine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YMachine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mname != other.Mname) return false;
      if (IpAddress != other.IpAddress) return false;
      if (WorkingFolder != other.WorkingFolder) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mname.Length != 0) hash ^= Mname.GetHashCode();
      if (IpAddress.Length != 0) hash ^= IpAddress.GetHashCode();
      if (WorkingFolder.Length != 0) hash ^= WorkingFolder.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mname);
      }
      if (IpAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IpAddress);
      }
      if (WorkingFolder.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WorkingFolder);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mname);
      }
      if (IpAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpAddress);
      }
      if (WorkingFolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkingFolder);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YMachine other) {
      if (other == null) {
        return;
      }
      if (other.Mname.Length != 0) {
        Mname = other.Mname;
      }
      if (other.IpAddress.Length != 0) {
        IpAddress = other.IpAddress;
      }
      if (other.WorkingFolder.Length != 0) {
        WorkingFolder = other.WorkingFolder;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Mname = input.ReadString();
            break;
          }
          case 18: {
            IpAddress = input.ReadString();
            break;
          }
          case 26: {
            WorkingFolder = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class YUser : pb::IMessage<YUser> {
    private static readonly pb::MessageParser<YUser> _parser = new pb::MessageParser<YUser>(() => new YUser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YUser(YUser other) : this() {
      id_ = other.id_;
      username_ = other.username_;
      password_ = other.password_;
      apikey_ = other.apikey_;
      role_ = other.role_;
      Settings = other.settings_ != null ? other.Settings.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YUser Clone() {
      return new YUser(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "apikey" field.</summary>
    public const int ApikeyFieldNumber = 4;
    private string apikey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Apikey {
      get { return apikey_; }
      set {
        apikey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 5;
    private global::y3d.e.YUser.Types.YUserRole role_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YUser.Types.YUserRole Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "settings" field.</summary>
    public const int SettingsFieldNumber = 6;
    private global::y3d.e.UserSetting settings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.UserSetting Settings {
      get { return settings_; }
      set {
        settings_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      if (Apikey != other.Apikey) return false;
      if (Role != other.Role) return false;
      if (!object.Equals(Settings, other.Settings)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Apikey.Length != 0) hash ^= Apikey.GetHashCode();
      if (Role != 0) hash ^= Role.GetHashCode();
      if (settings_ != null) hash ^= Settings.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
      if (Apikey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Apikey);
      }
      if (Role != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Role);
      }
      if (settings_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Settings);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Apikey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Apikey);
      }
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
      }
      if (settings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Settings);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YUser other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Apikey.Length != 0) {
        Apikey = other.Apikey;
      }
      if (other.Role != 0) {
        Role = other.Role;
      }
      if (other.settings_ != null) {
        if (settings_ == null) {
          settings_ = new global::y3d.e.UserSetting();
        }
        Settings.MergeFrom(other.Settings);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
          case 34: {
            Apikey = input.ReadString();
            break;
          }
          case 40: {
            role_ = (global::y3d.e.YUser.Types.YUserRole) input.ReadEnum();
            break;
          }
          case 50: {
            if (settings_ == null) {
              settings_ = new global::y3d.e.UserSetting();
            }
            input.ReadMessage(settings_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the YUser message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum YUserRole {
        [pbr::OriginalName("ADMIN")] Admin = 0,
        [pbr::OriginalName("LEADER")] Leader = 1,
        [pbr::OriginalName("DEFAULT")] Default = 2,
      }

    }
    #endregion

  }

  public sealed partial class UserSetting : pb::IMessage<UserSetting> {
    private static readonly pb::MessageParser<UserSetting> _parser = new pb::MessageParser<UserSetting>(() => new UserSetting());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSetting> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSetting() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSetting(UserSetting other) : this() {
      workspace_ = other.workspace_;
      nickname_ = other.nickname_;
      masterIp_ = other.masterIp_;
      projects_ = other.projects_.Clone();
      apps_ = other.apps_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSetting Clone() {
      return new UserSetting(this);
    }

    /// <summary>Field number for the "workspace" field.</summary>
    public const int WorkspaceFieldNumber = 2;
    private string workspace_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Workspace {
      get { return workspace_; }
      set {
        workspace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 3;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "master_ip" field.</summary>
    public const int MasterIpFieldNumber = 4;
    private string masterIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MasterIp {
      get { return masterIp_; }
      set {
        masterIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "projects" field.</summary>
    public const int ProjectsFieldNumber = 5;
    private static readonly pbc::MapField<string, global::y3d.e.ProjectInfo>.Codec _map_projects_codec
        = new pbc::MapField<string, global::y3d.e.ProjectInfo>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::y3d.e.ProjectInfo.Parser), 42);
    private readonly pbc::MapField<string, global::y3d.e.ProjectInfo> projects_ = new pbc::MapField<string, global::y3d.e.ProjectInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::y3d.e.ProjectInfo> Projects {
      get { return projects_; }
    }

    /// <summary>Field number for the "apps" field.</summary>
    public const int AppsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::y3d.e.WorkerApp>.Codec _map_apps_codec
        = new pbc::MapField<string, global::y3d.e.WorkerApp>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::y3d.e.WorkerApp.Parser), 10);
    private readonly pbc::MapField<string, global::y3d.e.WorkerApp> apps_ = new pbc::MapField<string, global::y3d.e.WorkerApp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::y3d.e.WorkerApp> Apps {
      get { return apps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSetting);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSetting other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Workspace != other.Workspace) return false;
      if (Nickname != other.Nickname) return false;
      if (MasterIp != other.MasterIp) return false;
      if (!Projects.Equals(other.Projects)) return false;
      if (!Apps.Equals(other.Apps)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Workspace.Length != 0) hash ^= Workspace.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (MasterIp.Length != 0) hash ^= MasterIp.GetHashCode();
      hash ^= Projects.GetHashCode();
      hash ^= Apps.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      apps_.WriteTo(output, _map_apps_codec);
      if (Workspace.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Workspace);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Nickname);
      }
      if (MasterIp.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MasterIp);
      }
      projects_.WriteTo(output, _map_projects_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Workspace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Workspace);
      }
      if (Nickname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (MasterIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MasterIp);
      }
      size += projects_.CalculateSize(_map_projects_codec);
      size += apps_.CalculateSize(_map_apps_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSetting other) {
      if (other == null) {
        return;
      }
      if (other.Workspace.Length != 0) {
        Workspace = other.Workspace;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.MasterIp.Length != 0) {
        MasterIp = other.MasterIp;
      }
      projects_.Add(other.projects_);
      apps_.Add(other.apps_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            apps_.AddEntriesFrom(input, _map_apps_codec);
            break;
          }
          case 18: {
            Workspace = input.ReadString();
            break;
          }
          case 26: {
            Nickname = input.ReadString();
            break;
          }
          case 34: {
            MasterIp = input.ReadString();
            break;
          }
          case 42: {
            projects_.AddEntriesFrom(input, _map_projects_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserParam : pb::IMessage<UserParam> {
    private static readonly pb::MessageParser<UserParam> _parser = new pb::MessageParser<UserParam>(() => new UserParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserParam(UserParam other) : this() {
      uname_ = other.uname_;
      password_ = other.password_;
      token_ = other.token_;
      Usetting = other.usetting_ != null ? other.Usetting.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserParam Clone() {
      return new UserParam(this);
    }

    /// <summary>Field number for the "uname" field.</summary>
    public const int UnameFieldNumber = 1;
    private string uname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uname {
      get { return uname_; }
      set {
        uname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 3;
    private string token_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usetting" field.</summary>
    public const int UsettingFieldNumber = 4;
    private global::y3d.e.UserSetting usetting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.UserSetting Usetting {
      get { return usetting_; }
      set {
        usetting_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uname != other.Uname) return false;
      if (Password != other.Password) return false;
      if (Token != other.Token) return false;
      if (!object.Equals(Usetting, other.Usetting)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uname.Length != 0) hash ^= Uname.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (usetting_ != null) hash ^= Usetting.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uname);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Token);
      }
      if (usetting_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Usetting);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uname);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (usetting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Usetting);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserParam other) {
      if (other == null) {
        return;
      }
      if (other.Uname.Length != 0) {
        Uname = other.Uname;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.usetting_ != null) {
        if (usetting_ == null) {
          usetting_ = new global::y3d.e.UserSetting();
        }
        Usetting.MergeFrom(other.Usetting);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Uname = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            Token = input.ReadString();
            break;
          }
          case 34: {
            if (usetting_ == null) {
              usetting_ = new global::y3d.e.UserSetting();
            }
            input.ReadMessage(usetting_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserResponse : pb::IMessage<UserResponse> {
    private static readonly pb::MessageParser<UserResponse> _parser = new pb::MessageParser<UserResponse>(() => new UserResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserResponse(UserResponse other) : this() {
      User = other.user_ != null ? other.User.Clone() : null;
      Rep = other.rep_ != null ? other.Rep.Clone() : null;
      Wlist = other.wlist_ != null ? other.Wlist.Clone() : null;
      Usetting = other.usetting_ != null ? other.Usetting.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserResponse Clone() {
      return new UserResponse(this);
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 1;
    private global::y3d.e.YUser user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YUser User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "rep" field.</summary>
    public const int RepFieldNumber = 2;
    private global::y3d.e.ResultReply rep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ResultReply Rep {
      get { return rep_; }
      set {
        rep_ = value;
      }
    }

    /// <summary>Field number for the "wlist" field.</summary>
    public const int WlistFieldNumber = 3;
    private global::y3d.e.YWorkerList wlist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YWorkerList Wlist {
      get { return wlist_; }
      set {
        wlist_ = value;
      }
    }

    /// <summary>Field number for the "usetting" field.</summary>
    public const int UsettingFieldNumber = 4;
    private global::y3d.e.UserSetting usetting_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.UserSetting Usetting {
      get { return usetting_; }
      set {
        usetting_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Rep, other.Rep)) return false;
      if (!object.Equals(Wlist, other.Wlist)) return false;
      if (!object.Equals(Usetting, other.Usetting)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (user_ != null) hash ^= User.GetHashCode();
      if (rep_ != null) hash ^= Rep.GetHashCode();
      if (wlist_ != null) hash ^= Wlist.GetHashCode();
      if (usetting_ != null) hash ^= Usetting.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (user_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(User);
      }
      if (rep_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rep);
      }
      if (wlist_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Wlist);
      }
      if (usetting_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Usetting);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (rep_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rep);
      }
      if (wlist_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Wlist);
      }
      if (usetting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Usetting);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserResponse other) {
      if (other == null) {
        return;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::y3d.e.YUser();
        }
        User.MergeFrom(other.User);
      }
      if (other.rep_ != null) {
        if (rep_ == null) {
          rep_ = new global::y3d.e.ResultReply();
        }
        Rep.MergeFrom(other.Rep);
      }
      if (other.wlist_ != null) {
        if (wlist_ == null) {
          wlist_ = new global::y3d.e.YWorkerList();
        }
        Wlist.MergeFrom(other.Wlist);
      }
      if (other.usetting_ != null) {
        if (usetting_ == null) {
          usetting_ = new global::y3d.e.UserSetting();
        }
        Usetting.MergeFrom(other.Usetting);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (user_ == null) {
              user_ = new global::y3d.e.YUser();
            }
            input.ReadMessage(user_);
            break;
          }
          case 18: {
            if (rep_ == null) {
              rep_ = new global::y3d.e.ResultReply();
            }
            input.ReadMessage(rep_);
            break;
          }
          case 26: {
            if (wlist_ == null) {
              wlist_ = new global::y3d.e.YWorkerList();
            }
            input.ReadMessage(wlist_);
            break;
          }
          case 34: {
            if (usetting_ == null) {
              usetting_ = new global::y3d.e.UserSetting();
            }
            input.ReadMessage(usetting_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VerTest : pb::IMessage<VerTest> {
    private static readonly pb::MessageParser<VerTest> _parser = new pb::MessageParser<VerTest>(() => new VerTest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerTest(VerTest other) : this() {
      id_ = other.id_;
      vnote_ = other.vnote_;
      Mat = other.mat_ != null ? other.Mat.Clone() : null;
      Mmat = other.mmat_ != null ? other.Mmat.Clone() : null;
      uvmap_ = other.uvmap_.Clone();
      MapOut = other.mapOut_ != null ? other.MapOut.Clone() : null;
      switch (other.TnameCase) {
        case TnameOneofCase.Oname:
          Oname = other.Oname;
          break;
        case TnameOneofCase.Gname:
          Gname = other.Gname;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerTest Clone() {
      return new VerTest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vnote" field.</summary>
    public const int VnoteFieldNumber = 2;
    private string vnote_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Vnote {
      get { return vnote_; }
      set {
        vnote_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oname" field.</summary>
    public const int OnameFieldNumber = 4;
    /// <summary>
    ///  is object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oname {
      get { return tnameCase_ == TnameOneofCase.Oname ? (string) tname_ : ""; }
      set {
        tname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        tnameCase_ = TnameOneofCase.Oname;
      }
    }

    /// <summary>Field number for the "gname" field.</summary>
    public const int GnameFieldNumber = 5;
    /// <summary>
    ///  is group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gname {
      get { return tnameCase_ == TnameOneofCase.Gname ? (string) tname_ : ""; }
      set {
        tname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        tnameCase_ = TnameOneofCase.Gname;
      }
    }

    /// <summary>Field number for the "mat" field.</summary>
    public const int MatFieldNumber = 7;
    private global::y3d.e.YMat mat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMat Mat {
      get { return mat_; }
      set {
        mat_ = value;
      }
    }

    /// <summary>Field number for the "mmat" field.</summary>
    public const int MmatFieldNumber = 8;
    private global::y3d.e.YMultiMat mmat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMultiMat Mmat {
      get { return mmat_; }
      set {
        mmat_ = value;
      }
    }

    /// <summary>Field number for the "uvmap" field.</summary>
    public const int UvmapFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_uvmap_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> uvmap_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Uvmap {
      get { return uvmap_; }
    }

    /// <summary>Field number for the "map_out" field.</summary>
    public const int MapOutFieldNumber = 10;
    private global::y3d.e.YBaseMap mapOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YBaseMap MapOut {
      get { return mapOut_; }
      set {
        mapOut_ = value;
      }
    }

    private object tname_;
    /// <summary>Enum of possible cases for the "tname" oneof.</summary>
    public enum TnameOneofCase {
      None = 0,
      Oname = 4,
      Gname = 5,
    }
    private TnameOneofCase tnameCase_ = TnameOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TnameOneofCase TnameCase {
      get { return tnameCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTname() {
      tnameCase_ = TnameOneofCase.None;
      tname_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Vnote != other.Vnote) return false;
      if (Oname != other.Oname) return false;
      if (Gname != other.Gname) return false;
      if (!object.Equals(Mat, other.Mat)) return false;
      if (!object.Equals(Mmat, other.Mmat)) return false;
      if(!uvmap_.Equals(other.uvmap_)) return false;
      if (!object.Equals(MapOut, other.MapOut)) return false;
      if (TnameCase != other.TnameCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Vnote.Length != 0) hash ^= Vnote.GetHashCode();
      if (tnameCase_ == TnameOneofCase.Oname) hash ^= Oname.GetHashCode();
      if (tnameCase_ == TnameOneofCase.Gname) hash ^= Gname.GetHashCode();
      if (mat_ != null) hash ^= Mat.GetHashCode();
      if (mmat_ != null) hash ^= Mmat.GetHashCode();
      hash ^= uvmap_.GetHashCode();
      if (mapOut_ != null) hash ^= MapOut.GetHashCode();
      hash ^= (int) tnameCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Vnote.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Vnote);
      }
      if (tnameCase_ == TnameOneofCase.Oname) {
        output.WriteRawTag(34);
        output.WriteString(Oname);
      }
      if (tnameCase_ == TnameOneofCase.Gname) {
        output.WriteRawTag(42);
        output.WriteString(Gname);
      }
      if (mat_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Mat);
      }
      if (mmat_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Mmat);
      }
      uvmap_.WriteTo(output, _repeated_uvmap_codec);
      if (mapOut_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MapOut);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Vnote.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Vnote);
      }
      if (tnameCase_ == TnameOneofCase.Oname) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oname);
      }
      if (tnameCase_ == TnameOneofCase.Gname) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gname);
      }
      if (mat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mat);
      }
      if (mmat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mmat);
      }
      size += uvmap_.CalculateSize(_repeated_uvmap_codec);
      if (mapOut_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapOut);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerTest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Vnote.Length != 0) {
        Vnote = other.Vnote;
      }
      if (other.mat_ != null) {
        if (mat_ == null) {
          mat_ = new global::y3d.e.YMat();
        }
        Mat.MergeFrom(other.Mat);
      }
      if (other.mmat_ != null) {
        if (mmat_ == null) {
          mmat_ = new global::y3d.e.YMultiMat();
        }
        Mmat.MergeFrom(other.Mmat);
      }
      uvmap_.Add(other.uvmap_);
      if (other.mapOut_ != null) {
        if (mapOut_ == null) {
          mapOut_ = new global::y3d.e.YBaseMap();
        }
        MapOut.MergeFrom(other.MapOut);
      }
      switch (other.TnameCase) {
        case TnameOneofCase.Oname:
          Oname = other.Oname;
          break;
        case TnameOneofCase.Gname:
          Gname = other.Gname;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            Vnote = input.ReadString();
            break;
          }
          case 34: {
            Oname = input.ReadString();
            break;
          }
          case 42: {
            Gname = input.ReadString();
            break;
          }
          case 58: {
            if (mat_ == null) {
              mat_ = new global::y3d.e.YMat();
            }
            input.ReadMessage(mat_);
            break;
          }
          case 66: {
            if (mmat_ == null) {
              mmat_ = new global::y3d.e.YMultiMat();
            }
            input.ReadMessage(mmat_);
            break;
          }
          case 74: {
            uvmap_.AddEntriesFrom(input, _repeated_uvmap_codec);
            break;
          }
          case 82: {
            if (mapOut_ == null) {
              mapOut_ = new global::y3d.e.YBaseMap();
            }
            input.ReadMessage(mapOut_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YListTest : pb::IMessage<YListTest> {
    private static readonly pb::MessageParser<YListTest> _parser = new pb::MessageParser<YListTest>(() => new YListTest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YListTest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YListTest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YListTest(YListTest other) : this() {
      otests_ = other.otests_.Clone();
      gtests_ = other.gtests_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YListTest Clone() {
      return new YListTest(this);
    }

    /// <summary>Field number for the "otests" field.</summary>
    public const int OtestsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::y3d.e.VerTest> _repeated_otests_codec
        = pb::FieldCodec.ForMessage(10, global::y3d.e.VerTest.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.VerTest> otests_ = new pbc::RepeatedField<global::y3d.e.VerTest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.VerTest> Otests {
      get { return otests_; }
    }

    /// <summary>Field number for the "gtests" field.</summary>
    public const int GtestsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::y3d.e.VerTest> _repeated_gtests_codec
        = pb::FieldCodec.ForMessage(18, global::y3d.e.VerTest.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.VerTest> gtests_ = new pbc::RepeatedField<global::y3d.e.VerTest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.VerTest> Gtests {
      get { return gtests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YListTest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YListTest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!otests_.Equals(other.otests_)) return false;
      if(!gtests_.Equals(other.gtests_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= otests_.GetHashCode();
      hash ^= gtests_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      otests_.WriteTo(output, _repeated_otests_codec);
      gtests_.WriteTo(output, _repeated_gtests_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += otests_.CalculateSize(_repeated_otests_codec);
      size += gtests_.CalculateSize(_repeated_gtests_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YListTest other) {
      if (other == null) {
        return;
      }
      otests_.Add(other.otests_);
      gtests_.Add(other.gtests_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            otests_.AddEntriesFrom(input, _repeated_otests_codec);
            break;
          }
          case 18: {
            gtests_.AddEntriesFrom(input, _repeated_gtests_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserTestData : pb::IMessage<UserTestData> {
    private static readonly pb::MessageParser<UserTestData> _parser = new pb::MessageParser<UserTestData>(() => new UserTestData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserTestData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTestData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTestData(UserTestData other) : this() {
      utests_ = other.utests_.Clone();
      versions_ = other.versions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserTestData Clone() {
      return new UserTestData(this);
    }

    /// <summary>Field number for the "utests" field.</summary>
    public const int UtestsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::y3d.e.YListTest>.Codec _map_utests_codec
        = new pbc::MapField<string, global::y3d.e.YListTest>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::y3d.e.YListTest.Parser), 10);
    private readonly pbc::MapField<string, global::y3d.e.YListTest> utests_ = new pbc::MapField<string, global::y3d.e.YListTest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::y3d.e.YListTest> Utests {
      get { return utests_; }
    }

    /// <summary>Field number for the "versions" field.</summary>
    public const int VersionsFieldNumber = 2;
    private static readonly pbc::MapField<string, global::y3d.e.YListTest>.Codec _map_versions_codec
        = new pbc::MapField<string, global::y3d.e.YListTest>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::y3d.e.YListTest.Parser), 18);
    private readonly pbc::MapField<string, global::y3d.e.YListTest> versions_ = new pbc::MapField<string, global::y3d.e.YListTest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::y3d.e.YListTest> Versions {
      get { return versions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserTestData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserTestData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Utests.Equals(other.Utests)) return false;
      if (!Versions.Equals(other.Versions)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Utests.GetHashCode();
      hash ^= Versions.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      utests_.WriteTo(output, _map_utests_codec);
      versions_.WriteTo(output, _map_versions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += utests_.CalculateSize(_map_utests_codec);
      size += versions_.CalculateSize(_map_versions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserTestData other) {
      if (other == null) {
        return;
      }
      utests_.Add(other.utests_);
      versions_.Add(other.versions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            utests_.AddEntriesFrom(input, _map_utests_codec);
            break;
          }
          case 18: {
            versions_.AddEntriesFrom(input, _map_versions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class YItemMesh : pb::IMessage<YItemMesh> {
    private static readonly pb::MessageParser<YItemMesh> _parser = new pb::MessageParser<YItemMesh>(() => new YItemMesh());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YItemMesh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YItemMesh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YItemMesh(YItemMesh other) : this() {
      BakeMat = other.bakeMat_ != null ? other.BakeMat.Clone() : null;
      Map = other.map_ != null ? other.Map.Clone() : null;
      Mesh = other.mesh_ != null ? other.Mesh.Clone() : null;
      meshes_ = other.meshes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YItemMesh Clone() {
      return new YItemMesh(this);
    }

    /// <summary>Field number for the "bake_mat" field.</summary>
    public const int BakeMatFieldNumber = 1;
    private global::y3d.e.YMat bakeMat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMat BakeMat {
      get { return bakeMat_; }
      set {
        bakeMat_ = value;
      }
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 2;
    private global::y3d.e.YBaseMap map_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YBaseMap Map {
      get { return map_; }
      set {
        map_ = value;
      }
    }

    /// <summary>Field number for the "mesh" field.</summary>
    public const int MeshFieldNumber = 3;
    private global::y3d.e.YMesh mesh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMesh Mesh {
      get { return mesh_; }
      set {
        mesh_ = value;
      }
    }

    /// <summary>Field number for the "meshes" field.</summary>
    public const int MeshesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::y3d.e.YMesh> _repeated_meshes_codec
        = pb::FieldCodec.ForMessage(34, global::y3d.e.YMesh.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.YMesh> meshes_ = new pbc::RepeatedField<global::y3d.e.YMesh>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.YMesh> Meshes {
      get { return meshes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YItemMesh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YItemMesh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BakeMat, other.BakeMat)) return false;
      if (!object.Equals(Map, other.Map)) return false;
      if (!object.Equals(Mesh, other.Mesh)) return false;
      if(!meshes_.Equals(other.meshes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bakeMat_ != null) hash ^= BakeMat.GetHashCode();
      if (map_ != null) hash ^= Map.GetHashCode();
      if (mesh_ != null) hash ^= Mesh.GetHashCode();
      hash ^= meshes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bakeMat_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BakeMat);
      }
      if (map_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Map);
      }
      if (mesh_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Mesh);
      }
      meshes_.WriteTo(output, _repeated_meshes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bakeMat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BakeMat);
      }
      if (map_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      if (mesh_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mesh);
      }
      size += meshes_.CalculateSize(_repeated_meshes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YItemMesh other) {
      if (other == null) {
        return;
      }
      if (other.bakeMat_ != null) {
        if (bakeMat_ == null) {
          bakeMat_ = new global::y3d.e.YMat();
        }
        BakeMat.MergeFrom(other.BakeMat);
      }
      if (other.map_ != null) {
        if (map_ == null) {
          map_ = new global::y3d.e.YBaseMap();
        }
        Map.MergeFrom(other.Map);
      }
      if (other.mesh_ != null) {
        if (mesh_ == null) {
          mesh_ = new global::y3d.e.YMesh();
        }
        Mesh.MergeFrom(other.Mesh);
      }
      meshes_.Add(other.meshes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (bakeMat_ == null) {
              bakeMat_ = new global::y3d.e.YMat();
            }
            input.ReadMessage(bakeMat_);
            break;
          }
          case 18: {
            if (map_ == null) {
              map_ = new global::y3d.e.YBaseMap();
            }
            input.ReadMessage(map_);
            break;
          }
          case 26: {
            if (mesh_ == null) {
              mesh_ = new global::y3d.e.YMesh();
            }
            input.ReadMessage(mesh_);
            break;
          }
          case 34: {
            meshes_.AddEntriesFrom(input, _repeated_meshes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestObject : pb::IMessage<TestObject> {
    private static readonly pb::MessageParser<TestObject> _parser = new pb::MessageParser<TestObject>(() => new TestObject());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestObject(TestObject other) : this() {
      active_ = other.active_;
      OriginalMat = other.originalMat_ != null ? other.OriginalMat.Clone() : null;
      tname_ = other.tname_;
      oname_ = other.oname_;
      savePath_ = other.savePath_;
      Out = other.out_ != null ? other.Out.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestObject Clone() {
      return new TestObject(this);
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 1;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "original_mat" field.</summary>
    public const int OriginalMatFieldNumber = 2;
    private global::y3d.e.YMat originalMat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YMat OriginalMat {
      get { return originalMat_; }
      set {
        originalMat_ = value;
      }
    }

    /// <summary>Field number for the "tname" field.</summary>
    public const int TnameFieldNumber = 3;
    private string tname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tname {
      get { return tname_; }
      set {
        tname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "oname" field.</summary>
    public const int OnameFieldNumber = 4;
    private string oname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oname {
      get { return oname_; }
      set {
        oname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "save_path" field.</summary>
    public const int SavePathFieldNumber = 9;
    private string savePath_ = "";
    /// <summary>
    ///  string name_low=3;
    ///  string name_high=4;  
    ///  string name_cage=5;  
    ///  string obj_low= 6;  
    ///  string obj_high=7;  
    ///  string obj_cage=8;  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SavePath {
      get { return savePath_; }
      set {
        savePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "out" field.</summary>
    public const int OutFieldNumber = 10;
    private global::y3d.e.YItemMesh out_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.YItemMesh Out {
      get { return out_; }
      set {
        out_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Active != other.Active) return false;
      if (!object.Equals(OriginalMat, other.OriginalMat)) return false;
      if (Tname != other.Tname) return false;
      if (Oname != other.Oname) return false;
      if (SavePath != other.SavePath) return false;
      if (!object.Equals(Out, other.Out)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Active != false) hash ^= Active.GetHashCode();
      if (originalMat_ != null) hash ^= OriginalMat.GetHashCode();
      if (Tname.Length != 0) hash ^= Tname.GetHashCode();
      if (Oname.Length != 0) hash ^= Oname.GetHashCode();
      if (SavePath.Length != 0) hash ^= SavePath.GetHashCode();
      if (out_ != null) hash ^= Out.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Active != false) {
        output.WriteRawTag(8);
        output.WriteBool(Active);
      }
      if (originalMat_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OriginalMat);
      }
      if (Tname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Tname);
      }
      if (Oname.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Oname);
      }
      if (SavePath.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(SavePath);
      }
      if (out_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Out);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Active != false) {
        size += 1 + 1;
      }
      if (originalMat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OriginalMat);
      }
      if (Tname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tname);
      }
      if (Oname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oname);
      }
      if (SavePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SavePath);
      }
      if (out_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Out);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestObject other) {
      if (other == null) {
        return;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.originalMat_ != null) {
        if (originalMat_ == null) {
          originalMat_ = new global::y3d.e.YMat();
        }
        OriginalMat.MergeFrom(other.OriginalMat);
      }
      if (other.Tname.Length != 0) {
        Tname = other.Tname;
      }
      if (other.Oname.Length != 0) {
        Oname = other.Oname;
      }
      if (other.SavePath.Length != 0) {
        SavePath = other.SavePath;
      }
      if (other.out_ != null) {
        if (out_ == null) {
          out_ = new global::y3d.e.YItemMesh();
        }
        Out.MergeFrom(other.Out);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Active = input.ReadBool();
            break;
          }
          case 18: {
            if (originalMat_ == null) {
              originalMat_ = new global::y3d.e.YMat();
            }
            input.ReadMessage(originalMat_);
            break;
          }
          case 26: {
            Tname = input.ReadString();
            break;
          }
          case 34: {
            Oname = input.ReadString();
            break;
          }
          case 74: {
            SavePath = input.ReadString();
            break;
          }
          case 82: {
            if (out_ == null) {
              out_ = new global::y3d.e.YItemMesh();
            }
            input.ReadMessage(out_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Make4TestParam : pb::IMessage<Make4TestParam> {
    private static readonly pb::MessageParser<Make4TestParam> _parser = new pb::MessageParser<Make4TestParam>(() => new Make4TestParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Make4TestParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Make4TestParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Make4TestParam(Make4TestParam other) : this() {
      oname_ = other.oname_;
      lowpoly_ = other.lowpoly_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Make4TestParam Clone() {
      return new Make4TestParam(this);
    }

    /// <summary>Field number for the "oname" field.</summary>
    public const int OnameFieldNumber = 1;
    private string oname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oname {
      get { return oname_; }
      set {
        oname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lowpoly" field.</summary>
    public const int LowpolyFieldNumber = 2;
    private static readonly pb::FieldCodec<global::y3d.e.ELowpoly> _repeated_lowpoly_codec
        = pb::FieldCodec.ForMessage(18, global::y3d.e.ELowpoly.Parser);
    private readonly pbc::RepeatedField<global::y3d.e.ELowpoly> lowpoly_ = new pbc::RepeatedField<global::y3d.e.ELowpoly>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::y3d.e.ELowpoly> Lowpoly {
      get { return lowpoly_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Make4TestParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Make4TestParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Oname != other.Oname) return false;
      if(!lowpoly_.Equals(other.lowpoly_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Oname.Length != 0) hash ^= Oname.GetHashCode();
      hash ^= lowpoly_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Oname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Oname);
      }
      lowpoly_.WriteTo(output, _repeated_lowpoly_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Oname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oname);
      }
      size += lowpoly_.CalculateSize(_repeated_lowpoly_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Make4TestParam other) {
      if (other == null) {
        return;
      }
      if (other.Oname.Length != 0) {
        Oname = other.Oname;
      }
      lowpoly_.Add(other.lowpoly_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Oname = input.ReadString();
            break;
          }
          case 18: {
            lowpoly_.AddEntriesFrom(input, _repeated_lowpoly_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestOParam : pb::IMessage<TestOParam> {
    private static readonly pb::MessageParser<TestOParam> _parser = new pb::MessageParser<TestOParam>(() => new TestOParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestOParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestOParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestOParam(TestOParam other) : this() {
      id_ = other.id_;
      oname_ = other.oname_;
      lowRatio_ = other.lowRatio_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestOParam Clone() {
      return new TestOParam(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "oname" field.</summary>
    public const int OnameFieldNumber = 2;
    private string oname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Oname {
      get { return oname_; }
      set {
        oname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "low_ratio" field.</summary>
    public const int LowRatioFieldNumber = 3;
    private float lowRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LowRatio {
      get { return lowRatio_; }
      set {
        lowRatio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestOParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestOParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Oname != other.Oname) return false;
      if (LowRatio != other.LowRatio) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Oname.Length != 0) hash ^= Oname.GetHashCode();
      if (LowRatio != 0F) hash ^= LowRatio.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Oname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Oname);
      }
      if (LowRatio != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(LowRatio);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Oname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Oname);
      }
      if (LowRatio != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestOParam other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Oname.Length != 0) {
        Oname = other.Oname;
      }
      if (other.LowRatio != 0F) {
        LowRatio = other.LowRatio;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Oname = input.ReadString();
            break;
          }
          case 29: {
            LowRatio = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitTestParam : pb::IMessage<InitTestParam> {
    private static readonly pb::MessageParser<InitTestParam> _parser = new pb::MessageParser<InitTestParam>(() => new InitTestParam());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitTestParam> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitTestParam() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitTestParam(InitTestParam other) : this() {
      tname_ = other.tname_;
      tid_ = other.tid_;
      testFolder_ = other.testFolder_;
      Lowpoly = other.lowpoly_ != null ? other.Lowpoly.Clone() : null;
      Unwrap = other.unwrap_ != null ? other.Unwrap.Clone() : null;
      Pack = other.pack_ != null ? other.Pack.Clone() : null;
      BakeNormal = other.bakeNormal_ != null ? other.BakeNormal.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitTestParam Clone() {
      return new InitTestParam(this);
    }

    /// <summary>Field number for the "tname" field.</summary>
    public const int TnameFieldNumber = 1;
    private string tname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tname {
      get { return tname_; }
      set {
        tname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 2;
    private string tid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tid {
      get { return tid_; }
      set {
        tid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "test_folder" field.</summary>
    public const int TestFolderFieldNumber = 3;
    private string testFolder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TestFolder {
      get { return testFolder_; }
      set {
        testFolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lowpoly" field.</summary>
    public const int LowpolyFieldNumber = 4;
    private global::y3d.e.ELowpoly lowpoly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ELowpoly Lowpoly {
      get { return lowpoly_; }
      set {
        lowpoly_ = value;
      }
    }

    /// <summary>Field number for the "unwrap" field.</summary>
    public const int UnwrapFieldNumber = 5;
    private global::y3d.e.EUnwrap unwrap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.EUnwrap Unwrap {
      get { return unwrap_; }
      set {
        unwrap_ = value;
      }
    }

    /// <summary>Field number for the "pack" field.</summary>
    public const int PackFieldNumber = 6;
    private global::y3d.e.EPacking pack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.EPacking Pack {
      get { return pack_; }
      set {
        pack_ = value;
      }
    }

    /// <summary>Field number for the "bake_normal" field.</summary>
    public const int BakeNormalFieldNumber = 7;
    private global::y3d.e.ENormal bakeNormal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ENormal BakeNormal {
      get { return bakeNormal_; }
      set {
        bakeNormal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitTestParam);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitTestParam other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tname != other.Tname) return false;
      if (Tid != other.Tid) return false;
      if (TestFolder != other.TestFolder) return false;
      if (!object.Equals(Lowpoly, other.Lowpoly)) return false;
      if (!object.Equals(Unwrap, other.Unwrap)) return false;
      if (!object.Equals(Pack, other.Pack)) return false;
      if (!object.Equals(BakeNormal, other.BakeNormal)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tname.Length != 0) hash ^= Tname.GetHashCode();
      if (Tid.Length != 0) hash ^= Tid.GetHashCode();
      if (TestFolder.Length != 0) hash ^= TestFolder.GetHashCode();
      if (lowpoly_ != null) hash ^= Lowpoly.GetHashCode();
      if (unwrap_ != null) hash ^= Unwrap.GetHashCode();
      if (pack_ != null) hash ^= Pack.GetHashCode();
      if (bakeNormal_ != null) hash ^= BakeNormal.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tname.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tname);
      }
      if (Tid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Tid);
      }
      if (TestFolder.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TestFolder);
      }
      if (lowpoly_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Lowpoly);
      }
      if (unwrap_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Unwrap);
      }
      if (pack_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Pack);
      }
      if (bakeNormal_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BakeNormal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tname);
      }
      if (Tid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tid);
      }
      if (TestFolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TestFolder);
      }
      if (lowpoly_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Lowpoly);
      }
      if (unwrap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unwrap);
      }
      if (pack_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pack);
      }
      if (bakeNormal_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BakeNormal);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitTestParam other) {
      if (other == null) {
        return;
      }
      if (other.Tname.Length != 0) {
        Tname = other.Tname;
      }
      if (other.Tid.Length != 0) {
        Tid = other.Tid;
      }
      if (other.TestFolder.Length != 0) {
        TestFolder = other.TestFolder;
      }
      if (other.lowpoly_ != null) {
        if (lowpoly_ == null) {
          lowpoly_ = new global::y3d.e.ELowpoly();
        }
        Lowpoly.MergeFrom(other.Lowpoly);
      }
      if (other.unwrap_ != null) {
        if (unwrap_ == null) {
          unwrap_ = new global::y3d.e.EUnwrap();
        }
        Unwrap.MergeFrom(other.Unwrap);
      }
      if (other.pack_ != null) {
        if (pack_ == null) {
          pack_ = new global::y3d.e.EPacking();
        }
        Pack.MergeFrom(other.Pack);
      }
      if (other.bakeNormal_ != null) {
        if (bakeNormal_ == null) {
          bakeNormal_ = new global::y3d.e.ENormal();
        }
        BakeNormal.MergeFrom(other.BakeNormal);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Tname = input.ReadString();
            break;
          }
          case 18: {
            Tid = input.ReadString();
            break;
          }
          case 26: {
            TestFolder = input.ReadString();
            break;
          }
          case 34: {
            if (lowpoly_ == null) {
              lowpoly_ = new global::y3d.e.ELowpoly();
            }
            input.ReadMessage(lowpoly_);
            break;
          }
          case 42: {
            if (unwrap_ == null) {
              unwrap_ = new global::y3d.e.EUnwrap();
            }
            input.ReadMessage(unwrap_);
            break;
          }
          case 50: {
            if (pack_ == null) {
              pack_ = new global::y3d.e.EPacking();
            }
            input.ReadMessage(pack_);
            break;
          }
          case 58: {
            if (bakeNormal_ == null) {
              bakeNormal_ = new global::y3d.e.ENormal();
            }
            input.ReadMessage(bakeNormal_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitTestResponse : pb::IMessage<InitTestResponse> {
    private static readonly pb::MessageParser<InitTestResponse> _parser = new pb::MessageParser<InitTestResponse>(() => new InitTestResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitTestResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::y3d.e.Y3DReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitTestResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitTestResponse(InitTestResponse other) : this() {
      Rep = other.rep_ != null ? other.Rep.Clone() : null;
      hasUnwrap_ = other.hasUnwrap_;
      hasPack_ = other.hasPack_;
      hasLow_ = other.hasLow_;
      hasNormal_ = other.hasNormal_;
      hssBakeFull_ = other.hssBakeFull_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitTestResponse Clone() {
      return new InitTestResponse(this);
    }

    /// <summary>Field number for the "rep" field.</summary>
    public const int RepFieldNumber = 1;
    private global::y3d.e.ResultReply rep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::y3d.e.ResultReply Rep {
      get { return rep_; }
      set {
        rep_ = value;
      }
    }

    /// <summary>Field number for the "has_unwrap" field.</summary>
    public const int HasUnwrapFieldNumber = 2;
    private bool hasUnwrap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUnwrap {
      get { return hasUnwrap_; }
      set {
        hasUnwrap_ = value;
      }
    }

    /// <summary>Field number for the "has_pack" field.</summary>
    public const int HasPackFieldNumber = 3;
    private bool hasPack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPack {
      get { return hasPack_; }
      set {
        hasPack_ = value;
      }
    }

    /// <summary>Field number for the "has_low" field.</summary>
    public const int HasLowFieldNumber = 4;
    private bool hasLow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLow {
      get { return hasLow_; }
      set {
        hasLow_ = value;
      }
    }

    /// <summary>Field number for the "has_normal" field.</summary>
    public const int HasNormalFieldNumber = 5;
    private bool hasNormal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasNormal {
      get { return hasNormal_; }
      set {
        hasNormal_ = value;
      }
    }

    /// <summary>Field number for the "hss_bake_full" field.</summary>
    public const int HssBakeFullFieldNumber = 6;
    private bool hssBakeFull_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HssBakeFull {
      get { return hssBakeFull_; }
      set {
        hssBakeFull_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitTestResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitTestResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rep, other.Rep)) return false;
      if (HasUnwrap != other.HasUnwrap) return false;
      if (HasPack != other.HasPack) return false;
      if (HasLow != other.HasLow) return false;
      if (HasNormal != other.HasNormal) return false;
      if (HssBakeFull != other.HssBakeFull) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (rep_ != null) hash ^= Rep.GetHashCode();
      if (HasUnwrap != false) hash ^= HasUnwrap.GetHashCode();
      if (HasPack != false) hash ^= HasPack.GetHashCode();
      if (HasLow != false) hash ^= HasLow.GetHashCode();
      if (HasNormal != false) hash ^= HasNormal.GetHashCode();
      if (HssBakeFull != false) hash ^= HssBakeFull.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (rep_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Rep);
      }
      if (HasUnwrap != false) {
        output.WriteRawTag(16);
        output.WriteBool(HasUnwrap);
      }
      if (HasPack != false) {
        output.WriteRawTag(24);
        output.WriteBool(HasPack);
      }
      if (HasLow != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasLow);
      }
      if (HasNormal != false) {
        output.WriteRawTag(40);
        output.WriteBool(HasNormal);
      }
      if (HssBakeFull != false) {
        output.WriteRawTag(48);
        output.WriteBool(HssBakeFull);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (rep_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rep);
      }
      if (HasUnwrap != false) {
        size += 1 + 1;
      }
      if (HasPack != false) {
        size += 1 + 1;
      }
      if (HasLow != false) {
        size += 1 + 1;
      }
      if (HasNormal != false) {
        size += 1 + 1;
      }
      if (HssBakeFull != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitTestResponse other) {
      if (other == null) {
        return;
      }
      if (other.rep_ != null) {
        if (rep_ == null) {
          rep_ = new global::y3d.e.ResultReply();
        }
        Rep.MergeFrom(other.Rep);
      }
      if (other.HasUnwrap != false) {
        HasUnwrap = other.HasUnwrap;
      }
      if (other.HasPack != false) {
        HasPack = other.HasPack;
      }
      if (other.HasLow != false) {
        HasLow = other.HasLow;
      }
      if (other.HasNormal != false) {
        HasNormal = other.HasNormal;
      }
      if (other.HssBakeFull != false) {
        HssBakeFull = other.HssBakeFull;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (rep_ == null) {
              rep_ = new global::y3d.e.ResultReply();
            }
            input.ReadMessage(rep_);
            break;
          }
          case 16: {
            HasUnwrap = input.ReadBool();
            break;
          }
          case 24: {
            HasPack = input.ReadBool();
            break;
          }
          case 32: {
            HasLow = input.ReadBool();
            break;
          }
          case 40: {
            HasNormal = input.ReadBool();
            break;
          }
          case 48: {
            HssBakeFull = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
