// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yservice.proto
// Original file comments:
// [START declaration]
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace y3d.s {
  /// <summary>
  /// [END csharp_declaration]
  /// </summary>
  public static partial class YServiceMaxTools
  {
    static readonly string __ServiceName = "y3d.YServiceMaxTools";

    static readonly Marshaller<global::y3d.e.RenameParam> __Marshaller_RenameParam = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.RenameParam.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.ResultReply> __Marshaller_ResultReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.ResultReply.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.ProjectInfo> __Marshaller_ProjectInfo = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.ProjectInfo.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.ResponseEvent> __Marshaller_ResponseEvent = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.ResponseEvent.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.NewProjectParam> __Marshaller_NewProjectParam = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.NewProjectParam.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.ResponseNProject> __Marshaller_ResponseNProject = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.ResponseNProject.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.EUnwrap> __Marshaller_EUnwrap = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.EUnwrap.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.EPacking> __Marshaller_EPacking = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.EPacking.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.ELowpoly> __Marshaller_ELowpoly = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.ELowpoly.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.EmptyParam> __Marshaller_EmptyParam = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.EmptyParam.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.YSystem> __Marshaller_YSystem = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.YSystem.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.ENormal> __Marshaller_ENormal = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.ENormal.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.Make4TestParam> __Marshaller_Make4TestParam = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.Make4TestParam.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.BatchOptimizeParam> __Marshaller_BatchOptimizeParam = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.BatchOptimizeParam.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.TestParam> __Marshaller_TestParam = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.TestParam.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.YAreaList> __Marshaller_YAreaList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.YAreaList.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.YEvent> __Marshaller_YEvent = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.YEvent.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.TestOParam> __Marshaller_TestOParam = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.TestOParam.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.InitTestParam> __Marshaller_InitTestParam = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.InitTestParam.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.InitTestResponse> __Marshaller_InitTestResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.InitTestResponse.Parser.ParseFrom);

    static readonly Method<global::y3d.e.RenameParam, global::y3d.e.ResultReply> __Method_RenameObject = new Method<global::y3d.e.RenameParam, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "RenameObject",
        __Marshaller_RenameParam,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.ProjectInfo, global::y3d.e.ResponseEvent> __Method_SaveProject = new Method<global::y3d.e.ProjectInfo, global::y3d.e.ResponseEvent>(
        MethodType.Unary,
        __ServiceName,
        "SaveProject",
        __Marshaller_ProjectInfo,
        __Marshaller_ResponseEvent);

    static readonly Method<global::y3d.e.NewProjectParam, global::y3d.e.ResponseNProject> __Method_NewProject = new Method<global::y3d.e.NewProjectParam, global::y3d.e.ResponseNProject>(
        MethodType.Unary,
        __ServiceName,
        "NewProject",
        __Marshaller_NewProjectParam,
        __Marshaller_ResponseNProject);

    static readonly Method<global::y3d.e.ProjectInfo, global::y3d.e.ResponseNProject> __Method_LoadProject = new Method<global::y3d.e.ProjectInfo, global::y3d.e.ResponseNProject>(
        MethodType.Unary,
        __ServiceName,
        "LoadProject",
        __Marshaller_ProjectInfo,
        __Marshaller_ResponseNProject);

    static readonly Method<global::y3d.e.ProjectInfo, global::y3d.e.ResponseNProject> __Method_DeleteProject = new Method<global::y3d.e.ProjectInfo, global::y3d.e.ResponseNProject>(
        MethodType.Unary,
        __ServiceName,
        "DeleteProject",
        __Marshaller_ProjectInfo,
        __Marshaller_ResponseNProject);

    static readonly Method<global::y3d.e.EUnwrap, global::y3d.e.ResultReply> __Method_Unwrap = new Method<global::y3d.e.EUnwrap, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "Unwrap",
        __Marshaller_EUnwrap,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.EPacking, global::y3d.e.ResultReply> __Method_Packing = new Method<global::y3d.e.EPacking, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "Packing",
        __Marshaller_EPacking,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.ELowpoly, global::y3d.e.ResultReply> __Method_LowPoly = new Method<global::y3d.e.ELowpoly, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "LowPoly",
        __Marshaller_ELowpoly,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.EmptyParam, global::y3d.e.YSystem> __Method_LoadSystem = new Method<global::y3d.e.EmptyParam, global::y3d.e.YSystem>(
        MethodType.Unary,
        __ServiceName,
        "LoadSystem",
        __Marshaller_EmptyParam,
        __Marshaller_YSystem);

    static readonly Method<global::y3d.e.YSystem, global::y3d.e.ResultReply> __Method_SaveSystem = new Method<global::y3d.e.YSystem, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "SaveSystem",
        __Marshaller_YSystem,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.ENormal, global::y3d.e.ResultReply> __Method_BakeNormal = new Method<global::y3d.e.ENormal, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "BakeNormal",
        __Marshaller_ENormal,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.ENormal, global::y3d.e.ResultReply> __Method_BakeNormalMax = new Method<global::y3d.e.ENormal, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "BakeNormalMax",
        __Marshaller_ENormal,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.Make4TestParam, global::y3d.e.ResultReply> __Method_MakeNode4Edit = new Method<global::y3d.e.Make4TestParam, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "MakeNode4Edit",
        __Marshaller_Make4TestParam,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.BatchOptimizeParam, global::y3d.e.ResultReply> __Method_BatchOptimize = new Method<global::y3d.e.BatchOptimizeParam, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "BatchOptimize",
        __Marshaller_BatchOptimizeParam,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.TestParam, global::y3d.e.ResultReply> __Method_TestTest = new Method<global::y3d.e.TestParam, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "TestTest",
        __Marshaller_TestParam,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.EmptyParam, global::y3d.e.YAreaList> __Method_GetObjectFromMax = new Method<global::y3d.e.EmptyParam, global::y3d.e.YAreaList>(
        MethodType.Unary,
        __ServiceName,
        "GetObjectFromMax",
        __Marshaller_EmptyParam,
        __Marshaller_YAreaList);

    static readonly Method<global::y3d.e.EmptyParam, global::y3d.e.ResultReply> __Method_CloneObject = new Method<global::y3d.e.EmptyParam, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "CloneObject",
        __Marshaller_EmptyParam,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.YEvent, global::y3d.e.ResponseEvent> __Method_DoStreamClient = new Method<global::y3d.e.YEvent, global::y3d.e.ResponseEvent>(
        MethodType.ClientStreaming,
        __ServiceName,
        "DoStreamClient",
        __Marshaller_YEvent,
        __Marshaller_ResponseEvent);

    static readonly Method<global::y3d.e.EmptyParam, global::y3d.e.YEvent> __Method_DoStreamServer = new Method<global::y3d.e.EmptyParam, global::y3d.e.YEvent>(
        MethodType.ServerStreaming,
        __ServiceName,
        "DoStreamServer",
        __Marshaller_EmptyParam,
        __Marshaller_YEvent);

    static readonly Method<global::y3d.e.YEvent, global::y3d.e.YEvent> __Method_DoAction = new Method<global::y3d.e.YEvent, global::y3d.e.YEvent>(
        MethodType.DuplexStreaming,
        __ServiceName,
        "DoAction",
        __Marshaller_YEvent,
        __Marshaller_YEvent);

    static readonly Method<global::y3d.e.YEvent, global::y3d.e.ResponseEvent> __Method_DoEvent = new Method<global::y3d.e.YEvent, global::y3d.e.ResponseEvent>(
        MethodType.Unary,
        __ServiceName,
        "DoEvent",
        __Marshaller_YEvent,
        __Marshaller_ResponseEvent);

    static readonly Method<global::y3d.e.EUnwrap, global::y3d.e.ResponseEvent> __Method_DoUnwrap = new Method<global::y3d.e.EUnwrap, global::y3d.e.ResponseEvent>(
        MethodType.Unary,
        __ServiceName,
        "DoUnwrap",
        __Marshaller_EUnwrap,
        __Marshaller_ResponseEvent);

    static readonly Method<global::y3d.e.EmptyParam, global::y3d.e.ResultReply> __Method_Shutdown = new Method<global::y3d.e.EmptyParam, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "Shutdown",
        __Marshaller_EmptyParam,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.TestOParam, global::y3d.e.ResultReply> __Method_AddTestObject = new Method<global::y3d.e.TestOParam, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "AddTestObject",
        __Marshaller_TestOParam,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.TestOParam, global::y3d.e.ResultReply> __Method_ApplyTestObject = new Method<global::y3d.e.TestOParam, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "ApplyTestObject",
        __Marshaller_TestOParam,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.InitTestParam, global::y3d.e.InitTestResponse> __Method_Init4Test = new Method<global::y3d.e.InitTestParam, global::y3d.e.InitTestResponse>(
        MethodType.Unary,
        __ServiceName,
        "Init4Test",
        __Marshaller_InitTestParam,
        __Marshaller_InitTestResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::y3d.s.YserviceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of YServiceMaxTools</summary>
    public abstract partial class YServiceMaxToolsBase
    {
      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> RenameObject(global::y3d.e.RenameParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResponseEvent> SaveProject(global::y3d.e.ProjectInfo request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResponseNProject> NewProject(global::y3d.e.NewProjectParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResponseNProject> LoadProject(global::y3d.e.ProjectInfo request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResponseNProject> DeleteProject(global::y3d.e.ProjectInfo request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> Unwrap(global::y3d.e.EUnwrap request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> Packing(global::y3d.e.EPacking request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> LowPoly(global::y3d.e.ELowpoly request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.YSystem> LoadSystem(global::y3d.e.EmptyParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> SaveSystem(global::y3d.e.YSystem request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> BakeNormal(global::y3d.e.ENormal request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> BakeNormalMax(global::y3d.e.ENormal request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> MakeNode4Edit(global::y3d.e.Make4TestParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> BatchOptimize(global::y3d.e.BatchOptimizeParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> TestTest(global::y3d.e.TestParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.YAreaList> GetObjectFromMax(global::y3d.e.EmptyParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> CloneObject(global::y3d.e.EmptyParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResponseEvent> DoStreamClient(IAsyncStreamReader<global::y3d.e.YEvent> requestStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task DoStreamServer(global::y3d.e.EmptyParam request, IServerStreamWriter<global::y3d.e.YEvent> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task DoAction(IAsyncStreamReader<global::y3d.e.YEvent> requestStream, IServerStreamWriter<global::y3d.e.YEvent> responseStream, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResponseEvent> DoEvent(global::y3d.e.YEvent request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResponseEvent> DoUnwrap(global::y3d.e.EUnwrap request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> Shutdown(global::y3d.e.EmptyParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> AddTestObject(global::y3d.e.TestOParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> ApplyTestObject(global::y3d.e.TestOParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// rpc CreateVerTest(VerTestParam) returns (VerTestResponse) {}
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::y3d.e.InitTestResponse> Init4Test(global::y3d.e.InitTestParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for YServiceMaxTools</summary>
    public partial class YServiceMaxToolsClient : ClientBase<YServiceMaxToolsClient>
    {
      /// <summary>Creates a new client for YServiceMaxTools</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public YServiceMaxToolsClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for YServiceMaxTools that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public YServiceMaxToolsClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected YServiceMaxToolsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected YServiceMaxToolsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::y3d.e.ResultReply RenameObject(global::y3d.e.RenameParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RenameObject(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply RenameObject(global::y3d.e.RenameParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RenameObject, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> RenameObjectAsync(global::y3d.e.RenameParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RenameObjectAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> RenameObjectAsync(global::y3d.e.RenameParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RenameObject, null, options, request);
      }
      public virtual global::y3d.e.ResponseEvent SaveProject(global::y3d.e.ProjectInfo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SaveProject(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResponseEvent SaveProject(global::y3d.e.ProjectInfo request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SaveProject, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResponseEvent> SaveProjectAsync(global::y3d.e.ProjectInfo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SaveProjectAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResponseEvent> SaveProjectAsync(global::y3d.e.ProjectInfo request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SaveProject, null, options, request);
      }
      public virtual global::y3d.e.ResponseNProject NewProject(global::y3d.e.NewProjectParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return NewProject(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResponseNProject NewProject(global::y3d.e.NewProjectParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NewProject, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResponseNProject> NewProjectAsync(global::y3d.e.NewProjectParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return NewProjectAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResponseNProject> NewProjectAsync(global::y3d.e.NewProjectParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NewProject, null, options, request);
      }
      public virtual global::y3d.e.ResponseNProject LoadProject(global::y3d.e.ProjectInfo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LoadProject(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResponseNProject LoadProject(global::y3d.e.ProjectInfo request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LoadProject, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResponseNProject> LoadProjectAsync(global::y3d.e.ProjectInfo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LoadProjectAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResponseNProject> LoadProjectAsync(global::y3d.e.ProjectInfo request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LoadProject, null, options, request);
      }
      public virtual global::y3d.e.ResponseNProject DeleteProject(global::y3d.e.ProjectInfo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteProject(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResponseNProject DeleteProject(global::y3d.e.ProjectInfo request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteProject, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResponseNProject> DeleteProjectAsync(global::y3d.e.ProjectInfo request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DeleteProjectAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResponseNProject> DeleteProjectAsync(global::y3d.e.ProjectInfo request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteProject, null, options, request);
      }
      public virtual global::y3d.e.ResultReply Unwrap(global::y3d.e.EUnwrap request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Unwrap(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply Unwrap(global::y3d.e.EUnwrap request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Unwrap, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> UnwrapAsync(global::y3d.e.EUnwrap request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UnwrapAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> UnwrapAsync(global::y3d.e.EUnwrap request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Unwrap, null, options, request);
      }
      public virtual global::y3d.e.ResultReply Packing(global::y3d.e.EPacking request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Packing(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply Packing(global::y3d.e.EPacking request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Packing, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> PackingAsync(global::y3d.e.EPacking request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PackingAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> PackingAsync(global::y3d.e.EPacking request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Packing, null, options, request);
      }
      public virtual global::y3d.e.ResultReply LowPoly(global::y3d.e.ELowpoly request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LowPoly(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply LowPoly(global::y3d.e.ELowpoly request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LowPoly, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> LowPolyAsync(global::y3d.e.ELowpoly request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LowPolyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> LowPolyAsync(global::y3d.e.ELowpoly request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LowPoly, null, options, request);
      }
      public virtual global::y3d.e.YSystem LoadSystem(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LoadSystem(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.YSystem LoadSystem(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LoadSystem, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.YSystem> LoadSystemAsync(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LoadSystemAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.YSystem> LoadSystemAsync(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LoadSystem, null, options, request);
      }
      public virtual global::y3d.e.ResultReply SaveSystem(global::y3d.e.YSystem request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SaveSystem(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply SaveSystem(global::y3d.e.YSystem request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SaveSystem, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> SaveSystemAsync(global::y3d.e.YSystem request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SaveSystemAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> SaveSystemAsync(global::y3d.e.YSystem request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SaveSystem, null, options, request);
      }
      public virtual global::y3d.e.ResultReply BakeNormal(global::y3d.e.ENormal request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BakeNormal(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply BakeNormal(global::y3d.e.ENormal request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BakeNormal, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> BakeNormalAsync(global::y3d.e.ENormal request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BakeNormalAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> BakeNormalAsync(global::y3d.e.ENormal request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BakeNormal, null, options, request);
      }
      public virtual global::y3d.e.ResultReply BakeNormalMax(global::y3d.e.ENormal request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BakeNormalMax(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply BakeNormalMax(global::y3d.e.ENormal request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BakeNormalMax, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> BakeNormalMaxAsync(global::y3d.e.ENormal request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BakeNormalMaxAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> BakeNormalMaxAsync(global::y3d.e.ENormal request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BakeNormalMax, null, options, request);
      }
      public virtual global::y3d.e.ResultReply MakeNode4Edit(global::y3d.e.Make4TestParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MakeNode4Edit(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply MakeNode4Edit(global::y3d.e.Make4TestParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MakeNode4Edit, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> MakeNode4EditAsync(global::y3d.e.Make4TestParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MakeNode4EditAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> MakeNode4EditAsync(global::y3d.e.Make4TestParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MakeNode4Edit, null, options, request);
      }
      public virtual global::y3d.e.ResultReply BatchOptimize(global::y3d.e.BatchOptimizeParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BatchOptimize(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply BatchOptimize(global::y3d.e.BatchOptimizeParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchOptimize, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> BatchOptimizeAsync(global::y3d.e.BatchOptimizeParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BatchOptimizeAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> BatchOptimizeAsync(global::y3d.e.BatchOptimizeParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchOptimize, null, options, request);
      }
      public virtual global::y3d.e.ResultReply TestTest(global::y3d.e.TestParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TestTest(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply TestTest(global::y3d.e.TestParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TestTest, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> TestTestAsync(global::y3d.e.TestParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TestTestAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> TestTestAsync(global::y3d.e.TestParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TestTest, null, options, request);
      }
      public virtual global::y3d.e.YAreaList GetObjectFromMax(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetObjectFromMax(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.YAreaList GetObjectFromMax(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetObjectFromMax, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.YAreaList> GetObjectFromMaxAsync(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetObjectFromMaxAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.YAreaList> GetObjectFromMaxAsync(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetObjectFromMax, null, options, request);
      }
      public virtual global::y3d.e.ResultReply CloneObject(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CloneObject(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply CloneObject(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CloneObject, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> CloneObjectAsync(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CloneObjectAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> CloneObjectAsync(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CloneObject, null, options, request);
      }
      public virtual AsyncClientStreamingCall<global::y3d.e.YEvent, global::y3d.e.ResponseEvent> DoStreamClient(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoStreamClient(new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncClientStreamingCall<global::y3d.e.YEvent, global::y3d.e.ResponseEvent> DoStreamClient(CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_DoStreamClient, null, options);
      }
      public virtual AsyncServerStreamingCall<global::y3d.e.YEvent> DoStreamServer(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoStreamServer(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncServerStreamingCall<global::y3d.e.YEvent> DoStreamServer(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_DoStreamServer, null, options, request);
      }
      public virtual AsyncDuplexStreamingCall<global::y3d.e.YEvent, global::y3d.e.YEvent> DoAction(Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoAction(new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncDuplexStreamingCall<global::y3d.e.YEvent, global::y3d.e.YEvent> DoAction(CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_DoAction, null, options);
      }
      public virtual global::y3d.e.ResponseEvent DoEvent(global::y3d.e.YEvent request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoEvent(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResponseEvent DoEvent(global::y3d.e.YEvent request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DoEvent, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResponseEvent> DoEventAsync(global::y3d.e.YEvent request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoEventAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResponseEvent> DoEventAsync(global::y3d.e.YEvent request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DoEvent, null, options, request);
      }
      public virtual global::y3d.e.ResponseEvent DoUnwrap(global::y3d.e.EUnwrap request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoUnwrap(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResponseEvent DoUnwrap(global::y3d.e.EUnwrap request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DoUnwrap, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResponseEvent> DoUnwrapAsync(global::y3d.e.EUnwrap request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoUnwrapAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResponseEvent> DoUnwrapAsync(global::y3d.e.EUnwrap request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DoUnwrap, null, options, request);
      }
      public virtual global::y3d.e.ResultReply Shutdown(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Shutdown(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply Shutdown(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Shutdown, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> ShutdownAsync(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ShutdownAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> ShutdownAsync(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Shutdown, null, options, request);
      }
      public virtual global::y3d.e.ResultReply AddTestObject(global::y3d.e.TestOParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddTestObject(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply AddTestObject(global::y3d.e.TestOParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddTestObject, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> AddTestObjectAsync(global::y3d.e.TestOParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddTestObjectAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> AddTestObjectAsync(global::y3d.e.TestOParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddTestObject, null, options, request);
      }
      public virtual global::y3d.e.ResultReply ApplyTestObject(global::y3d.e.TestOParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ApplyTestObject(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply ApplyTestObject(global::y3d.e.TestOParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ApplyTestObject, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> ApplyTestObjectAsync(global::y3d.e.TestOParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ApplyTestObjectAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> ApplyTestObjectAsync(global::y3d.e.TestOParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ApplyTestObject, null, options, request);
      }
      /// <summary>
      /// rpc CreateVerTest(VerTestParam) returns (VerTestResponse) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::y3d.e.InitTestResponse Init4Test(global::y3d.e.InitTestParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Init4Test(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// rpc CreateVerTest(VerTestParam) returns (VerTestResponse) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::y3d.e.InitTestResponse Init4Test(global::y3d.e.InitTestParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Init4Test, null, options, request);
      }
      /// <summary>
      /// rpc CreateVerTest(VerTestParam) returns (VerTestResponse) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncUnaryCall<global::y3d.e.InitTestResponse> Init4TestAsync(global::y3d.e.InitTestParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Init4TestAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// rpc CreateVerTest(VerTestParam) returns (VerTestResponse) {}
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual AsyncUnaryCall<global::y3d.e.InitTestResponse> Init4TestAsync(global::y3d.e.InitTestParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Init4Test, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override YServiceMaxToolsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new YServiceMaxToolsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static ServerServiceDefinition BindService(YServiceMaxToolsBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RenameObject, serviceImpl.RenameObject)
          .AddMethod(__Method_SaveProject, serviceImpl.SaveProject)
          .AddMethod(__Method_NewProject, serviceImpl.NewProject)
          .AddMethod(__Method_LoadProject, serviceImpl.LoadProject)
          .AddMethod(__Method_DeleteProject, serviceImpl.DeleteProject)
          .AddMethod(__Method_Unwrap, serviceImpl.Unwrap)
          .AddMethod(__Method_Packing, serviceImpl.Packing)
          .AddMethod(__Method_LowPoly, serviceImpl.LowPoly)
          .AddMethod(__Method_LoadSystem, serviceImpl.LoadSystem)
          .AddMethod(__Method_SaveSystem, serviceImpl.SaveSystem)
          .AddMethod(__Method_BakeNormal, serviceImpl.BakeNormal)
          .AddMethod(__Method_BakeNormalMax, serviceImpl.BakeNormalMax)
          .AddMethod(__Method_MakeNode4Edit, serviceImpl.MakeNode4Edit)
          .AddMethod(__Method_BatchOptimize, serviceImpl.BatchOptimize)
          .AddMethod(__Method_TestTest, serviceImpl.TestTest)
          .AddMethod(__Method_GetObjectFromMax, serviceImpl.GetObjectFromMax)
          .AddMethod(__Method_CloneObject, serviceImpl.CloneObject)
          .AddMethod(__Method_DoStreamClient, serviceImpl.DoStreamClient)
          .AddMethod(__Method_DoStreamServer, serviceImpl.DoStreamServer)
          .AddMethod(__Method_DoAction, serviceImpl.DoAction)
          .AddMethod(__Method_DoEvent, serviceImpl.DoEvent)
          .AddMethod(__Method_DoUnwrap, serviceImpl.DoUnwrap)
          .AddMethod(__Method_Shutdown, serviceImpl.Shutdown)
          .AddMethod(__Method_AddTestObject, serviceImpl.AddTestObject)
          .AddMethod(__Method_ApplyTestObject, serviceImpl.ApplyTestObject)
          .AddMethod(__Method_Init4Test, serviceImpl.Init4Test).Build();
    }

  }
  public static partial class YServiceTest
  {
    static readonly string __ServiceName = "y3d.YServiceTest";

    static readonly Marshaller<global::y3d.e.EmptyParam> __Marshaller_EmptyParam = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.EmptyParam.Parser.ParseFrom);

    static readonly Method<global::y3d.e.EmptyParam, global::y3d.e.EmptyParam> __Method_MTest1 = new Method<global::y3d.e.EmptyParam, global::y3d.e.EmptyParam>(
        MethodType.Unary,
        __ServiceName,
        "MTest1",
        __Marshaller_EmptyParam,
        __Marshaller_EmptyParam);

    static readonly Method<global::y3d.e.EmptyParam, global::y3d.e.EmptyParam> __Method_MTest2 = new Method<global::y3d.e.EmptyParam, global::y3d.e.EmptyParam>(
        MethodType.Unary,
        __ServiceName,
        "MTest2",
        __Marshaller_EmptyParam,
        __Marshaller_EmptyParam);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::y3d.s.YserviceReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of YServiceTest</summary>
    public abstract partial class YServiceTestBase
    {
      public virtual global::System.Threading.Tasks.Task<global::y3d.e.EmptyParam> MTest1(global::y3d.e.EmptyParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.EmptyParam> MTest2(global::y3d.e.EmptyParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for YServiceTest</summary>
    public partial class YServiceTestClient : ClientBase<YServiceTestClient>
    {
      /// <summary>Creates a new client for YServiceTest</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public YServiceTestClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for YServiceTest that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public YServiceTestClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected YServiceTestClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected YServiceTestClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::y3d.e.EmptyParam MTest1(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MTest1(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.EmptyParam MTest1(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MTest1, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.EmptyParam> MTest1Async(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MTest1Async(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.EmptyParam> MTest1Async(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MTest1, null, options, request);
      }
      public virtual global::y3d.e.EmptyParam MTest2(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MTest2(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.EmptyParam MTest2(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MTest2, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.EmptyParam> MTest2Async(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MTest2Async(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.EmptyParam> MTest2Async(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MTest2, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override YServiceTestClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new YServiceTestClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static ServerServiceDefinition BindService(YServiceTestBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_MTest1, serviceImpl.MTest1)
          .AddMethod(__Method_MTest2, serviceImpl.MTest2).Build();
    }

  }
  public static partial class YServiceMaster
  {
    static readonly string __ServiceName = "y3d.YServiceMaster";

    static readonly Marshaller<global::y3d.e.AllWorkerParam> __Marshaller_AllWorkerParam = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.AllWorkerParam.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.YWorkerResponse> __Marshaller_YWorkerResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.YWorkerResponse.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.EmptyParam> __Marshaller_EmptyParam = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.EmptyParam.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.ResultReply> __Marshaller_ResultReply = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.ResultReply.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.YWorkerRequest> __Marshaller_YWorkerRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.YWorkerRequest.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.WorkerParam> __Marshaller_WorkerParam = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.WorkerParam.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.YWorker> __Marshaller_YWorker = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.YWorker.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.YJobList> __Marshaller_YJobList = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.YJobList.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.YSystem> __Marshaller_YSystem = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.YSystem.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.ReadyRespone> __Marshaller_ReadyRespone = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.ReadyRespone.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.UserParam> __Marshaller_UserParam = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.UserParam.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.UserResponse> __Marshaller_UserResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.UserResponse.Parser.ParseFrom);

    static readonly Method<global::y3d.e.AllWorkerParam, global::y3d.e.YWorkerResponse> __Method_AllWorkers = new Method<global::y3d.e.AllWorkerParam, global::y3d.e.YWorkerResponse>(
        MethodType.Unary,
        __ServiceName,
        "AllWorkers",
        __Marshaller_AllWorkerParam,
        __Marshaller_YWorkerResponse);

    static readonly Method<global::y3d.e.EmptyParam, global::y3d.e.ResultReply> __Method_StopAllWorkers = new Method<global::y3d.e.EmptyParam, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "StopAllWorkers",
        __Marshaller_EmptyParam,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.EmptyParam, global::y3d.e.ResultReply> __Method_StartAllWorkers = new Method<global::y3d.e.EmptyParam, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "StartAllWorkers",
        __Marshaller_EmptyParam,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.YWorkerRequest, global::y3d.e.YWorkerResponse> __Method_AddWorker = new Method<global::y3d.e.YWorkerRequest, global::y3d.e.YWorkerResponse>(
        MethodType.Unary,
        __ServiceName,
        "AddWorker",
        __Marshaller_YWorkerRequest,
        __Marshaller_YWorkerResponse);

    static readonly Method<global::y3d.e.WorkerParam, global::y3d.e.ResultReply> __Method_CloseWorkerApp = new Method<global::y3d.e.WorkerParam, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "CloseWorkerApp",
        __Marshaller_WorkerParam,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.WorkerParam, global::y3d.e.YWorkerResponse> __Method_StartWorker = new Method<global::y3d.e.WorkerParam, global::y3d.e.YWorkerResponse>(
        MethodType.Unary,
        __ServiceName,
        "StartWorker",
        __Marshaller_WorkerParam,
        __Marshaller_YWorkerResponse);

    static readonly Method<global::y3d.e.WorkerParam, global::y3d.e.YWorkerResponse> __Method_StopWorker = new Method<global::y3d.e.WorkerParam, global::y3d.e.YWorkerResponse>(
        MethodType.Unary,
        __ServiceName,
        "StopWorker",
        __Marshaller_WorkerParam,
        __Marshaller_YWorkerResponse);

    static readonly Method<global::y3d.e.WorkerParam, global::y3d.e.ResultReply> __Method_AppExitCallback = new Method<global::y3d.e.WorkerParam, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "AppExitCallback",
        __Marshaller_WorkerParam,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.YWorker, global::y3d.e.YJobList> __Method_ShowJobInMachine = new Method<global::y3d.e.YWorker, global::y3d.e.YJobList>(
        MethodType.Unary,
        __ServiceName,
        "ShowJobInMachine",
        __Marshaller_YWorker,
        __Marshaller_YJobList);

    static readonly Method<global::y3d.e.EmptyParam, global::y3d.e.ResultReply> __Method_CheckHealth = new Method<global::y3d.e.EmptyParam, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "CheckHealth",
        __Marshaller_EmptyParam,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.YWorker, global::y3d.e.ResultReply> __Method_UpdateWorker = new Method<global::y3d.e.YWorker, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "UpdateWorker",
        __Marshaller_YWorker,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.EmptyParam, global::y3d.e.YSystem> __Method_LoadSystem = new Method<global::y3d.e.EmptyParam, global::y3d.e.YSystem>(
        MethodType.Unary,
        __ServiceName,
        "LoadSystem",
        __Marshaller_EmptyParam,
        __Marshaller_YSystem);

    static readonly Method<global::y3d.e.YSystem, global::y3d.e.ResultReply> __Method_SaveSystem = new Method<global::y3d.e.YSystem, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "SaveSystem",
        __Marshaller_YSystem,
        __Marshaller_ResultReply);

    static readonly Method<global::y3d.e.YWorkerRequest, global::y3d.e.YWorkerResponse> __Method_GiveMeAWorker = new Method<global::y3d.e.YWorkerRequest, global::y3d.e.YWorkerResponse>(
        MethodType.Unary,
        __ServiceName,
        "GiveMeAWorker",
        __Marshaller_YWorkerRequest,
        __Marshaller_YWorkerResponse);

    static readonly Method<global::y3d.e.WorkerParam, global::y3d.e.ReadyRespone> __Method_IsReady = new Method<global::y3d.e.WorkerParam, global::y3d.e.ReadyRespone>(
        MethodType.Unary,
        __ServiceName,
        "IsReady",
        __Marshaller_WorkerParam,
        __Marshaller_ReadyRespone);

    static readonly Method<global::y3d.e.UserParam, global::y3d.e.UserResponse> __Method_UserLogin = new Method<global::y3d.e.UserParam, global::y3d.e.UserResponse>(
        MethodType.Unary,
        __ServiceName,
        "UserLogin",
        __Marshaller_UserParam,
        __Marshaller_UserResponse);

    static readonly Method<global::y3d.e.UserParam, global::y3d.e.UserResponse> __Method_UserRegister = new Method<global::y3d.e.UserParam, global::y3d.e.UserResponse>(
        MethodType.Unary,
        __ServiceName,
        "UserRegister",
        __Marshaller_UserParam,
        __Marshaller_UserResponse);

    static readonly Method<global::y3d.e.UserParam, global::y3d.e.ResultReply> __Method_UpdateUserSetting = new Method<global::y3d.e.UserParam, global::y3d.e.ResultReply>(
        MethodType.Unary,
        __ServiceName,
        "UpdateUserSetting",
        __Marshaller_UserParam,
        __Marshaller_ResultReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::y3d.s.YserviceReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of YServiceMaster</summary>
    public abstract partial class YServiceMasterBase
    {
      public virtual global::System.Threading.Tasks.Task<global::y3d.e.YWorkerResponse> AllWorkers(global::y3d.e.AllWorkerParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> StopAllWorkers(global::y3d.e.EmptyParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> StartAllWorkers(global::y3d.e.EmptyParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.YWorkerResponse> AddWorker(global::y3d.e.YWorkerRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> CloseWorkerApp(global::y3d.e.WorkerParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.YWorkerResponse> StartWorker(global::y3d.e.WorkerParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.YWorkerResponse> StopWorker(global::y3d.e.WorkerParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> AppExitCallback(global::y3d.e.WorkerParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.YJobList> ShowJobInMachine(global::y3d.e.YWorker request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> CheckHealth(global::y3d.e.EmptyParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> UpdateWorker(global::y3d.e.YWorker request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.YSystem> LoadSystem(global::y3d.e.EmptyParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> SaveSystem(global::y3d.e.YSystem request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.YWorkerResponse> GiveMeAWorker(global::y3d.e.YWorkerRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ReadyRespone> IsReady(global::y3d.e.WorkerParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.UserResponse> UserLogin(global::y3d.e.UserParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.UserResponse> UserRegister(global::y3d.e.UserParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResultReply> UpdateUserSetting(global::y3d.e.UserParam request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for YServiceMaster</summary>
    public partial class YServiceMasterClient : ClientBase<YServiceMasterClient>
    {
      /// <summary>Creates a new client for YServiceMaster</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public YServiceMasterClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for YServiceMaster that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public YServiceMasterClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected YServiceMasterClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected YServiceMasterClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::y3d.e.YWorkerResponse AllWorkers(global::y3d.e.AllWorkerParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllWorkers(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.YWorkerResponse AllWorkers(global::y3d.e.AllWorkerParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AllWorkers, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.YWorkerResponse> AllWorkersAsync(global::y3d.e.AllWorkerParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AllWorkersAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.YWorkerResponse> AllWorkersAsync(global::y3d.e.AllWorkerParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AllWorkers, null, options, request);
      }
      public virtual global::y3d.e.ResultReply StopAllWorkers(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StopAllWorkers(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply StopAllWorkers(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopAllWorkers, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> StopAllWorkersAsync(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StopAllWorkersAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> StopAllWorkersAsync(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopAllWorkers, null, options, request);
      }
      public virtual global::y3d.e.ResultReply StartAllWorkers(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StartAllWorkers(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply StartAllWorkers(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartAllWorkers, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> StartAllWorkersAsync(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StartAllWorkersAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> StartAllWorkersAsync(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartAllWorkers, null, options, request);
      }
      public virtual global::y3d.e.YWorkerResponse AddWorker(global::y3d.e.YWorkerRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddWorker(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.YWorkerResponse AddWorker(global::y3d.e.YWorkerRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddWorker, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.YWorkerResponse> AddWorkerAsync(global::y3d.e.YWorkerRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddWorkerAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.YWorkerResponse> AddWorkerAsync(global::y3d.e.YWorkerRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddWorker, null, options, request);
      }
      public virtual global::y3d.e.ResultReply CloseWorkerApp(global::y3d.e.WorkerParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CloseWorkerApp(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply CloseWorkerApp(global::y3d.e.WorkerParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CloseWorkerApp, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> CloseWorkerAppAsync(global::y3d.e.WorkerParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CloseWorkerAppAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> CloseWorkerAppAsync(global::y3d.e.WorkerParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CloseWorkerApp, null, options, request);
      }
      public virtual global::y3d.e.YWorkerResponse StartWorker(global::y3d.e.WorkerParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StartWorker(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.YWorkerResponse StartWorker(global::y3d.e.WorkerParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartWorker, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.YWorkerResponse> StartWorkerAsync(global::y3d.e.WorkerParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StartWorkerAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.YWorkerResponse> StartWorkerAsync(global::y3d.e.WorkerParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartWorker, null, options, request);
      }
      public virtual global::y3d.e.YWorkerResponse StopWorker(global::y3d.e.WorkerParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StopWorker(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.YWorkerResponse StopWorker(global::y3d.e.WorkerParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopWorker, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.YWorkerResponse> StopWorkerAsync(global::y3d.e.WorkerParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StopWorkerAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.YWorkerResponse> StopWorkerAsync(global::y3d.e.WorkerParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopWorker, null, options, request);
      }
      public virtual global::y3d.e.ResultReply AppExitCallback(global::y3d.e.WorkerParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AppExitCallback(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply AppExitCallback(global::y3d.e.WorkerParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AppExitCallback, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> AppExitCallbackAsync(global::y3d.e.WorkerParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AppExitCallbackAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> AppExitCallbackAsync(global::y3d.e.WorkerParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AppExitCallback, null, options, request);
      }
      public virtual global::y3d.e.YJobList ShowJobInMachine(global::y3d.e.YWorker request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ShowJobInMachine(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.YJobList ShowJobInMachine(global::y3d.e.YWorker request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ShowJobInMachine, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.YJobList> ShowJobInMachineAsync(global::y3d.e.YWorker request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ShowJobInMachineAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.YJobList> ShowJobInMachineAsync(global::y3d.e.YWorker request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ShowJobInMachine, null, options, request);
      }
      public virtual global::y3d.e.ResultReply CheckHealth(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckHealth(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply CheckHealth(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckHealth, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> CheckHealthAsync(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CheckHealthAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> CheckHealthAsync(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckHealth, null, options, request);
      }
      public virtual global::y3d.e.ResultReply UpdateWorker(global::y3d.e.YWorker request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateWorker(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply UpdateWorker(global::y3d.e.YWorker request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateWorker, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> UpdateWorkerAsync(global::y3d.e.YWorker request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateWorkerAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> UpdateWorkerAsync(global::y3d.e.YWorker request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateWorker, null, options, request);
      }
      public virtual global::y3d.e.YSystem LoadSystem(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LoadSystem(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.YSystem LoadSystem(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LoadSystem, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.YSystem> LoadSystemAsync(global::y3d.e.EmptyParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LoadSystemAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.YSystem> LoadSystemAsync(global::y3d.e.EmptyParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LoadSystem, null, options, request);
      }
      public virtual global::y3d.e.ResultReply SaveSystem(global::y3d.e.YSystem request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SaveSystem(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply SaveSystem(global::y3d.e.YSystem request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SaveSystem, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> SaveSystemAsync(global::y3d.e.YSystem request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SaveSystemAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> SaveSystemAsync(global::y3d.e.YSystem request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SaveSystem, null, options, request);
      }
      public virtual global::y3d.e.YWorkerResponse GiveMeAWorker(global::y3d.e.YWorkerRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GiveMeAWorker(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.YWorkerResponse GiveMeAWorker(global::y3d.e.YWorkerRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GiveMeAWorker, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.YWorkerResponse> GiveMeAWorkerAsync(global::y3d.e.YWorkerRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GiveMeAWorkerAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.YWorkerResponse> GiveMeAWorkerAsync(global::y3d.e.YWorkerRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GiveMeAWorker, null, options, request);
      }
      public virtual global::y3d.e.ReadyRespone IsReady(global::y3d.e.WorkerParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return IsReady(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ReadyRespone IsReady(global::y3d.e.WorkerParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsReady, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ReadyRespone> IsReadyAsync(global::y3d.e.WorkerParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return IsReadyAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ReadyRespone> IsReadyAsync(global::y3d.e.WorkerParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsReady, null, options, request);
      }
      public virtual global::y3d.e.UserResponse UserLogin(global::y3d.e.UserParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserLogin(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.UserResponse UserLogin(global::y3d.e.UserParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserLogin, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.UserResponse> UserLoginAsync(global::y3d.e.UserParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserLoginAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.UserResponse> UserLoginAsync(global::y3d.e.UserParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserLogin, null, options, request);
      }
      public virtual global::y3d.e.UserResponse UserRegister(global::y3d.e.UserParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserRegister(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.UserResponse UserRegister(global::y3d.e.UserParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserRegister, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.UserResponse> UserRegisterAsync(global::y3d.e.UserParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UserRegisterAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.UserResponse> UserRegisterAsync(global::y3d.e.UserParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserRegister, null, options, request);
      }
      public virtual global::y3d.e.ResultReply UpdateUserSetting(global::y3d.e.UserParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateUserSetting(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResultReply UpdateUserSetting(global::y3d.e.UserParam request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateUserSetting, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> UpdateUserSettingAsync(global::y3d.e.UserParam request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateUserSettingAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResultReply> UpdateUserSettingAsync(global::y3d.e.UserParam request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateUserSetting, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override YServiceMasterClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new YServiceMasterClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static ServerServiceDefinition BindService(YServiceMasterBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AllWorkers, serviceImpl.AllWorkers)
          .AddMethod(__Method_StopAllWorkers, serviceImpl.StopAllWorkers)
          .AddMethod(__Method_StartAllWorkers, serviceImpl.StartAllWorkers)
          .AddMethod(__Method_AddWorker, serviceImpl.AddWorker)
          .AddMethod(__Method_CloseWorkerApp, serviceImpl.CloseWorkerApp)
          .AddMethod(__Method_StartWorker, serviceImpl.StartWorker)
          .AddMethod(__Method_StopWorker, serviceImpl.StopWorker)
          .AddMethod(__Method_AppExitCallback, serviceImpl.AppExitCallback)
          .AddMethod(__Method_ShowJobInMachine, serviceImpl.ShowJobInMachine)
          .AddMethod(__Method_CheckHealth, serviceImpl.CheckHealth)
          .AddMethod(__Method_UpdateWorker, serviceImpl.UpdateWorker)
          .AddMethod(__Method_LoadSystem, serviceImpl.LoadSystem)
          .AddMethod(__Method_SaveSystem, serviceImpl.SaveSystem)
          .AddMethod(__Method_GiveMeAWorker, serviceImpl.GiveMeAWorker)
          .AddMethod(__Method_IsReady, serviceImpl.IsReady)
          .AddMethod(__Method_UserLogin, serviceImpl.UserLogin)
          .AddMethod(__Method_UserRegister, serviceImpl.UserRegister)
          .AddMethod(__Method_UpdateUserSetting, serviceImpl.UpdateUserSetting).Build();
    }

  }
  /// <summary>
  /// server for 3dsmax send actions request, run in mainworker app
  /// </summary>
  public static partial class YServiceMainWorker
  {
    static readonly string __ServiceName = "y3d.YServiceMainWorker";

    static readonly Marshaller<global::y3d.e.YEvent> __Marshaller_YEvent = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.YEvent.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.ResponseEvent> __Marshaller_ResponseEvent = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.ResponseEvent.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.YWorkerResponse> __Marshaller_YWorkerResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.YWorkerResponse.Parser.ParseFrom);
    static readonly Marshaller<global::y3d.e.EmptyParam> __Marshaller_EmptyParam = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::y3d.e.EmptyParam.Parser.ParseFrom);

    static readonly Method<global::y3d.e.YEvent, global::y3d.e.ResponseEvent> __Method_DoEvent = new Method<global::y3d.e.YEvent, global::y3d.e.ResponseEvent>(
        MethodType.Unary,
        __ServiceName,
        "DoEvent",
        __Marshaller_YEvent,
        __Marshaller_ResponseEvent);

    static readonly Method<global::y3d.e.YWorkerResponse, global::y3d.e.EmptyParam> __Method_UpdateWorkers = new Method<global::y3d.e.YWorkerResponse, global::y3d.e.EmptyParam>(
        MethodType.Unary,
        __ServiceName,
        "UpdateWorkers",
        __Marshaller_YWorkerResponse,
        __Marshaller_EmptyParam);

    static readonly Method<global::y3d.e.YEvent, global::y3d.e.ResponseEvent> __Method_CloseWorkerApp = new Method<global::y3d.e.YEvent, global::y3d.e.ResponseEvent>(
        MethodType.Unary,
        __ServiceName,
        "CloseWorkerApp",
        __Marshaller_YEvent,
        __Marshaller_ResponseEvent);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::y3d.s.YserviceReflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of YServiceMainWorker</summary>
    public abstract partial class YServiceMainWorkerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResponseEvent> DoEvent(global::y3d.e.YEvent request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.EmptyParam> UpdateWorkers(global::y3d.e.YWorkerResponse request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::y3d.e.ResponseEvent> CloseWorkerApp(global::y3d.e.YEvent request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for YServiceMainWorker</summary>
    public partial class YServiceMainWorkerClient : ClientBase<YServiceMainWorkerClient>
    {
      /// <summary>Creates a new client for YServiceMainWorker</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public YServiceMainWorkerClient(Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for YServiceMainWorker that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public YServiceMainWorkerClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected YServiceMainWorkerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected YServiceMainWorkerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::y3d.e.ResponseEvent DoEvent(global::y3d.e.YEvent request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoEvent(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResponseEvent DoEvent(global::y3d.e.YEvent request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DoEvent, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResponseEvent> DoEventAsync(global::y3d.e.YEvent request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoEventAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResponseEvent> DoEventAsync(global::y3d.e.YEvent request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DoEvent, null, options, request);
      }
      public virtual global::y3d.e.EmptyParam UpdateWorkers(global::y3d.e.YWorkerResponse request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateWorkers(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.EmptyParam UpdateWorkers(global::y3d.e.YWorkerResponse request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateWorkers, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.EmptyParam> UpdateWorkersAsync(global::y3d.e.YWorkerResponse request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UpdateWorkersAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.EmptyParam> UpdateWorkersAsync(global::y3d.e.YWorkerResponse request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateWorkers, null, options, request);
      }
      public virtual global::y3d.e.ResponseEvent CloseWorkerApp(global::y3d.e.YEvent request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CloseWorkerApp(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::y3d.e.ResponseEvent CloseWorkerApp(global::y3d.e.YEvent request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CloseWorkerApp, null, options, request);
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResponseEvent> CloseWorkerAppAsync(global::y3d.e.YEvent request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CloseWorkerAppAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::y3d.e.ResponseEvent> CloseWorkerAppAsync(global::y3d.e.YEvent request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CloseWorkerApp, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override YServiceMainWorkerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new YServiceMainWorkerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static ServerServiceDefinition BindService(YServiceMainWorkerBase serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_DoEvent, serviceImpl.DoEvent)
          .AddMethod(__Method_UpdateWorkers, serviceImpl.UpdateWorkers)
          .AddMethod(__Method_CloseWorkerApp, serviceImpl.CloseWorkerApp).Build();
    }

  }
}
#endregion
