// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xnormal.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace xnormal {

  /// <summary>Holder for reflection information generated from xnormal.proto</summary>
  public static partial class XnormalReflection {

    #region Descriptor
    /// <summary>File descriptor for xnormal.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static XnormalReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg14bm9ybWFsLnByb3RvEgd4bm9ybWFsIjkKD1Vuc3BlY2lmaWVkVHlwZRIW",
            "Cg5iYXNlT2JqZWN0VHlwZRgBIAEoCRIOCgZvYmplY3QYAiABKAwifgoHdE1h",
            "dHJpeBILCgNlMTMYASABKAISCwoDZTEyGAIgASgCEgsKA2UyMxgDIAEoAhIL",
            "CgNlMzEYBCABKAISCwoDZTExGAUgASgCEgsKA2UyMhgGIAEoAhILCgNlMzMY",
            "ByABKAISCwoDZTIxGAggASgCEgsKA2UzMhgJIAEoAiKPAgoHdERldGFpbBIt",
            "CgZNZXRob2QYASABKA4yHS54bm9ybWFsLnREZXRhaWwuZUhNMk5NTWV0aG9k",
            "Eg0KBVNjYWxlGAIgASgCEgwKBEZpbGUYAyABKAkitwEKDGVITTJOTU1ldGhv",
            "ZBIUChBlSE0yTk1NZXRob2RfM3gzEAASGQoVZUhNMk5NTWV0aG9kXzRTYW1w",
            "bGVzEAESFAoQZUhNMk5NTWV0aG9kXzV4NRACEhcKE2VITTJOTU1ldGhvZF9Q",
            "UkUzeDMQAxIXChNlSE0yTk1NZXRob2RfUFJFNXg1EAQSFgoSZUhNMk5NTWV0",
            "aG9kX1NPM3gzEAUSFgoSZUhNMk5NTWV0aG9kX1NPNXg1EAYiKAoFdFJHQjgS",
            "CQoBUhgBIAEoDRIJCgFHGAIgASgNEgkKAUIYAyABKA0ixwIKDXRIaWdoUG9s",
            "eU1lc2gSDAoERmlsZRgBIAEoCRIWCg5Qb3NpdGlvbk9mZnNldBgCIAEoCRIc",
            "ChRJZ25vcmVQZXJWZXJ0ZXhDb2xvchgDIAEoCBI9Cg5BdmVyYWdlTm9ybWFs",
            "cxgEIAEoDjIlLnhub3JtYWwudEhpZ2hQb2x5TWVzaC5lU21vb3RoTm9ybWFs",
            "cxIPCgdWaXNpYmxlGAUgASgIEhUKDUJhc2VUZXhJc1RTTk0YBiABKAgSDQoF",
            "U2NhbGUYByABKAIifAoOZVNtb290aE5vcm1hbHMSIQodZVNtb290aE5vcm1h",
            "bHNfQXZlcmFnZU5vcm1hbHMQABIgChxlU21vb3RoTm9ybWFsc19IYXJkZW5O",
            "b3JtYWxzEAESJQohZVNtb290aE5vcm1hbHNfVXNlRXhwb3J0ZWROb3JtYWxz",
            "EAIiqA4KDHRMb3dQb2x5TWVzaBIPCgdCYXNlVGV4GAEgASgJEhQKDEJsb2Nr",
            "ZXJzRmlsZRgCIAEoCRI9CgxWVkRNU3dpenpsZVoYAyABKA4yJy54bm9ybWFs",
            "LnRMb3dQb2x5TWVzaC5lU3dpenpsZUNvbXBvbmVudBIeChZGcmVzbmVsUmVm",
            "cmFjdGl2ZUluZGV4GAQgASgCEg8KB1VPZmZzZXQYBSABKAISFgoOUmVmbGVj",
            "dEhEUk11bHQYBiABKAISQQoQVHJhbnNwYXJlbmN5TW9kZRgHIAEoDjInLnhu",
            "b3JtYWwudExvd1BvbHlNZXNoLmVUcmFuc3BhcmVuY3lNb2RlEg8KB1ZPZmZz",
            "ZXQYCCABKAISEgoKUmVmbGVjdFRleBgJIAEoCRIbChNNYXhSYXlEaXN0YW5j",
            "ZUZyb250GAogASgCEhQKDERpZmZ1c2VHSVRleBgLIAEoCRI7Cg1Ob3JtYXBN",
            "YXBUeXBlGAwgASgOMiQueG5vcm1hbC50TG93UG9seU1lc2guZU5vcm1hbE1h",
            "cFR5cGUSDAoERmlsZRgNIAEoCRI9CgxWVkRNU3dpenpsZVkYDiABKA4yJy54",
            "bm9ybWFsLnRMb3dQb2x5TWVzaC5lU3dpenpsZUNvbXBvbmVudBIQCghDYWdl",
            "RmlsZRgPIAEoCRIRCglIZWlnaHRUZXgYECABKAkSOwoKTk1Td2l6emxlWRgR",
            "IAEoDjInLnhub3JtYWwudExvd1BvbHlNZXNoLmVTd2l6emxlQ29tcG9uZW50",
            "EhQKDEJhdGNoUHJvdGVjdBgSIAEoCBIWCg5BbHBoYVRlc3RWYWx1ZRgTIAEo",
            "DBIUCgxTdWJkaXZpc2lvbnMYFCABKA0SDQoFTWF0dGUYFSABKAgSFgoOQXZl",
            "cmFnZU5vcm1hbHMYFiABKAgSHAoUVmVjdG9yRGlzcGxhY2VtZW50VFMYFyAB",
            "KAgSDwoHVXNlQ2FnZRgYIAEoCBIPCgdWaXNpYmxlGBkgASgIEjsKCk5NU3dp",
            "enpsZVgYGiABKA4yJy54bm9ybWFsLnRMb3dQb2x5TWVzaC5lU3dpenpsZUNv",
            "bXBvbmVudBIQCghHbG9zc1RleBgbIAEoCRINCgVTY2FsZRgcIAEoAhI7CgpO",
            "TVN3aXp6bGVaGB0gASgOMicueG5vcm1hbC50TG93UG9seU1lc2guZVN3aXp6",
            "bGVDb21wb25lbnQSHQoVVmVjdG9yRGlzcGxhY2VtZW50VGV4GB4gASgJEj0K",
            "DFZWRE1Td2l6emxlWBgfIAEoDjInLnhub3JtYWwudExvd1BvbHlNZXNoLmVT",
            "d2l6emxlQ29tcG9uZW50EhoKElVzZVBlclZlcnRleENvbG9ycxggIAEoCBIr",
            "CiNIaWdocG9seU5vcm1hbHNPdmVycmlkZVRhbmdlbnRTcGFjZRghIAEoCBIP",
            "CgdMTUFPVGV4GCIgASgJEg8KB1NwZWNUZXgYIyABKAkSDwoHTm9ybVRleBgk",
            "IAEoCRI4ChZIaWdocG9seU5vcm1hbE92ZXJyaWRlGCUgASgLMhgueG5vcm1h",
            "bC5VbnNwZWNpZmllZFR5cGUSFgoOUG9zaXRpb25PZmZzZXQYJiABKAkSGgoS",
            "TWF4UmF5RGlzdGFuY2VCYWNrGCcgASgCEhIKClVzZUZyZXNuZWwYKCABKAgS",
            "FgoOUmVjZWl2ZVNoYWRvd3MYKSABKAgSEwoLRW1pc3NpdmVUZXgYKiABKAkS",
            "FAoMQmFja2ZhY2VDdWxsGCsgASgIEhMKC0Nhc3RTaGFkb3dzGCwgASgIEhAK",
            "CE1hdGNoVVZzGC0gASgIIq8BChFlU3dpenpsZUNvbXBvbmVudBIYChRlU3dp",
            "enpsZUNvbXBvbmVudF9YMBAAEhgKFGVTd2l6emxlQ29tcG9uZW50X1gxEAES",
            "GAoUZVN3aXp6bGVDb21wb25lbnRfWTAQAhIYChRlU3dpenpsZUNvbXBvbmVu",
            "dF9ZMRADEhgKFGVTd2l6emxlQ29tcG9uZW50X1owEAQSGAoUZVN3aXp6bGVD",
            "b21wb25lbnRfWjEQBSKvAQoRZVRyYW5zcGFyZW5jeU1vZGUSGgoWZVRyYW5z",
            "cGFyZW5jeU1vZGVfMUJpdBAAEiIKHmVUcmFuc3BhcmVuY3lNb2RlX0FkZGl0",
            "aXZlR2xvdxABEhsKF2VUcmFuc3BhcmVuY3lNb2RlX0JsZW5kEAISGgoWZVRy",
            "YW5zcGFyZW5jeU1vZGVfTm9uZRADEiEKHWVUcmFuc3BhcmVuY3lNb2RlX1Nj",
            "cmVlbkdsYXNzEAQicgoOZU5vcm1hbE1hcFR5cGUSHQoZZU5vcm1hbE1hcFR5",
            "cGVfRGVyaXZhdGl2ZRAAEh8KG2VOb3JtYWxNYXBUeXBlX09iamVjdF9zcGFj",
            "ZRABEiAKHGVOb3JtYWxNYXBUeXBlX1RhbmdlbnRfc3BhY2UQAiIrCgh0VmVj",
            "dG9yMxIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgDIAEoAiL2KAoNdEdl",
            "bmVyYXRlTWFwcxIpChFOTUJhY2tncm91bmRDb2xvchgBIAEoCzIOLnhub3Jt",
            "YWwudFJHQjgSKQoRSE1CYWNrZ3JvdW5kQ29sb3IYAiABKAsyDi54bm9ybWFs",
            "LnRSR0I4EjcKH0Jha2VIaWdocG9seUJhc2VUZXh0dXJlTm9UZXhDb2wYAyAB",
            "KAsyDi54bm9ybWFsLnRSR0I4Ej4KJkJha2VIaWdocG9seUJhc2VUZXh0dXJl",
            "QmFja2dyb3VuZENvbG9yGAQgASgLMg4ueG5vcm1hbC50UkdCOBI2Ch5SZW5k",
            "ZXJXaXJlZnJhbWVCYWNrZ3JvdW5kQ29sb3IYBSABKAsyDi54bm9ybWFsLnRS",
            "R0I4EioKElJlbmRlcldpcmVmcmFtZUNvbBgGIAEoCzIOLnhub3JtYWwudFJH",
            "QjgSIwoLUmVuZGVyQ1dDb2wYByABKAsyDi54bm9ybWFsLnRSR0I4EiUKDVJl",
            "bmRlclNlYW1Db2wYCCABKAsyDi54bm9ybWFsLnRSR0I4EikKEVJlbmRlclJh",
            "eUZhaWxzQ29sGAkgASgLMg4ueG5vcm1hbC50UkdCOBInCg9BT09jY2x1ZGVk",
            "Q29sb3IYCiABKAsyDi54bm9ybWFsLnRSR0I4EikKEUFPVW5vY2NsdWRlZENv",
            "bG9yGAsgASgLMg4ueG5vcm1hbC50UkdCOBIpChFBT0JhY2tncm91bmRDb2xv",
            "chgMIAEoCzIOLnhub3JtYWwudFJHQjgSKwoTQmVudEJhY2tncm91bmRDb2xv",
            "chgNIAEoCzIOLnhub3JtYWwudFJHQjgSKgoSUFJUQmFja2dyb3VuZENvbG9y",
            "GA4gASgLMg4ueG5vcm1hbC50UkdCOBIwChhDb252ZXhpdHlCYWNrZ3JvdW5k",
            "Q29sb3IYDyABKAsyDi54bm9ybWFsLnRSR0I4EjAKGFRoaWNrbmVzc0JhY2tn",
            "cm91bmRDb2xvchgQIAEoCzIOLnhub3JtYWwudFJHQjgSMAoYUHJveGltaXR5",
            "QmFja2dyb3VuZENvbG9yGBEgASgLMg4ueG5vcm1hbC50UkdCOBItChVDYXZp",
            "dHlCYWNrZ3JvdW5kQ29sb3IYEiABKAsyDi54bm9ybWFsLnRSR0I4EioKElZE",
            "TUJhY2tncm91bmRDb2xvchgTIAEoCzIOLnhub3JtYWwudFJHQjgSLAoUUmFk",
            "Tk1CYWNrZ3JvdW5kQ29sb3IYFCABKAsyDi54bm9ybWFsLnRSR0I4EisKE0N1",
            "cnZCYWNrZ3JvdW5kQ29sb3IYFSABKAsyDi54bm9ybWFsLnRSR0I4Ei4KFkRl",
            "cml2Tk1CYWNrZ3JvdW5kQ29sb3IYFiABKAsyDi54bm9ybWFsLnRSR0I4Ei4K",
            "FlRyYW5zbHVCYWNrZ3JvdW5kQ29sb3IYFyABKAsyDi54bm9ybWFsLnRSR0I4",
            "EjYKHkJha2VIaWdocG9seVZDb2xzQmFja2dyb3VuZENvbBgYIAEoCzIOLnhu",
            "b3JtYWwudFJHQjgSFgoOQ2xvc2VzdElmRmFpbHMYGSABKAgSHAoURGlyZWN0",
            "aW9uc1RvbmVtYXBNYXgYGiABKAISFQoNQ3Vydk1vbm9jcm9tZRgbIAEoCBIO",
            "CgZBT0JpYXMYHCABKAISGAoQQmVudFRhbmdlbnRTcGFjZRgdIAEoCBISCgpH",
            "ZW5UcmFuc2x1GB4gASgIEj4KDkFPRGlzdHJpYnV0aW9uGB8gASgOMiYueG5v",
            "cm1hbC50R2VuZXJhdGVNYXBzLmVBT0Rpc3RyaWJ1dGlvbhIUCgxQUlRUaHJl",
            "c2hvbGQYICABKAISHAoURGlyZWN0aW9uc1RvbmVtYXBNaW4YISABKAISQAoQ",
            "Q3VydkRpc3RyaWJ1dGlvbhgiIAEoDjImLnhub3JtYWwudEdlbmVyYXRlTWFw",
            "cy5lQU9EaXN0cmlidXRpb24SEgoKQmVudEppdHRlchgjIAEoCBJAChBCZW50",
            "RGlzdHJpYnV0aW9uGCQgASgOMiYueG5vcm1hbC50R2VuZXJhdGVNYXBzLmVB",
            "T0Rpc3RyaWJ1dGlvbhIfChdCYWtlSGlnaHBvbHlCYXNlVGV4dHVyZRglIAEo",
            "CBIUCgxHZW5Db252ZXhpdHkYJiABKAgSIwobUmFkaW9zaXR5Tm9ybWFsc0F0",
            "dGVuTGluZWFyGCcgASgCEhwKFFRyYW5zbHVSYXlzUGVyU2FtcGxlGCggASgN",
            "EhoKEkN1cnZTZWFyY2hEaXN0YW5jZRgpIAEoAhI6CghTd2l6emxlWhgqIAEo",
            "DjIoLnhub3JtYWwudEdlbmVyYXRlTWFwcy5lU3dpenpsZUNvbXBvbmVudBIT",
            "CgtUcmFuc2x1QmlhcxgrIAEoAhIbChNQUlRMaW1pdFJheURpc3RhbmNlGCwg",
            "ASgIEg8KB0dlbkJlbnQYLSABKAgSGgoSQU9MaW1pdFJheURpc3RhbmNlGC4g",
            "ASgIEhkKEUN1cnZSYXlzUGVyU2FtcGxlGC8gASgNEkwKHFJhZGlvc2l0eU5v",
            "cm1hbHNEaXN0cmlidXRpb24YMCABKA4yJi54bm9ybWFsLnRHZW5lcmF0ZU1h",
            "cHMuZUFPRGlzdHJpYnV0aW9uEiUKHVJhZGlvc2l0eU5vcm1hbHNSYXlzUGVy",
            "U2FtcGxlGDEgASgNEhIKCkN1cnZKaXR0ZXIYMiABKAgSFAoMVGFuZ2VudFNw",
            "YWNlGDMgASgIEioKIlJhZGlvc2l0eU5vcm1hbHNBbGxvd1B1cmVPY2NsdXNp",
            "b24YNCABKAgSPgoMQmVudFN3aXp6bGVYGDUgASgOMigueG5vcm1hbC50R2Vu",
            "ZXJhdGVNYXBzLmVTd2l6emxlQ29tcG9uZW50EjoKCFN3aXp6bGVZGDYgASgO",
            "MigueG5vcm1hbC50R2VuZXJhdGVNYXBzLmVTd2l6emxlQ29tcG9uZW50Eg8K",
            "B0dlbkN1cnYYNyABKAgSEQoJUFJUSml0dGVyGDggASgIEhgKEEFPQXR0ZW5D",
            "dWFkcmF0aWMYOSABKAISFQoNQmVudENvbmVBbmdsZRg6IAEoAhI6CghTd2l6",
            "emxlWBg7IAEoDjIoLnhub3JtYWwudEdlbmVyYXRlTWFwcy5lU3dpenpsZUNv",
            "bXBvbmVudBIWCg5SZW5kZXJSYXlGYWlscxg8IAEoCBIaChJDYXZpdHlTZWFy",
            "Y2hSYWRpdXMYPSABKAISIAoYUmFkaW9zaXR5Tm9ybWFsc0VuY29kZUFPGD4g",
            "ASgIEhgKEFRyYW5zbHVDb25lQW5nbGUYPyABKAISGQoRQmVudFJheXNQZXJT",
            "YW1wbGUYQCABKA0SFgoOQ29udmV4aXR5U2NhbGUYQSABKAISIQoZUmFkaW9z",
            "aXR5Tm9ybWFsc0NvbmVBbmdsZRhCIAEoAhIMCgRGaWxlGEMgASgJEhIKCkdl",
            "bkRlcml2Tk0YRCABKAgSHAoUQmVudExpbWl0UmF5RGlzdGFuY2UYRSABKAgS",
            "DwoHUFJUQmlhcxhGIAEoAhIXCg9SZW5kZXJXaXJlZnJhbWUYRyABKAgSFAoM",
            "UFJUTm9ybWFsaXplGEggASgIEg0KBUdlbkFPGEkgASgIEhQKDFBSVENvbmVB",
            "bmdsZRhKIAEoAhIOCgZIZWlnaHQYSyABKA0SJgoeUmFkaW9zaXR5Tm9ybWFs",
            "c0F0dGVuQ3VhZHJhdGljGEwgASgCEkIKEURpcmVjdGlvbnNUb25lbWFwGE0g",
            "ASgOMicueG5vcm1hbC50R2VuZXJhdGVNYXBzLmVITU5vcm1hbGl6YXRpb24S",
            "FAoMRGlyZWN0aW9uc1RTGE4gASgIEhgKEFBSVFJheXNQZXJTYW1wbGUYTyAB",
            "KA0SEwoLRWRnZVBhZGRpbmcYUCABKA0SRAoSRGlyZWN0aW9uc1N3aXp6bGVa",
            "GFEgASgOMigueG5vcm1hbC50R2VuZXJhdGVNYXBzLmVTd2l6emxlQ29tcG9u",
            "ZW50EhsKE0FPQWxsb3dQdXJlT2NjbHVkZWQYUiABKAgSHAoUQU9JZ25vcmVC",
            "YWNrZmFjZUhpdHMYUyABKAgSGwoTQ2F2aXR5UmF5c1BlclNhbXBsZRhUIAEo",
            "DRIXCg9BT0F0dGVuQ29uc3RhbnQYVSABKAISFAoMQ2F2aXR5Sml0dGVyGFYg",
            "ASgIEhgKEEhlaWdodFRvbmVtYXBNYXgYVyABKAISFQoNR2VuRGlyZWN0aW9u",
            "cxhYIAEoCBIoCiBSYWRpb3NpdHlOb3JtYWxzTGltaXRSYXlEaXN0YW5jZRhZ",
            "IAEoCBIYChBIZWlnaHRUb25lbWFwTWluGFogASgCEh4KFlJhZGlvc2l0eU5v",
            "cm1hbHNKaXR0ZXIYWyABKAgSRAoSRGlyZWN0aW9uc1N3aXp6bGVZGFwgASgO",
            "MigueG5vcm1hbC50R2VuZXJhdGVNYXBzLmVTd2l6emxlQ29tcG9uZW50Eg0K",
            "BVdpZHRoGF0gASgNEjYKLkJha2VIaWdocG9seUJhc2VUZXh0dXJlRHJhd09i",
            "amVjdElESWZOb1RleHR1cmUYXiABKAgSEQoJQ29uY2F2aXR5GF8gASgIEkQK",
            "EkRpcmVjdGlvbnNTd2l6emxlWBhgIAEoDjIoLnhub3JtYWwudEdlbmVyYXRl",
            "TWFwcy5lU3dpenpsZUNvbXBvbmVudBISCgpHZW5Ob3JtYWxzGGEgASgIEh4K",
            "FlByb3hpbWl0eVJheXNQZXJTYW1wbGUYYiABKA0SEgoKR2VuSGVpZ2h0cxhj",
            "IAEoCBIlCh1SYWRpb3NpdHlOb3JtYWxzQXR0ZW5Db25zdGFudBhkIAEoAhIU",
            "CgxHZW5Qcm94aW1pdHkYZSABKAgSDgoGR2VuUFJUGGYgASgIEhYKDkNhdml0",
            "eUNvbnRyYXN0GGcgASgCEkUKGFJhZGlvc2l0eU5vcm1hbHNDb29yZFN5cxho",
            "IAEoDjIjLnhub3JtYWwudEdlbmVyYXRlTWFwcy5lUk5NQ29vcmRTeXMSFQoN",
            "VHJhbnNsdUppdHRlchhpIAEoCBIXCg9BT1JheXNQZXJTYW1wbGUYaiABKA0S",
            "EAoIQmVudEJpYXMYayABKAISHwoXRGlzY2FyZFJheUJhY2tGYWNlc0hpdHMY",
            "bCABKAgSEwoLQU9Db25lQW5nbGUYbSABKAISPgoMQmVudFN3aXp6bGVZGG4g",
            "ASgOMigueG5vcm1hbC50R2VuZXJhdGVNYXBzLmVTd2l6emxlQ29tcG9uZW50",
            "EhwKFFJhZGlvc2l0eU5vcm1hbHNCaWFzGG8gASgCEiAKGFJhZGlvc2l0eU5v",
            "cm1hbHNDb250cmFzdBhwIAEoAhITCgtDYXZpdHlTdGVwcxhxIAEoDRIwCgJB",
            "QRhyIAEoDjIkLnhub3JtYWwudEdlbmVyYXRlTWFwcy5lQW50aWFsaWFzaW5n",
            "Ej4KDEJlbnRTd2l6emxlWhhzIAEoDjIoLnhub3JtYWwudEdlbmVyYXRlTWFw",
            "cy5lU3dpenpsZUNvbXBvbmVudBISCgpCdWNrZXRTaXplGHQgASgNEhUKDUN1",
            "cnZDb25lQW5nbGUYdSABKAISEwoLVHJhbnNsdURpc3QYdiABKAISEAoIQU9K",
            "aXR0ZXIYdyABKAgSEAoIQ3VydkJpYXMYeCABKAISEwoLR2VuV2lyZVJheXMY",
            "eSABKAgSPAoNQ3VydkFsZ29yaXRobRh6IAEoDjIlLnhub3JtYWwudEdlbmVy",
            "YXRlTWFwcy5lQ3VydkFsZ29yaXRobRJDChNUcmFuc2x1RGlzdHJpYnV0aW9u",
            "GHsgASgOMiYueG5vcm1hbC50R2VuZXJhdGVNYXBzLmVBT0Rpc3RyaWJ1dGlv",
            "bhIVCg1BT0F0dGVuTGluZWFyGHwgASgCEiEKGVByb3hpbWl0eUxpbWl0UmF5",
            "RGlzdGFuY2UYfSABKAgSGwoTR2VuUmFkaW9zaXR5Tm9ybWFscxh+IAEoCBIa",
            "ChJQcm94aW1pdHlDb25lQW5nbGUYfyABKAISPwoNSGVpZ2h0VG9uZW1hcBiA",
            "ASABKA4yJy54bm9ybWFsLnRHZW5lcmF0ZU1hcHMuZUhNTm9ybWFsaXphdGlv",
            "bhISCglHZW5DYXZpdHkYgQEgASgIEhoKEUJha2VIaWdocG9seVZDb2xzGIIB",
            "IAEoCCJoCg9lQU9EaXN0cmlidXRpb24SGgoWZUFPRGlzdHJpYnV0aW9uX0Nv",
            "c2luZRAAEhwKGGVBT0Rpc3RyaWJ1dGlvbl9Db3NpbmVTcRABEhsKF2VBT0Rp",
            "c3RyaWJ1dGlvbl9Vbmlmb3JtEAIirwEKEWVTd2l6emxlQ29tcG9uZW50EhgK",
            "FGVTd2l6emxlQ29tcG9uZW50X1gwEAASGAoUZVN3aXp6bGVDb21wb25lbnRf",
            "WDEQARIYChRlU3dpenpsZUNvbXBvbmVudF9ZMBACEhgKFGVTd2l6emxlQ29t",
            "cG9uZW50X1kxEAMSGAoUZVN3aXp6bGVDb21wb25lbnRfWjAQBBIYChRlU3dp",
            "enpsZUNvbXBvbmVudF9aMRAFImsKEGVITU5vcm1hbGl6YXRpb24SIAocZUhN",
            "Tm9ybWFsaXphdGlvbl9JbnRlcmFjdGl2ZRAAEhsKF2VITU5vcm1hbGl6YXRp",
            "b25fTWFudWFsEAESGAoUZUhNTm9ybWFsaXphdGlvbl9SYXcQAiJZCgxlUk5N",
            "Q29vcmRTeXMSFQoRZVJOTUNvb3JkU3lzX0FsaUIQABIZChVlUk5NQ29vcmRT",
            "eXNfRGlyZWN0M0QQARIXChNlUk5NQ29vcmRTeXNfT3BlbkdMEAIiTgoNZUFu",
            "dGlhbGlhc2luZxITCg9lQW50aWFsaWFzaW5nXzEQABITCg9lQW50aWFsaWFz",
            "aW5nXzIQARITCg9lQW50aWFsaWFzaW5nXzQQAiJJCg5lQ3VydkFsZ29yaXRo",
            "bRIaChZlQ3VydkFsZ29yaXRobV9BdmVyYWdlEAASGwoXZUN1cnZBbGdvcml0",
            "aG1fR2F1c3NpYW4QASJhCg50SGlnaFBvbHlNb2RlbBIkCgRNZXNoGAEgAygL",
            "MhYueG5vcm1hbC50SGlnaFBvbHlNZXNoEg8KB0Jhc2VUZXgYAiABKAkSGAoQ",
            "RGVmYXVsdE1lc2hTY2FsZRgDIAEoAiJOCg10TG93UG9seU1vZGVsEiMKBE1l",
            "c2gYASADKAsyFS54bm9ybWFsLnRMb3dQb2x5TWVzaBIYChBEZWZhdWx0TWVz",
            "aFNjYWxlGAIgASgCIowJCgl0Vmlld2VyM0QSKQoRTGlnaHRBbWJpZW50Q29s",
            "b3IYASABKAsyDi54bm9ybWFsLnRSR0I4EikKEUxpZ2h0RGlmZnVzZUNvbG9y",
            "GAIgASgLMg4ueG5vcm1hbC50UkdCOBIqChJMaWdodFNwZWN1bGFyQ29sb3IY",
            "AyABKAsyDi54bm9ybWFsLnRSR0I4EisKE0xpZ2h0U2Vjb25kYXJ5Q29sb3IY",
            "BCABKAsyDi54bm9ybWFsLnRSR0I4EioKEkxpZ2h0VGVydGlhcnlDb2xvchgF",
            "IAEoCzIOLnhub3JtYWwudFJHQjgSJwoPQmFja2dyb3VuZENvbG9yGAYgASgL",
            "Mg4ueG5vcm1hbC50UkdCOBIhCglHcmlkQ29sb3IYByABKAsyDi54bm9ybWFs",
            "LnRSR0I4EiEKCUNhZ2VDb2xvchgIIAEoCzIOLnhub3JtYWwudFJHQjgSKAoO",
            "Q2FtZXJhUm90YXRpb24YCSABKAsyEC54bm9ybWFsLnRNYXRyaXgSKQoOQ2Ft",
            "ZXJhUG9zaXRpb24YCiABKAsyES54bm9ybWFsLnRWZWN0b3IzEigKDUxpZ2h0",
            "UG9zaXRpb24YCyABKAsyES54bm9ybWFsLnRWZWN0b3IzEg8KB0F4aXNTY2wY",
            "DCABKAISFgoOWGVtYWtvc0V4YW1wbGUYDSABKAgSFQoNU2hvd1dpcmVmcmFt",
            "ZRgOIAEoCBITCgtDYWdlT3BhY2l0eRgPIAEoAhIaChJEaWZmdXNlR0lJbnRl",
            "bnNpdHkYECABKAISDgoGU2hvd0FPGBEgASgIEhQKDFNTQU9Db250cmFzdBgS",
            "IAEoAhISCgpTaGFkb3dBcmVhGBMgASgCEh0KFUxpZ2h0SW5kaXJldEludGVu",
            "c2l0eRgUIAEoAhIVCg1TaG93SGlnaHBvbHlzGBUgASgIEhUKDVNob3dTdGFy",
            "ZmllbGQYFiABKAgSFAoMU2hvd0Jsb2NrZXJzGBcgASgIEhQKDEhEUlRocmVz",
            "aG9sZBgYIAEoAhISCgpTU0FPQnJpZ2h0GBkgASgCEhYKDlNTQU9CbHVyUmFk",
            "aXVzGBogASgCEhAKCFNob3dHcmlkGBsgASgIEhgKEFBhcmFsbGF4U3RyZW5n",
            "dGgYHCABKAISEQoJU1NBT0F0dGVuGB0gASgCEhsKE0NhbWVyYU9yYml0RGlz",
            "dGFuY2UYHiABKAISDwoHVXNlR2xvdxgfIAEoCBITCgtTU0FPRW5hYmxlZBgg",
            "IAEoCBISCgpTaGFkb3dCaWFzGCEgASgCEhIKClNTQU9SYWRpdXMYIiABKAIS",
            "FgoOTGlnaHRJbnRlbnNpdHkYIyABKAISEAoIRXhwb3N1cmUYJCABKAISHQoV",
            "Q2FtZXJhT3JiaXRBdXRvQ2VudGVyGCUgASgIEhMKC0Nhc3RTaGFkb3dzGCYg",
            "ASgIEhMKC1Nob3dOb3JtYWxzGCcgASgIEhwKFE1heFRlc3NlbGxhdGlvbkxl",
            "dmVsGCggASgDEhQKDFNob3dUYW5nZW50cxgpIAEoCBIVCg1HbG93SW50ZW5z",
            "aXR5GCogASgCIu8BCghTZXR0aW5ncxIuCg1IaWdoUG9seU1vZGVsGAEgASgL",
            "MhcueG5vcm1hbC50SGlnaFBvbHlNb2RlbBIsCgxMb3dQb2x5TW9kZWwYAiAB",
            "KAsyFi54bm9ybWFsLnRMb3dQb2x5TW9kZWwSLAoMR2VuZXJhdGVNYXBzGAMg",
            "ASgLMhYueG5vcm1hbC50R2VuZXJhdGVNYXBzEiAKBkRldGFpbBgEIAEoCzIQ",
            "Lnhub3JtYWwudERldGFpbBIkCghWaWV3ZXIzRBgFIAEoCzISLnhub3JtYWwu",
            "dFZpZXdlcjNEEg8KB1ZlcnNpb24YBiABKAlCCqoCB3hub3JtYWxiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::xnormal.UnspecifiedType), global::xnormal.UnspecifiedType.Parser, new[]{ "BaseObjectType", "Object" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::xnormal.tMatrix), global::xnormal.tMatrix.Parser, new[]{ "E13", "E12", "E23", "E31", "E11", "E22", "E33", "E21", "E32" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::xnormal.tDetail), global::xnormal.tDetail.Parser, new[]{ "Method", "Scale", "File" }, null, new[]{ typeof(global::xnormal.tDetail.Types.eHM2NMMethod) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::xnormal.tRGB8), global::xnormal.tRGB8.Parser, new[]{ "R", "G", "B" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::xnormal.tHighPolyMesh), global::xnormal.tHighPolyMesh.Parser, new[]{ "File", "PositionOffset", "IgnorePerVertexColor", "AverageNormals", "Visible", "BaseTexIsTSNM", "Scale" }, null, new[]{ typeof(global::xnormal.tHighPolyMesh.Types.eSmoothNormals) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::xnormal.tLowPolyMesh), global::xnormal.tLowPolyMesh.Parser, new[]{ "BaseTex", "BlockersFile", "VVDMSwizzleZ", "FresnelRefractiveIndex", "UOffset", "ReflectHDRMult", "TransparencyMode", "VOffset", "ReflectTex", "MaxRayDistanceFront", "DiffuseGITex", "NormapMapType", "File", "VVDMSwizzleY", "CageFile", "HeightTex", "NMSwizzleY", "BatchProtect", "AlphaTestValue", "Subdivisions", "Matte", "AverageNormals", "VectorDisplacementTS", "UseCage", "Visible", "NMSwizzleX", "GlossTex", "Scale", "NMSwizzleZ", "VectorDisplacementTex", "VVDMSwizzleX", "UsePerVertexColors", "HighpolyNormalsOverrideTangentSpace", "LMAOTex", "SpecTex", "NormTex", "HighpolyNormalOverride", "PositionOffset", "MaxRayDistanceBack", "UseFresnel", "ReceiveShadows", "EmissiveTex", "BackfaceCull", "CastShadows", "MatchUVs" }, null, new[]{ typeof(global::xnormal.tLowPolyMesh.Types.eSwizzleComponent), typeof(global::xnormal.tLowPolyMesh.Types.eTransparencyMode), typeof(global::xnormal.tLowPolyMesh.Types.eNormalMapType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::xnormal.tVector3), global::xnormal.tVector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::xnormal.tGenerateMaps), global::xnormal.tGenerateMaps.Parser, new[]{ "NMBackgroundColor", "HMBackgroundColor", "BakeHighpolyBaseTextureNoTexCol", "BakeHighpolyBaseTextureBackgroundColor", "RenderWireframeBackgroundColor", "RenderWireframeCol", "RenderCWCol", "RenderSeamCol", "RenderRayFailsCol", "AOOccludedColor", "AOUnoccludedColor", "AOBackgroundColor", "BentBackgroundColor", "PRTBackgroundColor", "ConvexityBackgroundColor", "ThicknessBackgroundColor", "ProximityBackgroundColor", "CavityBackgroundColor", "VDMBackgroundColor", "RadNMBackgroundColor", "CurvBackgroundColor", "DerivNMBackgroundColor", "TransluBackgroundColor", "BakeHighpolyVColsBackgroundCol", "ClosestIfFails", "DirectionsTonemapMax", "CurvMonocrome", "AOBias", "BentTangentSpace", "GenTranslu", "AODistribution", "PRTThreshold", "DirectionsTonemapMin", "CurvDistribution", "BentJitter", "BentDistribution", "BakeHighpolyBaseTexture", "GenConvexity", "RadiosityNormalsAttenLinear", "TransluRaysPerSample", "CurvSearchDistance", "SwizzleZ", "TransluBias", "PRTLimitRayDistance", "GenBent", "AOLimitRayDistance", "CurvRaysPerSample", "RadiosityNormalsDistribution", "RadiosityNormalsRaysPerSample", "CurvJitter", "TangentSpace", "RadiosityNormalsAllowPureOcclusion", "BentSwizzleX", "SwizzleY", "GenCurv", "PRTJitter", "AOAttenCuadratic", "BentConeAngle", "SwizzleX", "RenderRayFails", "CavitySearchRadius", "RadiosityNormalsEncodeAO", "TransluConeAngle", "BentRaysPerSample", "ConvexityScale", "RadiosityNormalsConeAngle", "File", "GenDerivNM", "BentLimitRayDistance", "PRTBias", "RenderWireframe", "PRTNormalize", "GenAO", "PRTConeAngle", "Height", "RadiosityNormalsAttenCuadratic", "DirectionsTonemap", "DirectionsTS", "PRTRaysPerSample", "EdgePadding", "DirectionsSwizzleZ", "AOAllowPureOccluded", "AOIgnoreBackfaceHits", "CavityRaysPerSample", "AOAttenConstant", "CavityJitter", "HeightTonemapMax", "GenDirections", "RadiosityNormalsLimitRayDistance", "HeightTonemapMin", "RadiosityNormalsJitter", "DirectionsSwizzleY", "Width", "BakeHighpolyBaseTextureDrawObjectIDIfNoTexture", "Concavity", "DirectionsSwizzleX", "GenNormals", "ProximityRaysPerSample", "GenHeights", "RadiosityNormalsAttenConstant", "GenProximity", "GenPRT", "CavityContrast", "RadiosityNormalsCoordSys", "TransluJitter", "AORaysPerSample", "BentBias", "DiscardRayBackFacesHits", "AOConeAngle", "BentSwizzleY", "RadiosityNormalsBias", "RadiosityNormalsContrast", "CavitySteps", "AA", "BentSwizzleZ", "BucketSize", "CurvConeAngle", "TransluDist", "AOJitter", "CurvBias", "GenWireRays", "CurvAlgorithm", "TransluDistribution", "AOAttenLinear", "ProximityLimitRayDistance", "GenRadiosityNormals", "ProximityConeAngle", "HeightTonemap", "GenCavity", "BakeHighpolyVCols" }, null, new[]{ typeof(global::xnormal.tGenerateMaps.Types.eAODistribution), typeof(global::xnormal.tGenerateMaps.Types.eSwizzleComponent), typeof(global::xnormal.tGenerateMaps.Types.eHMNormalization), typeof(global::xnormal.tGenerateMaps.Types.eRNMCoordSys), typeof(global::xnormal.tGenerateMaps.Types.eAntialiasing), typeof(global::xnormal.tGenerateMaps.Types.eCurvAlgorithm) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::xnormal.tHighPolyModel), global::xnormal.tHighPolyModel.Parser, new[]{ "Mesh", "BaseTex", "DefaultMeshScale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::xnormal.tLowPolyModel), global::xnormal.tLowPolyModel.Parser, new[]{ "Mesh", "DefaultMeshScale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::xnormal.tViewer3D), global::xnormal.tViewer3D.Parser, new[]{ "LightAmbientColor", "LightDiffuseColor", "LightSpecularColor", "LightSecondaryColor", "LightTertiaryColor", "BackgroundColor", "GridColor", "CageColor", "CameraRotation", "CameraPosition", "LightPosition", "AxisScl", "XemakosExample", "ShowWireframe", "CageOpacity", "DiffuseGIIntensity", "ShowAO", "SSAOContrast", "ShadowArea", "LightIndiretIntensity", "ShowHighpolys", "ShowStarfield", "ShowBlockers", "HDRThreshold", "SSAOBright", "SSAOBlurRadius", "ShowGrid", "ParallaxStrength", "SSAOAtten", "CameraOrbitDistance", "UseGlow", "SSAOEnabled", "ShadowBias", "SSAORadius", "LightIntensity", "Exposure", "CameraOrbitAutoCenter", "CastShadows", "ShowNormals", "MaxTessellationLevel", "ShowTangents", "GlowIntensity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::xnormal.Settings), global::xnormal.Settings.Parser, new[]{ "HighPolyModel", "LowPolyModel", "GenerateMaps", "Detail", "Viewer3D", "Version" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UnspecifiedType : pb::IMessage<UnspecifiedType> {
    private static readonly pb::MessageParser<UnspecifiedType> _parser = new pb::MessageParser<UnspecifiedType>(() => new UnspecifiedType());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnspecifiedType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::xnormal.XnormalReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnspecifiedType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnspecifiedType(UnspecifiedType other) : this() {
      baseObjectType_ = other.baseObjectType_;
      object_ = other.object_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnspecifiedType Clone() {
      return new UnspecifiedType(this);
    }

    /// <summary>Field number for the "baseObjectType" field.</summary>
    public const int BaseObjectTypeFieldNumber = 1;
    private string baseObjectType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseObjectType {
      get { return baseObjectType_; }
      set {
        baseObjectType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "object" field.</summary>
    public const int ObjectFieldNumber = 2;
    private pb::ByteString object_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Object {
      get { return object_; }
      set {
        object_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnspecifiedType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnspecifiedType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseObjectType != other.BaseObjectType) return false;
      if (Object != other.Object) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseObjectType.Length != 0) hash ^= BaseObjectType.GetHashCode();
      if (Object.Length != 0) hash ^= Object.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BaseObjectType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BaseObjectType);
      }
      if (Object.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Object);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BaseObjectType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseObjectType);
      }
      if (Object.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Object);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnspecifiedType other) {
      if (other == null) {
        return;
      }
      if (other.BaseObjectType.Length != 0) {
        BaseObjectType = other.BaseObjectType;
      }
      if (other.Object.Length != 0) {
        Object = other.Object;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BaseObjectType = input.ReadString();
            break;
          }
          case 18: {
            Object = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class tMatrix : pb::IMessage<tMatrix> {
    private static readonly pb::MessageParser<tMatrix> _parser = new pb::MessageParser<tMatrix>(() => new tMatrix());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<tMatrix> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::xnormal.XnormalReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tMatrix() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tMatrix(tMatrix other) : this() {
      e13_ = other.e13_;
      e12_ = other.e12_;
      e23_ = other.e23_;
      e31_ = other.e31_;
      e11_ = other.e11_;
      e22_ = other.e22_;
      e33_ = other.e33_;
      e21_ = other.e21_;
      e32_ = other.e32_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tMatrix Clone() {
      return new tMatrix(this);
    }

    /// <summary>Field number for the "e13" field.</summary>
    public const int E13FieldNumber = 1;
    private float e13_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float E13 {
      get { return e13_; }
      set {
        e13_ = value;
      }
    }

    /// <summary>Field number for the "e12" field.</summary>
    public const int E12FieldNumber = 2;
    private float e12_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float E12 {
      get { return e12_; }
      set {
        e12_ = value;
      }
    }

    /// <summary>Field number for the "e23" field.</summary>
    public const int E23FieldNumber = 3;
    private float e23_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float E23 {
      get { return e23_; }
      set {
        e23_ = value;
      }
    }

    /// <summary>Field number for the "e31" field.</summary>
    public const int E31FieldNumber = 4;
    private float e31_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float E31 {
      get { return e31_; }
      set {
        e31_ = value;
      }
    }

    /// <summary>Field number for the "e11" field.</summary>
    public const int E11FieldNumber = 5;
    private float e11_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float E11 {
      get { return e11_; }
      set {
        e11_ = value;
      }
    }

    /// <summary>Field number for the "e22" field.</summary>
    public const int E22FieldNumber = 6;
    private float e22_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float E22 {
      get { return e22_; }
      set {
        e22_ = value;
      }
    }

    /// <summary>Field number for the "e33" field.</summary>
    public const int E33FieldNumber = 7;
    private float e33_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float E33 {
      get { return e33_; }
      set {
        e33_ = value;
      }
    }

    /// <summary>Field number for the "e21" field.</summary>
    public const int E21FieldNumber = 8;
    private float e21_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float E21 {
      get { return e21_; }
      set {
        e21_ = value;
      }
    }

    /// <summary>Field number for the "e32" field.</summary>
    public const int E32FieldNumber = 9;
    private float e32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float E32 {
      get { return e32_; }
      set {
        e32_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as tMatrix);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(tMatrix other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (E13 != other.E13) return false;
      if (E12 != other.E12) return false;
      if (E23 != other.E23) return false;
      if (E31 != other.E31) return false;
      if (E11 != other.E11) return false;
      if (E22 != other.E22) return false;
      if (E33 != other.E33) return false;
      if (E21 != other.E21) return false;
      if (E32 != other.E32) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (E13 != 0F) hash ^= E13.GetHashCode();
      if (E12 != 0F) hash ^= E12.GetHashCode();
      if (E23 != 0F) hash ^= E23.GetHashCode();
      if (E31 != 0F) hash ^= E31.GetHashCode();
      if (E11 != 0F) hash ^= E11.GetHashCode();
      if (E22 != 0F) hash ^= E22.GetHashCode();
      if (E33 != 0F) hash ^= E33.GetHashCode();
      if (E21 != 0F) hash ^= E21.GetHashCode();
      if (E32 != 0F) hash ^= E32.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (E13 != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(E13);
      }
      if (E12 != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(E12);
      }
      if (E23 != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(E23);
      }
      if (E31 != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(E31);
      }
      if (E11 != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(E11);
      }
      if (E22 != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(E22);
      }
      if (E33 != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(E33);
      }
      if (E21 != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(E21);
      }
      if (E32 != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(E32);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (E13 != 0F) {
        size += 1 + 4;
      }
      if (E12 != 0F) {
        size += 1 + 4;
      }
      if (E23 != 0F) {
        size += 1 + 4;
      }
      if (E31 != 0F) {
        size += 1 + 4;
      }
      if (E11 != 0F) {
        size += 1 + 4;
      }
      if (E22 != 0F) {
        size += 1 + 4;
      }
      if (E33 != 0F) {
        size += 1 + 4;
      }
      if (E21 != 0F) {
        size += 1 + 4;
      }
      if (E32 != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(tMatrix other) {
      if (other == null) {
        return;
      }
      if (other.E13 != 0F) {
        E13 = other.E13;
      }
      if (other.E12 != 0F) {
        E12 = other.E12;
      }
      if (other.E23 != 0F) {
        E23 = other.E23;
      }
      if (other.E31 != 0F) {
        E31 = other.E31;
      }
      if (other.E11 != 0F) {
        E11 = other.E11;
      }
      if (other.E22 != 0F) {
        E22 = other.E22;
      }
      if (other.E33 != 0F) {
        E33 = other.E33;
      }
      if (other.E21 != 0F) {
        E21 = other.E21;
      }
      if (other.E32 != 0F) {
        E32 = other.E32;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            E13 = input.ReadFloat();
            break;
          }
          case 21: {
            E12 = input.ReadFloat();
            break;
          }
          case 29: {
            E23 = input.ReadFloat();
            break;
          }
          case 37: {
            E31 = input.ReadFloat();
            break;
          }
          case 45: {
            E11 = input.ReadFloat();
            break;
          }
          case 53: {
            E22 = input.ReadFloat();
            break;
          }
          case 61: {
            E33 = input.ReadFloat();
            break;
          }
          case 69: {
            E21 = input.ReadFloat();
            break;
          }
          case 77: {
            E32 = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class tDetail : pb::IMessage<tDetail> {
    private static readonly pb::MessageParser<tDetail> _parser = new pb::MessageParser<tDetail>(() => new tDetail());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<tDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::xnormal.XnormalReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tDetail(tDetail other) : this() {
      method_ = other.method_;
      scale_ = other.scale_;
      file_ = other.file_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tDetail Clone() {
      return new tDetail(this);
    }

    /// <summary>Field number for the "Method" field.</summary>
    public const int MethodFieldNumber = 1;
    private global::xnormal.tDetail.Types.eHM2NMMethod method_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tDetail.Types.eHM2NMMethod Method {
      get { return method_; }
      set {
        method_ = value;
      }
    }

    /// <summary>Field number for the "Scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "File" field.</summary>
    public const int FileFieldNumber = 3;
    private string file_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string File {
      get { return file_; }
      set {
        file_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as tDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(tDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Method != other.Method) return false;
      if (Scale != other.Scale) return false;
      if (File != other.File) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Method != 0) hash ^= Method.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      if (File.Length != 0) hash ^= File.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Method != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Method);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (File.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(File);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Method != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Method);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (File.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(File);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(tDetail other) {
      if (other == null) {
        return;
      }
      if (other.Method != 0) {
        Method = other.Method;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.File.Length != 0) {
        File = other.File;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            method_ = (global::xnormal.tDetail.Types.eHM2NMMethod) input.ReadEnum();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 26: {
            File = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the tDetail message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eHM2NMMethod {
        [pbr::OriginalName("eHM2NMMethod_3x3")] _3X3 = 0,
        [pbr::OriginalName("eHM2NMMethod_4Samples")] _4Samples = 1,
        [pbr::OriginalName("eHM2NMMethod_5x5")] _5X5 = 2,
        [pbr::OriginalName("eHM2NMMethod_PRE3x3")] Pre3X3 = 3,
        [pbr::OriginalName("eHM2NMMethod_PRE5x5")] Pre5X5 = 4,
        [pbr::OriginalName("eHM2NMMethod_SO3x3")] So3X3 = 5,
        [pbr::OriginalName("eHM2NMMethod_SO5x5")] So5X5 = 6,
      }

    }
    #endregion

  }

  public sealed partial class tRGB8 : pb::IMessage<tRGB8> {
    private static readonly pb::MessageParser<tRGB8> _parser = new pb::MessageParser<tRGB8>(() => new tRGB8());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<tRGB8> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::xnormal.XnormalReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tRGB8() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tRGB8(tRGB8 other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tRGB8 Clone() {
      return new tRGB8(this);
    }

    /// <summary>Field number for the "R" field.</summary>
    public const int RFieldNumber = 1;
    private uint r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "G" field.</summary>
    public const int GFieldNumber = 2;
    private uint g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "B" field.</summary>
    public const int BFieldNumber = 3;
    private uint b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as tRGB8);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(tRGB8 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (R != other.R) return false;
      if (G != other.G) return false;
      if (B != other.B) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0) hash ^= R.GetHashCode();
      if (G != 0) hash ^= G.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (R != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(R);
      }
      if (G != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(G);
      }
      if (B != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(B);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(R);
      }
      if (G != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(G);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(B);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(tRGB8 other) {
      if (other == null) {
        return;
      }
      if (other.R != 0) {
        R = other.R;
      }
      if (other.G != 0) {
        G = other.G;
      }
      if (other.B != 0) {
        B = other.B;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            R = input.ReadUInt32();
            break;
          }
          case 16: {
            G = input.ReadUInt32();
            break;
          }
          case 24: {
            B = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class tHighPolyMesh : pb::IMessage<tHighPolyMesh> {
    private static readonly pb::MessageParser<tHighPolyMesh> _parser = new pb::MessageParser<tHighPolyMesh>(() => new tHighPolyMesh());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<tHighPolyMesh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::xnormal.XnormalReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tHighPolyMesh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tHighPolyMesh(tHighPolyMesh other) : this() {
      file_ = other.file_;
      positionOffset_ = other.positionOffset_;
      ignorePerVertexColor_ = other.ignorePerVertexColor_;
      averageNormals_ = other.averageNormals_;
      visible_ = other.visible_;
      baseTexIsTSNM_ = other.baseTexIsTSNM_;
      scale_ = other.scale_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tHighPolyMesh Clone() {
      return new tHighPolyMesh(this);
    }

    /// <summary>Field number for the "File" field.</summary>
    public const int FileFieldNumber = 1;
    private string file_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string File {
      get { return file_; }
      set {
        file_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PositionOffset" field.</summary>
    public const int PositionOffsetFieldNumber = 2;
    private string positionOffset_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PositionOffset {
      get { return positionOffset_; }
      set {
        positionOffset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IgnorePerVertexColor" field.</summary>
    public const int IgnorePerVertexColorFieldNumber = 3;
    private bool ignorePerVertexColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnorePerVertexColor {
      get { return ignorePerVertexColor_; }
      set {
        ignorePerVertexColor_ = value;
      }
    }

    /// <summary>Field number for the "AverageNormals" field.</summary>
    public const int AverageNormalsFieldNumber = 4;
    private global::xnormal.tHighPolyMesh.Types.eSmoothNormals averageNormals_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tHighPolyMesh.Types.eSmoothNormals AverageNormals {
      get { return averageNormals_; }
      set {
        averageNormals_ = value;
      }
    }

    /// <summary>Field number for the "Visible" field.</summary>
    public const int VisibleFieldNumber = 5;
    private bool visible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Visible {
      get { return visible_; }
      set {
        visible_ = value;
      }
    }

    /// <summary>Field number for the "BaseTexIsTSNM" field.</summary>
    public const int BaseTexIsTSNMFieldNumber = 6;
    private bool baseTexIsTSNM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BaseTexIsTSNM {
      get { return baseTexIsTSNM_; }
      set {
        baseTexIsTSNM_ = value;
      }
    }

    /// <summary>Field number for the "Scale" field.</summary>
    public const int ScaleFieldNumber = 7;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as tHighPolyMesh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(tHighPolyMesh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (File != other.File) return false;
      if (PositionOffset != other.PositionOffset) return false;
      if (IgnorePerVertexColor != other.IgnorePerVertexColor) return false;
      if (AverageNormals != other.AverageNormals) return false;
      if (Visible != other.Visible) return false;
      if (BaseTexIsTSNM != other.BaseTexIsTSNM) return false;
      if (Scale != other.Scale) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (File.Length != 0) hash ^= File.GetHashCode();
      if (PositionOffset.Length != 0) hash ^= PositionOffset.GetHashCode();
      if (IgnorePerVertexColor != false) hash ^= IgnorePerVertexColor.GetHashCode();
      if (AverageNormals != 0) hash ^= AverageNormals.GetHashCode();
      if (Visible != false) hash ^= Visible.GetHashCode();
      if (BaseTexIsTSNM != false) hash ^= BaseTexIsTSNM.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (File.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(File);
      }
      if (PositionOffset.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PositionOffset);
      }
      if (IgnorePerVertexColor != false) {
        output.WriteRawTag(24);
        output.WriteBool(IgnorePerVertexColor);
      }
      if (AverageNormals != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) AverageNormals);
      }
      if (Visible != false) {
        output.WriteRawTag(40);
        output.WriteBool(Visible);
      }
      if (BaseTexIsTSNM != false) {
        output.WriteRawTag(48);
        output.WriteBool(BaseTexIsTSNM);
      }
      if (Scale != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Scale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (File.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(File);
      }
      if (PositionOffset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PositionOffset);
      }
      if (IgnorePerVertexColor != false) {
        size += 1 + 1;
      }
      if (AverageNormals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AverageNormals);
      }
      if (Visible != false) {
        size += 1 + 1;
      }
      if (BaseTexIsTSNM != false) {
        size += 1 + 1;
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(tHighPolyMesh other) {
      if (other == null) {
        return;
      }
      if (other.File.Length != 0) {
        File = other.File;
      }
      if (other.PositionOffset.Length != 0) {
        PositionOffset = other.PositionOffset;
      }
      if (other.IgnorePerVertexColor != false) {
        IgnorePerVertexColor = other.IgnorePerVertexColor;
      }
      if (other.AverageNormals != 0) {
        AverageNormals = other.AverageNormals;
      }
      if (other.Visible != false) {
        Visible = other.Visible;
      }
      if (other.BaseTexIsTSNM != false) {
        BaseTexIsTSNM = other.BaseTexIsTSNM;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            File = input.ReadString();
            break;
          }
          case 18: {
            PositionOffset = input.ReadString();
            break;
          }
          case 24: {
            IgnorePerVertexColor = input.ReadBool();
            break;
          }
          case 32: {
            averageNormals_ = (global::xnormal.tHighPolyMesh.Types.eSmoothNormals) input.ReadEnum();
            break;
          }
          case 40: {
            Visible = input.ReadBool();
            break;
          }
          case 48: {
            BaseTexIsTSNM = input.ReadBool();
            break;
          }
          case 61: {
            Scale = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the tHighPolyMesh message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eSmoothNormals {
        [pbr::OriginalName("eSmoothNormals_AverageNormals")] AverageNormals = 0,
        [pbr::OriginalName("eSmoothNormals_HardenNormals")] HardenNormals = 1,
        [pbr::OriginalName("eSmoothNormals_UseExportedNormals")] UseExportedNormals = 2,
      }

    }
    #endregion

  }

  public sealed partial class tLowPolyMesh : pb::IMessage<tLowPolyMesh> {
    private static readonly pb::MessageParser<tLowPolyMesh> _parser = new pb::MessageParser<tLowPolyMesh>(() => new tLowPolyMesh());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<tLowPolyMesh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::xnormal.XnormalReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tLowPolyMesh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tLowPolyMesh(tLowPolyMesh other) : this() {
      baseTex_ = other.baseTex_;
      blockersFile_ = other.blockersFile_;
      vVDMSwizzleZ_ = other.vVDMSwizzleZ_;
      fresnelRefractiveIndex_ = other.fresnelRefractiveIndex_;
      uOffset_ = other.uOffset_;
      reflectHDRMult_ = other.reflectHDRMult_;
      transparencyMode_ = other.transparencyMode_;
      vOffset_ = other.vOffset_;
      reflectTex_ = other.reflectTex_;
      maxRayDistanceFront_ = other.maxRayDistanceFront_;
      diffuseGITex_ = other.diffuseGITex_;
      normapMapType_ = other.normapMapType_;
      file_ = other.file_;
      vVDMSwizzleY_ = other.vVDMSwizzleY_;
      cageFile_ = other.cageFile_;
      heightTex_ = other.heightTex_;
      nMSwizzleY_ = other.nMSwizzleY_;
      batchProtect_ = other.batchProtect_;
      alphaTestValue_ = other.alphaTestValue_;
      subdivisions_ = other.subdivisions_;
      matte_ = other.matte_;
      averageNormals_ = other.averageNormals_;
      vectorDisplacementTS_ = other.vectorDisplacementTS_;
      useCage_ = other.useCage_;
      visible_ = other.visible_;
      nMSwizzleX_ = other.nMSwizzleX_;
      glossTex_ = other.glossTex_;
      scale_ = other.scale_;
      nMSwizzleZ_ = other.nMSwizzleZ_;
      vectorDisplacementTex_ = other.vectorDisplacementTex_;
      vVDMSwizzleX_ = other.vVDMSwizzleX_;
      usePerVertexColors_ = other.usePerVertexColors_;
      highpolyNormalsOverrideTangentSpace_ = other.highpolyNormalsOverrideTangentSpace_;
      lMAOTex_ = other.lMAOTex_;
      specTex_ = other.specTex_;
      normTex_ = other.normTex_;
      HighpolyNormalOverride = other.highpolyNormalOverride_ != null ? other.HighpolyNormalOverride.Clone() : null;
      positionOffset_ = other.positionOffset_;
      maxRayDistanceBack_ = other.maxRayDistanceBack_;
      useFresnel_ = other.useFresnel_;
      receiveShadows_ = other.receiveShadows_;
      emissiveTex_ = other.emissiveTex_;
      backfaceCull_ = other.backfaceCull_;
      castShadows_ = other.castShadows_;
      matchUVs_ = other.matchUVs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tLowPolyMesh Clone() {
      return new tLowPolyMesh(this);
    }

    /// <summary>Field number for the "BaseTex" field.</summary>
    public const int BaseTexFieldNumber = 1;
    private string baseTex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseTex {
      get { return baseTex_; }
      set {
        baseTex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BlockersFile" field.</summary>
    public const int BlockersFileFieldNumber = 2;
    private string blockersFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlockersFile {
      get { return blockersFile_; }
      set {
        blockersFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VVDMSwizzleZ" field.</summary>
    public const int VVDMSwizzleZFieldNumber = 3;
    private global::xnormal.tLowPolyMesh.Types.eSwizzleComponent vVDMSwizzleZ_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tLowPolyMesh.Types.eSwizzleComponent VVDMSwizzleZ {
      get { return vVDMSwizzleZ_; }
      set {
        vVDMSwizzleZ_ = value;
      }
    }

    /// <summary>Field number for the "FresnelRefractiveIndex" field.</summary>
    public const int FresnelRefractiveIndexFieldNumber = 4;
    private float fresnelRefractiveIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FresnelRefractiveIndex {
      get { return fresnelRefractiveIndex_; }
      set {
        fresnelRefractiveIndex_ = value;
      }
    }

    /// <summary>Field number for the "UOffset" field.</summary>
    public const int UOffsetFieldNumber = 5;
    private float uOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UOffset {
      get { return uOffset_; }
      set {
        uOffset_ = value;
      }
    }

    /// <summary>Field number for the "ReflectHDRMult" field.</summary>
    public const int ReflectHDRMultFieldNumber = 6;
    private float reflectHDRMult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ReflectHDRMult {
      get { return reflectHDRMult_; }
      set {
        reflectHDRMult_ = value;
      }
    }

    /// <summary>Field number for the "TransparencyMode" field.</summary>
    public const int TransparencyModeFieldNumber = 7;
    private global::xnormal.tLowPolyMesh.Types.eTransparencyMode transparencyMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tLowPolyMesh.Types.eTransparencyMode TransparencyMode {
      get { return transparencyMode_; }
      set {
        transparencyMode_ = value;
      }
    }

    /// <summary>Field number for the "VOffset" field.</summary>
    public const int VOffsetFieldNumber = 8;
    private float vOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VOffset {
      get { return vOffset_; }
      set {
        vOffset_ = value;
      }
    }

    /// <summary>Field number for the "ReflectTex" field.</summary>
    public const int ReflectTexFieldNumber = 9;
    private string reflectTex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ReflectTex {
      get { return reflectTex_; }
      set {
        reflectTex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaxRayDistanceFront" field.</summary>
    public const int MaxRayDistanceFrontFieldNumber = 10;
    private float maxRayDistanceFront_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxRayDistanceFront {
      get { return maxRayDistanceFront_; }
      set {
        maxRayDistanceFront_ = value;
      }
    }

    /// <summary>Field number for the "DiffuseGITex" field.</summary>
    public const int DiffuseGITexFieldNumber = 11;
    private string diffuseGITex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DiffuseGITex {
      get { return diffuseGITex_; }
      set {
        diffuseGITex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NormapMapType" field.</summary>
    public const int NormapMapTypeFieldNumber = 12;
    private global::xnormal.tLowPolyMesh.Types.eNormalMapType normapMapType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tLowPolyMesh.Types.eNormalMapType NormapMapType {
      get { return normapMapType_; }
      set {
        normapMapType_ = value;
      }
    }

    /// <summary>Field number for the "File" field.</summary>
    public const int FileFieldNumber = 13;
    private string file_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string File {
      get { return file_; }
      set {
        file_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VVDMSwizzleY" field.</summary>
    public const int VVDMSwizzleYFieldNumber = 14;
    private global::xnormal.tLowPolyMesh.Types.eSwizzleComponent vVDMSwizzleY_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tLowPolyMesh.Types.eSwizzleComponent VVDMSwizzleY {
      get { return vVDMSwizzleY_; }
      set {
        vVDMSwizzleY_ = value;
      }
    }

    /// <summary>Field number for the "CageFile" field.</summary>
    public const int CageFileFieldNumber = 15;
    private string cageFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CageFile {
      get { return cageFile_; }
      set {
        cageFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HeightTex" field.</summary>
    public const int HeightTexFieldNumber = 16;
    private string heightTex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeightTex {
      get { return heightTex_; }
      set {
        heightTex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NMSwizzleY" field.</summary>
    public const int NMSwizzleYFieldNumber = 17;
    private global::xnormal.tLowPolyMesh.Types.eSwizzleComponent nMSwizzleY_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tLowPolyMesh.Types.eSwizzleComponent NMSwizzleY {
      get { return nMSwizzleY_; }
      set {
        nMSwizzleY_ = value;
      }
    }

    /// <summary>Field number for the "BatchProtect" field.</summary>
    public const int BatchProtectFieldNumber = 18;
    private bool batchProtect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BatchProtect {
      get { return batchProtect_; }
      set {
        batchProtect_ = value;
      }
    }

    /// <summary>Field number for the "AlphaTestValue" field.</summary>
    public const int AlphaTestValueFieldNumber = 19;
    private pb::ByteString alphaTestValue_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AlphaTestValue {
      get { return alphaTestValue_; }
      set {
        alphaTestValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Subdivisions" field.</summary>
    public const int SubdivisionsFieldNumber = 20;
    private uint subdivisions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Subdivisions {
      get { return subdivisions_; }
      set {
        subdivisions_ = value;
      }
    }

    /// <summary>Field number for the "Matte" field.</summary>
    public const int MatteFieldNumber = 21;
    private bool matte_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Matte {
      get { return matte_; }
      set {
        matte_ = value;
      }
    }

    /// <summary>Field number for the "AverageNormals" field.</summary>
    public const int AverageNormalsFieldNumber = 22;
    private bool averageNormals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AverageNormals {
      get { return averageNormals_; }
      set {
        averageNormals_ = value;
      }
    }

    /// <summary>Field number for the "VectorDisplacementTS" field.</summary>
    public const int VectorDisplacementTSFieldNumber = 23;
    private bool vectorDisplacementTS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VectorDisplacementTS {
      get { return vectorDisplacementTS_; }
      set {
        vectorDisplacementTS_ = value;
      }
    }

    /// <summary>Field number for the "UseCage" field.</summary>
    public const int UseCageFieldNumber = 24;
    private bool useCage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseCage {
      get { return useCage_; }
      set {
        useCage_ = value;
      }
    }

    /// <summary>Field number for the "Visible" field.</summary>
    public const int VisibleFieldNumber = 25;
    private bool visible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Visible {
      get { return visible_; }
      set {
        visible_ = value;
      }
    }

    /// <summary>Field number for the "NMSwizzleX" field.</summary>
    public const int NMSwizzleXFieldNumber = 26;
    private global::xnormal.tLowPolyMesh.Types.eSwizzleComponent nMSwizzleX_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tLowPolyMesh.Types.eSwizzleComponent NMSwizzleX {
      get { return nMSwizzleX_; }
      set {
        nMSwizzleX_ = value;
      }
    }

    /// <summary>Field number for the "GlossTex" field.</summary>
    public const int GlossTexFieldNumber = 27;
    private string glossTex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GlossTex {
      get { return glossTex_; }
      set {
        glossTex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Scale" field.</summary>
    public const int ScaleFieldNumber = 28;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "NMSwizzleZ" field.</summary>
    public const int NMSwizzleZFieldNumber = 29;
    private global::xnormal.tLowPolyMesh.Types.eSwizzleComponent nMSwizzleZ_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tLowPolyMesh.Types.eSwizzleComponent NMSwizzleZ {
      get { return nMSwizzleZ_; }
      set {
        nMSwizzleZ_ = value;
      }
    }

    /// <summary>Field number for the "VectorDisplacementTex" field.</summary>
    public const int VectorDisplacementTexFieldNumber = 30;
    private string vectorDisplacementTex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VectorDisplacementTex {
      get { return vectorDisplacementTex_; }
      set {
        vectorDisplacementTex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VVDMSwizzleX" field.</summary>
    public const int VVDMSwizzleXFieldNumber = 31;
    private global::xnormal.tLowPolyMesh.Types.eSwizzleComponent vVDMSwizzleX_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tLowPolyMesh.Types.eSwizzleComponent VVDMSwizzleX {
      get { return vVDMSwizzleX_; }
      set {
        vVDMSwizzleX_ = value;
      }
    }

    /// <summary>Field number for the "UsePerVertexColors" field.</summary>
    public const int UsePerVertexColorsFieldNumber = 32;
    private bool usePerVertexColors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UsePerVertexColors {
      get { return usePerVertexColors_; }
      set {
        usePerVertexColors_ = value;
      }
    }

    /// <summary>Field number for the "HighpolyNormalsOverrideTangentSpace" field.</summary>
    public const int HighpolyNormalsOverrideTangentSpaceFieldNumber = 33;
    private bool highpolyNormalsOverrideTangentSpace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HighpolyNormalsOverrideTangentSpace {
      get { return highpolyNormalsOverrideTangentSpace_; }
      set {
        highpolyNormalsOverrideTangentSpace_ = value;
      }
    }

    /// <summary>Field number for the "LMAOTex" field.</summary>
    public const int LMAOTexFieldNumber = 34;
    private string lMAOTex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LMAOTex {
      get { return lMAOTex_; }
      set {
        lMAOTex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SpecTex" field.</summary>
    public const int SpecTexFieldNumber = 35;
    private string specTex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpecTex {
      get { return specTex_; }
      set {
        specTex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NormTex" field.</summary>
    public const int NormTexFieldNumber = 36;
    private string normTex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NormTex {
      get { return normTex_; }
      set {
        normTex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HighpolyNormalOverride" field.</summary>
    public const int HighpolyNormalOverrideFieldNumber = 37;
    private global::xnormal.UnspecifiedType highpolyNormalOverride_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.UnspecifiedType HighpolyNormalOverride {
      get { return highpolyNormalOverride_; }
      set {
        highpolyNormalOverride_ = value;
      }
    }

    /// <summary>Field number for the "PositionOffset" field.</summary>
    public const int PositionOffsetFieldNumber = 38;
    private string positionOffset_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PositionOffset {
      get { return positionOffset_; }
      set {
        positionOffset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MaxRayDistanceBack" field.</summary>
    public const int MaxRayDistanceBackFieldNumber = 39;
    private float maxRayDistanceBack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxRayDistanceBack {
      get { return maxRayDistanceBack_; }
      set {
        maxRayDistanceBack_ = value;
      }
    }

    /// <summary>Field number for the "UseFresnel" field.</summary>
    public const int UseFresnelFieldNumber = 40;
    private bool useFresnel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseFresnel {
      get { return useFresnel_; }
      set {
        useFresnel_ = value;
      }
    }

    /// <summary>Field number for the "ReceiveShadows" field.</summary>
    public const int ReceiveShadowsFieldNumber = 41;
    private bool receiveShadows_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReceiveShadows {
      get { return receiveShadows_; }
      set {
        receiveShadows_ = value;
      }
    }

    /// <summary>Field number for the "EmissiveTex" field.</summary>
    public const int EmissiveTexFieldNumber = 42;
    private string emissiveTex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EmissiveTex {
      get { return emissiveTex_; }
      set {
        emissiveTex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BackfaceCull" field.</summary>
    public const int BackfaceCullFieldNumber = 43;
    private bool backfaceCull_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BackfaceCull {
      get { return backfaceCull_; }
      set {
        backfaceCull_ = value;
      }
    }

    /// <summary>Field number for the "CastShadows" field.</summary>
    public const int CastShadowsFieldNumber = 44;
    private bool castShadows_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CastShadows {
      get { return castShadows_; }
      set {
        castShadows_ = value;
      }
    }

    /// <summary>Field number for the "MatchUVs" field.</summary>
    public const int MatchUVsFieldNumber = 45;
    private bool matchUVs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MatchUVs {
      get { return matchUVs_; }
      set {
        matchUVs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as tLowPolyMesh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(tLowPolyMesh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseTex != other.BaseTex) return false;
      if (BlockersFile != other.BlockersFile) return false;
      if (VVDMSwizzleZ != other.VVDMSwizzleZ) return false;
      if (FresnelRefractiveIndex != other.FresnelRefractiveIndex) return false;
      if (UOffset != other.UOffset) return false;
      if (ReflectHDRMult != other.ReflectHDRMult) return false;
      if (TransparencyMode != other.TransparencyMode) return false;
      if (VOffset != other.VOffset) return false;
      if (ReflectTex != other.ReflectTex) return false;
      if (MaxRayDistanceFront != other.MaxRayDistanceFront) return false;
      if (DiffuseGITex != other.DiffuseGITex) return false;
      if (NormapMapType != other.NormapMapType) return false;
      if (File != other.File) return false;
      if (VVDMSwizzleY != other.VVDMSwizzleY) return false;
      if (CageFile != other.CageFile) return false;
      if (HeightTex != other.HeightTex) return false;
      if (NMSwizzleY != other.NMSwizzleY) return false;
      if (BatchProtect != other.BatchProtect) return false;
      if (AlphaTestValue != other.AlphaTestValue) return false;
      if (Subdivisions != other.Subdivisions) return false;
      if (Matte != other.Matte) return false;
      if (AverageNormals != other.AverageNormals) return false;
      if (VectorDisplacementTS != other.VectorDisplacementTS) return false;
      if (UseCage != other.UseCage) return false;
      if (Visible != other.Visible) return false;
      if (NMSwizzleX != other.NMSwizzleX) return false;
      if (GlossTex != other.GlossTex) return false;
      if (Scale != other.Scale) return false;
      if (NMSwizzleZ != other.NMSwizzleZ) return false;
      if (VectorDisplacementTex != other.VectorDisplacementTex) return false;
      if (VVDMSwizzleX != other.VVDMSwizzleX) return false;
      if (UsePerVertexColors != other.UsePerVertexColors) return false;
      if (HighpolyNormalsOverrideTangentSpace != other.HighpolyNormalsOverrideTangentSpace) return false;
      if (LMAOTex != other.LMAOTex) return false;
      if (SpecTex != other.SpecTex) return false;
      if (NormTex != other.NormTex) return false;
      if (!object.Equals(HighpolyNormalOverride, other.HighpolyNormalOverride)) return false;
      if (PositionOffset != other.PositionOffset) return false;
      if (MaxRayDistanceBack != other.MaxRayDistanceBack) return false;
      if (UseFresnel != other.UseFresnel) return false;
      if (ReceiveShadows != other.ReceiveShadows) return false;
      if (EmissiveTex != other.EmissiveTex) return false;
      if (BackfaceCull != other.BackfaceCull) return false;
      if (CastShadows != other.CastShadows) return false;
      if (MatchUVs != other.MatchUVs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseTex.Length != 0) hash ^= BaseTex.GetHashCode();
      if (BlockersFile.Length != 0) hash ^= BlockersFile.GetHashCode();
      if (VVDMSwizzleZ != 0) hash ^= VVDMSwizzleZ.GetHashCode();
      if (FresnelRefractiveIndex != 0F) hash ^= FresnelRefractiveIndex.GetHashCode();
      if (UOffset != 0F) hash ^= UOffset.GetHashCode();
      if (ReflectHDRMult != 0F) hash ^= ReflectHDRMult.GetHashCode();
      if (TransparencyMode != 0) hash ^= TransparencyMode.GetHashCode();
      if (VOffset != 0F) hash ^= VOffset.GetHashCode();
      if (ReflectTex.Length != 0) hash ^= ReflectTex.GetHashCode();
      if (MaxRayDistanceFront != 0F) hash ^= MaxRayDistanceFront.GetHashCode();
      if (DiffuseGITex.Length != 0) hash ^= DiffuseGITex.GetHashCode();
      if (NormapMapType != 0) hash ^= NormapMapType.GetHashCode();
      if (File.Length != 0) hash ^= File.GetHashCode();
      if (VVDMSwizzleY != 0) hash ^= VVDMSwizzleY.GetHashCode();
      if (CageFile.Length != 0) hash ^= CageFile.GetHashCode();
      if (HeightTex.Length != 0) hash ^= HeightTex.GetHashCode();
      if (NMSwizzleY != 0) hash ^= NMSwizzleY.GetHashCode();
      if (BatchProtect != false) hash ^= BatchProtect.GetHashCode();
      if (AlphaTestValue.Length != 0) hash ^= AlphaTestValue.GetHashCode();
      if (Subdivisions != 0) hash ^= Subdivisions.GetHashCode();
      if (Matte != false) hash ^= Matte.GetHashCode();
      if (AverageNormals != false) hash ^= AverageNormals.GetHashCode();
      if (VectorDisplacementTS != false) hash ^= VectorDisplacementTS.GetHashCode();
      if (UseCage != false) hash ^= UseCage.GetHashCode();
      if (Visible != false) hash ^= Visible.GetHashCode();
      if (NMSwizzleX != 0) hash ^= NMSwizzleX.GetHashCode();
      if (GlossTex.Length != 0) hash ^= GlossTex.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      if (NMSwizzleZ != 0) hash ^= NMSwizzleZ.GetHashCode();
      if (VectorDisplacementTex.Length != 0) hash ^= VectorDisplacementTex.GetHashCode();
      if (VVDMSwizzleX != 0) hash ^= VVDMSwizzleX.GetHashCode();
      if (UsePerVertexColors != false) hash ^= UsePerVertexColors.GetHashCode();
      if (HighpolyNormalsOverrideTangentSpace != false) hash ^= HighpolyNormalsOverrideTangentSpace.GetHashCode();
      if (LMAOTex.Length != 0) hash ^= LMAOTex.GetHashCode();
      if (SpecTex.Length != 0) hash ^= SpecTex.GetHashCode();
      if (NormTex.Length != 0) hash ^= NormTex.GetHashCode();
      if (highpolyNormalOverride_ != null) hash ^= HighpolyNormalOverride.GetHashCode();
      if (PositionOffset.Length != 0) hash ^= PositionOffset.GetHashCode();
      if (MaxRayDistanceBack != 0F) hash ^= MaxRayDistanceBack.GetHashCode();
      if (UseFresnel != false) hash ^= UseFresnel.GetHashCode();
      if (ReceiveShadows != false) hash ^= ReceiveShadows.GetHashCode();
      if (EmissiveTex.Length != 0) hash ^= EmissiveTex.GetHashCode();
      if (BackfaceCull != false) hash ^= BackfaceCull.GetHashCode();
      if (CastShadows != false) hash ^= CastShadows.GetHashCode();
      if (MatchUVs != false) hash ^= MatchUVs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BaseTex.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BaseTex);
      }
      if (BlockersFile.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BlockersFile);
      }
      if (VVDMSwizzleZ != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) VVDMSwizzleZ);
      }
      if (FresnelRefractiveIndex != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(FresnelRefractiveIndex);
      }
      if (UOffset != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(UOffset);
      }
      if (ReflectHDRMult != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(ReflectHDRMult);
      }
      if (TransparencyMode != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) TransparencyMode);
      }
      if (VOffset != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(VOffset);
      }
      if (ReflectTex.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ReflectTex);
      }
      if (MaxRayDistanceFront != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MaxRayDistanceFront);
      }
      if (DiffuseGITex.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DiffuseGITex);
      }
      if (NormapMapType != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) NormapMapType);
      }
      if (File.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(File);
      }
      if (VVDMSwizzleY != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) VVDMSwizzleY);
      }
      if (CageFile.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(CageFile);
      }
      if (HeightTex.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(HeightTex);
      }
      if (NMSwizzleY != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) NMSwizzleY);
      }
      if (BatchProtect != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(BatchProtect);
      }
      if (AlphaTestValue.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteBytes(AlphaTestValue);
      }
      if (Subdivisions != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Subdivisions);
      }
      if (Matte != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(Matte);
      }
      if (AverageNormals != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(AverageNormals);
      }
      if (VectorDisplacementTS != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(VectorDisplacementTS);
      }
      if (UseCage != false) {
        output.WriteRawTag(192, 1);
        output.WriteBool(UseCage);
      }
      if (Visible != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(Visible);
      }
      if (NMSwizzleX != 0) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) NMSwizzleX);
      }
      if (GlossTex.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(GlossTex);
      }
      if (Scale != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(Scale);
      }
      if (NMSwizzleZ != 0) {
        output.WriteRawTag(232, 1);
        output.WriteEnum((int) NMSwizzleZ);
      }
      if (VectorDisplacementTex.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(VectorDisplacementTex);
      }
      if (VVDMSwizzleX != 0) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) VVDMSwizzleX);
      }
      if (UsePerVertexColors != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(UsePerVertexColors);
      }
      if (HighpolyNormalsOverrideTangentSpace != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(HighpolyNormalsOverrideTangentSpace);
      }
      if (LMAOTex.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(LMAOTex);
      }
      if (SpecTex.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(SpecTex);
      }
      if (NormTex.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(NormTex);
      }
      if (highpolyNormalOverride_ != null) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(HighpolyNormalOverride);
      }
      if (PositionOffset.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(PositionOffset);
      }
      if (MaxRayDistanceBack != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(MaxRayDistanceBack);
      }
      if (UseFresnel != false) {
        output.WriteRawTag(192, 2);
        output.WriteBool(UseFresnel);
      }
      if (ReceiveShadows != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(ReceiveShadows);
      }
      if (EmissiveTex.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(EmissiveTex);
      }
      if (BackfaceCull != false) {
        output.WriteRawTag(216, 2);
        output.WriteBool(BackfaceCull);
      }
      if (CastShadows != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(CastShadows);
      }
      if (MatchUVs != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(MatchUVs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BaseTex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseTex);
      }
      if (BlockersFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlockersFile);
      }
      if (VVDMSwizzleZ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VVDMSwizzleZ);
      }
      if (FresnelRefractiveIndex != 0F) {
        size += 1 + 4;
      }
      if (UOffset != 0F) {
        size += 1 + 4;
      }
      if (ReflectHDRMult != 0F) {
        size += 1 + 4;
      }
      if (TransparencyMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransparencyMode);
      }
      if (VOffset != 0F) {
        size += 1 + 4;
      }
      if (ReflectTex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReflectTex);
      }
      if (MaxRayDistanceFront != 0F) {
        size += 1 + 4;
      }
      if (DiffuseGITex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiffuseGITex);
      }
      if (NormapMapType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NormapMapType);
      }
      if (File.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(File);
      }
      if (VVDMSwizzleY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VVDMSwizzleY);
      }
      if (CageFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CageFile);
      }
      if (HeightTex.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(HeightTex);
      }
      if (NMSwizzleY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) NMSwizzleY);
      }
      if (BatchProtect != false) {
        size += 2 + 1;
      }
      if (AlphaTestValue.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(AlphaTestValue);
      }
      if (Subdivisions != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Subdivisions);
      }
      if (Matte != false) {
        size += 2 + 1;
      }
      if (AverageNormals != false) {
        size += 2 + 1;
      }
      if (VectorDisplacementTS != false) {
        size += 2 + 1;
      }
      if (UseCage != false) {
        size += 2 + 1;
      }
      if (Visible != false) {
        size += 2 + 1;
      }
      if (NMSwizzleX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) NMSwizzleX);
      }
      if (GlossTex.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GlossTex);
      }
      if (Scale != 0F) {
        size += 2 + 4;
      }
      if (NMSwizzleZ != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) NMSwizzleZ);
      }
      if (VectorDisplacementTex.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VectorDisplacementTex);
      }
      if (VVDMSwizzleX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) VVDMSwizzleX);
      }
      if (UsePerVertexColors != false) {
        size += 2 + 1;
      }
      if (HighpolyNormalsOverrideTangentSpace != false) {
        size += 2 + 1;
      }
      if (LMAOTex.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LMAOTex);
      }
      if (SpecTex.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpecTex);
      }
      if (NormTex.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NormTex);
      }
      if (highpolyNormalOverride_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HighpolyNormalOverride);
      }
      if (PositionOffset.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PositionOffset);
      }
      if (MaxRayDistanceBack != 0F) {
        size += 2 + 4;
      }
      if (UseFresnel != false) {
        size += 2 + 1;
      }
      if (ReceiveShadows != false) {
        size += 2 + 1;
      }
      if (EmissiveTex.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EmissiveTex);
      }
      if (BackfaceCull != false) {
        size += 2 + 1;
      }
      if (CastShadows != false) {
        size += 2 + 1;
      }
      if (MatchUVs != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(tLowPolyMesh other) {
      if (other == null) {
        return;
      }
      if (other.BaseTex.Length != 0) {
        BaseTex = other.BaseTex;
      }
      if (other.BlockersFile.Length != 0) {
        BlockersFile = other.BlockersFile;
      }
      if (other.VVDMSwizzleZ != 0) {
        VVDMSwizzleZ = other.VVDMSwizzleZ;
      }
      if (other.FresnelRefractiveIndex != 0F) {
        FresnelRefractiveIndex = other.FresnelRefractiveIndex;
      }
      if (other.UOffset != 0F) {
        UOffset = other.UOffset;
      }
      if (other.ReflectHDRMult != 0F) {
        ReflectHDRMult = other.ReflectHDRMult;
      }
      if (other.TransparencyMode != 0) {
        TransparencyMode = other.TransparencyMode;
      }
      if (other.VOffset != 0F) {
        VOffset = other.VOffset;
      }
      if (other.ReflectTex.Length != 0) {
        ReflectTex = other.ReflectTex;
      }
      if (other.MaxRayDistanceFront != 0F) {
        MaxRayDistanceFront = other.MaxRayDistanceFront;
      }
      if (other.DiffuseGITex.Length != 0) {
        DiffuseGITex = other.DiffuseGITex;
      }
      if (other.NormapMapType != 0) {
        NormapMapType = other.NormapMapType;
      }
      if (other.File.Length != 0) {
        File = other.File;
      }
      if (other.VVDMSwizzleY != 0) {
        VVDMSwizzleY = other.VVDMSwizzleY;
      }
      if (other.CageFile.Length != 0) {
        CageFile = other.CageFile;
      }
      if (other.HeightTex.Length != 0) {
        HeightTex = other.HeightTex;
      }
      if (other.NMSwizzleY != 0) {
        NMSwizzleY = other.NMSwizzleY;
      }
      if (other.BatchProtect != false) {
        BatchProtect = other.BatchProtect;
      }
      if (other.AlphaTestValue.Length != 0) {
        AlphaTestValue = other.AlphaTestValue;
      }
      if (other.Subdivisions != 0) {
        Subdivisions = other.Subdivisions;
      }
      if (other.Matte != false) {
        Matte = other.Matte;
      }
      if (other.AverageNormals != false) {
        AverageNormals = other.AverageNormals;
      }
      if (other.VectorDisplacementTS != false) {
        VectorDisplacementTS = other.VectorDisplacementTS;
      }
      if (other.UseCage != false) {
        UseCage = other.UseCage;
      }
      if (other.Visible != false) {
        Visible = other.Visible;
      }
      if (other.NMSwizzleX != 0) {
        NMSwizzleX = other.NMSwizzleX;
      }
      if (other.GlossTex.Length != 0) {
        GlossTex = other.GlossTex;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.NMSwizzleZ != 0) {
        NMSwizzleZ = other.NMSwizzleZ;
      }
      if (other.VectorDisplacementTex.Length != 0) {
        VectorDisplacementTex = other.VectorDisplacementTex;
      }
      if (other.VVDMSwizzleX != 0) {
        VVDMSwizzleX = other.VVDMSwizzleX;
      }
      if (other.UsePerVertexColors != false) {
        UsePerVertexColors = other.UsePerVertexColors;
      }
      if (other.HighpolyNormalsOverrideTangentSpace != false) {
        HighpolyNormalsOverrideTangentSpace = other.HighpolyNormalsOverrideTangentSpace;
      }
      if (other.LMAOTex.Length != 0) {
        LMAOTex = other.LMAOTex;
      }
      if (other.SpecTex.Length != 0) {
        SpecTex = other.SpecTex;
      }
      if (other.NormTex.Length != 0) {
        NormTex = other.NormTex;
      }
      if (other.highpolyNormalOverride_ != null) {
        if (highpolyNormalOverride_ == null) {
          highpolyNormalOverride_ = new global::xnormal.UnspecifiedType();
        }
        HighpolyNormalOverride.MergeFrom(other.HighpolyNormalOverride);
      }
      if (other.PositionOffset.Length != 0) {
        PositionOffset = other.PositionOffset;
      }
      if (other.MaxRayDistanceBack != 0F) {
        MaxRayDistanceBack = other.MaxRayDistanceBack;
      }
      if (other.UseFresnel != false) {
        UseFresnel = other.UseFresnel;
      }
      if (other.ReceiveShadows != false) {
        ReceiveShadows = other.ReceiveShadows;
      }
      if (other.EmissiveTex.Length != 0) {
        EmissiveTex = other.EmissiveTex;
      }
      if (other.BackfaceCull != false) {
        BackfaceCull = other.BackfaceCull;
      }
      if (other.CastShadows != false) {
        CastShadows = other.CastShadows;
      }
      if (other.MatchUVs != false) {
        MatchUVs = other.MatchUVs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BaseTex = input.ReadString();
            break;
          }
          case 18: {
            BlockersFile = input.ReadString();
            break;
          }
          case 24: {
            vVDMSwizzleZ_ = (global::xnormal.tLowPolyMesh.Types.eSwizzleComponent) input.ReadEnum();
            break;
          }
          case 37: {
            FresnelRefractiveIndex = input.ReadFloat();
            break;
          }
          case 45: {
            UOffset = input.ReadFloat();
            break;
          }
          case 53: {
            ReflectHDRMult = input.ReadFloat();
            break;
          }
          case 56: {
            transparencyMode_ = (global::xnormal.tLowPolyMesh.Types.eTransparencyMode) input.ReadEnum();
            break;
          }
          case 69: {
            VOffset = input.ReadFloat();
            break;
          }
          case 74: {
            ReflectTex = input.ReadString();
            break;
          }
          case 85: {
            MaxRayDistanceFront = input.ReadFloat();
            break;
          }
          case 90: {
            DiffuseGITex = input.ReadString();
            break;
          }
          case 96: {
            normapMapType_ = (global::xnormal.tLowPolyMesh.Types.eNormalMapType) input.ReadEnum();
            break;
          }
          case 106: {
            File = input.ReadString();
            break;
          }
          case 112: {
            vVDMSwizzleY_ = (global::xnormal.tLowPolyMesh.Types.eSwizzleComponent) input.ReadEnum();
            break;
          }
          case 122: {
            CageFile = input.ReadString();
            break;
          }
          case 130: {
            HeightTex = input.ReadString();
            break;
          }
          case 136: {
            nMSwizzleY_ = (global::xnormal.tLowPolyMesh.Types.eSwizzleComponent) input.ReadEnum();
            break;
          }
          case 144: {
            BatchProtect = input.ReadBool();
            break;
          }
          case 154: {
            AlphaTestValue = input.ReadBytes();
            break;
          }
          case 160: {
            Subdivisions = input.ReadUInt32();
            break;
          }
          case 168: {
            Matte = input.ReadBool();
            break;
          }
          case 176: {
            AverageNormals = input.ReadBool();
            break;
          }
          case 184: {
            VectorDisplacementTS = input.ReadBool();
            break;
          }
          case 192: {
            UseCage = input.ReadBool();
            break;
          }
          case 200: {
            Visible = input.ReadBool();
            break;
          }
          case 208: {
            nMSwizzleX_ = (global::xnormal.tLowPolyMesh.Types.eSwizzleComponent) input.ReadEnum();
            break;
          }
          case 218: {
            GlossTex = input.ReadString();
            break;
          }
          case 229: {
            Scale = input.ReadFloat();
            break;
          }
          case 232: {
            nMSwizzleZ_ = (global::xnormal.tLowPolyMesh.Types.eSwizzleComponent) input.ReadEnum();
            break;
          }
          case 242: {
            VectorDisplacementTex = input.ReadString();
            break;
          }
          case 248: {
            vVDMSwizzleX_ = (global::xnormal.tLowPolyMesh.Types.eSwizzleComponent) input.ReadEnum();
            break;
          }
          case 256: {
            UsePerVertexColors = input.ReadBool();
            break;
          }
          case 264: {
            HighpolyNormalsOverrideTangentSpace = input.ReadBool();
            break;
          }
          case 274: {
            LMAOTex = input.ReadString();
            break;
          }
          case 282: {
            SpecTex = input.ReadString();
            break;
          }
          case 290: {
            NormTex = input.ReadString();
            break;
          }
          case 298: {
            if (highpolyNormalOverride_ == null) {
              highpolyNormalOverride_ = new global::xnormal.UnspecifiedType();
            }
            input.ReadMessage(highpolyNormalOverride_);
            break;
          }
          case 306: {
            PositionOffset = input.ReadString();
            break;
          }
          case 317: {
            MaxRayDistanceBack = input.ReadFloat();
            break;
          }
          case 320: {
            UseFresnel = input.ReadBool();
            break;
          }
          case 328: {
            ReceiveShadows = input.ReadBool();
            break;
          }
          case 338: {
            EmissiveTex = input.ReadString();
            break;
          }
          case 344: {
            BackfaceCull = input.ReadBool();
            break;
          }
          case 352: {
            CastShadows = input.ReadBool();
            break;
          }
          case 360: {
            MatchUVs = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the tLowPolyMesh message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eSwizzleComponent {
        [pbr::OriginalName("eSwizzleComponent_X0")] X0 = 0,
        [pbr::OriginalName("eSwizzleComponent_X1")] X1 = 1,
        [pbr::OriginalName("eSwizzleComponent_Y0")] Y0 = 2,
        [pbr::OriginalName("eSwizzleComponent_Y1")] Y1 = 3,
        [pbr::OriginalName("eSwizzleComponent_Z0")] Z0 = 4,
        [pbr::OriginalName("eSwizzleComponent_Z1")] Z1 = 5,
      }

      public enum eTransparencyMode {
        [pbr::OriginalName("eTransparencyMode_1Bit")] _1Bit = 0,
        [pbr::OriginalName("eTransparencyMode_AdditiveGlow")] AdditiveGlow = 1,
        [pbr::OriginalName("eTransparencyMode_Blend")] Blend = 2,
        [pbr::OriginalName("eTransparencyMode_None")] None = 3,
        [pbr::OriginalName("eTransparencyMode_ScreenGlass")] ScreenGlass = 4,
      }

      public enum eNormalMapType {
        [pbr::OriginalName("eNormalMapType_Derivative")] Derivative = 0,
        [pbr::OriginalName("eNormalMapType_Object_space")] ObjectSpace = 1,
        [pbr::OriginalName("eNormalMapType_Tangent_space")] TangentSpace = 2,
      }

    }
    #endregion

  }

  public sealed partial class tVector3 : pb::IMessage<tVector3> {
    private static readonly pb::MessageParser<tVector3> _parser = new pb::MessageParser<tVector3>(() => new tVector3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<tVector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::xnormal.XnormalReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tVector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tVector3(tVector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tVector3 Clone() {
      return new tVector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as tVector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(tVector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(tVector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class tGenerateMaps : pb::IMessage<tGenerateMaps> {
    private static readonly pb::MessageParser<tGenerateMaps> _parser = new pb::MessageParser<tGenerateMaps>(() => new tGenerateMaps());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<tGenerateMaps> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::xnormal.XnormalReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tGenerateMaps() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tGenerateMaps(tGenerateMaps other) : this() {
      NMBackgroundColor = other.nMBackgroundColor_ != null ? other.NMBackgroundColor.Clone() : null;
      HMBackgroundColor = other.hMBackgroundColor_ != null ? other.HMBackgroundColor.Clone() : null;
      BakeHighpolyBaseTextureNoTexCol = other.bakeHighpolyBaseTextureNoTexCol_ != null ? other.BakeHighpolyBaseTextureNoTexCol.Clone() : null;
      BakeHighpolyBaseTextureBackgroundColor = other.bakeHighpolyBaseTextureBackgroundColor_ != null ? other.BakeHighpolyBaseTextureBackgroundColor.Clone() : null;
      RenderWireframeBackgroundColor = other.renderWireframeBackgroundColor_ != null ? other.RenderWireframeBackgroundColor.Clone() : null;
      RenderWireframeCol = other.renderWireframeCol_ != null ? other.RenderWireframeCol.Clone() : null;
      RenderCWCol = other.renderCWCol_ != null ? other.RenderCWCol.Clone() : null;
      RenderSeamCol = other.renderSeamCol_ != null ? other.RenderSeamCol.Clone() : null;
      RenderRayFailsCol = other.renderRayFailsCol_ != null ? other.RenderRayFailsCol.Clone() : null;
      AOOccludedColor = other.aOOccludedColor_ != null ? other.AOOccludedColor.Clone() : null;
      AOUnoccludedColor = other.aOUnoccludedColor_ != null ? other.AOUnoccludedColor.Clone() : null;
      AOBackgroundColor = other.aOBackgroundColor_ != null ? other.AOBackgroundColor.Clone() : null;
      BentBackgroundColor = other.bentBackgroundColor_ != null ? other.BentBackgroundColor.Clone() : null;
      PRTBackgroundColor = other.pRTBackgroundColor_ != null ? other.PRTBackgroundColor.Clone() : null;
      ConvexityBackgroundColor = other.convexityBackgroundColor_ != null ? other.ConvexityBackgroundColor.Clone() : null;
      ThicknessBackgroundColor = other.thicknessBackgroundColor_ != null ? other.ThicknessBackgroundColor.Clone() : null;
      ProximityBackgroundColor = other.proximityBackgroundColor_ != null ? other.ProximityBackgroundColor.Clone() : null;
      CavityBackgroundColor = other.cavityBackgroundColor_ != null ? other.CavityBackgroundColor.Clone() : null;
      VDMBackgroundColor = other.vDMBackgroundColor_ != null ? other.VDMBackgroundColor.Clone() : null;
      RadNMBackgroundColor = other.radNMBackgroundColor_ != null ? other.RadNMBackgroundColor.Clone() : null;
      CurvBackgroundColor = other.curvBackgroundColor_ != null ? other.CurvBackgroundColor.Clone() : null;
      DerivNMBackgroundColor = other.derivNMBackgroundColor_ != null ? other.DerivNMBackgroundColor.Clone() : null;
      TransluBackgroundColor = other.transluBackgroundColor_ != null ? other.TransluBackgroundColor.Clone() : null;
      BakeHighpolyVColsBackgroundCol = other.bakeHighpolyVColsBackgroundCol_ != null ? other.BakeHighpolyVColsBackgroundCol.Clone() : null;
      closestIfFails_ = other.closestIfFails_;
      directionsTonemapMax_ = other.directionsTonemapMax_;
      curvMonocrome_ = other.curvMonocrome_;
      aOBias_ = other.aOBias_;
      bentTangentSpace_ = other.bentTangentSpace_;
      genTranslu_ = other.genTranslu_;
      aODistribution_ = other.aODistribution_;
      pRTThreshold_ = other.pRTThreshold_;
      directionsTonemapMin_ = other.directionsTonemapMin_;
      curvDistribution_ = other.curvDistribution_;
      bentJitter_ = other.bentJitter_;
      bentDistribution_ = other.bentDistribution_;
      bakeHighpolyBaseTexture_ = other.bakeHighpolyBaseTexture_;
      genConvexity_ = other.genConvexity_;
      radiosityNormalsAttenLinear_ = other.radiosityNormalsAttenLinear_;
      transluRaysPerSample_ = other.transluRaysPerSample_;
      curvSearchDistance_ = other.curvSearchDistance_;
      swizzleZ_ = other.swizzleZ_;
      transluBias_ = other.transluBias_;
      pRTLimitRayDistance_ = other.pRTLimitRayDistance_;
      genBent_ = other.genBent_;
      aOLimitRayDistance_ = other.aOLimitRayDistance_;
      curvRaysPerSample_ = other.curvRaysPerSample_;
      radiosityNormalsDistribution_ = other.radiosityNormalsDistribution_;
      radiosityNormalsRaysPerSample_ = other.radiosityNormalsRaysPerSample_;
      curvJitter_ = other.curvJitter_;
      tangentSpace_ = other.tangentSpace_;
      radiosityNormalsAllowPureOcclusion_ = other.radiosityNormalsAllowPureOcclusion_;
      bentSwizzleX_ = other.bentSwizzleX_;
      swizzleY_ = other.swizzleY_;
      genCurv_ = other.genCurv_;
      pRTJitter_ = other.pRTJitter_;
      aOAttenCuadratic_ = other.aOAttenCuadratic_;
      bentConeAngle_ = other.bentConeAngle_;
      swizzleX_ = other.swizzleX_;
      renderRayFails_ = other.renderRayFails_;
      cavitySearchRadius_ = other.cavitySearchRadius_;
      radiosityNormalsEncodeAO_ = other.radiosityNormalsEncodeAO_;
      transluConeAngle_ = other.transluConeAngle_;
      bentRaysPerSample_ = other.bentRaysPerSample_;
      convexityScale_ = other.convexityScale_;
      radiosityNormalsConeAngle_ = other.radiosityNormalsConeAngle_;
      file_ = other.file_;
      genDerivNM_ = other.genDerivNM_;
      bentLimitRayDistance_ = other.bentLimitRayDistance_;
      pRTBias_ = other.pRTBias_;
      renderWireframe_ = other.renderWireframe_;
      pRTNormalize_ = other.pRTNormalize_;
      genAO_ = other.genAO_;
      pRTConeAngle_ = other.pRTConeAngle_;
      height_ = other.height_;
      radiosityNormalsAttenCuadratic_ = other.radiosityNormalsAttenCuadratic_;
      directionsTonemap_ = other.directionsTonemap_;
      directionsTS_ = other.directionsTS_;
      pRTRaysPerSample_ = other.pRTRaysPerSample_;
      edgePadding_ = other.edgePadding_;
      directionsSwizzleZ_ = other.directionsSwizzleZ_;
      aOAllowPureOccluded_ = other.aOAllowPureOccluded_;
      aOIgnoreBackfaceHits_ = other.aOIgnoreBackfaceHits_;
      cavityRaysPerSample_ = other.cavityRaysPerSample_;
      aOAttenConstant_ = other.aOAttenConstant_;
      cavityJitter_ = other.cavityJitter_;
      heightTonemapMax_ = other.heightTonemapMax_;
      genDirections_ = other.genDirections_;
      radiosityNormalsLimitRayDistance_ = other.radiosityNormalsLimitRayDistance_;
      heightTonemapMin_ = other.heightTonemapMin_;
      radiosityNormalsJitter_ = other.radiosityNormalsJitter_;
      directionsSwizzleY_ = other.directionsSwizzleY_;
      width_ = other.width_;
      bakeHighpolyBaseTextureDrawObjectIDIfNoTexture_ = other.bakeHighpolyBaseTextureDrawObjectIDIfNoTexture_;
      concavity_ = other.concavity_;
      directionsSwizzleX_ = other.directionsSwizzleX_;
      genNormals_ = other.genNormals_;
      proximityRaysPerSample_ = other.proximityRaysPerSample_;
      genHeights_ = other.genHeights_;
      radiosityNormalsAttenConstant_ = other.radiosityNormalsAttenConstant_;
      genProximity_ = other.genProximity_;
      genPRT_ = other.genPRT_;
      cavityContrast_ = other.cavityContrast_;
      radiosityNormalsCoordSys_ = other.radiosityNormalsCoordSys_;
      transluJitter_ = other.transluJitter_;
      aORaysPerSample_ = other.aORaysPerSample_;
      bentBias_ = other.bentBias_;
      discardRayBackFacesHits_ = other.discardRayBackFacesHits_;
      aOConeAngle_ = other.aOConeAngle_;
      bentSwizzleY_ = other.bentSwizzleY_;
      radiosityNormalsBias_ = other.radiosityNormalsBias_;
      radiosityNormalsContrast_ = other.radiosityNormalsContrast_;
      cavitySteps_ = other.cavitySteps_;
      aA_ = other.aA_;
      bentSwizzleZ_ = other.bentSwizzleZ_;
      bucketSize_ = other.bucketSize_;
      curvConeAngle_ = other.curvConeAngle_;
      transluDist_ = other.transluDist_;
      aOJitter_ = other.aOJitter_;
      curvBias_ = other.curvBias_;
      genWireRays_ = other.genWireRays_;
      curvAlgorithm_ = other.curvAlgorithm_;
      transluDistribution_ = other.transluDistribution_;
      aOAttenLinear_ = other.aOAttenLinear_;
      proximityLimitRayDistance_ = other.proximityLimitRayDistance_;
      genRadiosityNormals_ = other.genRadiosityNormals_;
      proximityConeAngle_ = other.proximityConeAngle_;
      heightTonemap_ = other.heightTonemap_;
      genCavity_ = other.genCavity_;
      bakeHighpolyVCols_ = other.bakeHighpolyVCols_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tGenerateMaps Clone() {
      return new tGenerateMaps(this);
    }

    /// <summary>Field number for the "NMBackgroundColor" field.</summary>
    public const int NMBackgroundColorFieldNumber = 1;
    private global::xnormal.tRGB8 nMBackgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 NMBackgroundColor {
      get { return nMBackgroundColor_; }
      set {
        nMBackgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "HMBackgroundColor" field.</summary>
    public const int HMBackgroundColorFieldNumber = 2;
    private global::xnormal.tRGB8 hMBackgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 HMBackgroundColor {
      get { return hMBackgroundColor_; }
      set {
        hMBackgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "BakeHighpolyBaseTextureNoTexCol" field.</summary>
    public const int BakeHighpolyBaseTextureNoTexColFieldNumber = 3;
    private global::xnormal.tRGB8 bakeHighpolyBaseTextureNoTexCol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 BakeHighpolyBaseTextureNoTexCol {
      get { return bakeHighpolyBaseTextureNoTexCol_; }
      set {
        bakeHighpolyBaseTextureNoTexCol_ = value;
      }
    }

    /// <summary>Field number for the "BakeHighpolyBaseTextureBackgroundColor" field.</summary>
    public const int BakeHighpolyBaseTextureBackgroundColorFieldNumber = 4;
    private global::xnormal.tRGB8 bakeHighpolyBaseTextureBackgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 BakeHighpolyBaseTextureBackgroundColor {
      get { return bakeHighpolyBaseTextureBackgroundColor_; }
      set {
        bakeHighpolyBaseTextureBackgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "RenderWireframeBackgroundColor" field.</summary>
    public const int RenderWireframeBackgroundColorFieldNumber = 5;
    private global::xnormal.tRGB8 renderWireframeBackgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 RenderWireframeBackgroundColor {
      get { return renderWireframeBackgroundColor_; }
      set {
        renderWireframeBackgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "RenderWireframeCol" field.</summary>
    public const int RenderWireframeColFieldNumber = 6;
    private global::xnormal.tRGB8 renderWireframeCol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 RenderWireframeCol {
      get { return renderWireframeCol_; }
      set {
        renderWireframeCol_ = value;
      }
    }

    /// <summary>Field number for the "RenderCWCol" field.</summary>
    public const int RenderCWColFieldNumber = 7;
    private global::xnormal.tRGB8 renderCWCol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 RenderCWCol {
      get { return renderCWCol_; }
      set {
        renderCWCol_ = value;
      }
    }

    /// <summary>Field number for the "RenderSeamCol" field.</summary>
    public const int RenderSeamColFieldNumber = 8;
    private global::xnormal.tRGB8 renderSeamCol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 RenderSeamCol {
      get { return renderSeamCol_; }
      set {
        renderSeamCol_ = value;
      }
    }

    /// <summary>Field number for the "RenderRayFailsCol" field.</summary>
    public const int RenderRayFailsColFieldNumber = 9;
    private global::xnormal.tRGB8 renderRayFailsCol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 RenderRayFailsCol {
      get { return renderRayFailsCol_; }
      set {
        renderRayFailsCol_ = value;
      }
    }

    /// <summary>Field number for the "AOOccludedColor" field.</summary>
    public const int AOOccludedColorFieldNumber = 10;
    private global::xnormal.tRGB8 aOOccludedColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 AOOccludedColor {
      get { return aOOccludedColor_; }
      set {
        aOOccludedColor_ = value;
      }
    }

    /// <summary>Field number for the "AOUnoccludedColor" field.</summary>
    public const int AOUnoccludedColorFieldNumber = 11;
    private global::xnormal.tRGB8 aOUnoccludedColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 AOUnoccludedColor {
      get { return aOUnoccludedColor_; }
      set {
        aOUnoccludedColor_ = value;
      }
    }

    /// <summary>Field number for the "AOBackgroundColor" field.</summary>
    public const int AOBackgroundColorFieldNumber = 12;
    private global::xnormal.tRGB8 aOBackgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 AOBackgroundColor {
      get { return aOBackgroundColor_; }
      set {
        aOBackgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "BentBackgroundColor" field.</summary>
    public const int BentBackgroundColorFieldNumber = 13;
    private global::xnormal.tRGB8 bentBackgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 BentBackgroundColor {
      get { return bentBackgroundColor_; }
      set {
        bentBackgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "PRTBackgroundColor" field.</summary>
    public const int PRTBackgroundColorFieldNumber = 14;
    private global::xnormal.tRGB8 pRTBackgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 PRTBackgroundColor {
      get { return pRTBackgroundColor_; }
      set {
        pRTBackgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "ConvexityBackgroundColor" field.</summary>
    public const int ConvexityBackgroundColorFieldNumber = 15;
    private global::xnormal.tRGB8 convexityBackgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 ConvexityBackgroundColor {
      get { return convexityBackgroundColor_; }
      set {
        convexityBackgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "ThicknessBackgroundColor" field.</summary>
    public const int ThicknessBackgroundColorFieldNumber = 16;
    private global::xnormal.tRGB8 thicknessBackgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 ThicknessBackgroundColor {
      get { return thicknessBackgroundColor_; }
      set {
        thicknessBackgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "ProximityBackgroundColor" field.</summary>
    public const int ProximityBackgroundColorFieldNumber = 17;
    private global::xnormal.tRGB8 proximityBackgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 ProximityBackgroundColor {
      get { return proximityBackgroundColor_; }
      set {
        proximityBackgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "CavityBackgroundColor" field.</summary>
    public const int CavityBackgroundColorFieldNumber = 18;
    private global::xnormal.tRGB8 cavityBackgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 CavityBackgroundColor {
      get { return cavityBackgroundColor_; }
      set {
        cavityBackgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "VDMBackgroundColor" field.</summary>
    public const int VDMBackgroundColorFieldNumber = 19;
    private global::xnormal.tRGB8 vDMBackgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 VDMBackgroundColor {
      get { return vDMBackgroundColor_; }
      set {
        vDMBackgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "RadNMBackgroundColor" field.</summary>
    public const int RadNMBackgroundColorFieldNumber = 20;
    private global::xnormal.tRGB8 radNMBackgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 RadNMBackgroundColor {
      get { return radNMBackgroundColor_; }
      set {
        radNMBackgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "CurvBackgroundColor" field.</summary>
    public const int CurvBackgroundColorFieldNumber = 21;
    private global::xnormal.tRGB8 curvBackgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 CurvBackgroundColor {
      get { return curvBackgroundColor_; }
      set {
        curvBackgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "DerivNMBackgroundColor" field.</summary>
    public const int DerivNMBackgroundColorFieldNumber = 22;
    private global::xnormal.tRGB8 derivNMBackgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 DerivNMBackgroundColor {
      get { return derivNMBackgroundColor_; }
      set {
        derivNMBackgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "TransluBackgroundColor" field.</summary>
    public const int TransluBackgroundColorFieldNumber = 23;
    private global::xnormal.tRGB8 transluBackgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 TransluBackgroundColor {
      get { return transluBackgroundColor_; }
      set {
        transluBackgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "BakeHighpolyVColsBackgroundCol" field.</summary>
    public const int BakeHighpolyVColsBackgroundColFieldNumber = 24;
    private global::xnormal.tRGB8 bakeHighpolyVColsBackgroundCol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 BakeHighpolyVColsBackgroundCol {
      get { return bakeHighpolyVColsBackgroundCol_; }
      set {
        bakeHighpolyVColsBackgroundCol_ = value;
      }
    }

    /// <summary>Field number for the "ClosestIfFails" field.</summary>
    public const int ClosestIfFailsFieldNumber = 25;
    private bool closestIfFails_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ClosestIfFails {
      get { return closestIfFails_; }
      set {
        closestIfFails_ = value;
      }
    }

    /// <summary>Field number for the "DirectionsTonemapMax" field.</summary>
    public const int DirectionsTonemapMaxFieldNumber = 26;
    private float directionsTonemapMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirectionsTonemapMax {
      get { return directionsTonemapMax_; }
      set {
        directionsTonemapMax_ = value;
      }
    }

    /// <summary>Field number for the "CurvMonocrome" field.</summary>
    public const int CurvMonocromeFieldNumber = 27;
    private bool curvMonocrome_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CurvMonocrome {
      get { return curvMonocrome_; }
      set {
        curvMonocrome_ = value;
      }
    }

    /// <summary>Field number for the "AOBias" field.</summary>
    public const int AOBiasFieldNumber = 28;
    private float aOBias_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AOBias {
      get { return aOBias_; }
      set {
        aOBias_ = value;
      }
    }

    /// <summary>Field number for the "BentTangentSpace" field.</summary>
    public const int BentTangentSpaceFieldNumber = 29;
    private bool bentTangentSpace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BentTangentSpace {
      get { return bentTangentSpace_; }
      set {
        bentTangentSpace_ = value;
      }
    }

    /// <summary>Field number for the "GenTranslu" field.</summary>
    public const int GenTransluFieldNumber = 30;
    private bool genTranslu_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenTranslu {
      get { return genTranslu_; }
      set {
        genTranslu_ = value;
      }
    }

    /// <summary>Field number for the "AODistribution" field.</summary>
    public const int AODistributionFieldNumber = 31;
    private global::xnormal.tGenerateMaps.Types.eAODistribution aODistribution_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eAODistribution AODistribution {
      get { return aODistribution_; }
      set {
        aODistribution_ = value;
      }
    }

    /// <summary>Field number for the "PRTThreshold" field.</summary>
    public const int PRTThresholdFieldNumber = 32;
    private float pRTThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PRTThreshold {
      get { return pRTThreshold_; }
      set {
        pRTThreshold_ = value;
      }
    }

    /// <summary>Field number for the "DirectionsTonemapMin" field.</summary>
    public const int DirectionsTonemapMinFieldNumber = 33;
    private float directionsTonemapMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DirectionsTonemapMin {
      get { return directionsTonemapMin_; }
      set {
        directionsTonemapMin_ = value;
      }
    }

    /// <summary>Field number for the "CurvDistribution" field.</summary>
    public const int CurvDistributionFieldNumber = 34;
    private global::xnormal.tGenerateMaps.Types.eAODistribution curvDistribution_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eAODistribution CurvDistribution {
      get { return curvDistribution_; }
      set {
        curvDistribution_ = value;
      }
    }

    /// <summary>Field number for the "BentJitter" field.</summary>
    public const int BentJitterFieldNumber = 35;
    private bool bentJitter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BentJitter {
      get { return bentJitter_; }
      set {
        bentJitter_ = value;
      }
    }

    /// <summary>Field number for the "BentDistribution" field.</summary>
    public const int BentDistributionFieldNumber = 36;
    private global::xnormal.tGenerateMaps.Types.eAODistribution bentDistribution_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eAODistribution BentDistribution {
      get { return bentDistribution_; }
      set {
        bentDistribution_ = value;
      }
    }

    /// <summary>Field number for the "BakeHighpolyBaseTexture" field.</summary>
    public const int BakeHighpolyBaseTextureFieldNumber = 37;
    private bool bakeHighpolyBaseTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BakeHighpolyBaseTexture {
      get { return bakeHighpolyBaseTexture_; }
      set {
        bakeHighpolyBaseTexture_ = value;
      }
    }

    /// <summary>Field number for the "GenConvexity" field.</summary>
    public const int GenConvexityFieldNumber = 38;
    private bool genConvexity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenConvexity {
      get { return genConvexity_; }
      set {
        genConvexity_ = value;
      }
    }

    /// <summary>Field number for the "RadiosityNormalsAttenLinear" field.</summary>
    public const int RadiosityNormalsAttenLinearFieldNumber = 39;
    private float radiosityNormalsAttenLinear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RadiosityNormalsAttenLinear {
      get { return radiosityNormalsAttenLinear_; }
      set {
        radiosityNormalsAttenLinear_ = value;
      }
    }

    /// <summary>Field number for the "TransluRaysPerSample" field.</summary>
    public const int TransluRaysPerSampleFieldNumber = 40;
    private uint transluRaysPerSample_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TransluRaysPerSample {
      get { return transluRaysPerSample_; }
      set {
        transluRaysPerSample_ = value;
      }
    }

    /// <summary>Field number for the "CurvSearchDistance" field.</summary>
    public const int CurvSearchDistanceFieldNumber = 41;
    private float curvSearchDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurvSearchDistance {
      get { return curvSearchDistance_; }
      set {
        curvSearchDistance_ = value;
      }
    }

    /// <summary>Field number for the "SwizzleZ" field.</summary>
    public const int SwizzleZFieldNumber = 42;
    private global::xnormal.tGenerateMaps.Types.eSwizzleComponent swizzleZ_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eSwizzleComponent SwizzleZ {
      get { return swizzleZ_; }
      set {
        swizzleZ_ = value;
      }
    }

    /// <summary>Field number for the "TransluBias" field.</summary>
    public const int TransluBiasFieldNumber = 43;
    private float transluBias_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TransluBias {
      get { return transluBias_; }
      set {
        transluBias_ = value;
      }
    }

    /// <summary>Field number for the "PRTLimitRayDistance" field.</summary>
    public const int PRTLimitRayDistanceFieldNumber = 44;
    private bool pRTLimitRayDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PRTLimitRayDistance {
      get { return pRTLimitRayDistance_; }
      set {
        pRTLimitRayDistance_ = value;
      }
    }

    /// <summary>Field number for the "GenBent" field.</summary>
    public const int GenBentFieldNumber = 45;
    private bool genBent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenBent {
      get { return genBent_; }
      set {
        genBent_ = value;
      }
    }

    /// <summary>Field number for the "AOLimitRayDistance" field.</summary>
    public const int AOLimitRayDistanceFieldNumber = 46;
    private bool aOLimitRayDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AOLimitRayDistance {
      get { return aOLimitRayDistance_; }
      set {
        aOLimitRayDistance_ = value;
      }
    }

    /// <summary>Field number for the "CurvRaysPerSample" field.</summary>
    public const int CurvRaysPerSampleFieldNumber = 47;
    private uint curvRaysPerSample_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CurvRaysPerSample {
      get { return curvRaysPerSample_; }
      set {
        curvRaysPerSample_ = value;
      }
    }

    /// <summary>Field number for the "RadiosityNormalsDistribution" field.</summary>
    public const int RadiosityNormalsDistributionFieldNumber = 48;
    private global::xnormal.tGenerateMaps.Types.eAODistribution radiosityNormalsDistribution_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eAODistribution RadiosityNormalsDistribution {
      get { return radiosityNormalsDistribution_; }
      set {
        radiosityNormalsDistribution_ = value;
      }
    }

    /// <summary>Field number for the "RadiosityNormalsRaysPerSample" field.</summary>
    public const int RadiosityNormalsRaysPerSampleFieldNumber = 49;
    private uint radiosityNormalsRaysPerSample_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RadiosityNormalsRaysPerSample {
      get { return radiosityNormalsRaysPerSample_; }
      set {
        radiosityNormalsRaysPerSample_ = value;
      }
    }

    /// <summary>Field number for the "CurvJitter" field.</summary>
    public const int CurvJitterFieldNumber = 50;
    private bool curvJitter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CurvJitter {
      get { return curvJitter_; }
      set {
        curvJitter_ = value;
      }
    }

    /// <summary>Field number for the "TangentSpace" field.</summary>
    public const int TangentSpaceFieldNumber = 51;
    private bool tangentSpace_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TangentSpace {
      get { return tangentSpace_; }
      set {
        tangentSpace_ = value;
      }
    }

    /// <summary>Field number for the "RadiosityNormalsAllowPureOcclusion" field.</summary>
    public const int RadiosityNormalsAllowPureOcclusionFieldNumber = 52;
    private bool radiosityNormalsAllowPureOcclusion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RadiosityNormalsAllowPureOcclusion {
      get { return radiosityNormalsAllowPureOcclusion_; }
      set {
        radiosityNormalsAllowPureOcclusion_ = value;
      }
    }

    /// <summary>Field number for the "BentSwizzleX" field.</summary>
    public const int BentSwizzleXFieldNumber = 53;
    private global::xnormal.tGenerateMaps.Types.eSwizzleComponent bentSwizzleX_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eSwizzleComponent BentSwizzleX {
      get { return bentSwizzleX_; }
      set {
        bentSwizzleX_ = value;
      }
    }

    /// <summary>Field number for the "SwizzleY" field.</summary>
    public const int SwizzleYFieldNumber = 54;
    private global::xnormal.tGenerateMaps.Types.eSwizzleComponent swizzleY_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eSwizzleComponent SwizzleY {
      get { return swizzleY_; }
      set {
        swizzleY_ = value;
      }
    }

    /// <summary>Field number for the "GenCurv" field.</summary>
    public const int GenCurvFieldNumber = 55;
    private bool genCurv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenCurv {
      get { return genCurv_; }
      set {
        genCurv_ = value;
      }
    }

    /// <summary>Field number for the "PRTJitter" field.</summary>
    public const int PRTJitterFieldNumber = 56;
    private bool pRTJitter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PRTJitter {
      get { return pRTJitter_; }
      set {
        pRTJitter_ = value;
      }
    }

    /// <summary>Field number for the "AOAttenCuadratic" field.</summary>
    public const int AOAttenCuadraticFieldNumber = 57;
    private float aOAttenCuadratic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AOAttenCuadratic {
      get { return aOAttenCuadratic_; }
      set {
        aOAttenCuadratic_ = value;
      }
    }

    /// <summary>Field number for the "BentConeAngle" field.</summary>
    public const int BentConeAngleFieldNumber = 58;
    private float bentConeAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BentConeAngle {
      get { return bentConeAngle_; }
      set {
        bentConeAngle_ = value;
      }
    }

    /// <summary>Field number for the "SwizzleX" field.</summary>
    public const int SwizzleXFieldNumber = 59;
    private global::xnormal.tGenerateMaps.Types.eSwizzleComponent swizzleX_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eSwizzleComponent SwizzleX {
      get { return swizzleX_; }
      set {
        swizzleX_ = value;
      }
    }

    /// <summary>Field number for the "RenderRayFails" field.</summary>
    public const int RenderRayFailsFieldNumber = 60;
    private bool renderRayFails_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RenderRayFails {
      get { return renderRayFails_; }
      set {
        renderRayFails_ = value;
      }
    }

    /// <summary>Field number for the "CavitySearchRadius" field.</summary>
    public const int CavitySearchRadiusFieldNumber = 61;
    private float cavitySearchRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CavitySearchRadius {
      get { return cavitySearchRadius_; }
      set {
        cavitySearchRadius_ = value;
      }
    }

    /// <summary>Field number for the "RadiosityNormalsEncodeAO" field.</summary>
    public const int RadiosityNormalsEncodeAOFieldNumber = 62;
    private bool radiosityNormalsEncodeAO_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RadiosityNormalsEncodeAO {
      get { return radiosityNormalsEncodeAO_; }
      set {
        radiosityNormalsEncodeAO_ = value;
      }
    }

    /// <summary>Field number for the "TransluConeAngle" field.</summary>
    public const int TransluConeAngleFieldNumber = 63;
    private float transluConeAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TransluConeAngle {
      get { return transluConeAngle_; }
      set {
        transluConeAngle_ = value;
      }
    }

    /// <summary>Field number for the "BentRaysPerSample" field.</summary>
    public const int BentRaysPerSampleFieldNumber = 64;
    private uint bentRaysPerSample_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BentRaysPerSample {
      get { return bentRaysPerSample_; }
      set {
        bentRaysPerSample_ = value;
      }
    }

    /// <summary>Field number for the "ConvexityScale" field.</summary>
    public const int ConvexityScaleFieldNumber = 65;
    private float convexityScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConvexityScale {
      get { return convexityScale_; }
      set {
        convexityScale_ = value;
      }
    }

    /// <summary>Field number for the "RadiosityNormalsConeAngle" field.</summary>
    public const int RadiosityNormalsConeAngleFieldNumber = 66;
    private float radiosityNormalsConeAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RadiosityNormalsConeAngle {
      get { return radiosityNormalsConeAngle_; }
      set {
        radiosityNormalsConeAngle_ = value;
      }
    }

    /// <summary>Field number for the "File" field.</summary>
    public const int FileFieldNumber = 67;
    private string file_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string File {
      get { return file_; }
      set {
        file_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GenDerivNM" field.</summary>
    public const int GenDerivNMFieldNumber = 68;
    private bool genDerivNM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenDerivNM {
      get { return genDerivNM_; }
      set {
        genDerivNM_ = value;
      }
    }

    /// <summary>Field number for the "BentLimitRayDistance" field.</summary>
    public const int BentLimitRayDistanceFieldNumber = 69;
    private bool bentLimitRayDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BentLimitRayDistance {
      get { return bentLimitRayDistance_; }
      set {
        bentLimitRayDistance_ = value;
      }
    }

    /// <summary>Field number for the "PRTBias" field.</summary>
    public const int PRTBiasFieldNumber = 70;
    private float pRTBias_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PRTBias {
      get { return pRTBias_; }
      set {
        pRTBias_ = value;
      }
    }

    /// <summary>Field number for the "RenderWireframe" field.</summary>
    public const int RenderWireframeFieldNumber = 71;
    private bool renderWireframe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RenderWireframe {
      get { return renderWireframe_; }
      set {
        renderWireframe_ = value;
      }
    }

    /// <summary>Field number for the "PRTNormalize" field.</summary>
    public const int PRTNormalizeFieldNumber = 72;
    private bool pRTNormalize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PRTNormalize {
      get { return pRTNormalize_; }
      set {
        pRTNormalize_ = value;
      }
    }

    /// <summary>Field number for the "GenAO" field.</summary>
    public const int GenAOFieldNumber = 73;
    private bool genAO_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenAO {
      get { return genAO_; }
      set {
        genAO_ = value;
      }
    }

    /// <summary>Field number for the "PRTConeAngle" field.</summary>
    public const int PRTConeAngleFieldNumber = 74;
    private float pRTConeAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PRTConeAngle {
      get { return pRTConeAngle_; }
      set {
        pRTConeAngle_ = value;
      }
    }

    /// <summary>Field number for the "Height" field.</summary>
    public const int HeightFieldNumber = 75;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "RadiosityNormalsAttenCuadratic" field.</summary>
    public const int RadiosityNormalsAttenCuadraticFieldNumber = 76;
    private float radiosityNormalsAttenCuadratic_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RadiosityNormalsAttenCuadratic {
      get { return radiosityNormalsAttenCuadratic_; }
      set {
        radiosityNormalsAttenCuadratic_ = value;
      }
    }

    /// <summary>Field number for the "DirectionsTonemap" field.</summary>
    public const int DirectionsTonemapFieldNumber = 77;
    private global::xnormal.tGenerateMaps.Types.eHMNormalization directionsTonemap_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eHMNormalization DirectionsTonemap {
      get { return directionsTonemap_; }
      set {
        directionsTonemap_ = value;
      }
    }

    /// <summary>Field number for the "DirectionsTS" field.</summary>
    public const int DirectionsTSFieldNumber = 78;
    private bool directionsTS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DirectionsTS {
      get { return directionsTS_; }
      set {
        directionsTS_ = value;
      }
    }

    /// <summary>Field number for the "PRTRaysPerSample" field.</summary>
    public const int PRTRaysPerSampleFieldNumber = 79;
    private uint pRTRaysPerSample_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PRTRaysPerSample {
      get { return pRTRaysPerSample_; }
      set {
        pRTRaysPerSample_ = value;
      }
    }

    /// <summary>Field number for the "EdgePadding" field.</summary>
    public const int EdgePaddingFieldNumber = 80;
    private uint edgePadding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint EdgePadding {
      get { return edgePadding_; }
      set {
        edgePadding_ = value;
      }
    }

    /// <summary>Field number for the "DirectionsSwizzleZ" field.</summary>
    public const int DirectionsSwizzleZFieldNumber = 81;
    private global::xnormal.tGenerateMaps.Types.eSwizzleComponent directionsSwizzleZ_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eSwizzleComponent DirectionsSwizzleZ {
      get { return directionsSwizzleZ_; }
      set {
        directionsSwizzleZ_ = value;
      }
    }

    /// <summary>Field number for the "AOAllowPureOccluded" field.</summary>
    public const int AOAllowPureOccludedFieldNumber = 82;
    private bool aOAllowPureOccluded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AOAllowPureOccluded {
      get { return aOAllowPureOccluded_; }
      set {
        aOAllowPureOccluded_ = value;
      }
    }

    /// <summary>Field number for the "AOIgnoreBackfaceHits" field.</summary>
    public const int AOIgnoreBackfaceHitsFieldNumber = 83;
    private bool aOIgnoreBackfaceHits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AOIgnoreBackfaceHits {
      get { return aOIgnoreBackfaceHits_; }
      set {
        aOIgnoreBackfaceHits_ = value;
      }
    }

    /// <summary>Field number for the "CavityRaysPerSample" field.</summary>
    public const int CavityRaysPerSampleFieldNumber = 84;
    private uint cavityRaysPerSample_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CavityRaysPerSample {
      get { return cavityRaysPerSample_; }
      set {
        cavityRaysPerSample_ = value;
      }
    }

    /// <summary>Field number for the "AOAttenConstant" field.</summary>
    public const int AOAttenConstantFieldNumber = 85;
    private float aOAttenConstant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AOAttenConstant {
      get { return aOAttenConstant_; }
      set {
        aOAttenConstant_ = value;
      }
    }

    /// <summary>Field number for the "CavityJitter" field.</summary>
    public const int CavityJitterFieldNumber = 86;
    private bool cavityJitter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CavityJitter {
      get { return cavityJitter_; }
      set {
        cavityJitter_ = value;
      }
    }

    /// <summary>Field number for the "HeightTonemapMax" field.</summary>
    public const int HeightTonemapMaxFieldNumber = 87;
    private float heightTonemapMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightTonemapMax {
      get { return heightTonemapMax_; }
      set {
        heightTonemapMax_ = value;
      }
    }

    /// <summary>Field number for the "GenDirections" field.</summary>
    public const int GenDirectionsFieldNumber = 88;
    private bool genDirections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenDirections {
      get { return genDirections_; }
      set {
        genDirections_ = value;
      }
    }

    /// <summary>Field number for the "RadiosityNormalsLimitRayDistance" field.</summary>
    public const int RadiosityNormalsLimitRayDistanceFieldNumber = 89;
    private bool radiosityNormalsLimitRayDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RadiosityNormalsLimitRayDistance {
      get { return radiosityNormalsLimitRayDistance_; }
      set {
        radiosityNormalsLimitRayDistance_ = value;
      }
    }

    /// <summary>Field number for the "HeightTonemapMin" field.</summary>
    public const int HeightTonemapMinFieldNumber = 90;
    private float heightTonemapMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightTonemapMin {
      get { return heightTonemapMin_; }
      set {
        heightTonemapMin_ = value;
      }
    }

    /// <summary>Field number for the "RadiosityNormalsJitter" field.</summary>
    public const int RadiosityNormalsJitterFieldNumber = 91;
    private bool radiosityNormalsJitter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RadiosityNormalsJitter {
      get { return radiosityNormalsJitter_; }
      set {
        radiosityNormalsJitter_ = value;
      }
    }

    /// <summary>Field number for the "DirectionsSwizzleY" field.</summary>
    public const int DirectionsSwizzleYFieldNumber = 92;
    private global::xnormal.tGenerateMaps.Types.eSwizzleComponent directionsSwizzleY_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eSwizzleComponent DirectionsSwizzleY {
      get { return directionsSwizzleY_; }
      set {
        directionsSwizzleY_ = value;
      }
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 93;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "BakeHighpolyBaseTextureDrawObjectIDIfNoTexture" field.</summary>
    public const int BakeHighpolyBaseTextureDrawObjectIDIfNoTextureFieldNumber = 94;
    private bool bakeHighpolyBaseTextureDrawObjectIDIfNoTexture_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BakeHighpolyBaseTextureDrawObjectIDIfNoTexture {
      get { return bakeHighpolyBaseTextureDrawObjectIDIfNoTexture_; }
      set {
        bakeHighpolyBaseTextureDrawObjectIDIfNoTexture_ = value;
      }
    }

    /// <summary>Field number for the "Concavity" field.</summary>
    public const int ConcavityFieldNumber = 95;
    private bool concavity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Concavity {
      get { return concavity_; }
      set {
        concavity_ = value;
      }
    }

    /// <summary>Field number for the "DirectionsSwizzleX" field.</summary>
    public const int DirectionsSwizzleXFieldNumber = 96;
    private global::xnormal.tGenerateMaps.Types.eSwizzleComponent directionsSwizzleX_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eSwizzleComponent DirectionsSwizzleX {
      get { return directionsSwizzleX_; }
      set {
        directionsSwizzleX_ = value;
      }
    }

    /// <summary>Field number for the "GenNormals" field.</summary>
    public const int GenNormalsFieldNumber = 97;
    private bool genNormals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenNormals {
      get { return genNormals_; }
      set {
        genNormals_ = value;
      }
    }

    /// <summary>Field number for the "ProximityRaysPerSample" field.</summary>
    public const int ProximityRaysPerSampleFieldNumber = 98;
    private uint proximityRaysPerSample_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ProximityRaysPerSample {
      get { return proximityRaysPerSample_; }
      set {
        proximityRaysPerSample_ = value;
      }
    }

    /// <summary>Field number for the "GenHeights" field.</summary>
    public const int GenHeightsFieldNumber = 99;
    private bool genHeights_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenHeights {
      get { return genHeights_; }
      set {
        genHeights_ = value;
      }
    }

    /// <summary>Field number for the "RadiosityNormalsAttenConstant" field.</summary>
    public const int RadiosityNormalsAttenConstantFieldNumber = 100;
    private float radiosityNormalsAttenConstant_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RadiosityNormalsAttenConstant {
      get { return radiosityNormalsAttenConstant_; }
      set {
        radiosityNormalsAttenConstant_ = value;
      }
    }

    /// <summary>Field number for the "GenProximity" field.</summary>
    public const int GenProximityFieldNumber = 101;
    private bool genProximity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenProximity {
      get { return genProximity_; }
      set {
        genProximity_ = value;
      }
    }

    /// <summary>Field number for the "GenPRT" field.</summary>
    public const int GenPRTFieldNumber = 102;
    private bool genPRT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenPRT {
      get { return genPRT_; }
      set {
        genPRT_ = value;
      }
    }

    /// <summary>Field number for the "CavityContrast" field.</summary>
    public const int CavityContrastFieldNumber = 103;
    private float cavityContrast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CavityContrast {
      get { return cavityContrast_; }
      set {
        cavityContrast_ = value;
      }
    }

    /// <summary>Field number for the "RadiosityNormalsCoordSys" field.</summary>
    public const int RadiosityNormalsCoordSysFieldNumber = 104;
    private global::xnormal.tGenerateMaps.Types.eRNMCoordSys radiosityNormalsCoordSys_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eRNMCoordSys RadiosityNormalsCoordSys {
      get { return radiosityNormalsCoordSys_; }
      set {
        radiosityNormalsCoordSys_ = value;
      }
    }

    /// <summary>Field number for the "TransluJitter" field.</summary>
    public const int TransluJitterFieldNumber = 105;
    private bool transluJitter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TransluJitter {
      get { return transluJitter_; }
      set {
        transluJitter_ = value;
      }
    }

    /// <summary>Field number for the "AORaysPerSample" field.</summary>
    public const int AORaysPerSampleFieldNumber = 106;
    private uint aORaysPerSample_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AORaysPerSample {
      get { return aORaysPerSample_; }
      set {
        aORaysPerSample_ = value;
      }
    }

    /// <summary>Field number for the "BentBias" field.</summary>
    public const int BentBiasFieldNumber = 107;
    private float bentBias_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BentBias {
      get { return bentBias_; }
      set {
        bentBias_ = value;
      }
    }

    /// <summary>Field number for the "DiscardRayBackFacesHits" field.</summary>
    public const int DiscardRayBackFacesHitsFieldNumber = 108;
    private bool discardRayBackFacesHits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DiscardRayBackFacesHits {
      get { return discardRayBackFacesHits_; }
      set {
        discardRayBackFacesHits_ = value;
      }
    }

    /// <summary>Field number for the "AOConeAngle" field.</summary>
    public const int AOConeAngleFieldNumber = 109;
    private float aOConeAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AOConeAngle {
      get { return aOConeAngle_; }
      set {
        aOConeAngle_ = value;
      }
    }

    /// <summary>Field number for the "BentSwizzleY" field.</summary>
    public const int BentSwizzleYFieldNumber = 110;
    private global::xnormal.tGenerateMaps.Types.eSwizzleComponent bentSwizzleY_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eSwizzleComponent BentSwizzleY {
      get { return bentSwizzleY_; }
      set {
        bentSwizzleY_ = value;
      }
    }

    /// <summary>Field number for the "RadiosityNormalsBias" field.</summary>
    public const int RadiosityNormalsBiasFieldNumber = 111;
    private float radiosityNormalsBias_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RadiosityNormalsBias {
      get { return radiosityNormalsBias_; }
      set {
        radiosityNormalsBias_ = value;
      }
    }

    /// <summary>Field number for the "RadiosityNormalsContrast" field.</summary>
    public const int RadiosityNormalsContrastFieldNumber = 112;
    private float radiosityNormalsContrast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RadiosityNormalsContrast {
      get { return radiosityNormalsContrast_; }
      set {
        radiosityNormalsContrast_ = value;
      }
    }

    /// <summary>Field number for the "CavitySteps" field.</summary>
    public const int CavityStepsFieldNumber = 113;
    private uint cavitySteps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CavitySteps {
      get { return cavitySteps_; }
      set {
        cavitySteps_ = value;
      }
    }

    /// <summary>Field number for the "AA" field.</summary>
    public const int AAFieldNumber = 114;
    private global::xnormal.tGenerateMaps.Types.eAntialiasing aA_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eAntialiasing AA {
      get { return aA_; }
      set {
        aA_ = value;
      }
    }

    /// <summary>Field number for the "BentSwizzleZ" field.</summary>
    public const int BentSwizzleZFieldNumber = 115;
    private global::xnormal.tGenerateMaps.Types.eSwizzleComponent bentSwizzleZ_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eSwizzleComponent BentSwizzleZ {
      get { return bentSwizzleZ_; }
      set {
        bentSwizzleZ_ = value;
      }
    }

    /// <summary>Field number for the "BucketSize" field.</summary>
    public const int BucketSizeFieldNumber = 116;
    private uint bucketSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BucketSize {
      get { return bucketSize_; }
      set {
        bucketSize_ = value;
      }
    }

    /// <summary>Field number for the "CurvConeAngle" field.</summary>
    public const int CurvConeAngleFieldNumber = 117;
    private float curvConeAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurvConeAngle {
      get { return curvConeAngle_; }
      set {
        curvConeAngle_ = value;
      }
    }

    /// <summary>Field number for the "TransluDist" field.</summary>
    public const int TransluDistFieldNumber = 118;
    private float transluDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TransluDist {
      get { return transluDist_; }
      set {
        transluDist_ = value;
      }
    }

    /// <summary>Field number for the "AOJitter" field.</summary>
    public const int AOJitterFieldNumber = 119;
    private bool aOJitter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AOJitter {
      get { return aOJitter_; }
      set {
        aOJitter_ = value;
      }
    }

    /// <summary>Field number for the "CurvBias" field.</summary>
    public const int CurvBiasFieldNumber = 120;
    private float curvBias_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CurvBias {
      get { return curvBias_; }
      set {
        curvBias_ = value;
      }
    }

    /// <summary>Field number for the "GenWireRays" field.</summary>
    public const int GenWireRaysFieldNumber = 121;
    private bool genWireRays_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenWireRays {
      get { return genWireRays_; }
      set {
        genWireRays_ = value;
      }
    }

    /// <summary>Field number for the "CurvAlgorithm" field.</summary>
    public const int CurvAlgorithmFieldNumber = 122;
    private global::xnormal.tGenerateMaps.Types.eCurvAlgorithm curvAlgorithm_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eCurvAlgorithm CurvAlgorithm {
      get { return curvAlgorithm_; }
      set {
        curvAlgorithm_ = value;
      }
    }

    /// <summary>Field number for the "TransluDistribution" field.</summary>
    public const int TransluDistributionFieldNumber = 123;
    private global::xnormal.tGenerateMaps.Types.eAODistribution transluDistribution_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eAODistribution TransluDistribution {
      get { return transluDistribution_; }
      set {
        transluDistribution_ = value;
      }
    }

    /// <summary>Field number for the "AOAttenLinear" field.</summary>
    public const int AOAttenLinearFieldNumber = 124;
    private float aOAttenLinear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AOAttenLinear {
      get { return aOAttenLinear_; }
      set {
        aOAttenLinear_ = value;
      }
    }

    /// <summary>Field number for the "ProximityLimitRayDistance" field.</summary>
    public const int ProximityLimitRayDistanceFieldNumber = 125;
    private bool proximityLimitRayDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProximityLimitRayDistance {
      get { return proximityLimitRayDistance_; }
      set {
        proximityLimitRayDistance_ = value;
      }
    }

    /// <summary>Field number for the "GenRadiosityNormals" field.</summary>
    public const int GenRadiosityNormalsFieldNumber = 126;
    private bool genRadiosityNormals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenRadiosityNormals {
      get { return genRadiosityNormals_; }
      set {
        genRadiosityNormals_ = value;
      }
    }

    /// <summary>Field number for the "ProximityConeAngle" field.</summary>
    public const int ProximityConeAngleFieldNumber = 127;
    private float proximityConeAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ProximityConeAngle {
      get { return proximityConeAngle_; }
      set {
        proximityConeAngle_ = value;
      }
    }

    /// <summary>Field number for the "HeightTonemap" field.</summary>
    public const int HeightTonemapFieldNumber = 128;
    private global::xnormal.tGenerateMaps.Types.eHMNormalization heightTonemap_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps.Types.eHMNormalization HeightTonemap {
      get { return heightTonemap_; }
      set {
        heightTonemap_ = value;
      }
    }

    /// <summary>Field number for the "GenCavity" field.</summary>
    public const int GenCavityFieldNumber = 129;
    private bool genCavity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GenCavity {
      get { return genCavity_; }
      set {
        genCavity_ = value;
      }
    }

    /// <summary>Field number for the "BakeHighpolyVCols" field.</summary>
    public const int BakeHighpolyVColsFieldNumber = 130;
    private bool bakeHighpolyVCols_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BakeHighpolyVCols {
      get { return bakeHighpolyVCols_; }
      set {
        bakeHighpolyVCols_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as tGenerateMaps);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(tGenerateMaps other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(NMBackgroundColor, other.NMBackgroundColor)) return false;
      if (!object.Equals(HMBackgroundColor, other.HMBackgroundColor)) return false;
      if (!object.Equals(BakeHighpolyBaseTextureNoTexCol, other.BakeHighpolyBaseTextureNoTexCol)) return false;
      if (!object.Equals(BakeHighpolyBaseTextureBackgroundColor, other.BakeHighpolyBaseTextureBackgroundColor)) return false;
      if (!object.Equals(RenderWireframeBackgroundColor, other.RenderWireframeBackgroundColor)) return false;
      if (!object.Equals(RenderWireframeCol, other.RenderWireframeCol)) return false;
      if (!object.Equals(RenderCWCol, other.RenderCWCol)) return false;
      if (!object.Equals(RenderSeamCol, other.RenderSeamCol)) return false;
      if (!object.Equals(RenderRayFailsCol, other.RenderRayFailsCol)) return false;
      if (!object.Equals(AOOccludedColor, other.AOOccludedColor)) return false;
      if (!object.Equals(AOUnoccludedColor, other.AOUnoccludedColor)) return false;
      if (!object.Equals(AOBackgroundColor, other.AOBackgroundColor)) return false;
      if (!object.Equals(BentBackgroundColor, other.BentBackgroundColor)) return false;
      if (!object.Equals(PRTBackgroundColor, other.PRTBackgroundColor)) return false;
      if (!object.Equals(ConvexityBackgroundColor, other.ConvexityBackgroundColor)) return false;
      if (!object.Equals(ThicknessBackgroundColor, other.ThicknessBackgroundColor)) return false;
      if (!object.Equals(ProximityBackgroundColor, other.ProximityBackgroundColor)) return false;
      if (!object.Equals(CavityBackgroundColor, other.CavityBackgroundColor)) return false;
      if (!object.Equals(VDMBackgroundColor, other.VDMBackgroundColor)) return false;
      if (!object.Equals(RadNMBackgroundColor, other.RadNMBackgroundColor)) return false;
      if (!object.Equals(CurvBackgroundColor, other.CurvBackgroundColor)) return false;
      if (!object.Equals(DerivNMBackgroundColor, other.DerivNMBackgroundColor)) return false;
      if (!object.Equals(TransluBackgroundColor, other.TransluBackgroundColor)) return false;
      if (!object.Equals(BakeHighpolyVColsBackgroundCol, other.BakeHighpolyVColsBackgroundCol)) return false;
      if (ClosestIfFails != other.ClosestIfFails) return false;
      if (DirectionsTonemapMax != other.DirectionsTonemapMax) return false;
      if (CurvMonocrome != other.CurvMonocrome) return false;
      if (AOBias != other.AOBias) return false;
      if (BentTangentSpace != other.BentTangentSpace) return false;
      if (GenTranslu != other.GenTranslu) return false;
      if (AODistribution != other.AODistribution) return false;
      if (PRTThreshold != other.PRTThreshold) return false;
      if (DirectionsTonemapMin != other.DirectionsTonemapMin) return false;
      if (CurvDistribution != other.CurvDistribution) return false;
      if (BentJitter != other.BentJitter) return false;
      if (BentDistribution != other.BentDistribution) return false;
      if (BakeHighpolyBaseTexture != other.BakeHighpolyBaseTexture) return false;
      if (GenConvexity != other.GenConvexity) return false;
      if (RadiosityNormalsAttenLinear != other.RadiosityNormalsAttenLinear) return false;
      if (TransluRaysPerSample != other.TransluRaysPerSample) return false;
      if (CurvSearchDistance != other.CurvSearchDistance) return false;
      if (SwizzleZ != other.SwizzleZ) return false;
      if (TransluBias != other.TransluBias) return false;
      if (PRTLimitRayDistance != other.PRTLimitRayDistance) return false;
      if (GenBent != other.GenBent) return false;
      if (AOLimitRayDistance != other.AOLimitRayDistance) return false;
      if (CurvRaysPerSample != other.CurvRaysPerSample) return false;
      if (RadiosityNormalsDistribution != other.RadiosityNormalsDistribution) return false;
      if (RadiosityNormalsRaysPerSample != other.RadiosityNormalsRaysPerSample) return false;
      if (CurvJitter != other.CurvJitter) return false;
      if (TangentSpace != other.TangentSpace) return false;
      if (RadiosityNormalsAllowPureOcclusion != other.RadiosityNormalsAllowPureOcclusion) return false;
      if (BentSwizzleX != other.BentSwizzleX) return false;
      if (SwizzleY != other.SwizzleY) return false;
      if (GenCurv != other.GenCurv) return false;
      if (PRTJitter != other.PRTJitter) return false;
      if (AOAttenCuadratic != other.AOAttenCuadratic) return false;
      if (BentConeAngle != other.BentConeAngle) return false;
      if (SwizzleX != other.SwizzleX) return false;
      if (RenderRayFails != other.RenderRayFails) return false;
      if (CavitySearchRadius != other.CavitySearchRadius) return false;
      if (RadiosityNormalsEncodeAO != other.RadiosityNormalsEncodeAO) return false;
      if (TransluConeAngle != other.TransluConeAngle) return false;
      if (BentRaysPerSample != other.BentRaysPerSample) return false;
      if (ConvexityScale != other.ConvexityScale) return false;
      if (RadiosityNormalsConeAngle != other.RadiosityNormalsConeAngle) return false;
      if (File != other.File) return false;
      if (GenDerivNM != other.GenDerivNM) return false;
      if (BentLimitRayDistance != other.BentLimitRayDistance) return false;
      if (PRTBias != other.PRTBias) return false;
      if (RenderWireframe != other.RenderWireframe) return false;
      if (PRTNormalize != other.PRTNormalize) return false;
      if (GenAO != other.GenAO) return false;
      if (PRTConeAngle != other.PRTConeAngle) return false;
      if (Height != other.Height) return false;
      if (RadiosityNormalsAttenCuadratic != other.RadiosityNormalsAttenCuadratic) return false;
      if (DirectionsTonemap != other.DirectionsTonemap) return false;
      if (DirectionsTS != other.DirectionsTS) return false;
      if (PRTRaysPerSample != other.PRTRaysPerSample) return false;
      if (EdgePadding != other.EdgePadding) return false;
      if (DirectionsSwizzleZ != other.DirectionsSwizzleZ) return false;
      if (AOAllowPureOccluded != other.AOAllowPureOccluded) return false;
      if (AOIgnoreBackfaceHits != other.AOIgnoreBackfaceHits) return false;
      if (CavityRaysPerSample != other.CavityRaysPerSample) return false;
      if (AOAttenConstant != other.AOAttenConstant) return false;
      if (CavityJitter != other.CavityJitter) return false;
      if (HeightTonemapMax != other.HeightTonemapMax) return false;
      if (GenDirections != other.GenDirections) return false;
      if (RadiosityNormalsLimitRayDistance != other.RadiosityNormalsLimitRayDistance) return false;
      if (HeightTonemapMin != other.HeightTonemapMin) return false;
      if (RadiosityNormalsJitter != other.RadiosityNormalsJitter) return false;
      if (DirectionsSwizzleY != other.DirectionsSwizzleY) return false;
      if (Width != other.Width) return false;
      if (BakeHighpolyBaseTextureDrawObjectIDIfNoTexture != other.BakeHighpolyBaseTextureDrawObjectIDIfNoTexture) return false;
      if (Concavity != other.Concavity) return false;
      if (DirectionsSwizzleX != other.DirectionsSwizzleX) return false;
      if (GenNormals != other.GenNormals) return false;
      if (ProximityRaysPerSample != other.ProximityRaysPerSample) return false;
      if (GenHeights != other.GenHeights) return false;
      if (RadiosityNormalsAttenConstant != other.RadiosityNormalsAttenConstant) return false;
      if (GenProximity != other.GenProximity) return false;
      if (GenPRT != other.GenPRT) return false;
      if (CavityContrast != other.CavityContrast) return false;
      if (RadiosityNormalsCoordSys != other.RadiosityNormalsCoordSys) return false;
      if (TransluJitter != other.TransluJitter) return false;
      if (AORaysPerSample != other.AORaysPerSample) return false;
      if (BentBias != other.BentBias) return false;
      if (DiscardRayBackFacesHits != other.DiscardRayBackFacesHits) return false;
      if (AOConeAngle != other.AOConeAngle) return false;
      if (BentSwizzleY != other.BentSwizzleY) return false;
      if (RadiosityNormalsBias != other.RadiosityNormalsBias) return false;
      if (RadiosityNormalsContrast != other.RadiosityNormalsContrast) return false;
      if (CavitySteps != other.CavitySteps) return false;
      if (AA != other.AA) return false;
      if (BentSwizzleZ != other.BentSwizzleZ) return false;
      if (BucketSize != other.BucketSize) return false;
      if (CurvConeAngle != other.CurvConeAngle) return false;
      if (TransluDist != other.TransluDist) return false;
      if (AOJitter != other.AOJitter) return false;
      if (CurvBias != other.CurvBias) return false;
      if (GenWireRays != other.GenWireRays) return false;
      if (CurvAlgorithm != other.CurvAlgorithm) return false;
      if (TransluDistribution != other.TransluDistribution) return false;
      if (AOAttenLinear != other.AOAttenLinear) return false;
      if (ProximityLimitRayDistance != other.ProximityLimitRayDistance) return false;
      if (GenRadiosityNormals != other.GenRadiosityNormals) return false;
      if (ProximityConeAngle != other.ProximityConeAngle) return false;
      if (HeightTonemap != other.HeightTonemap) return false;
      if (GenCavity != other.GenCavity) return false;
      if (BakeHighpolyVCols != other.BakeHighpolyVCols) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (nMBackgroundColor_ != null) hash ^= NMBackgroundColor.GetHashCode();
      if (hMBackgroundColor_ != null) hash ^= HMBackgroundColor.GetHashCode();
      if (bakeHighpolyBaseTextureNoTexCol_ != null) hash ^= BakeHighpolyBaseTextureNoTexCol.GetHashCode();
      if (bakeHighpolyBaseTextureBackgroundColor_ != null) hash ^= BakeHighpolyBaseTextureBackgroundColor.GetHashCode();
      if (renderWireframeBackgroundColor_ != null) hash ^= RenderWireframeBackgroundColor.GetHashCode();
      if (renderWireframeCol_ != null) hash ^= RenderWireframeCol.GetHashCode();
      if (renderCWCol_ != null) hash ^= RenderCWCol.GetHashCode();
      if (renderSeamCol_ != null) hash ^= RenderSeamCol.GetHashCode();
      if (renderRayFailsCol_ != null) hash ^= RenderRayFailsCol.GetHashCode();
      if (aOOccludedColor_ != null) hash ^= AOOccludedColor.GetHashCode();
      if (aOUnoccludedColor_ != null) hash ^= AOUnoccludedColor.GetHashCode();
      if (aOBackgroundColor_ != null) hash ^= AOBackgroundColor.GetHashCode();
      if (bentBackgroundColor_ != null) hash ^= BentBackgroundColor.GetHashCode();
      if (pRTBackgroundColor_ != null) hash ^= PRTBackgroundColor.GetHashCode();
      if (convexityBackgroundColor_ != null) hash ^= ConvexityBackgroundColor.GetHashCode();
      if (thicknessBackgroundColor_ != null) hash ^= ThicknessBackgroundColor.GetHashCode();
      if (proximityBackgroundColor_ != null) hash ^= ProximityBackgroundColor.GetHashCode();
      if (cavityBackgroundColor_ != null) hash ^= CavityBackgroundColor.GetHashCode();
      if (vDMBackgroundColor_ != null) hash ^= VDMBackgroundColor.GetHashCode();
      if (radNMBackgroundColor_ != null) hash ^= RadNMBackgroundColor.GetHashCode();
      if (curvBackgroundColor_ != null) hash ^= CurvBackgroundColor.GetHashCode();
      if (derivNMBackgroundColor_ != null) hash ^= DerivNMBackgroundColor.GetHashCode();
      if (transluBackgroundColor_ != null) hash ^= TransluBackgroundColor.GetHashCode();
      if (bakeHighpolyVColsBackgroundCol_ != null) hash ^= BakeHighpolyVColsBackgroundCol.GetHashCode();
      if (ClosestIfFails != false) hash ^= ClosestIfFails.GetHashCode();
      if (DirectionsTonemapMax != 0F) hash ^= DirectionsTonemapMax.GetHashCode();
      if (CurvMonocrome != false) hash ^= CurvMonocrome.GetHashCode();
      if (AOBias != 0F) hash ^= AOBias.GetHashCode();
      if (BentTangentSpace != false) hash ^= BentTangentSpace.GetHashCode();
      if (GenTranslu != false) hash ^= GenTranslu.GetHashCode();
      if (AODistribution != 0) hash ^= AODistribution.GetHashCode();
      if (PRTThreshold != 0F) hash ^= PRTThreshold.GetHashCode();
      if (DirectionsTonemapMin != 0F) hash ^= DirectionsTonemapMin.GetHashCode();
      if (CurvDistribution != 0) hash ^= CurvDistribution.GetHashCode();
      if (BentJitter != false) hash ^= BentJitter.GetHashCode();
      if (BentDistribution != 0) hash ^= BentDistribution.GetHashCode();
      if (BakeHighpolyBaseTexture != false) hash ^= BakeHighpolyBaseTexture.GetHashCode();
      if (GenConvexity != false) hash ^= GenConvexity.GetHashCode();
      if (RadiosityNormalsAttenLinear != 0F) hash ^= RadiosityNormalsAttenLinear.GetHashCode();
      if (TransluRaysPerSample != 0) hash ^= TransluRaysPerSample.GetHashCode();
      if (CurvSearchDistance != 0F) hash ^= CurvSearchDistance.GetHashCode();
      if (SwizzleZ != 0) hash ^= SwizzleZ.GetHashCode();
      if (TransluBias != 0F) hash ^= TransluBias.GetHashCode();
      if (PRTLimitRayDistance != false) hash ^= PRTLimitRayDistance.GetHashCode();
      if (GenBent != false) hash ^= GenBent.GetHashCode();
      if (AOLimitRayDistance != false) hash ^= AOLimitRayDistance.GetHashCode();
      if (CurvRaysPerSample != 0) hash ^= CurvRaysPerSample.GetHashCode();
      if (RadiosityNormalsDistribution != 0) hash ^= RadiosityNormalsDistribution.GetHashCode();
      if (RadiosityNormalsRaysPerSample != 0) hash ^= RadiosityNormalsRaysPerSample.GetHashCode();
      if (CurvJitter != false) hash ^= CurvJitter.GetHashCode();
      if (TangentSpace != false) hash ^= TangentSpace.GetHashCode();
      if (RadiosityNormalsAllowPureOcclusion != false) hash ^= RadiosityNormalsAllowPureOcclusion.GetHashCode();
      if (BentSwizzleX != 0) hash ^= BentSwizzleX.GetHashCode();
      if (SwizzleY != 0) hash ^= SwizzleY.GetHashCode();
      if (GenCurv != false) hash ^= GenCurv.GetHashCode();
      if (PRTJitter != false) hash ^= PRTJitter.GetHashCode();
      if (AOAttenCuadratic != 0F) hash ^= AOAttenCuadratic.GetHashCode();
      if (BentConeAngle != 0F) hash ^= BentConeAngle.GetHashCode();
      if (SwizzleX != 0) hash ^= SwizzleX.GetHashCode();
      if (RenderRayFails != false) hash ^= RenderRayFails.GetHashCode();
      if (CavitySearchRadius != 0F) hash ^= CavitySearchRadius.GetHashCode();
      if (RadiosityNormalsEncodeAO != false) hash ^= RadiosityNormalsEncodeAO.GetHashCode();
      if (TransluConeAngle != 0F) hash ^= TransluConeAngle.GetHashCode();
      if (BentRaysPerSample != 0) hash ^= BentRaysPerSample.GetHashCode();
      if (ConvexityScale != 0F) hash ^= ConvexityScale.GetHashCode();
      if (RadiosityNormalsConeAngle != 0F) hash ^= RadiosityNormalsConeAngle.GetHashCode();
      if (File.Length != 0) hash ^= File.GetHashCode();
      if (GenDerivNM != false) hash ^= GenDerivNM.GetHashCode();
      if (BentLimitRayDistance != false) hash ^= BentLimitRayDistance.GetHashCode();
      if (PRTBias != 0F) hash ^= PRTBias.GetHashCode();
      if (RenderWireframe != false) hash ^= RenderWireframe.GetHashCode();
      if (PRTNormalize != false) hash ^= PRTNormalize.GetHashCode();
      if (GenAO != false) hash ^= GenAO.GetHashCode();
      if (PRTConeAngle != 0F) hash ^= PRTConeAngle.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (RadiosityNormalsAttenCuadratic != 0F) hash ^= RadiosityNormalsAttenCuadratic.GetHashCode();
      if (DirectionsTonemap != 0) hash ^= DirectionsTonemap.GetHashCode();
      if (DirectionsTS != false) hash ^= DirectionsTS.GetHashCode();
      if (PRTRaysPerSample != 0) hash ^= PRTRaysPerSample.GetHashCode();
      if (EdgePadding != 0) hash ^= EdgePadding.GetHashCode();
      if (DirectionsSwizzleZ != 0) hash ^= DirectionsSwizzleZ.GetHashCode();
      if (AOAllowPureOccluded != false) hash ^= AOAllowPureOccluded.GetHashCode();
      if (AOIgnoreBackfaceHits != false) hash ^= AOIgnoreBackfaceHits.GetHashCode();
      if (CavityRaysPerSample != 0) hash ^= CavityRaysPerSample.GetHashCode();
      if (AOAttenConstant != 0F) hash ^= AOAttenConstant.GetHashCode();
      if (CavityJitter != false) hash ^= CavityJitter.GetHashCode();
      if (HeightTonemapMax != 0F) hash ^= HeightTonemapMax.GetHashCode();
      if (GenDirections != false) hash ^= GenDirections.GetHashCode();
      if (RadiosityNormalsLimitRayDistance != false) hash ^= RadiosityNormalsLimitRayDistance.GetHashCode();
      if (HeightTonemapMin != 0F) hash ^= HeightTonemapMin.GetHashCode();
      if (RadiosityNormalsJitter != false) hash ^= RadiosityNormalsJitter.GetHashCode();
      if (DirectionsSwizzleY != 0) hash ^= DirectionsSwizzleY.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (BakeHighpolyBaseTextureDrawObjectIDIfNoTexture != false) hash ^= BakeHighpolyBaseTextureDrawObjectIDIfNoTexture.GetHashCode();
      if (Concavity != false) hash ^= Concavity.GetHashCode();
      if (DirectionsSwizzleX != 0) hash ^= DirectionsSwizzleX.GetHashCode();
      if (GenNormals != false) hash ^= GenNormals.GetHashCode();
      if (ProximityRaysPerSample != 0) hash ^= ProximityRaysPerSample.GetHashCode();
      if (GenHeights != false) hash ^= GenHeights.GetHashCode();
      if (RadiosityNormalsAttenConstant != 0F) hash ^= RadiosityNormalsAttenConstant.GetHashCode();
      if (GenProximity != false) hash ^= GenProximity.GetHashCode();
      if (GenPRT != false) hash ^= GenPRT.GetHashCode();
      if (CavityContrast != 0F) hash ^= CavityContrast.GetHashCode();
      if (RadiosityNormalsCoordSys != 0) hash ^= RadiosityNormalsCoordSys.GetHashCode();
      if (TransluJitter != false) hash ^= TransluJitter.GetHashCode();
      if (AORaysPerSample != 0) hash ^= AORaysPerSample.GetHashCode();
      if (BentBias != 0F) hash ^= BentBias.GetHashCode();
      if (DiscardRayBackFacesHits != false) hash ^= DiscardRayBackFacesHits.GetHashCode();
      if (AOConeAngle != 0F) hash ^= AOConeAngle.GetHashCode();
      if (BentSwizzleY != 0) hash ^= BentSwizzleY.GetHashCode();
      if (RadiosityNormalsBias != 0F) hash ^= RadiosityNormalsBias.GetHashCode();
      if (RadiosityNormalsContrast != 0F) hash ^= RadiosityNormalsContrast.GetHashCode();
      if (CavitySteps != 0) hash ^= CavitySteps.GetHashCode();
      if (AA != 0) hash ^= AA.GetHashCode();
      if (BentSwizzleZ != 0) hash ^= BentSwizzleZ.GetHashCode();
      if (BucketSize != 0) hash ^= BucketSize.GetHashCode();
      if (CurvConeAngle != 0F) hash ^= CurvConeAngle.GetHashCode();
      if (TransluDist != 0F) hash ^= TransluDist.GetHashCode();
      if (AOJitter != false) hash ^= AOJitter.GetHashCode();
      if (CurvBias != 0F) hash ^= CurvBias.GetHashCode();
      if (GenWireRays != false) hash ^= GenWireRays.GetHashCode();
      if (CurvAlgorithm != 0) hash ^= CurvAlgorithm.GetHashCode();
      if (TransluDistribution != 0) hash ^= TransluDistribution.GetHashCode();
      if (AOAttenLinear != 0F) hash ^= AOAttenLinear.GetHashCode();
      if (ProximityLimitRayDistance != false) hash ^= ProximityLimitRayDistance.GetHashCode();
      if (GenRadiosityNormals != false) hash ^= GenRadiosityNormals.GetHashCode();
      if (ProximityConeAngle != 0F) hash ^= ProximityConeAngle.GetHashCode();
      if (HeightTonemap != 0) hash ^= HeightTonemap.GetHashCode();
      if (GenCavity != false) hash ^= GenCavity.GetHashCode();
      if (BakeHighpolyVCols != false) hash ^= BakeHighpolyVCols.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (nMBackgroundColor_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(NMBackgroundColor);
      }
      if (hMBackgroundColor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HMBackgroundColor);
      }
      if (bakeHighpolyBaseTextureNoTexCol_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BakeHighpolyBaseTextureNoTexCol);
      }
      if (bakeHighpolyBaseTextureBackgroundColor_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BakeHighpolyBaseTextureBackgroundColor);
      }
      if (renderWireframeBackgroundColor_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(RenderWireframeBackgroundColor);
      }
      if (renderWireframeCol_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(RenderWireframeCol);
      }
      if (renderCWCol_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(RenderCWCol);
      }
      if (renderSeamCol_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(RenderSeamCol);
      }
      if (renderRayFailsCol_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(RenderRayFailsCol);
      }
      if (aOOccludedColor_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(AOOccludedColor);
      }
      if (aOUnoccludedColor_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(AOUnoccludedColor);
      }
      if (aOBackgroundColor_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(AOBackgroundColor);
      }
      if (bentBackgroundColor_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(BentBackgroundColor);
      }
      if (pRTBackgroundColor_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(PRTBackgroundColor);
      }
      if (convexityBackgroundColor_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(ConvexityBackgroundColor);
      }
      if (thicknessBackgroundColor_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ThicknessBackgroundColor);
      }
      if (proximityBackgroundColor_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ProximityBackgroundColor);
      }
      if (cavityBackgroundColor_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(CavityBackgroundColor);
      }
      if (vDMBackgroundColor_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(VDMBackgroundColor);
      }
      if (radNMBackgroundColor_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(RadNMBackgroundColor);
      }
      if (curvBackgroundColor_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(CurvBackgroundColor);
      }
      if (derivNMBackgroundColor_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(DerivNMBackgroundColor);
      }
      if (transluBackgroundColor_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(TransluBackgroundColor);
      }
      if (bakeHighpolyVColsBackgroundCol_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(BakeHighpolyVColsBackgroundCol);
      }
      if (ClosestIfFails != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(ClosestIfFails);
      }
      if (DirectionsTonemapMax != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(DirectionsTonemapMax);
      }
      if (CurvMonocrome != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(CurvMonocrome);
      }
      if (AOBias != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(AOBias);
      }
      if (BentTangentSpace != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(BentTangentSpace);
      }
      if (GenTranslu != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(GenTranslu);
      }
      if (AODistribution != 0) {
        output.WriteRawTag(248, 1);
        output.WriteEnum((int) AODistribution);
      }
      if (PRTThreshold != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(PRTThreshold);
      }
      if (DirectionsTonemapMin != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(DirectionsTonemapMin);
      }
      if (CurvDistribution != 0) {
        output.WriteRawTag(144, 2);
        output.WriteEnum((int) CurvDistribution);
      }
      if (BentJitter != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(BentJitter);
      }
      if (BentDistribution != 0) {
        output.WriteRawTag(160, 2);
        output.WriteEnum((int) BentDistribution);
      }
      if (BakeHighpolyBaseTexture != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(BakeHighpolyBaseTexture);
      }
      if (GenConvexity != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(GenConvexity);
      }
      if (RadiosityNormalsAttenLinear != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(RadiosityNormalsAttenLinear);
      }
      if (TransluRaysPerSample != 0) {
        output.WriteRawTag(192, 2);
        output.WriteUInt32(TransluRaysPerSample);
      }
      if (CurvSearchDistance != 0F) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(CurvSearchDistance);
      }
      if (SwizzleZ != 0) {
        output.WriteRawTag(208, 2);
        output.WriteEnum((int) SwizzleZ);
      }
      if (TransluBias != 0F) {
        output.WriteRawTag(221, 2);
        output.WriteFloat(TransluBias);
      }
      if (PRTLimitRayDistance != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(PRTLimitRayDistance);
      }
      if (GenBent != false) {
        output.WriteRawTag(232, 2);
        output.WriteBool(GenBent);
      }
      if (AOLimitRayDistance != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(AOLimitRayDistance);
      }
      if (CurvRaysPerSample != 0) {
        output.WriteRawTag(248, 2);
        output.WriteUInt32(CurvRaysPerSample);
      }
      if (RadiosityNormalsDistribution != 0) {
        output.WriteRawTag(128, 3);
        output.WriteEnum((int) RadiosityNormalsDistribution);
      }
      if (RadiosityNormalsRaysPerSample != 0) {
        output.WriteRawTag(136, 3);
        output.WriteUInt32(RadiosityNormalsRaysPerSample);
      }
      if (CurvJitter != false) {
        output.WriteRawTag(144, 3);
        output.WriteBool(CurvJitter);
      }
      if (TangentSpace != false) {
        output.WriteRawTag(152, 3);
        output.WriteBool(TangentSpace);
      }
      if (RadiosityNormalsAllowPureOcclusion != false) {
        output.WriteRawTag(160, 3);
        output.WriteBool(RadiosityNormalsAllowPureOcclusion);
      }
      if (BentSwizzleX != 0) {
        output.WriteRawTag(168, 3);
        output.WriteEnum((int) BentSwizzleX);
      }
      if (SwizzleY != 0) {
        output.WriteRawTag(176, 3);
        output.WriteEnum((int) SwizzleY);
      }
      if (GenCurv != false) {
        output.WriteRawTag(184, 3);
        output.WriteBool(GenCurv);
      }
      if (PRTJitter != false) {
        output.WriteRawTag(192, 3);
        output.WriteBool(PRTJitter);
      }
      if (AOAttenCuadratic != 0F) {
        output.WriteRawTag(205, 3);
        output.WriteFloat(AOAttenCuadratic);
      }
      if (BentConeAngle != 0F) {
        output.WriteRawTag(213, 3);
        output.WriteFloat(BentConeAngle);
      }
      if (SwizzleX != 0) {
        output.WriteRawTag(216, 3);
        output.WriteEnum((int) SwizzleX);
      }
      if (RenderRayFails != false) {
        output.WriteRawTag(224, 3);
        output.WriteBool(RenderRayFails);
      }
      if (CavitySearchRadius != 0F) {
        output.WriteRawTag(237, 3);
        output.WriteFloat(CavitySearchRadius);
      }
      if (RadiosityNormalsEncodeAO != false) {
        output.WriteRawTag(240, 3);
        output.WriteBool(RadiosityNormalsEncodeAO);
      }
      if (TransluConeAngle != 0F) {
        output.WriteRawTag(253, 3);
        output.WriteFloat(TransluConeAngle);
      }
      if (BentRaysPerSample != 0) {
        output.WriteRawTag(128, 4);
        output.WriteUInt32(BentRaysPerSample);
      }
      if (ConvexityScale != 0F) {
        output.WriteRawTag(141, 4);
        output.WriteFloat(ConvexityScale);
      }
      if (RadiosityNormalsConeAngle != 0F) {
        output.WriteRawTag(149, 4);
        output.WriteFloat(RadiosityNormalsConeAngle);
      }
      if (File.Length != 0) {
        output.WriteRawTag(154, 4);
        output.WriteString(File);
      }
      if (GenDerivNM != false) {
        output.WriteRawTag(160, 4);
        output.WriteBool(GenDerivNM);
      }
      if (BentLimitRayDistance != false) {
        output.WriteRawTag(168, 4);
        output.WriteBool(BentLimitRayDistance);
      }
      if (PRTBias != 0F) {
        output.WriteRawTag(181, 4);
        output.WriteFloat(PRTBias);
      }
      if (RenderWireframe != false) {
        output.WriteRawTag(184, 4);
        output.WriteBool(RenderWireframe);
      }
      if (PRTNormalize != false) {
        output.WriteRawTag(192, 4);
        output.WriteBool(PRTNormalize);
      }
      if (GenAO != false) {
        output.WriteRawTag(200, 4);
        output.WriteBool(GenAO);
      }
      if (PRTConeAngle != 0F) {
        output.WriteRawTag(213, 4);
        output.WriteFloat(PRTConeAngle);
      }
      if (Height != 0) {
        output.WriteRawTag(216, 4);
        output.WriteUInt32(Height);
      }
      if (RadiosityNormalsAttenCuadratic != 0F) {
        output.WriteRawTag(229, 4);
        output.WriteFloat(RadiosityNormalsAttenCuadratic);
      }
      if (DirectionsTonemap != 0) {
        output.WriteRawTag(232, 4);
        output.WriteEnum((int) DirectionsTonemap);
      }
      if (DirectionsTS != false) {
        output.WriteRawTag(240, 4);
        output.WriteBool(DirectionsTS);
      }
      if (PRTRaysPerSample != 0) {
        output.WriteRawTag(248, 4);
        output.WriteUInt32(PRTRaysPerSample);
      }
      if (EdgePadding != 0) {
        output.WriteRawTag(128, 5);
        output.WriteUInt32(EdgePadding);
      }
      if (DirectionsSwizzleZ != 0) {
        output.WriteRawTag(136, 5);
        output.WriteEnum((int) DirectionsSwizzleZ);
      }
      if (AOAllowPureOccluded != false) {
        output.WriteRawTag(144, 5);
        output.WriteBool(AOAllowPureOccluded);
      }
      if (AOIgnoreBackfaceHits != false) {
        output.WriteRawTag(152, 5);
        output.WriteBool(AOIgnoreBackfaceHits);
      }
      if (CavityRaysPerSample != 0) {
        output.WriteRawTag(160, 5);
        output.WriteUInt32(CavityRaysPerSample);
      }
      if (AOAttenConstant != 0F) {
        output.WriteRawTag(173, 5);
        output.WriteFloat(AOAttenConstant);
      }
      if (CavityJitter != false) {
        output.WriteRawTag(176, 5);
        output.WriteBool(CavityJitter);
      }
      if (HeightTonemapMax != 0F) {
        output.WriteRawTag(189, 5);
        output.WriteFloat(HeightTonemapMax);
      }
      if (GenDirections != false) {
        output.WriteRawTag(192, 5);
        output.WriteBool(GenDirections);
      }
      if (RadiosityNormalsLimitRayDistance != false) {
        output.WriteRawTag(200, 5);
        output.WriteBool(RadiosityNormalsLimitRayDistance);
      }
      if (HeightTonemapMin != 0F) {
        output.WriteRawTag(213, 5);
        output.WriteFloat(HeightTonemapMin);
      }
      if (RadiosityNormalsJitter != false) {
        output.WriteRawTag(216, 5);
        output.WriteBool(RadiosityNormalsJitter);
      }
      if (DirectionsSwizzleY != 0) {
        output.WriteRawTag(224, 5);
        output.WriteEnum((int) DirectionsSwizzleY);
      }
      if (Width != 0) {
        output.WriteRawTag(232, 5);
        output.WriteUInt32(Width);
      }
      if (BakeHighpolyBaseTextureDrawObjectIDIfNoTexture != false) {
        output.WriteRawTag(240, 5);
        output.WriteBool(BakeHighpolyBaseTextureDrawObjectIDIfNoTexture);
      }
      if (Concavity != false) {
        output.WriteRawTag(248, 5);
        output.WriteBool(Concavity);
      }
      if (DirectionsSwizzleX != 0) {
        output.WriteRawTag(128, 6);
        output.WriteEnum((int) DirectionsSwizzleX);
      }
      if (GenNormals != false) {
        output.WriteRawTag(136, 6);
        output.WriteBool(GenNormals);
      }
      if (ProximityRaysPerSample != 0) {
        output.WriteRawTag(144, 6);
        output.WriteUInt32(ProximityRaysPerSample);
      }
      if (GenHeights != false) {
        output.WriteRawTag(152, 6);
        output.WriteBool(GenHeights);
      }
      if (RadiosityNormalsAttenConstant != 0F) {
        output.WriteRawTag(165, 6);
        output.WriteFloat(RadiosityNormalsAttenConstant);
      }
      if (GenProximity != false) {
        output.WriteRawTag(168, 6);
        output.WriteBool(GenProximity);
      }
      if (GenPRT != false) {
        output.WriteRawTag(176, 6);
        output.WriteBool(GenPRT);
      }
      if (CavityContrast != 0F) {
        output.WriteRawTag(189, 6);
        output.WriteFloat(CavityContrast);
      }
      if (RadiosityNormalsCoordSys != 0) {
        output.WriteRawTag(192, 6);
        output.WriteEnum((int) RadiosityNormalsCoordSys);
      }
      if (TransluJitter != false) {
        output.WriteRawTag(200, 6);
        output.WriteBool(TransluJitter);
      }
      if (AORaysPerSample != 0) {
        output.WriteRawTag(208, 6);
        output.WriteUInt32(AORaysPerSample);
      }
      if (BentBias != 0F) {
        output.WriteRawTag(221, 6);
        output.WriteFloat(BentBias);
      }
      if (DiscardRayBackFacesHits != false) {
        output.WriteRawTag(224, 6);
        output.WriteBool(DiscardRayBackFacesHits);
      }
      if (AOConeAngle != 0F) {
        output.WriteRawTag(237, 6);
        output.WriteFloat(AOConeAngle);
      }
      if (BentSwizzleY != 0) {
        output.WriteRawTag(240, 6);
        output.WriteEnum((int) BentSwizzleY);
      }
      if (RadiosityNormalsBias != 0F) {
        output.WriteRawTag(253, 6);
        output.WriteFloat(RadiosityNormalsBias);
      }
      if (RadiosityNormalsContrast != 0F) {
        output.WriteRawTag(133, 7);
        output.WriteFloat(RadiosityNormalsContrast);
      }
      if (CavitySteps != 0) {
        output.WriteRawTag(136, 7);
        output.WriteUInt32(CavitySteps);
      }
      if (AA != 0) {
        output.WriteRawTag(144, 7);
        output.WriteEnum((int) AA);
      }
      if (BentSwizzleZ != 0) {
        output.WriteRawTag(152, 7);
        output.WriteEnum((int) BentSwizzleZ);
      }
      if (BucketSize != 0) {
        output.WriteRawTag(160, 7);
        output.WriteUInt32(BucketSize);
      }
      if (CurvConeAngle != 0F) {
        output.WriteRawTag(173, 7);
        output.WriteFloat(CurvConeAngle);
      }
      if (TransluDist != 0F) {
        output.WriteRawTag(181, 7);
        output.WriteFloat(TransluDist);
      }
      if (AOJitter != false) {
        output.WriteRawTag(184, 7);
        output.WriteBool(AOJitter);
      }
      if (CurvBias != 0F) {
        output.WriteRawTag(197, 7);
        output.WriteFloat(CurvBias);
      }
      if (GenWireRays != false) {
        output.WriteRawTag(200, 7);
        output.WriteBool(GenWireRays);
      }
      if (CurvAlgorithm != 0) {
        output.WriteRawTag(208, 7);
        output.WriteEnum((int) CurvAlgorithm);
      }
      if (TransluDistribution != 0) {
        output.WriteRawTag(216, 7);
        output.WriteEnum((int) TransluDistribution);
      }
      if (AOAttenLinear != 0F) {
        output.WriteRawTag(229, 7);
        output.WriteFloat(AOAttenLinear);
      }
      if (ProximityLimitRayDistance != false) {
        output.WriteRawTag(232, 7);
        output.WriteBool(ProximityLimitRayDistance);
      }
      if (GenRadiosityNormals != false) {
        output.WriteRawTag(240, 7);
        output.WriteBool(GenRadiosityNormals);
      }
      if (ProximityConeAngle != 0F) {
        output.WriteRawTag(253, 7);
        output.WriteFloat(ProximityConeAngle);
      }
      if (HeightTonemap != 0) {
        output.WriteRawTag(128, 8);
        output.WriteEnum((int) HeightTonemap);
      }
      if (GenCavity != false) {
        output.WriteRawTag(136, 8);
        output.WriteBool(GenCavity);
      }
      if (BakeHighpolyVCols != false) {
        output.WriteRawTag(144, 8);
        output.WriteBool(BakeHighpolyVCols);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (nMBackgroundColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NMBackgroundColor);
      }
      if (hMBackgroundColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HMBackgroundColor);
      }
      if (bakeHighpolyBaseTextureNoTexCol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BakeHighpolyBaseTextureNoTexCol);
      }
      if (bakeHighpolyBaseTextureBackgroundColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BakeHighpolyBaseTextureBackgroundColor);
      }
      if (renderWireframeBackgroundColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenderWireframeBackgroundColor);
      }
      if (renderWireframeCol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenderWireframeCol);
      }
      if (renderCWCol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenderCWCol);
      }
      if (renderSeamCol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenderSeamCol);
      }
      if (renderRayFailsCol_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenderRayFailsCol);
      }
      if (aOOccludedColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AOOccludedColor);
      }
      if (aOUnoccludedColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AOUnoccludedColor);
      }
      if (aOBackgroundColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AOBackgroundColor);
      }
      if (bentBackgroundColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BentBackgroundColor);
      }
      if (pRTBackgroundColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PRTBackgroundColor);
      }
      if (convexityBackgroundColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConvexityBackgroundColor);
      }
      if (thicknessBackgroundColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ThicknessBackgroundColor);
      }
      if (proximityBackgroundColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProximityBackgroundColor);
      }
      if (cavityBackgroundColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CavityBackgroundColor);
      }
      if (vDMBackgroundColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VDMBackgroundColor);
      }
      if (radNMBackgroundColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RadNMBackgroundColor);
      }
      if (curvBackgroundColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CurvBackgroundColor);
      }
      if (derivNMBackgroundColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DerivNMBackgroundColor);
      }
      if (transluBackgroundColor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransluBackgroundColor);
      }
      if (bakeHighpolyVColsBackgroundCol_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BakeHighpolyVColsBackgroundCol);
      }
      if (ClosestIfFails != false) {
        size += 2 + 1;
      }
      if (DirectionsTonemapMax != 0F) {
        size += 2 + 4;
      }
      if (CurvMonocrome != false) {
        size += 2 + 1;
      }
      if (AOBias != 0F) {
        size += 2 + 4;
      }
      if (BentTangentSpace != false) {
        size += 2 + 1;
      }
      if (GenTranslu != false) {
        size += 2 + 1;
      }
      if (AODistribution != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AODistribution);
      }
      if (PRTThreshold != 0F) {
        size += 2 + 4;
      }
      if (DirectionsTonemapMin != 0F) {
        size += 2 + 4;
      }
      if (CurvDistribution != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CurvDistribution);
      }
      if (BentJitter != false) {
        size += 2 + 1;
      }
      if (BentDistribution != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BentDistribution);
      }
      if (BakeHighpolyBaseTexture != false) {
        size += 2 + 1;
      }
      if (GenConvexity != false) {
        size += 2 + 1;
      }
      if (RadiosityNormalsAttenLinear != 0F) {
        size += 2 + 4;
      }
      if (TransluRaysPerSample != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TransluRaysPerSample);
      }
      if (CurvSearchDistance != 0F) {
        size += 2 + 4;
      }
      if (SwizzleZ != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SwizzleZ);
      }
      if (TransluBias != 0F) {
        size += 2 + 4;
      }
      if (PRTLimitRayDistance != false) {
        size += 2 + 1;
      }
      if (GenBent != false) {
        size += 2 + 1;
      }
      if (AOLimitRayDistance != false) {
        size += 2 + 1;
      }
      if (CurvRaysPerSample != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CurvRaysPerSample);
      }
      if (RadiosityNormalsDistribution != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RadiosityNormalsDistribution);
      }
      if (RadiosityNormalsRaysPerSample != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RadiosityNormalsRaysPerSample);
      }
      if (CurvJitter != false) {
        size += 2 + 1;
      }
      if (TangentSpace != false) {
        size += 2 + 1;
      }
      if (RadiosityNormalsAllowPureOcclusion != false) {
        size += 2 + 1;
      }
      if (BentSwizzleX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BentSwizzleX);
      }
      if (SwizzleY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SwizzleY);
      }
      if (GenCurv != false) {
        size += 2 + 1;
      }
      if (PRTJitter != false) {
        size += 2 + 1;
      }
      if (AOAttenCuadratic != 0F) {
        size += 2 + 4;
      }
      if (BentConeAngle != 0F) {
        size += 2 + 4;
      }
      if (SwizzleX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SwizzleX);
      }
      if (RenderRayFails != false) {
        size += 2 + 1;
      }
      if (CavitySearchRadius != 0F) {
        size += 2 + 4;
      }
      if (RadiosityNormalsEncodeAO != false) {
        size += 2 + 1;
      }
      if (TransluConeAngle != 0F) {
        size += 2 + 4;
      }
      if (BentRaysPerSample != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BentRaysPerSample);
      }
      if (ConvexityScale != 0F) {
        size += 2 + 4;
      }
      if (RadiosityNormalsConeAngle != 0F) {
        size += 2 + 4;
      }
      if (File.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(File);
      }
      if (GenDerivNM != false) {
        size += 2 + 1;
      }
      if (BentLimitRayDistance != false) {
        size += 2 + 1;
      }
      if (PRTBias != 0F) {
        size += 2 + 4;
      }
      if (RenderWireframe != false) {
        size += 2 + 1;
      }
      if (PRTNormalize != false) {
        size += 2 + 1;
      }
      if (GenAO != false) {
        size += 2 + 1;
      }
      if (PRTConeAngle != 0F) {
        size += 2 + 4;
      }
      if (Height != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (RadiosityNormalsAttenCuadratic != 0F) {
        size += 2 + 4;
      }
      if (DirectionsTonemap != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DirectionsTonemap);
      }
      if (DirectionsTS != false) {
        size += 2 + 1;
      }
      if (PRTRaysPerSample != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PRTRaysPerSample);
      }
      if (EdgePadding != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(EdgePadding);
      }
      if (DirectionsSwizzleZ != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DirectionsSwizzleZ);
      }
      if (AOAllowPureOccluded != false) {
        size += 2 + 1;
      }
      if (AOIgnoreBackfaceHits != false) {
        size += 2 + 1;
      }
      if (CavityRaysPerSample != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CavityRaysPerSample);
      }
      if (AOAttenConstant != 0F) {
        size += 2 + 4;
      }
      if (CavityJitter != false) {
        size += 2 + 1;
      }
      if (HeightTonemapMax != 0F) {
        size += 2 + 4;
      }
      if (GenDirections != false) {
        size += 2 + 1;
      }
      if (RadiosityNormalsLimitRayDistance != false) {
        size += 2 + 1;
      }
      if (HeightTonemapMin != 0F) {
        size += 2 + 4;
      }
      if (RadiosityNormalsJitter != false) {
        size += 2 + 1;
      }
      if (DirectionsSwizzleY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DirectionsSwizzleY);
      }
      if (Width != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (BakeHighpolyBaseTextureDrawObjectIDIfNoTexture != false) {
        size += 2 + 1;
      }
      if (Concavity != false) {
        size += 2 + 1;
      }
      if (DirectionsSwizzleX != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) DirectionsSwizzleX);
      }
      if (GenNormals != false) {
        size += 2 + 1;
      }
      if (ProximityRaysPerSample != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ProximityRaysPerSample);
      }
      if (GenHeights != false) {
        size += 2 + 1;
      }
      if (RadiosityNormalsAttenConstant != 0F) {
        size += 2 + 4;
      }
      if (GenProximity != false) {
        size += 2 + 1;
      }
      if (GenPRT != false) {
        size += 2 + 1;
      }
      if (CavityContrast != 0F) {
        size += 2 + 4;
      }
      if (RadiosityNormalsCoordSys != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RadiosityNormalsCoordSys);
      }
      if (TransluJitter != false) {
        size += 2 + 1;
      }
      if (AORaysPerSample != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AORaysPerSample);
      }
      if (BentBias != 0F) {
        size += 2 + 4;
      }
      if (DiscardRayBackFacesHits != false) {
        size += 2 + 1;
      }
      if (AOConeAngle != 0F) {
        size += 2 + 4;
      }
      if (BentSwizzleY != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BentSwizzleY);
      }
      if (RadiosityNormalsBias != 0F) {
        size += 2 + 4;
      }
      if (RadiosityNormalsContrast != 0F) {
        size += 2 + 4;
      }
      if (CavitySteps != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CavitySteps);
      }
      if (AA != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AA);
      }
      if (BentSwizzleZ != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BentSwizzleZ);
      }
      if (BucketSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(BucketSize);
      }
      if (CurvConeAngle != 0F) {
        size += 2 + 4;
      }
      if (TransluDist != 0F) {
        size += 2 + 4;
      }
      if (AOJitter != false) {
        size += 2 + 1;
      }
      if (CurvBias != 0F) {
        size += 2 + 4;
      }
      if (GenWireRays != false) {
        size += 2 + 1;
      }
      if (CurvAlgorithm != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CurvAlgorithm);
      }
      if (TransluDistribution != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TransluDistribution);
      }
      if (AOAttenLinear != 0F) {
        size += 2 + 4;
      }
      if (ProximityLimitRayDistance != false) {
        size += 2 + 1;
      }
      if (GenRadiosityNormals != false) {
        size += 2 + 1;
      }
      if (ProximityConeAngle != 0F) {
        size += 2 + 4;
      }
      if (HeightTonemap != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HeightTonemap);
      }
      if (GenCavity != false) {
        size += 2 + 1;
      }
      if (BakeHighpolyVCols != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(tGenerateMaps other) {
      if (other == null) {
        return;
      }
      if (other.nMBackgroundColor_ != null) {
        if (nMBackgroundColor_ == null) {
          nMBackgroundColor_ = new global::xnormal.tRGB8();
        }
        NMBackgroundColor.MergeFrom(other.NMBackgroundColor);
      }
      if (other.hMBackgroundColor_ != null) {
        if (hMBackgroundColor_ == null) {
          hMBackgroundColor_ = new global::xnormal.tRGB8();
        }
        HMBackgroundColor.MergeFrom(other.HMBackgroundColor);
      }
      if (other.bakeHighpolyBaseTextureNoTexCol_ != null) {
        if (bakeHighpolyBaseTextureNoTexCol_ == null) {
          bakeHighpolyBaseTextureNoTexCol_ = new global::xnormal.tRGB8();
        }
        BakeHighpolyBaseTextureNoTexCol.MergeFrom(other.BakeHighpolyBaseTextureNoTexCol);
      }
      if (other.bakeHighpolyBaseTextureBackgroundColor_ != null) {
        if (bakeHighpolyBaseTextureBackgroundColor_ == null) {
          bakeHighpolyBaseTextureBackgroundColor_ = new global::xnormal.tRGB8();
        }
        BakeHighpolyBaseTextureBackgroundColor.MergeFrom(other.BakeHighpolyBaseTextureBackgroundColor);
      }
      if (other.renderWireframeBackgroundColor_ != null) {
        if (renderWireframeBackgroundColor_ == null) {
          renderWireframeBackgroundColor_ = new global::xnormal.tRGB8();
        }
        RenderWireframeBackgroundColor.MergeFrom(other.RenderWireframeBackgroundColor);
      }
      if (other.renderWireframeCol_ != null) {
        if (renderWireframeCol_ == null) {
          renderWireframeCol_ = new global::xnormal.tRGB8();
        }
        RenderWireframeCol.MergeFrom(other.RenderWireframeCol);
      }
      if (other.renderCWCol_ != null) {
        if (renderCWCol_ == null) {
          renderCWCol_ = new global::xnormal.tRGB8();
        }
        RenderCWCol.MergeFrom(other.RenderCWCol);
      }
      if (other.renderSeamCol_ != null) {
        if (renderSeamCol_ == null) {
          renderSeamCol_ = new global::xnormal.tRGB8();
        }
        RenderSeamCol.MergeFrom(other.RenderSeamCol);
      }
      if (other.renderRayFailsCol_ != null) {
        if (renderRayFailsCol_ == null) {
          renderRayFailsCol_ = new global::xnormal.tRGB8();
        }
        RenderRayFailsCol.MergeFrom(other.RenderRayFailsCol);
      }
      if (other.aOOccludedColor_ != null) {
        if (aOOccludedColor_ == null) {
          aOOccludedColor_ = new global::xnormal.tRGB8();
        }
        AOOccludedColor.MergeFrom(other.AOOccludedColor);
      }
      if (other.aOUnoccludedColor_ != null) {
        if (aOUnoccludedColor_ == null) {
          aOUnoccludedColor_ = new global::xnormal.tRGB8();
        }
        AOUnoccludedColor.MergeFrom(other.AOUnoccludedColor);
      }
      if (other.aOBackgroundColor_ != null) {
        if (aOBackgroundColor_ == null) {
          aOBackgroundColor_ = new global::xnormal.tRGB8();
        }
        AOBackgroundColor.MergeFrom(other.AOBackgroundColor);
      }
      if (other.bentBackgroundColor_ != null) {
        if (bentBackgroundColor_ == null) {
          bentBackgroundColor_ = new global::xnormal.tRGB8();
        }
        BentBackgroundColor.MergeFrom(other.BentBackgroundColor);
      }
      if (other.pRTBackgroundColor_ != null) {
        if (pRTBackgroundColor_ == null) {
          pRTBackgroundColor_ = new global::xnormal.tRGB8();
        }
        PRTBackgroundColor.MergeFrom(other.PRTBackgroundColor);
      }
      if (other.convexityBackgroundColor_ != null) {
        if (convexityBackgroundColor_ == null) {
          convexityBackgroundColor_ = new global::xnormal.tRGB8();
        }
        ConvexityBackgroundColor.MergeFrom(other.ConvexityBackgroundColor);
      }
      if (other.thicknessBackgroundColor_ != null) {
        if (thicknessBackgroundColor_ == null) {
          thicknessBackgroundColor_ = new global::xnormal.tRGB8();
        }
        ThicknessBackgroundColor.MergeFrom(other.ThicknessBackgroundColor);
      }
      if (other.proximityBackgroundColor_ != null) {
        if (proximityBackgroundColor_ == null) {
          proximityBackgroundColor_ = new global::xnormal.tRGB8();
        }
        ProximityBackgroundColor.MergeFrom(other.ProximityBackgroundColor);
      }
      if (other.cavityBackgroundColor_ != null) {
        if (cavityBackgroundColor_ == null) {
          cavityBackgroundColor_ = new global::xnormal.tRGB8();
        }
        CavityBackgroundColor.MergeFrom(other.CavityBackgroundColor);
      }
      if (other.vDMBackgroundColor_ != null) {
        if (vDMBackgroundColor_ == null) {
          vDMBackgroundColor_ = new global::xnormal.tRGB8();
        }
        VDMBackgroundColor.MergeFrom(other.VDMBackgroundColor);
      }
      if (other.radNMBackgroundColor_ != null) {
        if (radNMBackgroundColor_ == null) {
          radNMBackgroundColor_ = new global::xnormal.tRGB8();
        }
        RadNMBackgroundColor.MergeFrom(other.RadNMBackgroundColor);
      }
      if (other.curvBackgroundColor_ != null) {
        if (curvBackgroundColor_ == null) {
          curvBackgroundColor_ = new global::xnormal.tRGB8();
        }
        CurvBackgroundColor.MergeFrom(other.CurvBackgroundColor);
      }
      if (other.derivNMBackgroundColor_ != null) {
        if (derivNMBackgroundColor_ == null) {
          derivNMBackgroundColor_ = new global::xnormal.tRGB8();
        }
        DerivNMBackgroundColor.MergeFrom(other.DerivNMBackgroundColor);
      }
      if (other.transluBackgroundColor_ != null) {
        if (transluBackgroundColor_ == null) {
          transluBackgroundColor_ = new global::xnormal.tRGB8();
        }
        TransluBackgroundColor.MergeFrom(other.TransluBackgroundColor);
      }
      if (other.bakeHighpolyVColsBackgroundCol_ != null) {
        if (bakeHighpolyVColsBackgroundCol_ == null) {
          bakeHighpolyVColsBackgroundCol_ = new global::xnormal.tRGB8();
        }
        BakeHighpolyVColsBackgroundCol.MergeFrom(other.BakeHighpolyVColsBackgroundCol);
      }
      if (other.ClosestIfFails != false) {
        ClosestIfFails = other.ClosestIfFails;
      }
      if (other.DirectionsTonemapMax != 0F) {
        DirectionsTonemapMax = other.DirectionsTonemapMax;
      }
      if (other.CurvMonocrome != false) {
        CurvMonocrome = other.CurvMonocrome;
      }
      if (other.AOBias != 0F) {
        AOBias = other.AOBias;
      }
      if (other.BentTangentSpace != false) {
        BentTangentSpace = other.BentTangentSpace;
      }
      if (other.GenTranslu != false) {
        GenTranslu = other.GenTranslu;
      }
      if (other.AODistribution != 0) {
        AODistribution = other.AODistribution;
      }
      if (other.PRTThreshold != 0F) {
        PRTThreshold = other.PRTThreshold;
      }
      if (other.DirectionsTonemapMin != 0F) {
        DirectionsTonemapMin = other.DirectionsTonemapMin;
      }
      if (other.CurvDistribution != 0) {
        CurvDistribution = other.CurvDistribution;
      }
      if (other.BentJitter != false) {
        BentJitter = other.BentJitter;
      }
      if (other.BentDistribution != 0) {
        BentDistribution = other.BentDistribution;
      }
      if (other.BakeHighpolyBaseTexture != false) {
        BakeHighpolyBaseTexture = other.BakeHighpolyBaseTexture;
      }
      if (other.GenConvexity != false) {
        GenConvexity = other.GenConvexity;
      }
      if (other.RadiosityNormalsAttenLinear != 0F) {
        RadiosityNormalsAttenLinear = other.RadiosityNormalsAttenLinear;
      }
      if (other.TransluRaysPerSample != 0) {
        TransluRaysPerSample = other.TransluRaysPerSample;
      }
      if (other.CurvSearchDistance != 0F) {
        CurvSearchDistance = other.CurvSearchDistance;
      }
      if (other.SwizzleZ != 0) {
        SwizzleZ = other.SwizzleZ;
      }
      if (other.TransluBias != 0F) {
        TransluBias = other.TransluBias;
      }
      if (other.PRTLimitRayDistance != false) {
        PRTLimitRayDistance = other.PRTLimitRayDistance;
      }
      if (other.GenBent != false) {
        GenBent = other.GenBent;
      }
      if (other.AOLimitRayDistance != false) {
        AOLimitRayDistance = other.AOLimitRayDistance;
      }
      if (other.CurvRaysPerSample != 0) {
        CurvRaysPerSample = other.CurvRaysPerSample;
      }
      if (other.RadiosityNormalsDistribution != 0) {
        RadiosityNormalsDistribution = other.RadiosityNormalsDistribution;
      }
      if (other.RadiosityNormalsRaysPerSample != 0) {
        RadiosityNormalsRaysPerSample = other.RadiosityNormalsRaysPerSample;
      }
      if (other.CurvJitter != false) {
        CurvJitter = other.CurvJitter;
      }
      if (other.TangentSpace != false) {
        TangentSpace = other.TangentSpace;
      }
      if (other.RadiosityNormalsAllowPureOcclusion != false) {
        RadiosityNormalsAllowPureOcclusion = other.RadiosityNormalsAllowPureOcclusion;
      }
      if (other.BentSwizzleX != 0) {
        BentSwizzleX = other.BentSwizzleX;
      }
      if (other.SwizzleY != 0) {
        SwizzleY = other.SwizzleY;
      }
      if (other.GenCurv != false) {
        GenCurv = other.GenCurv;
      }
      if (other.PRTJitter != false) {
        PRTJitter = other.PRTJitter;
      }
      if (other.AOAttenCuadratic != 0F) {
        AOAttenCuadratic = other.AOAttenCuadratic;
      }
      if (other.BentConeAngle != 0F) {
        BentConeAngle = other.BentConeAngle;
      }
      if (other.SwizzleX != 0) {
        SwizzleX = other.SwizzleX;
      }
      if (other.RenderRayFails != false) {
        RenderRayFails = other.RenderRayFails;
      }
      if (other.CavitySearchRadius != 0F) {
        CavitySearchRadius = other.CavitySearchRadius;
      }
      if (other.RadiosityNormalsEncodeAO != false) {
        RadiosityNormalsEncodeAO = other.RadiosityNormalsEncodeAO;
      }
      if (other.TransluConeAngle != 0F) {
        TransluConeAngle = other.TransluConeAngle;
      }
      if (other.BentRaysPerSample != 0) {
        BentRaysPerSample = other.BentRaysPerSample;
      }
      if (other.ConvexityScale != 0F) {
        ConvexityScale = other.ConvexityScale;
      }
      if (other.RadiosityNormalsConeAngle != 0F) {
        RadiosityNormalsConeAngle = other.RadiosityNormalsConeAngle;
      }
      if (other.File.Length != 0) {
        File = other.File;
      }
      if (other.GenDerivNM != false) {
        GenDerivNM = other.GenDerivNM;
      }
      if (other.BentLimitRayDistance != false) {
        BentLimitRayDistance = other.BentLimitRayDistance;
      }
      if (other.PRTBias != 0F) {
        PRTBias = other.PRTBias;
      }
      if (other.RenderWireframe != false) {
        RenderWireframe = other.RenderWireframe;
      }
      if (other.PRTNormalize != false) {
        PRTNormalize = other.PRTNormalize;
      }
      if (other.GenAO != false) {
        GenAO = other.GenAO;
      }
      if (other.PRTConeAngle != 0F) {
        PRTConeAngle = other.PRTConeAngle;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.RadiosityNormalsAttenCuadratic != 0F) {
        RadiosityNormalsAttenCuadratic = other.RadiosityNormalsAttenCuadratic;
      }
      if (other.DirectionsTonemap != 0) {
        DirectionsTonemap = other.DirectionsTonemap;
      }
      if (other.DirectionsTS != false) {
        DirectionsTS = other.DirectionsTS;
      }
      if (other.PRTRaysPerSample != 0) {
        PRTRaysPerSample = other.PRTRaysPerSample;
      }
      if (other.EdgePadding != 0) {
        EdgePadding = other.EdgePadding;
      }
      if (other.DirectionsSwizzleZ != 0) {
        DirectionsSwizzleZ = other.DirectionsSwizzleZ;
      }
      if (other.AOAllowPureOccluded != false) {
        AOAllowPureOccluded = other.AOAllowPureOccluded;
      }
      if (other.AOIgnoreBackfaceHits != false) {
        AOIgnoreBackfaceHits = other.AOIgnoreBackfaceHits;
      }
      if (other.CavityRaysPerSample != 0) {
        CavityRaysPerSample = other.CavityRaysPerSample;
      }
      if (other.AOAttenConstant != 0F) {
        AOAttenConstant = other.AOAttenConstant;
      }
      if (other.CavityJitter != false) {
        CavityJitter = other.CavityJitter;
      }
      if (other.HeightTonemapMax != 0F) {
        HeightTonemapMax = other.HeightTonemapMax;
      }
      if (other.GenDirections != false) {
        GenDirections = other.GenDirections;
      }
      if (other.RadiosityNormalsLimitRayDistance != false) {
        RadiosityNormalsLimitRayDistance = other.RadiosityNormalsLimitRayDistance;
      }
      if (other.HeightTonemapMin != 0F) {
        HeightTonemapMin = other.HeightTonemapMin;
      }
      if (other.RadiosityNormalsJitter != false) {
        RadiosityNormalsJitter = other.RadiosityNormalsJitter;
      }
      if (other.DirectionsSwizzleY != 0) {
        DirectionsSwizzleY = other.DirectionsSwizzleY;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.BakeHighpolyBaseTextureDrawObjectIDIfNoTexture != false) {
        BakeHighpolyBaseTextureDrawObjectIDIfNoTexture = other.BakeHighpolyBaseTextureDrawObjectIDIfNoTexture;
      }
      if (other.Concavity != false) {
        Concavity = other.Concavity;
      }
      if (other.DirectionsSwizzleX != 0) {
        DirectionsSwizzleX = other.DirectionsSwizzleX;
      }
      if (other.GenNormals != false) {
        GenNormals = other.GenNormals;
      }
      if (other.ProximityRaysPerSample != 0) {
        ProximityRaysPerSample = other.ProximityRaysPerSample;
      }
      if (other.GenHeights != false) {
        GenHeights = other.GenHeights;
      }
      if (other.RadiosityNormalsAttenConstant != 0F) {
        RadiosityNormalsAttenConstant = other.RadiosityNormalsAttenConstant;
      }
      if (other.GenProximity != false) {
        GenProximity = other.GenProximity;
      }
      if (other.GenPRT != false) {
        GenPRT = other.GenPRT;
      }
      if (other.CavityContrast != 0F) {
        CavityContrast = other.CavityContrast;
      }
      if (other.RadiosityNormalsCoordSys != 0) {
        RadiosityNormalsCoordSys = other.RadiosityNormalsCoordSys;
      }
      if (other.TransluJitter != false) {
        TransluJitter = other.TransluJitter;
      }
      if (other.AORaysPerSample != 0) {
        AORaysPerSample = other.AORaysPerSample;
      }
      if (other.BentBias != 0F) {
        BentBias = other.BentBias;
      }
      if (other.DiscardRayBackFacesHits != false) {
        DiscardRayBackFacesHits = other.DiscardRayBackFacesHits;
      }
      if (other.AOConeAngle != 0F) {
        AOConeAngle = other.AOConeAngle;
      }
      if (other.BentSwizzleY != 0) {
        BentSwizzleY = other.BentSwizzleY;
      }
      if (other.RadiosityNormalsBias != 0F) {
        RadiosityNormalsBias = other.RadiosityNormalsBias;
      }
      if (other.RadiosityNormalsContrast != 0F) {
        RadiosityNormalsContrast = other.RadiosityNormalsContrast;
      }
      if (other.CavitySteps != 0) {
        CavitySteps = other.CavitySteps;
      }
      if (other.AA != 0) {
        AA = other.AA;
      }
      if (other.BentSwizzleZ != 0) {
        BentSwizzleZ = other.BentSwizzleZ;
      }
      if (other.BucketSize != 0) {
        BucketSize = other.BucketSize;
      }
      if (other.CurvConeAngle != 0F) {
        CurvConeAngle = other.CurvConeAngle;
      }
      if (other.TransluDist != 0F) {
        TransluDist = other.TransluDist;
      }
      if (other.AOJitter != false) {
        AOJitter = other.AOJitter;
      }
      if (other.CurvBias != 0F) {
        CurvBias = other.CurvBias;
      }
      if (other.GenWireRays != false) {
        GenWireRays = other.GenWireRays;
      }
      if (other.CurvAlgorithm != 0) {
        CurvAlgorithm = other.CurvAlgorithm;
      }
      if (other.TransluDistribution != 0) {
        TransluDistribution = other.TransluDistribution;
      }
      if (other.AOAttenLinear != 0F) {
        AOAttenLinear = other.AOAttenLinear;
      }
      if (other.ProximityLimitRayDistance != false) {
        ProximityLimitRayDistance = other.ProximityLimitRayDistance;
      }
      if (other.GenRadiosityNormals != false) {
        GenRadiosityNormals = other.GenRadiosityNormals;
      }
      if (other.ProximityConeAngle != 0F) {
        ProximityConeAngle = other.ProximityConeAngle;
      }
      if (other.HeightTonemap != 0) {
        HeightTonemap = other.HeightTonemap;
      }
      if (other.GenCavity != false) {
        GenCavity = other.GenCavity;
      }
      if (other.BakeHighpolyVCols != false) {
        BakeHighpolyVCols = other.BakeHighpolyVCols;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (nMBackgroundColor_ == null) {
              nMBackgroundColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(nMBackgroundColor_);
            break;
          }
          case 18: {
            if (hMBackgroundColor_ == null) {
              hMBackgroundColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(hMBackgroundColor_);
            break;
          }
          case 26: {
            if (bakeHighpolyBaseTextureNoTexCol_ == null) {
              bakeHighpolyBaseTextureNoTexCol_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(bakeHighpolyBaseTextureNoTexCol_);
            break;
          }
          case 34: {
            if (bakeHighpolyBaseTextureBackgroundColor_ == null) {
              bakeHighpolyBaseTextureBackgroundColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(bakeHighpolyBaseTextureBackgroundColor_);
            break;
          }
          case 42: {
            if (renderWireframeBackgroundColor_ == null) {
              renderWireframeBackgroundColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(renderWireframeBackgroundColor_);
            break;
          }
          case 50: {
            if (renderWireframeCol_ == null) {
              renderWireframeCol_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(renderWireframeCol_);
            break;
          }
          case 58: {
            if (renderCWCol_ == null) {
              renderCWCol_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(renderCWCol_);
            break;
          }
          case 66: {
            if (renderSeamCol_ == null) {
              renderSeamCol_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(renderSeamCol_);
            break;
          }
          case 74: {
            if (renderRayFailsCol_ == null) {
              renderRayFailsCol_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(renderRayFailsCol_);
            break;
          }
          case 82: {
            if (aOOccludedColor_ == null) {
              aOOccludedColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(aOOccludedColor_);
            break;
          }
          case 90: {
            if (aOUnoccludedColor_ == null) {
              aOUnoccludedColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(aOUnoccludedColor_);
            break;
          }
          case 98: {
            if (aOBackgroundColor_ == null) {
              aOBackgroundColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(aOBackgroundColor_);
            break;
          }
          case 106: {
            if (bentBackgroundColor_ == null) {
              bentBackgroundColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(bentBackgroundColor_);
            break;
          }
          case 114: {
            if (pRTBackgroundColor_ == null) {
              pRTBackgroundColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(pRTBackgroundColor_);
            break;
          }
          case 122: {
            if (convexityBackgroundColor_ == null) {
              convexityBackgroundColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(convexityBackgroundColor_);
            break;
          }
          case 130: {
            if (thicknessBackgroundColor_ == null) {
              thicknessBackgroundColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(thicknessBackgroundColor_);
            break;
          }
          case 138: {
            if (proximityBackgroundColor_ == null) {
              proximityBackgroundColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(proximityBackgroundColor_);
            break;
          }
          case 146: {
            if (cavityBackgroundColor_ == null) {
              cavityBackgroundColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(cavityBackgroundColor_);
            break;
          }
          case 154: {
            if (vDMBackgroundColor_ == null) {
              vDMBackgroundColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(vDMBackgroundColor_);
            break;
          }
          case 162: {
            if (radNMBackgroundColor_ == null) {
              radNMBackgroundColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(radNMBackgroundColor_);
            break;
          }
          case 170: {
            if (curvBackgroundColor_ == null) {
              curvBackgroundColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(curvBackgroundColor_);
            break;
          }
          case 178: {
            if (derivNMBackgroundColor_ == null) {
              derivNMBackgroundColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(derivNMBackgroundColor_);
            break;
          }
          case 186: {
            if (transluBackgroundColor_ == null) {
              transluBackgroundColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(transluBackgroundColor_);
            break;
          }
          case 194: {
            if (bakeHighpolyVColsBackgroundCol_ == null) {
              bakeHighpolyVColsBackgroundCol_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(bakeHighpolyVColsBackgroundCol_);
            break;
          }
          case 200: {
            ClosestIfFails = input.ReadBool();
            break;
          }
          case 213: {
            DirectionsTonemapMax = input.ReadFloat();
            break;
          }
          case 216: {
            CurvMonocrome = input.ReadBool();
            break;
          }
          case 229: {
            AOBias = input.ReadFloat();
            break;
          }
          case 232: {
            BentTangentSpace = input.ReadBool();
            break;
          }
          case 240: {
            GenTranslu = input.ReadBool();
            break;
          }
          case 248: {
            aODistribution_ = (global::xnormal.tGenerateMaps.Types.eAODistribution) input.ReadEnum();
            break;
          }
          case 261: {
            PRTThreshold = input.ReadFloat();
            break;
          }
          case 269: {
            DirectionsTonemapMin = input.ReadFloat();
            break;
          }
          case 272: {
            curvDistribution_ = (global::xnormal.tGenerateMaps.Types.eAODistribution) input.ReadEnum();
            break;
          }
          case 280: {
            BentJitter = input.ReadBool();
            break;
          }
          case 288: {
            bentDistribution_ = (global::xnormal.tGenerateMaps.Types.eAODistribution) input.ReadEnum();
            break;
          }
          case 296: {
            BakeHighpolyBaseTexture = input.ReadBool();
            break;
          }
          case 304: {
            GenConvexity = input.ReadBool();
            break;
          }
          case 317: {
            RadiosityNormalsAttenLinear = input.ReadFloat();
            break;
          }
          case 320: {
            TransluRaysPerSample = input.ReadUInt32();
            break;
          }
          case 333: {
            CurvSearchDistance = input.ReadFloat();
            break;
          }
          case 336: {
            swizzleZ_ = (global::xnormal.tGenerateMaps.Types.eSwizzleComponent) input.ReadEnum();
            break;
          }
          case 349: {
            TransluBias = input.ReadFloat();
            break;
          }
          case 352: {
            PRTLimitRayDistance = input.ReadBool();
            break;
          }
          case 360: {
            GenBent = input.ReadBool();
            break;
          }
          case 368: {
            AOLimitRayDistance = input.ReadBool();
            break;
          }
          case 376: {
            CurvRaysPerSample = input.ReadUInt32();
            break;
          }
          case 384: {
            radiosityNormalsDistribution_ = (global::xnormal.tGenerateMaps.Types.eAODistribution) input.ReadEnum();
            break;
          }
          case 392: {
            RadiosityNormalsRaysPerSample = input.ReadUInt32();
            break;
          }
          case 400: {
            CurvJitter = input.ReadBool();
            break;
          }
          case 408: {
            TangentSpace = input.ReadBool();
            break;
          }
          case 416: {
            RadiosityNormalsAllowPureOcclusion = input.ReadBool();
            break;
          }
          case 424: {
            bentSwizzleX_ = (global::xnormal.tGenerateMaps.Types.eSwizzleComponent) input.ReadEnum();
            break;
          }
          case 432: {
            swizzleY_ = (global::xnormal.tGenerateMaps.Types.eSwizzleComponent) input.ReadEnum();
            break;
          }
          case 440: {
            GenCurv = input.ReadBool();
            break;
          }
          case 448: {
            PRTJitter = input.ReadBool();
            break;
          }
          case 461: {
            AOAttenCuadratic = input.ReadFloat();
            break;
          }
          case 469: {
            BentConeAngle = input.ReadFloat();
            break;
          }
          case 472: {
            swizzleX_ = (global::xnormal.tGenerateMaps.Types.eSwizzleComponent) input.ReadEnum();
            break;
          }
          case 480: {
            RenderRayFails = input.ReadBool();
            break;
          }
          case 493: {
            CavitySearchRadius = input.ReadFloat();
            break;
          }
          case 496: {
            RadiosityNormalsEncodeAO = input.ReadBool();
            break;
          }
          case 509: {
            TransluConeAngle = input.ReadFloat();
            break;
          }
          case 512: {
            BentRaysPerSample = input.ReadUInt32();
            break;
          }
          case 525: {
            ConvexityScale = input.ReadFloat();
            break;
          }
          case 533: {
            RadiosityNormalsConeAngle = input.ReadFloat();
            break;
          }
          case 538: {
            File = input.ReadString();
            break;
          }
          case 544: {
            GenDerivNM = input.ReadBool();
            break;
          }
          case 552: {
            BentLimitRayDistance = input.ReadBool();
            break;
          }
          case 565: {
            PRTBias = input.ReadFloat();
            break;
          }
          case 568: {
            RenderWireframe = input.ReadBool();
            break;
          }
          case 576: {
            PRTNormalize = input.ReadBool();
            break;
          }
          case 584: {
            GenAO = input.ReadBool();
            break;
          }
          case 597: {
            PRTConeAngle = input.ReadFloat();
            break;
          }
          case 600: {
            Height = input.ReadUInt32();
            break;
          }
          case 613: {
            RadiosityNormalsAttenCuadratic = input.ReadFloat();
            break;
          }
          case 616: {
            directionsTonemap_ = (global::xnormal.tGenerateMaps.Types.eHMNormalization) input.ReadEnum();
            break;
          }
          case 624: {
            DirectionsTS = input.ReadBool();
            break;
          }
          case 632: {
            PRTRaysPerSample = input.ReadUInt32();
            break;
          }
          case 640: {
            EdgePadding = input.ReadUInt32();
            break;
          }
          case 648: {
            directionsSwizzleZ_ = (global::xnormal.tGenerateMaps.Types.eSwizzleComponent) input.ReadEnum();
            break;
          }
          case 656: {
            AOAllowPureOccluded = input.ReadBool();
            break;
          }
          case 664: {
            AOIgnoreBackfaceHits = input.ReadBool();
            break;
          }
          case 672: {
            CavityRaysPerSample = input.ReadUInt32();
            break;
          }
          case 685: {
            AOAttenConstant = input.ReadFloat();
            break;
          }
          case 688: {
            CavityJitter = input.ReadBool();
            break;
          }
          case 701: {
            HeightTonemapMax = input.ReadFloat();
            break;
          }
          case 704: {
            GenDirections = input.ReadBool();
            break;
          }
          case 712: {
            RadiosityNormalsLimitRayDistance = input.ReadBool();
            break;
          }
          case 725: {
            HeightTonemapMin = input.ReadFloat();
            break;
          }
          case 728: {
            RadiosityNormalsJitter = input.ReadBool();
            break;
          }
          case 736: {
            directionsSwizzleY_ = (global::xnormal.tGenerateMaps.Types.eSwizzleComponent) input.ReadEnum();
            break;
          }
          case 744: {
            Width = input.ReadUInt32();
            break;
          }
          case 752: {
            BakeHighpolyBaseTextureDrawObjectIDIfNoTexture = input.ReadBool();
            break;
          }
          case 760: {
            Concavity = input.ReadBool();
            break;
          }
          case 768: {
            directionsSwizzleX_ = (global::xnormal.tGenerateMaps.Types.eSwizzleComponent) input.ReadEnum();
            break;
          }
          case 776: {
            GenNormals = input.ReadBool();
            break;
          }
          case 784: {
            ProximityRaysPerSample = input.ReadUInt32();
            break;
          }
          case 792: {
            GenHeights = input.ReadBool();
            break;
          }
          case 805: {
            RadiosityNormalsAttenConstant = input.ReadFloat();
            break;
          }
          case 808: {
            GenProximity = input.ReadBool();
            break;
          }
          case 816: {
            GenPRT = input.ReadBool();
            break;
          }
          case 829: {
            CavityContrast = input.ReadFloat();
            break;
          }
          case 832: {
            radiosityNormalsCoordSys_ = (global::xnormal.tGenerateMaps.Types.eRNMCoordSys) input.ReadEnum();
            break;
          }
          case 840: {
            TransluJitter = input.ReadBool();
            break;
          }
          case 848: {
            AORaysPerSample = input.ReadUInt32();
            break;
          }
          case 861: {
            BentBias = input.ReadFloat();
            break;
          }
          case 864: {
            DiscardRayBackFacesHits = input.ReadBool();
            break;
          }
          case 877: {
            AOConeAngle = input.ReadFloat();
            break;
          }
          case 880: {
            bentSwizzleY_ = (global::xnormal.tGenerateMaps.Types.eSwizzleComponent) input.ReadEnum();
            break;
          }
          case 893: {
            RadiosityNormalsBias = input.ReadFloat();
            break;
          }
          case 901: {
            RadiosityNormalsContrast = input.ReadFloat();
            break;
          }
          case 904: {
            CavitySteps = input.ReadUInt32();
            break;
          }
          case 912: {
            aA_ = (global::xnormal.tGenerateMaps.Types.eAntialiasing) input.ReadEnum();
            break;
          }
          case 920: {
            bentSwizzleZ_ = (global::xnormal.tGenerateMaps.Types.eSwizzleComponent) input.ReadEnum();
            break;
          }
          case 928: {
            BucketSize = input.ReadUInt32();
            break;
          }
          case 941: {
            CurvConeAngle = input.ReadFloat();
            break;
          }
          case 949: {
            TransluDist = input.ReadFloat();
            break;
          }
          case 952: {
            AOJitter = input.ReadBool();
            break;
          }
          case 965: {
            CurvBias = input.ReadFloat();
            break;
          }
          case 968: {
            GenWireRays = input.ReadBool();
            break;
          }
          case 976: {
            curvAlgorithm_ = (global::xnormal.tGenerateMaps.Types.eCurvAlgorithm) input.ReadEnum();
            break;
          }
          case 984: {
            transluDistribution_ = (global::xnormal.tGenerateMaps.Types.eAODistribution) input.ReadEnum();
            break;
          }
          case 997: {
            AOAttenLinear = input.ReadFloat();
            break;
          }
          case 1000: {
            ProximityLimitRayDistance = input.ReadBool();
            break;
          }
          case 1008: {
            GenRadiosityNormals = input.ReadBool();
            break;
          }
          case 1021: {
            ProximityConeAngle = input.ReadFloat();
            break;
          }
          case 1024: {
            heightTonemap_ = (global::xnormal.tGenerateMaps.Types.eHMNormalization) input.ReadEnum();
            break;
          }
          case 1032: {
            GenCavity = input.ReadBool();
            break;
          }
          case 1040: {
            BakeHighpolyVCols = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the tGenerateMaps message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum eAODistribution {
        [pbr::OriginalName("eAODistribution_Cosine")] Cosine = 0,
        [pbr::OriginalName("eAODistribution_CosineSq")] CosineSq = 1,
        [pbr::OriginalName("eAODistribution_Uniform")] Uniform = 2,
      }

      public enum eSwizzleComponent {
        [pbr::OriginalName("eSwizzleComponent_X0")] X0 = 0,
        [pbr::OriginalName("eSwizzleComponent_X1")] X1 = 1,
        [pbr::OriginalName("eSwizzleComponent_Y0")] Y0 = 2,
        [pbr::OriginalName("eSwizzleComponent_Y1")] Y1 = 3,
        [pbr::OriginalName("eSwizzleComponent_Z0")] Z0 = 4,
        [pbr::OriginalName("eSwizzleComponent_Z1")] Z1 = 5,
      }

      public enum eHMNormalization {
        [pbr::OriginalName("eHMNormalization_Interactive")] Interactive = 0,
        [pbr::OriginalName("eHMNormalization_Manual")] Manual = 1,
        [pbr::OriginalName("eHMNormalization_Raw")] Raw = 2,
      }

      public enum eRNMCoordSys {
        [pbr::OriginalName("eRNMCoordSys_AliB")] AliB = 0,
        [pbr::OriginalName("eRNMCoordSys_Direct3D")] Direct3D = 1,
        [pbr::OriginalName("eRNMCoordSys_OpenGL")] OpenGl = 2,
      }

      public enum eAntialiasing {
        [pbr::OriginalName("eAntialiasing_1")] _1 = 0,
        [pbr::OriginalName("eAntialiasing_2")] _2 = 1,
        [pbr::OriginalName("eAntialiasing_4")] _4 = 2,
      }

      public enum eCurvAlgorithm {
        [pbr::OriginalName("eCurvAlgorithm_Average")] Average = 0,
        [pbr::OriginalName("eCurvAlgorithm_Gaussian")] Gaussian = 1,
      }

    }
    #endregion

  }

  public sealed partial class tHighPolyModel : pb::IMessage<tHighPolyModel> {
    private static readonly pb::MessageParser<tHighPolyModel> _parser = new pb::MessageParser<tHighPolyModel>(() => new tHighPolyModel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<tHighPolyModel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::xnormal.XnormalReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tHighPolyModel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tHighPolyModel(tHighPolyModel other) : this() {
      mesh_ = other.mesh_.Clone();
      baseTex_ = other.baseTex_;
      defaultMeshScale_ = other.defaultMeshScale_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tHighPolyModel Clone() {
      return new tHighPolyModel(this);
    }

    /// <summary>Field number for the "Mesh" field.</summary>
    public const int MeshFieldNumber = 1;
    private static readonly pb::FieldCodec<global::xnormal.tHighPolyMesh> _repeated_mesh_codec
        = pb::FieldCodec.ForMessage(10, global::xnormal.tHighPolyMesh.Parser);
    private readonly pbc::RepeatedField<global::xnormal.tHighPolyMesh> mesh_ = new pbc::RepeatedField<global::xnormal.tHighPolyMesh>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::xnormal.tHighPolyMesh> Mesh {
      get { return mesh_; }
    }

    /// <summary>Field number for the "BaseTex" field.</summary>
    public const int BaseTexFieldNumber = 2;
    private string baseTex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseTex {
      get { return baseTex_; }
      set {
        baseTex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DefaultMeshScale" field.</summary>
    public const int DefaultMeshScaleFieldNumber = 3;
    private float defaultMeshScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefaultMeshScale {
      get { return defaultMeshScale_; }
      set {
        defaultMeshScale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as tHighPolyModel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(tHighPolyModel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mesh_.Equals(other.mesh_)) return false;
      if (BaseTex != other.BaseTex) return false;
      if (DefaultMeshScale != other.DefaultMeshScale) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mesh_.GetHashCode();
      if (BaseTex.Length != 0) hash ^= BaseTex.GetHashCode();
      if (DefaultMeshScale != 0F) hash ^= DefaultMeshScale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mesh_.WriteTo(output, _repeated_mesh_codec);
      if (BaseTex.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BaseTex);
      }
      if (DefaultMeshScale != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DefaultMeshScale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mesh_.CalculateSize(_repeated_mesh_codec);
      if (BaseTex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseTex);
      }
      if (DefaultMeshScale != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(tHighPolyModel other) {
      if (other == null) {
        return;
      }
      mesh_.Add(other.mesh_);
      if (other.BaseTex.Length != 0) {
        BaseTex = other.BaseTex;
      }
      if (other.DefaultMeshScale != 0F) {
        DefaultMeshScale = other.DefaultMeshScale;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mesh_.AddEntriesFrom(input, _repeated_mesh_codec);
            break;
          }
          case 18: {
            BaseTex = input.ReadString();
            break;
          }
          case 29: {
            DefaultMeshScale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class tLowPolyModel : pb::IMessage<tLowPolyModel> {
    private static readonly pb::MessageParser<tLowPolyModel> _parser = new pb::MessageParser<tLowPolyModel>(() => new tLowPolyModel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<tLowPolyModel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::xnormal.XnormalReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tLowPolyModel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tLowPolyModel(tLowPolyModel other) : this() {
      mesh_ = other.mesh_.Clone();
      defaultMeshScale_ = other.defaultMeshScale_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tLowPolyModel Clone() {
      return new tLowPolyModel(this);
    }

    /// <summary>Field number for the "Mesh" field.</summary>
    public const int MeshFieldNumber = 1;
    private static readonly pb::FieldCodec<global::xnormal.tLowPolyMesh> _repeated_mesh_codec
        = pb::FieldCodec.ForMessage(10, global::xnormal.tLowPolyMesh.Parser);
    private readonly pbc::RepeatedField<global::xnormal.tLowPolyMesh> mesh_ = new pbc::RepeatedField<global::xnormal.tLowPolyMesh>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::xnormal.tLowPolyMesh> Mesh {
      get { return mesh_; }
    }

    /// <summary>Field number for the "DefaultMeshScale" field.</summary>
    public const int DefaultMeshScaleFieldNumber = 2;
    private float defaultMeshScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefaultMeshScale {
      get { return defaultMeshScale_; }
      set {
        defaultMeshScale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as tLowPolyModel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(tLowPolyModel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!mesh_.Equals(other.mesh_)) return false;
      if (DefaultMeshScale != other.DefaultMeshScale) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= mesh_.GetHashCode();
      if (DefaultMeshScale != 0F) hash ^= DefaultMeshScale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      mesh_.WriteTo(output, _repeated_mesh_codec);
      if (DefaultMeshScale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(DefaultMeshScale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += mesh_.CalculateSize(_repeated_mesh_codec);
      if (DefaultMeshScale != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(tLowPolyModel other) {
      if (other == null) {
        return;
      }
      mesh_.Add(other.mesh_);
      if (other.DefaultMeshScale != 0F) {
        DefaultMeshScale = other.DefaultMeshScale;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            mesh_.AddEntriesFrom(input, _repeated_mesh_codec);
            break;
          }
          case 21: {
            DefaultMeshScale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class tViewer3D : pb::IMessage<tViewer3D> {
    private static readonly pb::MessageParser<tViewer3D> _parser = new pb::MessageParser<tViewer3D>(() => new tViewer3D());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<tViewer3D> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::xnormal.XnormalReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tViewer3D() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tViewer3D(tViewer3D other) : this() {
      LightAmbientColor = other.lightAmbientColor_ != null ? other.LightAmbientColor.Clone() : null;
      LightDiffuseColor = other.lightDiffuseColor_ != null ? other.LightDiffuseColor.Clone() : null;
      LightSpecularColor = other.lightSpecularColor_ != null ? other.LightSpecularColor.Clone() : null;
      LightSecondaryColor = other.lightSecondaryColor_ != null ? other.LightSecondaryColor.Clone() : null;
      LightTertiaryColor = other.lightTertiaryColor_ != null ? other.LightTertiaryColor.Clone() : null;
      BackgroundColor = other.backgroundColor_ != null ? other.BackgroundColor.Clone() : null;
      GridColor = other.gridColor_ != null ? other.GridColor.Clone() : null;
      CageColor = other.cageColor_ != null ? other.CageColor.Clone() : null;
      CameraRotation = other.cameraRotation_ != null ? other.CameraRotation.Clone() : null;
      CameraPosition = other.cameraPosition_ != null ? other.CameraPosition.Clone() : null;
      LightPosition = other.lightPosition_ != null ? other.LightPosition.Clone() : null;
      axisScl_ = other.axisScl_;
      xemakosExample_ = other.xemakosExample_;
      showWireframe_ = other.showWireframe_;
      cageOpacity_ = other.cageOpacity_;
      diffuseGIIntensity_ = other.diffuseGIIntensity_;
      showAO_ = other.showAO_;
      sSAOContrast_ = other.sSAOContrast_;
      shadowArea_ = other.shadowArea_;
      lightIndiretIntensity_ = other.lightIndiretIntensity_;
      showHighpolys_ = other.showHighpolys_;
      showStarfield_ = other.showStarfield_;
      showBlockers_ = other.showBlockers_;
      hDRThreshold_ = other.hDRThreshold_;
      sSAOBright_ = other.sSAOBright_;
      sSAOBlurRadius_ = other.sSAOBlurRadius_;
      showGrid_ = other.showGrid_;
      parallaxStrength_ = other.parallaxStrength_;
      sSAOAtten_ = other.sSAOAtten_;
      cameraOrbitDistance_ = other.cameraOrbitDistance_;
      useGlow_ = other.useGlow_;
      sSAOEnabled_ = other.sSAOEnabled_;
      shadowBias_ = other.shadowBias_;
      sSAORadius_ = other.sSAORadius_;
      lightIntensity_ = other.lightIntensity_;
      exposure_ = other.exposure_;
      cameraOrbitAutoCenter_ = other.cameraOrbitAutoCenter_;
      castShadows_ = other.castShadows_;
      showNormals_ = other.showNormals_;
      maxTessellationLevel_ = other.maxTessellationLevel_;
      showTangents_ = other.showTangents_;
      glowIntensity_ = other.glowIntensity_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tViewer3D Clone() {
      return new tViewer3D(this);
    }

    /// <summary>Field number for the "LightAmbientColor" field.</summary>
    public const int LightAmbientColorFieldNumber = 1;
    private global::xnormal.tRGB8 lightAmbientColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 LightAmbientColor {
      get { return lightAmbientColor_; }
      set {
        lightAmbientColor_ = value;
      }
    }

    /// <summary>Field number for the "LightDiffuseColor" field.</summary>
    public const int LightDiffuseColorFieldNumber = 2;
    private global::xnormal.tRGB8 lightDiffuseColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 LightDiffuseColor {
      get { return lightDiffuseColor_; }
      set {
        lightDiffuseColor_ = value;
      }
    }

    /// <summary>Field number for the "LightSpecularColor" field.</summary>
    public const int LightSpecularColorFieldNumber = 3;
    private global::xnormal.tRGB8 lightSpecularColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 LightSpecularColor {
      get { return lightSpecularColor_; }
      set {
        lightSpecularColor_ = value;
      }
    }

    /// <summary>Field number for the "LightSecondaryColor" field.</summary>
    public const int LightSecondaryColorFieldNumber = 4;
    private global::xnormal.tRGB8 lightSecondaryColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 LightSecondaryColor {
      get { return lightSecondaryColor_; }
      set {
        lightSecondaryColor_ = value;
      }
    }

    /// <summary>Field number for the "LightTertiaryColor" field.</summary>
    public const int LightTertiaryColorFieldNumber = 5;
    private global::xnormal.tRGB8 lightTertiaryColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 LightTertiaryColor {
      get { return lightTertiaryColor_; }
      set {
        lightTertiaryColor_ = value;
      }
    }

    /// <summary>Field number for the "BackgroundColor" field.</summary>
    public const int BackgroundColorFieldNumber = 6;
    private global::xnormal.tRGB8 backgroundColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 BackgroundColor {
      get { return backgroundColor_; }
      set {
        backgroundColor_ = value;
      }
    }

    /// <summary>Field number for the "GridColor" field.</summary>
    public const int GridColorFieldNumber = 7;
    private global::xnormal.tRGB8 gridColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 GridColor {
      get { return gridColor_; }
      set {
        gridColor_ = value;
      }
    }

    /// <summary>Field number for the "CageColor" field.</summary>
    public const int CageColorFieldNumber = 8;
    private global::xnormal.tRGB8 cageColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tRGB8 CageColor {
      get { return cageColor_; }
      set {
        cageColor_ = value;
      }
    }

    /// <summary>Field number for the "CameraRotation" field.</summary>
    public const int CameraRotationFieldNumber = 9;
    private global::xnormal.tMatrix cameraRotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tMatrix CameraRotation {
      get { return cameraRotation_; }
      set {
        cameraRotation_ = value;
      }
    }

    /// <summary>Field number for the "CameraPosition" field.</summary>
    public const int CameraPositionFieldNumber = 10;
    private global::xnormal.tVector3 cameraPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tVector3 CameraPosition {
      get { return cameraPosition_; }
      set {
        cameraPosition_ = value;
      }
    }

    /// <summary>Field number for the "LightPosition" field.</summary>
    public const int LightPositionFieldNumber = 11;
    private global::xnormal.tVector3 lightPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tVector3 LightPosition {
      get { return lightPosition_; }
      set {
        lightPosition_ = value;
      }
    }

    /// <summary>Field number for the "AxisScl" field.</summary>
    public const int AxisSclFieldNumber = 12;
    private float axisScl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AxisScl {
      get { return axisScl_; }
      set {
        axisScl_ = value;
      }
    }

    /// <summary>Field number for the "XemakosExample" field.</summary>
    public const int XemakosExampleFieldNumber = 13;
    private bool xemakosExample_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool XemakosExample {
      get { return xemakosExample_; }
      set {
        xemakosExample_ = value;
      }
    }

    /// <summary>Field number for the "ShowWireframe" field.</summary>
    public const int ShowWireframeFieldNumber = 14;
    private bool showWireframe_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowWireframe {
      get { return showWireframe_; }
      set {
        showWireframe_ = value;
      }
    }

    /// <summary>Field number for the "CageOpacity" field.</summary>
    public const int CageOpacityFieldNumber = 15;
    private float cageOpacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CageOpacity {
      get { return cageOpacity_; }
      set {
        cageOpacity_ = value;
      }
    }

    /// <summary>Field number for the "DiffuseGIIntensity" field.</summary>
    public const int DiffuseGIIntensityFieldNumber = 16;
    private float diffuseGIIntensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DiffuseGIIntensity {
      get { return diffuseGIIntensity_; }
      set {
        diffuseGIIntensity_ = value;
      }
    }

    /// <summary>Field number for the "ShowAO" field.</summary>
    public const int ShowAOFieldNumber = 17;
    private bool showAO_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowAO {
      get { return showAO_; }
      set {
        showAO_ = value;
      }
    }

    /// <summary>Field number for the "SSAOContrast" field.</summary>
    public const int SSAOContrastFieldNumber = 18;
    private float sSAOContrast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SSAOContrast {
      get { return sSAOContrast_; }
      set {
        sSAOContrast_ = value;
      }
    }

    /// <summary>Field number for the "ShadowArea" field.</summary>
    public const int ShadowAreaFieldNumber = 19;
    private float shadowArea_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShadowArea {
      get { return shadowArea_; }
      set {
        shadowArea_ = value;
      }
    }

    /// <summary>Field number for the "LightIndiretIntensity" field.</summary>
    public const int LightIndiretIntensityFieldNumber = 20;
    private float lightIndiretIntensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LightIndiretIntensity {
      get { return lightIndiretIntensity_; }
      set {
        lightIndiretIntensity_ = value;
      }
    }

    /// <summary>Field number for the "ShowHighpolys" field.</summary>
    public const int ShowHighpolysFieldNumber = 21;
    private bool showHighpolys_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowHighpolys {
      get { return showHighpolys_; }
      set {
        showHighpolys_ = value;
      }
    }

    /// <summary>Field number for the "ShowStarfield" field.</summary>
    public const int ShowStarfieldFieldNumber = 22;
    private bool showStarfield_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowStarfield {
      get { return showStarfield_; }
      set {
        showStarfield_ = value;
      }
    }

    /// <summary>Field number for the "ShowBlockers" field.</summary>
    public const int ShowBlockersFieldNumber = 23;
    private bool showBlockers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowBlockers {
      get { return showBlockers_; }
      set {
        showBlockers_ = value;
      }
    }

    /// <summary>Field number for the "HDRThreshold" field.</summary>
    public const int HDRThresholdFieldNumber = 24;
    private float hDRThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HDRThreshold {
      get { return hDRThreshold_; }
      set {
        hDRThreshold_ = value;
      }
    }

    /// <summary>Field number for the "SSAOBright" field.</summary>
    public const int SSAOBrightFieldNumber = 25;
    private float sSAOBright_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SSAOBright {
      get { return sSAOBright_; }
      set {
        sSAOBright_ = value;
      }
    }

    /// <summary>Field number for the "SSAOBlurRadius" field.</summary>
    public const int SSAOBlurRadiusFieldNumber = 26;
    private float sSAOBlurRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SSAOBlurRadius {
      get { return sSAOBlurRadius_; }
      set {
        sSAOBlurRadius_ = value;
      }
    }

    /// <summary>Field number for the "ShowGrid" field.</summary>
    public const int ShowGridFieldNumber = 27;
    private bool showGrid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowGrid {
      get { return showGrid_; }
      set {
        showGrid_ = value;
      }
    }

    /// <summary>Field number for the "ParallaxStrength" field.</summary>
    public const int ParallaxStrengthFieldNumber = 28;
    private float parallaxStrength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ParallaxStrength {
      get { return parallaxStrength_; }
      set {
        parallaxStrength_ = value;
      }
    }

    /// <summary>Field number for the "SSAOAtten" field.</summary>
    public const int SSAOAttenFieldNumber = 29;
    private float sSAOAtten_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SSAOAtten {
      get { return sSAOAtten_; }
      set {
        sSAOAtten_ = value;
      }
    }

    /// <summary>Field number for the "CameraOrbitDistance" field.</summary>
    public const int CameraOrbitDistanceFieldNumber = 30;
    private float cameraOrbitDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CameraOrbitDistance {
      get { return cameraOrbitDistance_; }
      set {
        cameraOrbitDistance_ = value;
      }
    }

    /// <summary>Field number for the "UseGlow" field.</summary>
    public const int UseGlowFieldNumber = 31;
    private bool useGlow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseGlow {
      get { return useGlow_; }
      set {
        useGlow_ = value;
      }
    }

    /// <summary>Field number for the "SSAOEnabled" field.</summary>
    public const int SSAOEnabledFieldNumber = 32;
    private bool sSAOEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SSAOEnabled {
      get { return sSAOEnabled_; }
      set {
        sSAOEnabled_ = value;
      }
    }

    /// <summary>Field number for the "ShadowBias" field.</summary>
    public const int ShadowBiasFieldNumber = 33;
    private float shadowBias_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShadowBias {
      get { return shadowBias_; }
      set {
        shadowBias_ = value;
      }
    }

    /// <summary>Field number for the "SSAORadius" field.</summary>
    public const int SSAORadiusFieldNumber = 34;
    private float sSAORadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SSAORadius {
      get { return sSAORadius_; }
      set {
        sSAORadius_ = value;
      }
    }

    /// <summary>Field number for the "LightIntensity" field.</summary>
    public const int LightIntensityFieldNumber = 35;
    private float lightIntensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LightIntensity {
      get { return lightIntensity_; }
      set {
        lightIntensity_ = value;
      }
    }

    /// <summary>Field number for the "Exposure" field.</summary>
    public const int ExposureFieldNumber = 36;
    private float exposure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Exposure {
      get { return exposure_; }
      set {
        exposure_ = value;
      }
    }

    /// <summary>Field number for the "CameraOrbitAutoCenter" field.</summary>
    public const int CameraOrbitAutoCenterFieldNumber = 37;
    private bool cameraOrbitAutoCenter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CameraOrbitAutoCenter {
      get { return cameraOrbitAutoCenter_; }
      set {
        cameraOrbitAutoCenter_ = value;
      }
    }

    /// <summary>Field number for the "CastShadows" field.</summary>
    public const int CastShadowsFieldNumber = 38;
    private bool castShadows_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CastShadows {
      get { return castShadows_; }
      set {
        castShadows_ = value;
      }
    }

    /// <summary>Field number for the "ShowNormals" field.</summary>
    public const int ShowNormalsFieldNumber = 39;
    private bool showNormals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowNormals {
      get { return showNormals_; }
      set {
        showNormals_ = value;
      }
    }

    /// <summary>Field number for the "MaxTessellationLevel" field.</summary>
    public const int MaxTessellationLevelFieldNumber = 40;
    private long maxTessellationLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxTessellationLevel {
      get { return maxTessellationLevel_; }
      set {
        maxTessellationLevel_ = value;
      }
    }

    /// <summary>Field number for the "ShowTangents" field.</summary>
    public const int ShowTangentsFieldNumber = 41;
    private bool showTangents_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowTangents {
      get { return showTangents_; }
      set {
        showTangents_ = value;
      }
    }

    /// <summary>Field number for the "GlowIntensity" field.</summary>
    public const int GlowIntensityFieldNumber = 42;
    private float glowIntensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GlowIntensity {
      get { return glowIntensity_; }
      set {
        glowIntensity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as tViewer3D);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(tViewer3D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(LightAmbientColor, other.LightAmbientColor)) return false;
      if (!object.Equals(LightDiffuseColor, other.LightDiffuseColor)) return false;
      if (!object.Equals(LightSpecularColor, other.LightSpecularColor)) return false;
      if (!object.Equals(LightSecondaryColor, other.LightSecondaryColor)) return false;
      if (!object.Equals(LightTertiaryColor, other.LightTertiaryColor)) return false;
      if (!object.Equals(BackgroundColor, other.BackgroundColor)) return false;
      if (!object.Equals(GridColor, other.GridColor)) return false;
      if (!object.Equals(CageColor, other.CageColor)) return false;
      if (!object.Equals(CameraRotation, other.CameraRotation)) return false;
      if (!object.Equals(CameraPosition, other.CameraPosition)) return false;
      if (!object.Equals(LightPosition, other.LightPosition)) return false;
      if (AxisScl != other.AxisScl) return false;
      if (XemakosExample != other.XemakosExample) return false;
      if (ShowWireframe != other.ShowWireframe) return false;
      if (CageOpacity != other.CageOpacity) return false;
      if (DiffuseGIIntensity != other.DiffuseGIIntensity) return false;
      if (ShowAO != other.ShowAO) return false;
      if (SSAOContrast != other.SSAOContrast) return false;
      if (ShadowArea != other.ShadowArea) return false;
      if (LightIndiretIntensity != other.LightIndiretIntensity) return false;
      if (ShowHighpolys != other.ShowHighpolys) return false;
      if (ShowStarfield != other.ShowStarfield) return false;
      if (ShowBlockers != other.ShowBlockers) return false;
      if (HDRThreshold != other.HDRThreshold) return false;
      if (SSAOBright != other.SSAOBright) return false;
      if (SSAOBlurRadius != other.SSAOBlurRadius) return false;
      if (ShowGrid != other.ShowGrid) return false;
      if (ParallaxStrength != other.ParallaxStrength) return false;
      if (SSAOAtten != other.SSAOAtten) return false;
      if (CameraOrbitDistance != other.CameraOrbitDistance) return false;
      if (UseGlow != other.UseGlow) return false;
      if (SSAOEnabled != other.SSAOEnabled) return false;
      if (ShadowBias != other.ShadowBias) return false;
      if (SSAORadius != other.SSAORadius) return false;
      if (LightIntensity != other.LightIntensity) return false;
      if (Exposure != other.Exposure) return false;
      if (CameraOrbitAutoCenter != other.CameraOrbitAutoCenter) return false;
      if (CastShadows != other.CastShadows) return false;
      if (ShowNormals != other.ShowNormals) return false;
      if (MaxTessellationLevel != other.MaxTessellationLevel) return false;
      if (ShowTangents != other.ShowTangents) return false;
      if (GlowIntensity != other.GlowIntensity) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (lightAmbientColor_ != null) hash ^= LightAmbientColor.GetHashCode();
      if (lightDiffuseColor_ != null) hash ^= LightDiffuseColor.GetHashCode();
      if (lightSpecularColor_ != null) hash ^= LightSpecularColor.GetHashCode();
      if (lightSecondaryColor_ != null) hash ^= LightSecondaryColor.GetHashCode();
      if (lightTertiaryColor_ != null) hash ^= LightTertiaryColor.GetHashCode();
      if (backgroundColor_ != null) hash ^= BackgroundColor.GetHashCode();
      if (gridColor_ != null) hash ^= GridColor.GetHashCode();
      if (cageColor_ != null) hash ^= CageColor.GetHashCode();
      if (cameraRotation_ != null) hash ^= CameraRotation.GetHashCode();
      if (cameraPosition_ != null) hash ^= CameraPosition.GetHashCode();
      if (lightPosition_ != null) hash ^= LightPosition.GetHashCode();
      if (AxisScl != 0F) hash ^= AxisScl.GetHashCode();
      if (XemakosExample != false) hash ^= XemakosExample.GetHashCode();
      if (ShowWireframe != false) hash ^= ShowWireframe.GetHashCode();
      if (CageOpacity != 0F) hash ^= CageOpacity.GetHashCode();
      if (DiffuseGIIntensity != 0F) hash ^= DiffuseGIIntensity.GetHashCode();
      if (ShowAO != false) hash ^= ShowAO.GetHashCode();
      if (SSAOContrast != 0F) hash ^= SSAOContrast.GetHashCode();
      if (ShadowArea != 0F) hash ^= ShadowArea.GetHashCode();
      if (LightIndiretIntensity != 0F) hash ^= LightIndiretIntensity.GetHashCode();
      if (ShowHighpolys != false) hash ^= ShowHighpolys.GetHashCode();
      if (ShowStarfield != false) hash ^= ShowStarfield.GetHashCode();
      if (ShowBlockers != false) hash ^= ShowBlockers.GetHashCode();
      if (HDRThreshold != 0F) hash ^= HDRThreshold.GetHashCode();
      if (SSAOBright != 0F) hash ^= SSAOBright.GetHashCode();
      if (SSAOBlurRadius != 0F) hash ^= SSAOBlurRadius.GetHashCode();
      if (ShowGrid != false) hash ^= ShowGrid.GetHashCode();
      if (ParallaxStrength != 0F) hash ^= ParallaxStrength.GetHashCode();
      if (SSAOAtten != 0F) hash ^= SSAOAtten.GetHashCode();
      if (CameraOrbitDistance != 0F) hash ^= CameraOrbitDistance.GetHashCode();
      if (UseGlow != false) hash ^= UseGlow.GetHashCode();
      if (SSAOEnabled != false) hash ^= SSAOEnabled.GetHashCode();
      if (ShadowBias != 0F) hash ^= ShadowBias.GetHashCode();
      if (SSAORadius != 0F) hash ^= SSAORadius.GetHashCode();
      if (LightIntensity != 0F) hash ^= LightIntensity.GetHashCode();
      if (Exposure != 0F) hash ^= Exposure.GetHashCode();
      if (CameraOrbitAutoCenter != false) hash ^= CameraOrbitAutoCenter.GetHashCode();
      if (CastShadows != false) hash ^= CastShadows.GetHashCode();
      if (ShowNormals != false) hash ^= ShowNormals.GetHashCode();
      if (MaxTessellationLevel != 0L) hash ^= MaxTessellationLevel.GetHashCode();
      if (ShowTangents != false) hash ^= ShowTangents.GetHashCode();
      if (GlowIntensity != 0F) hash ^= GlowIntensity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (lightAmbientColor_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(LightAmbientColor);
      }
      if (lightDiffuseColor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LightDiffuseColor);
      }
      if (lightSpecularColor_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LightSpecularColor);
      }
      if (lightSecondaryColor_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LightSecondaryColor);
      }
      if (lightTertiaryColor_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(LightTertiaryColor);
      }
      if (backgroundColor_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BackgroundColor);
      }
      if (gridColor_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(GridColor);
      }
      if (cageColor_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CageColor);
      }
      if (cameraRotation_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CameraRotation);
      }
      if (cameraPosition_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(CameraPosition);
      }
      if (lightPosition_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(LightPosition);
      }
      if (AxisScl != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(AxisScl);
      }
      if (XemakosExample != false) {
        output.WriteRawTag(104);
        output.WriteBool(XemakosExample);
      }
      if (ShowWireframe != false) {
        output.WriteRawTag(112);
        output.WriteBool(ShowWireframe);
      }
      if (CageOpacity != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(CageOpacity);
      }
      if (DiffuseGIIntensity != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(DiffuseGIIntensity);
      }
      if (ShowAO != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(ShowAO);
      }
      if (SSAOContrast != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(SSAOContrast);
      }
      if (ShadowArea != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(ShadowArea);
      }
      if (LightIndiretIntensity != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(LightIndiretIntensity);
      }
      if (ShowHighpolys != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(ShowHighpolys);
      }
      if (ShowStarfield != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(ShowStarfield);
      }
      if (ShowBlockers != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(ShowBlockers);
      }
      if (HDRThreshold != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(HDRThreshold);
      }
      if (SSAOBright != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(SSAOBright);
      }
      if (SSAOBlurRadius != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(SSAOBlurRadius);
      }
      if (ShowGrid != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(ShowGrid);
      }
      if (ParallaxStrength != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(ParallaxStrength);
      }
      if (SSAOAtten != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(SSAOAtten);
      }
      if (CameraOrbitDistance != 0F) {
        output.WriteRawTag(245, 1);
        output.WriteFloat(CameraOrbitDistance);
      }
      if (UseGlow != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(UseGlow);
      }
      if (SSAOEnabled != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(SSAOEnabled);
      }
      if (ShadowBias != 0F) {
        output.WriteRawTag(141, 2);
        output.WriteFloat(ShadowBias);
      }
      if (SSAORadius != 0F) {
        output.WriteRawTag(149, 2);
        output.WriteFloat(SSAORadius);
      }
      if (LightIntensity != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(LightIntensity);
      }
      if (Exposure != 0F) {
        output.WriteRawTag(165, 2);
        output.WriteFloat(Exposure);
      }
      if (CameraOrbitAutoCenter != false) {
        output.WriteRawTag(168, 2);
        output.WriteBool(CameraOrbitAutoCenter);
      }
      if (CastShadows != false) {
        output.WriteRawTag(176, 2);
        output.WriteBool(CastShadows);
      }
      if (ShowNormals != false) {
        output.WriteRawTag(184, 2);
        output.WriteBool(ShowNormals);
      }
      if (MaxTessellationLevel != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(MaxTessellationLevel);
      }
      if (ShowTangents != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(ShowTangents);
      }
      if (GlowIntensity != 0F) {
        output.WriteRawTag(213, 2);
        output.WriteFloat(GlowIntensity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (lightAmbientColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LightAmbientColor);
      }
      if (lightDiffuseColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LightDiffuseColor);
      }
      if (lightSpecularColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LightSpecularColor);
      }
      if (lightSecondaryColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LightSecondaryColor);
      }
      if (lightTertiaryColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LightTertiaryColor);
      }
      if (backgroundColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackgroundColor);
      }
      if (gridColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GridColor);
      }
      if (cageColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CageColor);
      }
      if (cameraRotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CameraRotation);
      }
      if (cameraPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CameraPosition);
      }
      if (lightPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LightPosition);
      }
      if (AxisScl != 0F) {
        size += 1 + 4;
      }
      if (XemakosExample != false) {
        size += 1 + 1;
      }
      if (ShowWireframe != false) {
        size += 1 + 1;
      }
      if (CageOpacity != 0F) {
        size += 1 + 4;
      }
      if (DiffuseGIIntensity != 0F) {
        size += 2 + 4;
      }
      if (ShowAO != false) {
        size += 2 + 1;
      }
      if (SSAOContrast != 0F) {
        size += 2 + 4;
      }
      if (ShadowArea != 0F) {
        size += 2 + 4;
      }
      if (LightIndiretIntensity != 0F) {
        size += 2 + 4;
      }
      if (ShowHighpolys != false) {
        size += 2 + 1;
      }
      if (ShowStarfield != false) {
        size += 2 + 1;
      }
      if (ShowBlockers != false) {
        size += 2 + 1;
      }
      if (HDRThreshold != 0F) {
        size += 2 + 4;
      }
      if (SSAOBright != 0F) {
        size += 2 + 4;
      }
      if (SSAOBlurRadius != 0F) {
        size += 2 + 4;
      }
      if (ShowGrid != false) {
        size += 2 + 1;
      }
      if (ParallaxStrength != 0F) {
        size += 2 + 4;
      }
      if (SSAOAtten != 0F) {
        size += 2 + 4;
      }
      if (CameraOrbitDistance != 0F) {
        size += 2 + 4;
      }
      if (UseGlow != false) {
        size += 2 + 1;
      }
      if (SSAOEnabled != false) {
        size += 2 + 1;
      }
      if (ShadowBias != 0F) {
        size += 2 + 4;
      }
      if (SSAORadius != 0F) {
        size += 2 + 4;
      }
      if (LightIntensity != 0F) {
        size += 2 + 4;
      }
      if (Exposure != 0F) {
        size += 2 + 4;
      }
      if (CameraOrbitAutoCenter != false) {
        size += 2 + 1;
      }
      if (CastShadows != false) {
        size += 2 + 1;
      }
      if (ShowNormals != false) {
        size += 2 + 1;
      }
      if (MaxTessellationLevel != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MaxTessellationLevel);
      }
      if (ShowTangents != false) {
        size += 2 + 1;
      }
      if (GlowIntensity != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(tViewer3D other) {
      if (other == null) {
        return;
      }
      if (other.lightAmbientColor_ != null) {
        if (lightAmbientColor_ == null) {
          lightAmbientColor_ = new global::xnormal.tRGB8();
        }
        LightAmbientColor.MergeFrom(other.LightAmbientColor);
      }
      if (other.lightDiffuseColor_ != null) {
        if (lightDiffuseColor_ == null) {
          lightDiffuseColor_ = new global::xnormal.tRGB8();
        }
        LightDiffuseColor.MergeFrom(other.LightDiffuseColor);
      }
      if (other.lightSpecularColor_ != null) {
        if (lightSpecularColor_ == null) {
          lightSpecularColor_ = new global::xnormal.tRGB8();
        }
        LightSpecularColor.MergeFrom(other.LightSpecularColor);
      }
      if (other.lightSecondaryColor_ != null) {
        if (lightSecondaryColor_ == null) {
          lightSecondaryColor_ = new global::xnormal.tRGB8();
        }
        LightSecondaryColor.MergeFrom(other.LightSecondaryColor);
      }
      if (other.lightTertiaryColor_ != null) {
        if (lightTertiaryColor_ == null) {
          lightTertiaryColor_ = new global::xnormal.tRGB8();
        }
        LightTertiaryColor.MergeFrom(other.LightTertiaryColor);
      }
      if (other.backgroundColor_ != null) {
        if (backgroundColor_ == null) {
          backgroundColor_ = new global::xnormal.tRGB8();
        }
        BackgroundColor.MergeFrom(other.BackgroundColor);
      }
      if (other.gridColor_ != null) {
        if (gridColor_ == null) {
          gridColor_ = new global::xnormal.tRGB8();
        }
        GridColor.MergeFrom(other.GridColor);
      }
      if (other.cageColor_ != null) {
        if (cageColor_ == null) {
          cageColor_ = new global::xnormal.tRGB8();
        }
        CageColor.MergeFrom(other.CageColor);
      }
      if (other.cameraRotation_ != null) {
        if (cameraRotation_ == null) {
          cameraRotation_ = new global::xnormal.tMatrix();
        }
        CameraRotation.MergeFrom(other.CameraRotation);
      }
      if (other.cameraPosition_ != null) {
        if (cameraPosition_ == null) {
          cameraPosition_ = new global::xnormal.tVector3();
        }
        CameraPosition.MergeFrom(other.CameraPosition);
      }
      if (other.lightPosition_ != null) {
        if (lightPosition_ == null) {
          lightPosition_ = new global::xnormal.tVector3();
        }
        LightPosition.MergeFrom(other.LightPosition);
      }
      if (other.AxisScl != 0F) {
        AxisScl = other.AxisScl;
      }
      if (other.XemakosExample != false) {
        XemakosExample = other.XemakosExample;
      }
      if (other.ShowWireframe != false) {
        ShowWireframe = other.ShowWireframe;
      }
      if (other.CageOpacity != 0F) {
        CageOpacity = other.CageOpacity;
      }
      if (other.DiffuseGIIntensity != 0F) {
        DiffuseGIIntensity = other.DiffuseGIIntensity;
      }
      if (other.ShowAO != false) {
        ShowAO = other.ShowAO;
      }
      if (other.SSAOContrast != 0F) {
        SSAOContrast = other.SSAOContrast;
      }
      if (other.ShadowArea != 0F) {
        ShadowArea = other.ShadowArea;
      }
      if (other.LightIndiretIntensity != 0F) {
        LightIndiretIntensity = other.LightIndiretIntensity;
      }
      if (other.ShowHighpolys != false) {
        ShowHighpolys = other.ShowHighpolys;
      }
      if (other.ShowStarfield != false) {
        ShowStarfield = other.ShowStarfield;
      }
      if (other.ShowBlockers != false) {
        ShowBlockers = other.ShowBlockers;
      }
      if (other.HDRThreshold != 0F) {
        HDRThreshold = other.HDRThreshold;
      }
      if (other.SSAOBright != 0F) {
        SSAOBright = other.SSAOBright;
      }
      if (other.SSAOBlurRadius != 0F) {
        SSAOBlurRadius = other.SSAOBlurRadius;
      }
      if (other.ShowGrid != false) {
        ShowGrid = other.ShowGrid;
      }
      if (other.ParallaxStrength != 0F) {
        ParallaxStrength = other.ParallaxStrength;
      }
      if (other.SSAOAtten != 0F) {
        SSAOAtten = other.SSAOAtten;
      }
      if (other.CameraOrbitDistance != 0F) {
        CameraOrbitDistance = other.CameraOrbitDistance;
      }
      if (other.UseGlow != false) {
        UseGlow = other.UseGlow;
      }
      if (other.SSAOEnabled != false) {
        SSAOEnabled = other.SSAOEnabled;
      }
      if (other.ShadowBias != 0F) {
        ShadowBias = other.ShadowBias;
      }
      if (other.SSAORadius != 0F) {
        SSAORadius = other.SSAORadius;
      }
      if (other.LightIntensity != 0F) {
        LightIntensity = other.LightIntensity;
      }
      if (other.Exposure != 0F) {
        Exposure = other.Exposure;
      }
      if (other.CameraOrbitAutoCenter != false) {
        CameraOrbitAutoCenter = other.CameraOrbitAutoCenter;
      }
      if (other.CastShadows != false) {
        CastShadows = other.CastShadows;
      }
      if (other.ShowNormals != false) {
        ShowNormals = other.ShowNormals;
      }
      if (other.MaxTessellationLevel != 0L) {
        MaxTessellationLevel = other.MaxTessellationLevel;
      }
      if (other.ShowTangents != false) {
        ShowTangents = other.ShowTangents;
      }
      if (other.GlowIntensity != 0F) {
        GlowIntensity = other.GlowIntensity;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (lightAmbientColor_ == null) {
              lightAmbientColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(lightAmbientColor_);
            break;
          }
          case 18: {
            if (lightDiffuseColor_ == null) {
              lightDiffuseColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(lightDiffuseColor_);
            break;
          }
          case 26: {
            if (lightSpecularColor_ == null) {
              lightSpecularColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(lightSpecularColor_);
            break;
          }
          case 34: {
            if (lightSecondaryColor_ == null) {
              lightSecondaryColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(lightSecondaryColor_);
            break;
          }
          case 42: {
            if (lightTertiaryColor_ == null) {
              lightTertiaryColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(lightTertiaryColor_);
            break;
          }
          case 50: {
            if (backgroundColor_ == null) {
              backgroundColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(backgroundColor_);
            break;
          }
          case 58: {
            if (gridColor_ == null) {
              gridColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(gridColor_);
            break;
          }
          case 66: {
            if (cageColor_ == null) {
              cageColor_ = new global::xnormal.tRGB8();
            }
            input.ReadMessage(cageColor_);
            break;
          }
          case 74: {
            if (cameraRotation_ == null) {
              cameraRotation_ = new global::xnormal.tMatrix();
            }
            input.ReadMessage(cameraRotation_);
            break;
          }
          case 82: {
            if (cameraPosition_ == null) {
              cameraPosition_ = new global::xnormal.tVector3();
            }
            input.ReadMessage(cameraPosition_);
            break;
          }
          case 90: {
            if (lightPosition_ == null) {
              lightPosition_ = new global::xnormal.tVector3();
            }
            input.ReadMessage(lightPosition_);
            break;
          }
          case 101: {
            AxisScl = input.ReadFloat();
            break;
          }
          case 104: {
            XemakosExample = input.ReadBool();
            break;
          }
          case 112: {
            ShowWireframe = input.ReadBool();
            break;
          }
          case 125: {
            CageOpacity = input.ReadFloat();
            break;
          }
          case 133: {
            DiffuseGIIntensity = input.ReadFloat();
            break;
          }
          case 136: {
            ShowAO = input.ReadBool();
            break;
          }
          case 149: {
            SSAOContrast = input.ReadFloat();
            break;
          }
          case 157: {
            ShadowArea = input.ReadFloat();
            break;
          }
          case 165: {
            LightIndiretIntensity = input.ReadFloat();
            break;
          }
          case 168: {
            ShowHighpolys = input.ReadBool();
            break;
          }
          case 176: {
            ShowStarfield = input.ReadBool();
            break;
          }
          case 184: {
            ShowBlockers = input.ReadBool();
            break;
          }
          case 197: {
            HDRThreshold = input.ReadFloat();
            break;
          }
          case 205: {
            SSAOBright = input.ReadFloat();
            break;
          }
          case 213: {
            SSAOBlurRadius = input.ReadFloat();
            break;
          }
          case 216: {
            ShowGrid = input.ReadBool();
            break;
          }
          case 229: {
            ParallaxStrength = input.ReadFloat();
            break;
          }
          case 237: {
            SSAOAtten = input.ReadFloat();
            break;
          }
          case 245: {
            CameraOrbitDistance = input.ReadFloat();
            break;
          }
          case 248: {
            UseGlow = input.ReadBool();
            break;
          }
          case 256: {
            SSAOEnabled = input.ReadBool();
            break;
          }
          case 269: {
            ShadowBias = input.ReadFloat();
            break;
          }
          case 277: {
            SSAORadius = input.ReadFloat();
            break;
          }
          case 285: {
            LightIntensity = input.ReadFloat();
            break;
          }
          case 293: {
            Exposure = input.ReadFloat();
            break;
          }
          case 296: {
            CameraOrbitAutoCenter = input.ReadBool();
            break;
          }
          case 304: {
            CastShadows = input.ReadBool();
            break;
          }
          case 312: {
            ShowNormals = input.ReadBool();
            break;
          }
          case 320: {
            MaxTessellationLevel = input.ReadInt64();
            break;
          }
          case 328: {
            ShowTangents = input.ReadBool();
            break;
          }
          case 341: {
            GlowIntensity = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Settings : pb::IMessage<Settings> {
    private static readonly pb::MessageParser<Settings> _parser = new pb::MessageParser<Settings>(() => new Settings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Settings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::xnormal.XnormalReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settings(Settings other) : this() {
      HighPolyModel = other.highPolyModel_ != null ? other.HighPolyModel.Clone() : null;
      LowPolyModel = other.lowPolyModel_ != null ? other.LowPolyModel.Clone() : null;
      GenerateMaps = other.generateMaps_ != null ? other.GenerateMaps.Clone() : null;
      Detail = other.detail_ != null ? other.Detail.Clone() : null;
      Viewer3D = other.viewer3D_ != null ? other.Viewer3D.Clone() : null;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Settings Clone() {
      return new Settings(this);
    }

    /// <summary>Field number for the "HighPolyModel" field.</summary>
    public const int HighPolyModelFieldNumber = 1;
    private global::xnormal.tHighPolyModel highPolyModel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tHighPolyModel HighPolyModel {
      get { return highPolyModel_; }
      set {
        highPolyModel_ = value;
      }
    }

    /// <summary>Field number for the "LowPolyModel" field.</summary>
    public const int LowPolyModelFieldNumber = 2;
    private global::xnormal.tLowPolyModel lowPolyModel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tLowPolyModel LowPolyModel {
      get { return lowPolyModel_; }
      set {
        lowPolyModel_ = value;
      }
    }

    /// <summary>Field number for the "GenerateMaps" field.</summary>
    public const int GenerateMapsFieldNumber = 3;
    private global::xnormal.tGenerateMaps generateMaps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tGenerateMaps GenerateMaps {
      get { return generateMaps_; }
      set {
        generateMaps_ = value;
      }
    }

    /// <summary>Field number for the "Detail" field.</summary>
    public const int DetailFieldNumber = 4;
    private global::xnormal.tDetail detail_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tDetail Detail {
      get { return detail_; }
      set {
        detail_ = value;
      }
    }

    /// <summary>Field number for the "Viewer3D" field.</summary>
    public const int Viewer3DFieldNumber = 5;
    private global::xnormal.tViewer3D viewer3D_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::xnormal.tViewer3D Viewer3D {
      get { return viewer3D_; }
      set {
        viewer3D_ = value;
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 6;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Settings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Settings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(HighPolyModel, other.HighPolyModel)) return false;
      if (!object.Equals(LowPolyModel, other.LowPolyModel)) return false;
      if (!object.Equals(GenerateMaps, other.GenerateMaps)) return false;
      if (!object.Equals(Detail, other.Detail)) return false;
      if (!object.Equals(Viewer3D, other.Viewer3D)) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (highPolyModel_ != null) hash ^= HighPolyModel.GetHashCode();
      if (lowPolyModel_ != null) hash ^= LowPolyModel.GetHashCode();
      if (generateMaps_ != null) hash ^= GenerateMaps.GetHashCode();
      if (detail_ != null) hash ^= Detail.GetHashCode();
      if (viewer3D_ != null) hash ^= Viewer3D.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (highPolyModel_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(HighPolyModel);
      }
      if (lowPolyModel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LowPolyModel);
      }
      if (generateMaps_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GenerateMaps);
      }
      if (detail_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Detail);
      }
      if (viewer3D_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Viewer3D);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (highPolyModel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HighPolyModel);
      }
      if (lowPolyModel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LowPolyModel);
      }
      if (generateMaps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GenerateMaps);
      }
      if (detail_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Detail);
      }
      if (viewer3D_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Viewer3D);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Settings other) {
      if (other == null) {
        return;
      }
      if (other.highPolyModel_ != null) {
        if (highPolyModel_ == null) {
          highPolyModel_ = new global::xnormal.tHighPolyModel();
        }
        HighPolyModel.MergeFrom(other.HighPolyModel);
      }
      if (other.lowPolyModel_ != null) {
        if (lowPolyModel_ == null) {
          lowPolyModel_ = new global::xnormal.tLowPolyModel();
        }
        LowPolyModel.MergeFrom(other.LowPolyModel);
      }
      if (other.generateMaps_ != null) {
        if (generateMaps_ == null) {
          generateMaps_ = new global::xnormal.tGenerateMaps();
        }
        GenerateMaps.MergeFrom(other.GenerateMaps);
      }
      if (other.detail_ != null) {
        if (detail_ == null) {
          detail_ = new global::xnormal.tDetail();
        }
        Detail.MergeFrom(other.Detail);
      }
      if (other.viewer3D_ != null) {
        if (viewer3D_ == null) {
          viewer3D_ = new global::xnormal.tViewer3D();
        }
        Viewer3D.MergeFrom(other.Viewer3D);
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (highPolyModel_ == null) {
              highPolyModel_ = new global::xnormal.tHighPolyModel();
            }
            input.ReadMessage(highPolyModel_);
            break;
          }
          case 18: {
            if (lowPolyModel_ == null) {
              lowPolyModel_ = new global::xnormal.tLowPolyModel();
            }
            input.ReadMessage(lowPolyModel_);
            break;
          }
          case 26: {
            if (generateMaps_ == null) {
              generateMaps_ = new global::xnormal.tGenerateMaps();
            }
            input.ReadMessage(generateMaps_);
            break;
          }
          case 34: {
            if (detail_ == null) {
              detail_ = new global::xnormal.tDetail();
            }
            input.ReadMessage(detail_);
            break;
          }
          case 42: {
            if (viewer3D_ == null) {
              viewer3D_ = new global::xnormal.tViewer3D();
            }
            input.ReadMessage(viewer3D_);
            break;
          }
          case 50: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
