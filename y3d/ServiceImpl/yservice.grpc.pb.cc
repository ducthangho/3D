// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: yservice.proto

#include "yservice.pb.h"
#include "yservice.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace y3d {

static const char* Tools_method_names[] = {
  "/y3d.Tools/RenameObject",
  "/y3d.Tools/SaveProject",
  "/y3d.Tools/NewProject",
  "/y3d.Tools/LoadProject",
  "/y3d.Tools/DeleteProject",
  "/y3d.Tools/Unwrap",
  "/y3d.Tools/Packing",
  "/y3d.Tools/LowPoly",
  "/y3d.Tools/LoadSystem",
  "/y3d.Tools/SaveSystem",
  "/y3d.Tools/BakeNormal",
  "/y3d.Tools/BakeNormalMax",
  "/y3d.Tools/MakeNode4Edit",
  "/y3d.Tools/BatchOptimize",
  "/y3d.Tools/TestTest",
  "/y3d.Tools/GetObjectFromMax",
  "/y3d.Tools/CloneObject",
  "/y3d.Tools/DoStreamClient",
  "/y3d.Tools/DoStreamServer",
  "/y3d.Tools/DoAction",
  "/y3d.Tools/DoEvent",
  "/y3d.Tools/DoUnwrap",
  "/y3d.Tools/Shutdown",
};

std::unique_ptr< Tools::Stub> Tools::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Tools::Stub> stub(new Tools::Stub(channel));
  return stub;
}

Tools::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RenameObject_(Tools_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SaveProject_(Tools_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewProject_(Tools_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadProject_(Tools_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteProject_(Tools_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Unwrap_(Tools_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Packing_(Tools_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LowPoly_(Tools_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadSystem_(Tools_method_names[8], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SaveSystem_(Tools_method_names[9], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BakeNormal_(Tools_method_names[10], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BakeNormalMax_(Tools_method_names[11], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MakeNode4Edit_(Tools_method_names[12], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BatchOptimize_(Tools_method_names[13], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestTest_(Tools_method_names[14], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetObjectFromMax_(Tools_method_names[15], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloneObject_(Tools_method_names[16], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoStreamClient_(Tools_method_names[17], ::grpc::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_DoStreamServer_(Tools_method_names[18], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DoAction_(Tools_method_names[19], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_DoEvent_(Tools_method_names[20], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoUnwrap_(Tools_method_names[21], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Shutdown_(Tools_method_names[22], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Tools::Stub::RenameObject(::grpc::ClientContext* context, const ::y3d::RenameParam& request, ::y3d::ResultReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_RenameObject_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* Tools::Stub::AsyncRenameObjectRaw(::grpc::ClientContext* context, const ::y3d::RenameParam& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>(channel_.get(), cq, rpcmethod_RenameObject_, context, request);
}

::grpc::Status Tools::Stub::SaveProject(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::y3d::ResponseEvent* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SaveProject_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>* Tools::Stub::AsyncSaveProjectRaw(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>(channel_.get(), cq, rpcmethod_SaveProject_, context, request);
}

::grpc::Status Tools::Stub::NewProject(::grpc::ClientContext* context, const ::y3d::NewProjectParam& request, ::y3d::ResponseNProject* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_NewProject_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResponseNProject>* Tools::Stub::AsyncNewProjectRaw(::grpc::ClientContext* context, const ::y3d::NewProjectParam& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResponseNProject>(channel_.get(), cq, rpcmethod_NewProject_, context, request);
}

::grpc::Status Tools::Stub::LoadProject(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::y3d::ResponseNProject* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_LoadProject_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResponseNProject>* Tools::Stub::AsyncLoadProjectRaw(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResponseNProject>(channel_.get(), cq, rpcmethod_LoadProject_, context, request);
}

::grpc::Status Tools::Stub::DeleteProject(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::y3d::ResponseNProject* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteProject_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResponseNProject>* Tools::Stub::AsyncDeleteProjectRaw(::grpc::ClientContext* context, const ::y3d::ProjectInfo& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResponseNProject>(channel_.get(), cq, rpcmethod_DeleteProject_, context, request);
}

::grpc::Status Tools::Stub::Unwrap(::grpc::ClientContext* context, const ::y3d::EUnwrap& request, ::y3d::ResultReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Unwrap_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* Tools::Stub::AsyncUnwrapRaw(::grpc::ClientContext* context, const ::y3d::EUnwrap& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>(channel_.get(), cq, rpcmethod_Unwrap_, context, request);
}

::grpc::Status Tools::Stub::Packing(::grpc::ClientContext* context, const ::y3d::EPacking& request, ::y3d::ResultReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Packing_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* Tools::Stub::AsyncPackingRaw(::grpc::ClientContext* context, const ::y3d::EPacking& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>(channel_.get(), cq, rpcmethod_Packing_, context, request);
}

::grpc::Status Tools::Stub::LowPoly(::grpc::ClientContext* context, const ::y3d::ELowpoly& request, ::y3d::ResultReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_LowPoly_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* Tools::Stub::AsyncLowPolyRaw(::grpc::ClientContext* context, const ::y3d::ELowpoly& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>(channel_.get(), cq, rpcmethod_LowPoly_, context, request);
}

::grpc::Status Tools::Stub::LoadSystem(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::YSystem* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_LoadSystem_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::YSystem>* Tools::Stub::AsyncLoadSystemRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::YSystem>(channel_.get(), cq, rpcmethod_LoadSystem_, context, request);
}

::grpc::Status Tools::Stub::SaveSystem(::grpc::ClientContext* context, const ::y3d::YSystem& request, ::y3d::ResultReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SaveSystem_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* Tools::Stub::AsyncSaveSystemRaw(::grpc::ClientContext* context, const ::y3d::YSystem& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>(channel_.get(), cq, rpcmethod_SaveSystem_, context, request);
}

::grpc::Status Tools::Stub::BakeNormal(::grpc::ClientContext* context, const ::y3d::ENormal& request, ::y3d::ResultReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_BakeNormal_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* Tools::Stub::AsyncBakeNormalRaw(::grpc::ClientContext* context, const ::y3d::ENormal& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>(channel_.get(), cq, rpcmethod_BakeNormal_, context, request);
}

::grpc::Status Tools::Stub::BakeNormalMax(::grpc::ClientContext* context, const ::y3d::ENormal& request, ::y3d::ResultReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_BakeNormalMax_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* Tools::Stub::AsyncBakeNormalMaxRaw(::grpc::ClientContext* context, const ::y3d::ENormal& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>(channel_.get(), cq, rpcmethod_BakeNormalMax_, context, request);
}

::grpc::Status Tools::Stub::MakeNode4Edit(::grpc::ClientContext* context, const ::y3d::Make4TestParam& request, ::y3d::ResultReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_MakeNode4Edit_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* Tools::Stub::AsyncMakeNode4EditRaw(::grpc::ClientContext* context, const ::y3d::Make4TestParam& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>(channel_.get(), cq, rpcmethod_MakeNode4Edit_, context, request);
}

::grpc::Status Tools::Stub::BatchOptimize(::grpc::ClientContext* context, const ::y3d::BatchOptimizeParam& request, ::y3d::ResultReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_BatchOptimize_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* Tools::Stub::AsyncBatchOptimizeRaw(::grpc::ClientContext* context, const ::y3d::BatchOptimizeParam& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>(channel_.get(), cq, rpcmethod_BatchOptimize_, context, request);
}

::grpc::Status Tools::Stub::TestTest(::grpc::ClientContext* context, const ::y3d::TestParam& request, ::y3d::ResultReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_TestTest_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* Tools::Stub::AsyncTestTestRaw(::grpc::ClientContext* context, const ::y3d::TestParam& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>(channel_.get(), cq, rpcmethod_TestTest_, context, request);
}

::grpc::Status Tools::Stub::GetObjectFromMax(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::YAreaList* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetObjectFromMax_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::YAreaList>* Tools::Stub::AsyncGetObjectFromMaxRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::YAreaList>(channel_.get(), cq, rpcmethod_GetObjectFromMax_, context, request);
}

::grpc::Status Tools::Stub::CloneObject(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::ResultReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CloneObject_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* Tools::Stub::AsyncCloneObjectRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>(channel_.get(), cq, rpcmethod_CloneObject_, context, request);
}

::grpc::ClientWriter< ::y3d::YEvent>* Tools::Stub::DoStreamClientRaw(::grpc::ClientContext* context, ::y3d::ResponseEvent* response) {
  return new ::grpc::ClientWriter< ::y3d::YEvent>(channel_.get(), rpcmethod_DoStreamClient_, context, response);
}

::grpc::ClientAsyncWriter< ::y3d::YEvent>* Tools::Stub::AsyncDoStreamClientRaw(::grpc::ClientContext* context, ::y3d::ResponseEvent* response, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncWriter< ::y3d::YEvent>(channel_.get(), cq, rpcmethod_DoStreamClient_, context, response, tag);
}

::grpc::ClientReader< ::y3d::YEvent>* Tools::Stub::DoStreamServerRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request) {
  return new ::grpc::ClientReader< ::y3d::YEvent>(channel_.get(), rpcmethod_DoStreamServer_, context, request);
}

::grpc::ClientAsyncReader< ::y3d::YEvent>* Tools::Stub::AsyncDoStreamServerRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::y3d::YEvent>(channel_.get(), cq, rpcmethod_DoStreamServer_, context, request, tag);
}

::grpc::ClientReaderWriter< ::y3d::YEvent, ::y3d::YEvent>* Tools::Stub::DoActionRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::y3d::YEvent, ::y3d::YEvent>(channel_.get(), rpcmethod_DoAction_, context);
}

::grpc::ClientAsyncReaderWriter< ::y3d::YEvent, ::y3d::YEvent>* Tools::Stub::AsyncDoActionRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::y3d::YEvent, ::y3d::YEvent>(channel_.get(), cq, rpcmethod_DoAction_, context, tag);
}

::grpc::Status Tools::Stub::DoEvent(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::y3d::ResponseEvent* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DoEvent_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>* Tools::Stub::AsyncDoEventRaw(::grpc::ClientContext* context, const ::y3d::YEvent& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>(channel_.get(), cq, rpcmethod_DoEvent_, context, request);
}

::grpc::Status Tools::Stub::DoUnwrap(::grpc::ClientContext* context, const ::y3d::EUnwrap& request, ::y3d::ResponseEvent* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DoUnwrap_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>* Tools::Stub::AsyncDoUnwrapRaw(::grpc::ClientContext* context, const ::y3d::EUnwrap& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResponseEvent>(channel_.get(), cq, rpcmethod_DoUnwrap_, context, request);
}

::grpc::Status Tools::Stub::Shutdown(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::y3d::ResultReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Shutdown_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>* Tools::Stub::AsyncShutdownRaw(::grpc::ClientContext* context, const ::y3d::EmptyParam& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::y3d::ResultReply>(channel_.get(), cq, rpcmethod_Shutdown_, context, request);
}

Tools::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::RenameParam, ::y3d::ResultReply>(
          std::mem_fn(&Tools::Service::RenameObject), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::ProjectInfo, ::y3d::ResponseEvent>(
          std::mem_fn(&Tools::Service::SaveProject), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::NewProjectParam, ::y3d::ResponseNProject>(
          std::mem_fn(&Tools::Service::NewProject), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::ProjectInfo, ::y3d::ResponseNProject>(
          std::mem_fn(&Tools::Service::LoadProject), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::ProjectInfo, ::y3d::ResponseNProject>(
          std::mem_fn(&Tools::Service::DeleteProject), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::EUnwrap, ::y3d::ResultReply>(
          std::mem_fn(&Tools::Service::Unwrap), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::EPacking, ::y3d::ResultReply>(
          std::mem_fn(&Tools::Service::Packing), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::ELowpoly, ::y3d::ResultReply>(
          std::mem_fn(&Tools::Service::LowPoly), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[8],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::EmptyParam, ::y3d::YSystem>(
          std::mem_fn(&Tools::Service::LoadSystem), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[9],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::YSystem, ::y3d::ResultReply>(
          std::mem_fn(&Tools::Service::SaveSystem), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[10],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::ENormal, ::y3d::ResultReply>(
          std::mem_fn(&Tools::Service::BakeNormal), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[11],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::ENormal, ::y3d::ResultReply>(
          std::mem_fn(&Tools::Service::BakeNormalMax), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[12],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::Make4TestParam, ::y3d::ResultReply>(
          std::mem_fn(&Tools::Service::MakeNode4Edit), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[13],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::BatchOptimizeParam, ::y3d::ResultReply>(
          std::mem_fn(&Tools::Service::BatchOptimize), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[14],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::TestParam, ::y3d::ResultReply>(
          std::mem_fn(&Tools::Service::TestTest), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[15],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::EmptyParam, ::y3d::YAreaList>(
          std::mem_fn(&Tools::Service::GetObjectFromMax), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[16],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::EmptyParam, ::y3d::ResultReply>(
          std::mem_fn(&Tools::Service::CloneObject), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[17],
      ::grpc::RpcMethod::CLIENT_STREAMING,
      new ::grpc::ClientStreamingHandler< Tools::Service, ::y3d::YEvent, ::y3d::ResponseEvent>(
          std::mem_fn(&Tools::Service::DoStreamClient), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[18],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< Tools::Service, ::y3d::EmptyParam, ::y3d::YEvent>(
          std::mem_fn(&Tools::Service::DoStreamServer), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[19],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< Tools::Service, ::y3d::YEvent, ::y3d::YEvent>(
          std::mem_fn(&Tools::Service::DoAction), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[20],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::YEvent, ::y3d::ResponseEvent>(
          std::mem_fn(&Tools::Service::DoEvent), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[21],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::EUnwrap, ::y3d::ResponseEvent>(
          std::mem_fn(&Tools::Service::DoUnwrap), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Tools_method_names[22],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Tools::Service, ::y3d::EmptyParam, ::y3d::ResultReply>(
          std::mem_fn(&Tools::Service::Shutdown), this)));
}

Tools::Service::~Service() {
}

::grpc::Status Tools::Service::RenameObject(::grpc::ServerContext* context, const ::y3d::RenameParam* request, ::y3d::ResultReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::SaveProject(::grpc::ServerContext* context, const ::y3d::ProjectInfo* request, ::y3d::ResponseEvent* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::NewProject(::grpc::ServerContext* context, const ::y3d::NewProjectParam* request, ::y3d::ResponseNProject* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::LoadProject(::grpc::ServerContext* context, const ::y3d::ProjectInfo* request, ::y3d::ResponseNProject* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::DeleteProject(::grpc::ServerContext* context, const ::y3d::ProjectInfo* request, ::y3d::ResponseNProject* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::Unwrap(::grpc::ServerContext* context, const ::y3d::EUnwrap* request, ::y3d::ResultReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::Packing(::grpc::ServerContext* context, const ::y3d::EPacking* request, ::y3d::ResultReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::LowPoly(::grpc::ServerContext* context, const ::y3d::ELowpoly* request, ::y3d::ResultReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::LoadSystem(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YSystem* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::SaveSystem(::grpc::ServerContext* context, const ::y3d::YSystem* request, ::y3d::ResultReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::BakeNormal(::grpc::ServerContext* context, const ::y3d::ENormal* request, ::y3d::ResultReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::BakeNormalMax(::grpc::ServerContext* context, const ::y3d::ENormal* request, ::y3d::ResultReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::MakeNode4Edit(::grpc::ServerContext* context, const ::y3d::Make4TestParam* request, ::y3d::ResultReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::BatchOptimize(::grpc::ServerContext* context, const ::y3d::BatchOptimizeParam* request, ::y3d::ResultReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::TestTest(::grpc::ServerContext* context, const ::y3d::TestParam* request, ::y3d::ResultReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::GetObjectFromMax(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::YAreaList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::CloneObject(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::DoStreamClient(::grpc::ServerContext* context, ::grpc::ServerReader< ::y3d::YEvent>* reader, ::y3d::ResponseEvent* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::DoStreamServer(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::grpc::ServerWriter< ::y3d::YEvent>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::DoAction(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::y3d::YEvent, ::y3d::YEvent>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::DoEvent(::grpc::ServerContext* context, const ::y3d::YEvent* request, ::y3d::ResponseEvent* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::DoUnwrap(::grpc::ServerContext* context, const ::y3d::EUnwrap* request, ::y3d::ResponseEvent* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tools::Service::Shutdown(::grpc::ServerContext* context, const ::y3d::EmptyParam* request, ::y3d::ResultReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace y3d

