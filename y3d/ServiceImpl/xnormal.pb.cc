// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xnormal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "xnormal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xnormal {
class UnspecifiedTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnspecifiedType> {
} _UnspecifiedType_default_instance_;
class tMatrixDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tMatrix> {
} _tMatrix_default_instance_;
class tDetailDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tDetail> {
} _tDetail_default_instance_;
class tRGB8DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tRGB8> {
} _tRGB8_default_instance_;
class tHighPolyMeshDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tHighPolyMesh> {
} _tHighPolyMesh_default_instance_;
class tLowPolyMeshDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tLowPolyMesh> {
} _tLowPolyMesh_default_instance_;
class tVector3DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tVector3> {
} _tVector3_default_instance_;
class tGenerateMapsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tGenerateMaps> {
} _tGenerateMaps_default_instance_;
class tHighPolyModelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tHighPolyModel> {
} _tHighPolyModel_default_instance_;
class tLowPolyModelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tLowPolyModel> {
} _tLowPolyModel_default_instance_;
class tViewer3DDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tViewer3D> {
} _tViewer3D_default_instance_;
class SettingsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Settings> {
} _Settings_default_instance_;

namespace protobuf_xnormal_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[11];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnspecifiedType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnspecifiedType, baseobjecttype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnspecifiedType, object_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e13_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e12_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e23_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e31_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e11_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e22_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e33_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e21_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tMatrix, e32_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tDetail, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tDetail, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tDetail, file_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tRGB8, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tRGB8, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tRGB8, g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tRGB8, b_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyMesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyMesh, file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyMesh, positionoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyMesh, ignorepervertexcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyMesh, averagenormals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyMesh, visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyMesh, basetexistsnm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyMesh, scale_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, basetex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, blockersfile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, vvdmswizzlez_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, fresnelrefractiveindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, uoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, reflecthdrmult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, transparencymode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, voffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, reflecttex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, maxraydistancefront_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, diffusegitex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, normapmaptype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, vvdmswizzley_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, cagefile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, heighttex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, nmswizzley_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, batchprotect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, alphatestvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, subdivisions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, matte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, averagenormals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, vectordisplacementts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, usecage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, nmswizzlex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, glosstex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, nmswizzlez_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, vectordisplacementtex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, vvdmswizzlex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, usepervertexcolors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, highpolynormalsoverridetangentspace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, lmaotex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, spectex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, normtex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, highpolynormaloverride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, positionoffset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, maxraydistanceback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, usefresnel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, receiveshadows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, emissivetex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, backfacecull_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, castshadows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyMesh, matchuvs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tVector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tVector3, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tVector3, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tVector3, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, nmbackgroundcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, hmbackgroundcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bakehighpolybasetexturenotexcol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bakehighpolybasetexturebackgroundcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, renderwireframebackgroundcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, renderwireframecol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, rendercwcol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, renderseamcol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, renderrayfailscol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aooccludedcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aounoccludedcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aobackgroundcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentbackgroundcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, prtbackgroundcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, convexitybackgroundcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, thicknessbackgroundcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, proximitybackgroundcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, cavitybackgroundcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, vdmbackgroundcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radnmbackgroundcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvbackgroundcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, derivnmbackgroundcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, translubackgroundcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bakehighpolyvcolsbackgroundcol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, closestiffails_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, directionstonemapmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvmonocrome_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aobias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, benttangentspace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, gentranslu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aodistribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, prtthreshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, directionstonemapmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvdistribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentjitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentdistribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bakehighpolybasetexture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genconvexity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsattenlinear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, translurayspersample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvsearchdistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, swizzlez_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, translubias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, prtlimitraydistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genbent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aolimitraydistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvrayspersample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsdistribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsrayspersample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvjitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, tangentspace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsallowpureocclusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentswizzlex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, swizzley_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, gencurv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, prtjitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aoattencuadratic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentconeangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, swizzlex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, renderrayfails_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, cavitysearchradius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsencodeao_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, transluconeangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentrayspersample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, convexityscale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsconeangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genderivnm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentlimitraydistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, prtbias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, renderwireframe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, prtnormalize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genao_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, prtconeangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsattencuadratic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, directionstonemap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, directionsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, prtrayspersample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, edgepadding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, directionsswizzlez_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aoallowpureoccluded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aoignorebackfacehits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, cavityrayspersample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aoattenconstant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, cavityjitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, heighttonemapmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, gendirections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalslimitraydistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, heighttonemapmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsjitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, directionsswizzley_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bakehighpolybasetexturedrawobjectidifnotexture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, concavity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, directionsswizzlex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, gennormals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, proximityrayspersample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genheights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsattenconstant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genproximity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genprt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, cavitycontrast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalscoordsys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, translujitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aorayspersample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentbias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, discardraybackfaceshits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aoconeangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentswizzley_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalsbias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, radiositynormalscontrast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, cavitysteps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bentswizzlez_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bucketsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvconeangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, transludist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aojitter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvbias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genwirerays_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, curvalgorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, transludistribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, aoattenlinear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, proximitylimitraydistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, genradiositynormals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, proximityconeangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, heighttonemap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, gencavity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tGenerateMaps, bakehighpolyvcols_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyModel, mesh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyModel, basetex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tHighPolyModel, defaultmeshscale_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyModel, mesh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tLowPolyModel, defaultmeshscale_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, lightambientcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, lightdiffusecolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, lightspecularcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, lightsecondarycolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, lighttertiarycolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, backgroundcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, gridcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, cagecolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, camerarotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, cameraposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, lightposition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, axisscl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, xemakosexample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, showwireframe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, cageopacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, diffusegiintensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, showao_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, ssaocontrast_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, shadowarea_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, lightindiretintensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, showhighpolys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, showstarfield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, showblockers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, hdrthreshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, ssaobright_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, ssaoblurradius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, showgrid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, parallaxstrength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, ssaoatten_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, cameraorbitdistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, useglow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, ssaoenabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, shadowbias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, ssaoradius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, lightintensity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, exposure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, cameraorbitautocenter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, castshadows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, shownormals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, maxtessellationlevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, showtangents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tViewer3D, glowintensity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, highpolymodel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, lowpolymodel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, generatemaps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, viewer3d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Settings, version_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(UnspecifiedType)},
  { 6, -1, sizeof(tMatrix)},
  { 19, -1, sizeof(tDetail)},
  { 26, -1, sizeof(tRGB8)},
  { 33, -1, sizeof(tHighPolyMesh)},
  { 44, -1, sizeof(tLowPolyMesh)},
  { 93, -1, sizeof(tVector3)},
  { 100, -1, sizeof(tGenerateMaps)},
  { 234, -1, sizeof(tHighPolyModel)},
  { 241, -1, sizeof(tLowPolyModel)},
  { 247, -1, sizeof(tViewer3D)},
  { 293, -1, sizeof(Settings)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnspecifiedType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tMatrix_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tRGB8_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tHighPolyMesh_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tLowPolyMesh_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tVector3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tGenerateMaps_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tHighPolyModel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tLowPolyModel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tViewer3D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Settings_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "xnormal.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace

void TableStruct::Shutdown() {
  _UnspecifiedType_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _tMatrix_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _tDetail_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _tRGB8_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _tHighPolyMesh_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _tLowPolyMesh_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _tVector3_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _tGenerateMaps_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _tHighPolyModel_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _tLowPolyModel_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _tViewer3D_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _Settings_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _UnspecifiedType_default_instance_.DefaultConstruct();
  _tMatrix_default_instance_.DefaultConstruct();
  _tDetail_default_instance_.DefaultConstruct();
  _tRGB8_default_instance_.DefaultConstruct();
  _tHighPolyMesh_default_instance_.DefaultConstruct();
  _tLowPolyMesh_default_instance_.DefaultConstruct();
  _tVector3_default_instance_.DefaultConstruct();
  _tGenerateMaps_default_instance_.DefaultConstruct();
  _tHighPolyModel_default_instance_.DefaultConstruct();
  _tLowPolyModel_default_instance_.DefaultConstruct();
  _tViewer3D_default_instance_.DefaultConstruct();
  _Settings_default_instance_.DefaultConstruct();
  _tLowPolyMesh_default_instance_.get_mutable()->highpolynormaloverride_ = const_cast< ::xnormal::UnspecifiedType*>(
      ::xnormal::UnspecifiedType::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->nmbackgroundcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->hmbackgroundcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->bakehighpolybasetexturenotexcol_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->bakehighpolybasetexturebackgroundcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->renderwireframebackgroundcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->renderwireframecol_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->rendercwcol_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->renderseamcol_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->renderrayfailscol_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->aooccludedcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->aounoccludedcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->aobackgroundcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->bentbackgroundcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->prtbackgroundcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->convexitybackgroundcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->thicknessbackgroundcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->proximitybackgroundcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->cavitybackgroundcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->vdmbackgroundcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->radnmbackgroundcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->curvbackgroundcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->derivnmbackgroundcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->translubackgroundcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tGenerateMaps_default_instance_.get_mutable()->bakehighpolyvcolsbackgroundcol_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tViewer3D_default_instance_.get_mutable()->lightambientcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tViewer3D_default_instance_.get_mutable()->lightdiffusecolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tViewer3D_default_instance_.get_mutable()->lightspecularcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tViewer3D_default_instance_.get_mutable()->lightsecondarycolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tViewer3D_default_instance_.get_mutable()->lighttertiarycolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tViewer3D_default_instance_.get_mutable()->backgroundcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tViewer3D_default_instance_.get_mutable()->gridcolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tViewer3D_default_instance_.get_mutable()->cagecolor_ = const_cast< ::xnormal::tRGB8*>(
      ::xnormal::tRGB8::internal_default_instance());
  _tViewer3D_default_instance_.get_mutable()->camerarotation_ = const_cast< ::xnormal::tMatrix*>(
      ::xnormal::tMatrix::internal_default_instance());
  _tViewer3D_default_instance_.get_mutable()->cameraposition_ = const_cast< ::xnormal::tVector3*>(
      ::xnormal::tVector3::internal_default_instance());
  _tViewer3D_default_instance_.get_mutable()->lightposition_ = const_cast< ::xnormal::tVector3*>(
      ::xnormal::tVector3::internal_default_instance());
  _Settings_default_instance_.get_mutable()->highpolymodel_ = const_cast< ::xnormal::tHighPolyModel*>(
      ::xnormal::tHighPolyModel::internal_default_instance());
  _Settings_default_instance_.get_mutable()->lowpolymodel_ = const_cast< ::xnormal::tLowPolyModel*>(
      ::xnormal::tLowPolyModel::internal_default_instance());
  _Settings_default_instance_.get_mutable()->generatemaps_ = const_cast< ::xnormal::tGenerateMaps*>(
      ::xnormal::tGenerateMaps::internal_default_instance());
  _Settings_default_instance_.get_mutable()->detail_ = const_cast< ::xnormal::tDetail*>(
      ::xnormal::tDetail::internal_default_instance());
  _Settings_default_instance_.get_mutable()->viewer3d_ = const_cast< ::xnormal::tViewer3D*>(
      ::xnormal::tViewer3D::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rxnormal.proto\022\007xnormal\"9\n\017UnspecifiedT"
      "ype\022\026\n\016baseObjectType\030\001 \001(\t\022\016\n\006object\030\002 "
      "\001(\014\"~\n\007tMatrix\022\013\n\003e13\030\001 \001(\002\022\013\n\003e12\030\002 \001(\002"
      "\022\013\n\003e23\030\003 \001(\002\022\013\n\003e31\030\004 \001(\002\022\013\n\003e11\030\005 \001(\002\022"
      "\013\n\003e22\030\006 \001(\002\022\013\n\003e33\030\007 \001(\002\022\013\n\003e21\030\010 \001(\002\022\013"
      "\n\003e32\030\t \001(\002\"\217\002\n\007tDetail\022-\n\006Method\030\001 \001(\0162"
      "\035.xnormal.tDetail.eHM2NMMethod\022\r\n\005Scale\030"
      "\002 \001(\002\022\014\n\004File\030\003 \001(\t\"\267\001\n\014eHM2NMMethod\022\024\n\020"
      "eHM2NMMethod_3x3\020\000\022\031\n\025eHM2NMMethod_4Samp"
      "les\020\001\022\024\n\020eHM2NMMethod_5x5\020\002\022\027\n\023eHM2NMMet"
      "hod_PRE3x3\020\003\022\027\n\023eHM2NMMethod_PRE5x5\020\004\022\026\n"
      "\022eHM2NMMethod_SO3x3\020\005\022\026\n\022eHM2NMMethod_SO"
      "5x5\020\006\"(\n\005tRGB8\022\t\n\001R\030\001 \001(\r\022\t\n\001G\030\002 \001(\r\022\t\n\001"
      "B\030\003 \001(\r\"\307\002\n\rtHighPolyMesh\022\014\n\004File\030\001 \001(\t\022"
      "\026\n\016PositionOffset\030\002 \001(\t\022\034\n\024IgnorePerVert"
      "exColor\030\003 \001(\010\022=\n\016AverageNormals\030\004 \001(\0162%."
      "xnormal.tHighPolyMesh.eSmoothNormals\022\017\n\007"
      "Visible\030\005 \001(\010\022\025\n\rBaseTexIsTSNM\030\006 \001(\010\022\r\n\005"
      "Scale\030\007 \001(\002\"|\n\016eSmoothNormals\022!\n\035eSmooth"
      "Normals_AverageNormals\020\000\022 \n\034eSmoothNorma"
      "ls_HardenNormals\020\001\022%\n!eSmoothNormals_Use"
      "ExportedNormals\020\002\"\250\016\n\014tLowPolyMesh\022\017\n\007Ba"
      "seTex\030\001 \001(\t\022\024\n\014BlockersFile\030\002 \001(\t\022=\n\014VVD"
      "MSwizzleZ\030\003 \001(\0162\'.xnormal.tLowPolyMesh.e"
      "SwizzleComponent\022\036\n\026FresnelRefractiveInd"
      "ex\030\004 \001(\002\022\017\n\007UOffset\030\005 \001(\002\022\026\n\016ReflectHDRM"
      "ult\030\006 \001(\002\022A\n\020TransparencyMode\030\007 \001(\0162\'.xn"
      "ormal.tLowPolyMesh.eTransparencyMode\022\017\n\007"
      "VOffset\030\010 \001(\002\022\022\n\nReflectTex\030\t \001(\t\022\033\n\023Max"
      "RayDistanceFront\030\n \001(\002\022\024\n\014DiffuseGITex\030\013"
      " \001(\t\022;\n\rNormapMapType\030\014 \001(\0162$.xnormal.tL"
      "owPolyMesh.eNormalMapType\022\014\n\004File\030\r \001(\t\022"
      "=\n\014VVDMSwizzleY\030\016 \001(\0162\'.xnormal.tLowPoly"
      "Mesh.eSwizzleComponent\022\020\n\010CageFile\030\017 \001(\t"
      "\022\021\n\tHeightTex\030\020 \001(\t\022;\n\nNMSwizzleY\030\021 \001(\0162"
      "\'.xnormal.tLowPolyMesh.eSwizzleComponent"
      "\022\024\n\014BatchProtect\030\022 \001(\010\022\026\n\016AlphaTestValue"
      "\030\023 \001(\014\022\024\n\014Subdivisions\030\024 \001(\r\022\r\n\005Matte\030\025 "
      "\001(\010\022\026\n\016AverageNormals\030\026 \001(\010\022\034\n\024VectorDis"
      "placementTS\030\027 \001(\010\022\017\n\007UseCage\030\030 \001(\010\022\017\n\007Vi"
      "sible\030\031 \001(\010\022;\n\nNMSwizzleX\030\032 \001(\0162\'.xnorma"
      "l.tLowPolyMesh.eSwizzleComponent\022\020\n\010Glos"
      "sTex\030\033 \001(\t\022\r\n\005Scale\030\034 \001(\002\022;\n\nNMSwizzleZ\030"
      "\035 \001(\0162\'.xnormal.tLowPolyMesh.eSwizzleCom"
      "ponent\022\035\n\025VectorDisplacementTex\030\036 \001(\t\022=\n"
      "\014VVDMSwizzleX\030\037 \001(\0162\'.xnormal.tLowPolyMe"
      "sh.eSwizzleComponent\022\032\n\022UsePerVertexColo"
      "rs\030  \001(\010\022+\n#HighpolyNormalsOverrideTange"
      "ntSpace\030! \001(\010\022\017\n\007LMAOTex\030\" \001(\t\022\017\n\007SpecTe"
      "x\030# \001(\t\022\017\n\007NormTex\030$ \001(\t\0228\n\026HighpolyNorm"
      "alOverride\030% \001(\0132\030.xnormal.UnspecifiedTy"
      "pe\022\026\n\016PositionOffset\030& \001(\t\022\032\n\022MaxRayDist"
      "anceBack\030\' \001(\002\022\022\n\nUseFresnel\030( \001(\010\022\026\n\016Re"
      "ceiveShadows\030) \001(\010\022\023\n\013EmissiveTex\030* \001(\t\022"
      "\024\n\014BackfaceCull\030+ \001(\010\022\023\n\013CastShadows\030, \001"
      "(\010\022\020\n\010MatchUVs\030- \001(\010\"\257\001\n\021eSwizzleCompone"
      "nt\022\030\n\024eSwizzleComponent_X0\020\000\022\030\n\024eSwizzle"
      "Component_X1\020\001\022\030\n\024eSwizzleComponent_Y0\020\002"
      "\022\030\n\024eSwizzleComponent_Y1\020\003\022\030\n\024eSwizzleCo"
      "mponent_Z0\020\004\022\030\n\024eSwizzleComponent_Z1\020\005\"\257"
      "\001\n\021eTransparencyMode\022\032\n\026eTransparencyMod"
      "e_1Bit\020\000\022\"\n\036eTransparencyMode_AdditiveGl"
      "ow\020\001\022\033\n\027eTransparencyMode_Blend\020\002\022\032\n\026eTr"
      "ansparencyMode_None\020\003\022!\n\035eTransparencyMo"
      "de_ScreenGlass\020\004\"r\n\016eNormalMapType\022\035\n\031eN"
      "ormalMapType_Derivative\020\000\022\037\n\033eNormalMapT"
      "ype_Object_space\020\001\022 \n\034eNormalMapType_Tan"
      "gent_space\020\002\"+\n\010tVector3\022\t\n\001x\030\001 \001(\002\022\t\n\001y"
      "\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\366(\n\rtGenerateMaps\022)\n\021N"
      "MBackgroundColor\030\001 \001(\0132\016.xnormal.tRGB8\022)"
      "\n\021HMBackgroundColor\030\002 \001(\0132\016.xnormal.tRGB"
      "8\0227\n\037BakeHighpolyBaseTextureNoTexCol\030\003 \001"
      "(\0132\016.xnormal.tRGB8\022>\n&BakeHighpolyBaseTe"
      "xtureBackgroundColor\030\004 \001(\0132\016.xnormal.tRG"
      "B8\0226\n\036RenderWireframeBackgroundColor\030\005 \001"
      "(\0132\016.xnormal.tRGB8\022*\n\022RenderWireframeCol"
      "\030\006 \001(\0132\016.xnormal.tRGB8\022#\n\013RenderCWCol\030\007 "
      "\001(\0132\016.xnormal.tRGB8\022%\n\rRenderSeamCol\030\010 \001"
      "(\0132\016.xnormal.tRGB8\022)\n\021RenderRayFailsCol\030"
      "\t \001(\0132\016.xnormal.tRGB8\022\'\n\017AOOccludedColor"
      "\030\n \001(\0132\016.xnormal.tRGB8\022)\n\021AOUnoccludedCo"
      "lor\030\013 \001(\0132\016.xnormal.tRGB8\022)\n\021AOBackgroun"
      "dColor\030\014 \001(\0132\016.xnormal.tRGB8\022+\n\023BentBack"
      "groundColor\030\r \001(\0132\016.xnormal.tRGB8\022*\n\022PRT"
      "BackgroundColor\030\016 \001(\0132\016.xnormal.tRGB8\0220\n"
      "\030ConvexityBackgroundColor\030\017 \001(\0132\016.xnorma"
      "l.tRGB8\0220\n\030ThicknessBackgroundColor\030\020 \001("
      "\0132\016.xnormal.tRGB8\0220\n\030ProximityBackground"
      "Color\030\021 \001(\0132\016.xnormal.tRGB8\022-\n\025CavityBac"
      "kgroundColor\030\022 \001(\0132\016.xnormal.tRGB8\022*\n\022VD"
      "MBackgroundColor\030\023 \001(\0132\016.xnormal.tRGB8\022,"
      "\n\024RadNMBackgroundColor\030\024 \001(\0132\016.xnormal.t"
      "RGB8\022+\n\023CurvBackgroundColor\030\025 \001(\0132\016.xnor"
      "mal.tRGB8\022.\n\026DerivNMBackgroundColor\030\026 \001("
      "\0132\016.xnormal.tRGB8\022.\n\026TransluBackgroundCo"
      "lor\030\027 \001(\0132\016.xnormal.tRGB8\0226\n\036BakeHighpol"
      "yVColsBackgroundCol\030\030 \001(\0132\016.xnormal.tRGB"
      "8\022\026\n\016ClosestIfFails\030\031 \001(\010\022\034\n\024DirectionsT"
      "onemapMax\030\032 \001(\002\022\025\n\rCurvMonocrome\030\033 \001(\010\022\016"
      "\n\006AOBias\030\034 \001(\002\022\030\n\020BentTangentSpace\030\035 \001(\010"
      "\022\022\n\nGenTranslu\030\036 \001(\010\022>\n\016AODistribution\030\037"
      " \001(\0162&.xnormal.tGenerateMaps.eAODistribu"
      "tion\022\024\n\014PRTThreshold\030  \001(\002\022\034\n\024Directions"
      "TonemapMin\030! \001(\002\022@\n\020CurvDistribution\030\" \001"
      "(\0162&.xnormal.tGenerateMaps.eAODistributi"
      "on\022\022\n\nBentJitter\030# \001(\010\022@\n\020BentDistributi"
      "on\030$ \001(\0162&.xnormal.tGenerateMaps.eAODist"
      "ribution\022\037\n\027BakeHighpolyBaseTexture\030% \001("
      "\010\022\024\n\014GenConvexity\030& \001(\010\022#\n\033RadiosityNorm"
      "alsAttenLinear\030\' \001(\002\022\034\n\024TransluRaysPerSa"
      "mple\030( \001(\r\022\032\n\022CurvSearchDistance\030) \001(\002\022:"
      "\n\010SwizzleZ\030* \001(\0162(.xnormal.tGenerateMaps"
      ".eSwizzleComponent\022\023\n\013TransluBias\030+ \001(\002\022"
      "\033\n\023PRTLimitRayDistance\030, \001(\010\022\017\n\007GenBent\030"
      "- \001(\010\022\032\n\022AOLimitRayDistance\030. \001(\010\022\031\n\021Cur"
      "vRaysPerSample\030/ \001(\r\022L\n\034RadiosityNormals"
      "Distribution\0300 \001(\0162&.xnormal.tGenerateMa"
      "ps.eAODistribution\022%\n\035RadiosityNormalsRa"
      "ysPerSample\0301 \001(\r\022\022\n\nCurvJitter\0302 \001(\010\022\024\n"
      "\014TangentSpace\0303 \001(\010\022*\n\"RadiosityNormalsA"
      "llowPureOcclusion\0304 \001(\010\022>\n\014BentSwizzleX\030"
      "5 \001(\0162(.xnormal.tGenerateMaps.eSwizzleCo"
      "mponent\022:\n\010SwizzleY\0306 \001(\0162(.xnormal.tGen"
      "erateMaps.eSwizzleComponent\022\017\n\007GenCurv\0307"
      " \001(\010\022\021\n\tPRTJitter\0308 \001(\010\022\030\n\020AOAttenCuadra"
      "tic\0309 \001(\002\022\025\n\rBentConeAngle\030: \001(\002\022:\n\010Swiz"
      "zleX\030; \001(\0162(.xnormal.tGenerateMaps.eSwiz"
      "zleComponent\022\026\n\016RenderRayFails\030< \001(\010\022\032\n\022"
      "CavitySearchRadius\030= \001(\002\022 \n\030RadiosityNor"
      "malsEncodeAO\030> \001(\010\022\030\n\020TransluConeAngle\030\?"
      " \001(\002\022\031\n\021BentRaysPerSample\030@ \001(\r\022\026\n\016Conve"
      "xityScale\030A \001(\002\022!\n\031RadiosityNormalsConeA"
      "ngle\030B \001(\002\022\014\n\004File\030C \001(\t\022\022\n\nGenDerivNM\030D"
      " \001(\010\022\034\n\024BentLimitRayDistance\030E \001(\010\022\017\n\007PR"
      "TBias\030F \001(\002\022\027\n\017RenderWireframe\030G \001(\010\022\024\n\014"
      "PRTNormalize\030H \001(\010\022\r\n\005GenAO\030I \001(\010\022\024\n\014PRT"
      "ConeAngle\030J \001(\002\022\016\n\006Height\030K \001(\r\022&\n\036Radio"
      "sityNormalsAttenCuadratic\030L \001(\002\022B\n\021Direc"
      "tionsTonemap\030M \001(\0162\'.xnormal.tGenerateMa"
      "ps.eHMNormalization\022\024\n\014DirectionsTS\030N \001("
      "\010\022\030\n\020PRTRaysPerSample\030O \001(\r\022\023\n\013EdgePaddi"
      "ng\030P \001(\r\022D\n\022DirectionsSwizzleZ\030Q \001(\0162(.x"
      "normal.tGenerateMaps.eSwizzleComponent\022\033"
      "\n\023AOAllowPureOccluded\030R \001(\010\022\034\n\024AOIgnoreB"
      "ackfaceHits\030S \001(\010\022\033\n\023CavityRaysPerSample"
      "\030T \001(\r\022\027\n\017AOAttenConstant\030U \001(\002\022\024\n\014Cavit"
      "yJitter\030V \001(\010\022\030\n\020HeightTonemapMax\030W \001(\002\022"
      "\025\n\rGenDirections\030X \001(\010\022(\n RadiosityNorma"
      "lsLimitRayDistance\030Y \001(\010\022\030\n\020HeightTonema"
      "pMin\030Z \001(\002\022\036\n\026RadiosityNormalsJitter\030[ \001"
      "(\010\022D\n\022DirectionsSwizzleY\030\\ \001(\0162(.xnormal"
      ".tGenerateMaps.eSwizzleComponent\022\r\n\005Widt"
      "h\030] \001(\r\0226\n.BakeHighpolyBaseTextureDrawOb"
      "jectIDIfNoTexture\030^ \001(\010\022\021\n\tConcavity\030_ \001"
      "(\010\022D\n\022DirectionsSwizzleX\030` \001(\0162(.xnormal"
      ".tGenerateMaps.eSwizzleComponent\022\022\n\nGenN"
      "ormals\030a \001(\010\022\036\n\026ProximityRaysPerSample\030b"
      " \001(\r\022\022\n\nGenHeights\030c \001(\010\022%\n\035RadiosityNor"
      "malsAttenConstant\030d \001(\002\022\024\n\014GenProximity\030"
      "e \001(\010\022\016\n\006GenPRT\030f \001(\010\022\026\n\016CavityContrast\030"
      "g \001(\002\022E\n\030RadiosityNormalsCoordSys\030h \001(\0162"
      "#.xnormal.tGenerateMaps.eRNMCoordSys\022\025\n\r"
      "TransluJitter\030i \001(\010\022\027\n\017AORaysPerSample\030j"
      " \001(\r\022\020\n\010BentBias\030k \001(\002\022\037\n\027DiscardRayBack"
      "FacesHits\030l \001(\010\022\023\n\013AOConeAngle\030m \001(\002\022>\n\014"
      "BentSwizzleY\030n \001(\0162(.xnormal.tGenerateMa"
      "ps.eSwizzleComponent\022\034\n\024RadiosityNormals"
      "Bias\030o \001(\002\022 \n\030RadiosityNormalsContrast\030p"
      " \001(\002\022\023\n\013CavitySteps\030q \001(\r\0220\n\002AA\030r \001(\0162$."
      "xnormal.tGenerateMaps.eAntialiasing\022>\n\014B"
      "entSwizzleZ\030s \001(\0162(.xnormal.tGenerateMap"
      "s.eSwizzleComponent\022\022\n\nBucketSize\030t \001(\r\022"
      "\025\n\rCurvConeAngle\030u \001(\002\022\023\n\013TransluDist\030v "
      "\001(\002\022\020\n\010AOJitter\030w \001(\010\022\020\n\010CurvBias\030x \001(\002\022"
      "\023\n\013GenWireRays\030y \001(\010\022<\n\rCurvAlgorithm\030z "
      "\001(\0162%.xnormal.tGenerateMaps.eCurvAlgorit"
      "hm\022C\n\023TransluDistribution\030{ \001(\0162&.xnorma"
      "l.tGenerateMaps.eAODistribution\022\025\n\rAOAtt"
      "enLinear\030| \001(\002\022!\n\031ProximityLimitRayDista"
      "nce\030} \001(\010\022\033\n\023GenRadiosityNormals\030~ \001(\010\022\032"
      "\n\022ProximityConeAngle\030\177 \001(\002\022\?\n\rHeightTone"
      "map\030\200\001 \001(\0162\'.xnormal.tGenerateMaps.eHMNo"
      "rmalization\022\022\n\tGenCavity\030\201\001 \001(\010\022\032\n\021BakeH"
      "ighpolyVCols\030\202\001 \001(\010\"h\n\017eAODistribution\022\032"
      "\n\026eAODistribution_Cosine\020\000\022\034\n\030eAODistrib"
      "ution_CosineSq\020\001\022\033\n\027eAODistribution_Unif"
      "orm\020\002\"\257\001\n\021eSwizzleComponent\022\030\n\024eSwizzleC"
      "omponent_X0\020\000\022\030\n\024eSwizzleComponent_X1\020\001\022"
      "\030\n\024eSwizzleComponent_Y0\020\002\022\030\n\024eSwizzleCom"
      "ponent_Y1\020\003\022\030\n\024eSwizzleComponent_Z0\020\004\022\030\n"
      "\024eSwizzleComponent_Z1\020\005\"k\n\020eHMNormalizat"
      "ion\022 \n\034eHMNormalization_Interactive\020\000\022\033\n"
      "\027eHMNormalization_Manual\020\001\022\030\n\024eHMNormali"
      "zation_Raw\020\002\"Y\n\014eRNMCoordSys\022\025\n\021eRNMCoor"
      "dSys_AliB\020\000\022\031\n\025eRNMCoordSys_Direct3D\020\001\022\027"
      "\n\023eRNMCoordSys_OpenGL\020\002\"N\n\reAntialiasing"
      "\022\023\n\017eAntialiasing_1\020\000\022\023\n\017eAntialiasing_2"
      "\020\001\022\023\n\017eAntialiasing_4\020\002\"I\n\016eCurvAlgorith"
      "m\022\032\n\026eCurvAlgorithm_Average\020\000\022\033\n\027eCurvAl"
      "gorithm_Gaussian\020\001\"a\n\016tHighPolyModel\022$\n\004"
      "Mesh\030\001 \003(\0132\026.xnormal.tHighPolyMesh\022\017\n\007Ba"
      "seTex\030\002 \001(\t\022\030\n\020DefaultMeshScale\030\003 \001(\002\"N\n"
      "\rtLowPolyModel\022#\n\004Mesh\030\001 \003(\0132\025.xnormal.t"
      "LowPolyMesh\022\030\n\020DefaultMeshScale\030\002 \001(\002\"\214\t"
      "\n\ttViewer3D\022)\n\021LightAmbientColor\030\001 \001(\0132\016"
      ".xnormal.tRGB8\022)\n\021LightDiffuseColor\030\002 \001("
      "\0132\016.xnormal.tRGB8\022*\n\022LightSpecularColor\030"
      "\003 \001(\0132\016.xnormal.tRGB8\022+\n\023LightSecondaryC"
      "olor\030\004 \001(\0132\016.xnormal.tRGB8\022*\n\022LightTerti"
      "aryColor\030\005 \001(\0132\016.xnormal.tRGB8\022\'\n\017Backgr"
      "oundColor\030\006 \001(\0132\016.xnormal.tRGB8\022!\n\tGridC"
      "olor\030\007 \001(\0132\016.xnormal.tRGB8\022!\n\tCageColor\030"
      "\010 \001(\0132\016.xnormal.tRGB8\022(\n\016CameraRotation\030"
      "\t \001(\0132\020.xnormal.tMatrix\022)\n\016CameraPositio"
      "n\030\n \001(\0132\021.xnormal.tVector3\022(\n\rLightPosit"
      "ion\030\013 \001(\0132\021.xnormal.tVector3\022\017\n\007AxisScl\030"
      "\014 \001(\002\022\026\n\016XemakosExample\030\r \001(\010\022\025\n\rShowWir"
      "eframe\030\016 \001(\010\022\023\n\013CageOpacity\030\017 \001(\002\022\032\n\022Dif"
      "fuseGIIntensity\030\020 \001(\002\022\016\n\006ShowAO\030\021 \001(\010\022\024\n"
      "\014SSAOContrast\030\022 \001(\002\022\022\n\nShadowArea\030\023 \001(\002\022"
      "\035\n\025LightIndiretIntensity\030\024 \001(\002\022\025\n\rShowHi"
      "ghpolys\030\025 \001(\010\022\025\n\rShowStarfield\030\026 \001(\010\022\024\n\014"
      "ShowBlockers\030\027 \001(\010\022\024\n\014HDRThreshold\030\030 \001(\002"
      "\022\022\n\nSSAOBright\030\031 \001(\002\022\026\n\016SSAOBlurRadius\030\032"
      " \001(\002\022\020\n\010ShowGrid\030\033 \001(\010\022\030\n\020ParallaxStreng"
      "th\030\034 \001(\002\022\021\n\tSSAOAtten\030\035 \001(\002\022\033\n\023CameraOrb"
      "itDistance\030\036 \001(\002\022\017\n\007UseGlow\030\037 \001(\010\022\023\n\013SSA"
      "OEnabled\030  \001(\010\022\022\n\nShadowBias\030! \001(\002\022\022\n\nSS"
      "AORadius\030\" \001(\002\022\026\n\016LightIntensity\030# \001(\002\022\020"
      "\n\010Exposure\030$ \001(\002\022\035\n\025CameraOrbitAutoCente"
      "r\030% \001(\010\022\023\n\013CastShadows\030& \001(\010\022\023\n\013ShowNorm"
      "als\030\' \001(\010\022\034\n\024MaxTessellationLevel\030( \001(\003\022"
      "\024\n\014ShowTangents\030) \001(\010\022\025\n\rGlowIntensity\030*"
      " \001(\002\"\357\001\n\010Settings\022.\n\rHighPolyModel\030\001 \001(\013"
      "2\027.xnormal.tHighPolyModel\022,\n\014LowPolyMode"
      "l\030\002 \001(\0132\026.xnormal.tLowPolyModel\022,\n\014Gener"
      "ateMaps\030\003 \001(\0132\026.xnormal.tGenerateMaps\022 \n"
      "\006Detail\030\004 \001(\0132\020.xnormal.tDetail\022$\n\010Viewe"
      "r3D\030\005 \001(\0132\022.xnormal.tViewer3D\022\017\n\007Version"
      "\030\006 \001(\tB\n\252\002\007xnormalb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 9586);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "xnormal.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_xnormal_2eproto

const ::google::protobuf::EnumDescriptor* tDetail_eHM2NMMethod_descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_enum_descriptors[0];
}
bool tDetail_eHM2NMMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_3x3;
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_4Samples;
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_5x5;
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_PRE3x3;
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_PRE5x5;
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_SO3x3;
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_SO5x5;
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_MIN;
const tDetail_eHM2NMMethod tDetail::eHM2NMMethod_MAX;
const int tDetail::eHM2NMMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* tHighPolyMesh_eSmoothNormals_descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_enum_descriptors[1];
}
bool tHighPolyMesh_eSmoothNormals_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tHighPolyMesh_eSmoothNormals tHighPolyMesh::eSmoothNormals_AverageNormals;
const tHighPolyMesh_eSmoothNormals tHighPolyMesh::eSmoothNormals_HardenNormals;
const tHighPolyMesh_eSmoothNormals tHighPolyMesh::eSmoothNormals_UseExportedNormals;
const tHighPolyMesh_eSmoothNormals tHighPolyMesh::eSmoothNormals_MIN;
const tHighPolyMesh_eSmoothNormals tHighPolyMesh::eSmoothNormals_MAX;
const int tHighPolyMesh::eSmoothNormals_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* tLowPolyMesh_eSwizzleComponent_descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_enum_descriptors[2];
}
bool tLowPolyMesh_eSwizzleComponent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh::eSwizzleComponent_X0;
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh::eSwizzleComponent_X1;
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh::eSwizzleComponent_Y0;
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh::eSwizzleComponent_Y1;
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh::eSwizzleComponent_Z0;
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh::eSwizzleComponent_Z1;
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh::eSwizzleComponent_MIN;
const tLowPolyMesh_eSwizzleComponent tLowPolyMesh::eSwizzleComponent_MAX;
const int tLowPolyMesh::eSwizzleComponent_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* tLowPolyMesh_eTransparencyMode_descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_enum_descriptors[3];
}
bool tLowPolyMesh_eTransparencyMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tLowPolyMesh_eTransparencyMode tLowPolyMesh::eTransparencyMode_1Bit;
const tLowPolyMesh_eTransparencyMode tLowPolyMesh::eTransparencyMode_AdditiveGlow;
const tLowPolyMesh_eTransparencyMode tLowPolyMesh::eTransparencyMode_Blend;
const tLowPolyMesh_eTransparencyMode tLowPolyMesh::eTransparencyMode_None;
const tLowPolyMesh_eTransparencyMode tLowPolyMesh::eTransparencyMode_ScreenGlass;
const tLowPolyMesh_eTransparencyMode tLowPolyMesh::eTransparencyMode_MIN;
const tLowPolyMesh_eTransparencyMode tLowPolyMesh::eTransparencyMode_MAX;
const int tLowPolyMesh::eTransparencyMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* tLowPolyMesh_eNormalMapType_descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_enum_descriptors[4];
}
bool tLowPolyMesh_eNormalMapType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tLowPolyMesh_eNormalMapType tLowPolyMesh::eNormalMapType_Derivative;
const tLowPolyMesh_eNormalMapType tLowPolyMesh::eNormalMapType_Object_space;
const tLowPolyMesh_eNormalMapType tLowPolyMesh::eNormalMapType_Tangent_space;
const tLowPolyMesh_eNormalMapType tLowPolyMesh::eNormalMapType_MIN;
const tLowPolyMesh_eNormalMapType tLowPolyMesh::eNormalMapType_MAX;
const int tLowPolyMesh::eNormalMapType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* tGenerateMaps_eAODistribution_descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_enum_descriptors[5];
}
bool tGenerateMaps_eAODistribution_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tGenerateMaps_eAODistribution tGenerateMaps::eAODistribution_Cosine;
const tGenerateMaps_eAODistribution tGenerateMaps::eAODistribution_CosineSq;
const tGenerateMaps_eAODistribution tGenerateMaps::eAODistribution_Uniform;
const tGenerateMaps_eAODistribution tGenerateMaps::eAODistribution_MIN;
const tGenerateMaps_eAODistribution tGenerateMaps::eAODistribution_MAX;
const int tGenerateMaps::eAODistribution_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* tGenerateMaps_eSwizzleComponent_descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_enum_descriptors[6];
}
bool tGenerateMaps_eSwizzleComponent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tGenerateMaps_eSwizzleComponent tGenerateMaps::eSwizzleComponent_X0;
const tGenerateMaps_eSwizzleComponent tGenerateMaps::eSwizzleComponent_X1;
const tGenerateMaps_eSwizzleComponent tGenerateMaps::eSwizzleComponent_Y0;
const tGenerateMaps_eSwizzleComponent tGenerateMaps::eSwizzleComponent_Y1;
const tGenerateMaps_eSwizzleComponent tGenerateMaps::eSwizzleComponent_Z0;
const tGenerateMaps_eSwizzleComponent tGenerateMaps::eSwizzleComponent_Z1;
const tGenerateMaps_eSwizzleComponent tGenerateMaps::eSwizzleComponent_MIN;
const tGenerateMaps_eSwizzleComponent tGenerateMaps::eSwizzleComponent_MAX;
const int tGenerateMaps::eSwizzleComponent_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* tGenerateMaps_eHMNormalization_descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_enum_descriptors[7];
}
bool tGenerateMaps_eHMNormalization_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tGenerateMaps_eHMNormalization tGenerateMaps::eHMNormalization_Interactive;
const tGenerateMaps_eHMNormalization tGenerateMaps::eHMNormalization_Manual;
const tGenerateMaps_eHMNormalization tGenerateMaps::eHMNormalization_Raw;
const tGenerateMaps_eHMNormalization tGenerateMaps::eHMNormalization_MIN;
const tGenerateMaps_eHMNormalization tGenerateMaps::eHMNormalization_MAX;
const int tGenerateMaps::eHMNormalization_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* tGenerateMaps_eRNMCoordSys_descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_enum_descriptors[8];
}
bool tGenerateMaps_eRNMCoordSys_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tGenerateMaps_eRNMCoordSys tGenerateMaps::eRNMCoordSys_AliB;
const tGenerateMaps_eRNMCoordSys tGenerateMaps::eRNMCoordSys_Direct3D;
const tGenerateMaps_eRNMCoordSys tGenerateMaps::eRNMCoordSys_OpenGL;
const tGenerateMaps_eRNMCoordSys tGenerateMaps::eRNMCoordSys_MIN;
const tGenerateMaps_eRNMCoordSys tGenerateMaps::eRNMCoordSys_MAX;
const int tGenerateMaps::eRNMCoordSys_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* tGenerateMaps_eAntialiasing_descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_enum_descriptors[9];
}
bool tGenerateMaps_eAntialiasing_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tGenerateMaps_eAntialiasing tGenerateMaps::eAntialiasing_1;
const tGenerateMaps_eAntialiasing tGenerateMaps::eAntialiasing_2;
const tGenerateMaps_eAntialiasing tGenerateMaps::eAntialiasing_4;
const tGenerateMaps_eAntialiasing tGenerateMaps::eAntialiasing_MIN;
const tGenerateMaps_eAntialiasing tGenerateMaps::eAntialiasing_MAX;
const int tGenerateMaps::eAntialiasing_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* tGenerateMaps_eCurvAlgorithm_descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_enum_descriptors[10];
}
bool tGenerateMaps_eCurvAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const tGenerateMaps_eCurvAlgorithm tGenerateMaps::eCurvAlgorithm_Average;
const tGenerateMaps_eCurvAlgorithm tGenerateMaps::eCurvAlgorithm_Gaussian;
const tGenerateMaps_eCurvAlgorithm tGenerateMaps::eCurvAlgorithm_MIN;
const tGenerateMaps_eCurvAlgorithm tGenerateMaps::eCurvAlgorithm_MAX;
const int tGenerateMaps::eCurvAlgorithm_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnspecifiedType::kBaseObjectTypeFieldNumber;
const int UnspecifiedType::kObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnspecifiedType::UnspecifiedType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_xnormal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xnormal.UnspecifiedType)
}
UnspecifiedType::UnspecifiedType(const UnspecifiedType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  baseobjecttype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.baseobjecttype().size() > 0) {
    baseobjecttype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.baseobjecttype_);
  }
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.object().size() > 0) {
    object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
  }
  // @@protoc_insertion_point(copy_constructor:xnormal.UnspecifiedType)
}

void UnspecifiedType::SharedCtor() {
  baseobjecttype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UnspecifiedType::~UnspecifiedType() {
  // @@protoc_insertion_point(destructor:xnormal.UnspecifiedType)
  SharedDtor();
}

void UnspecifiedType::SharedDtor() {
  baseobjecttype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UnspecifiedType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnspecifiedType::descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[0].descriptor;
}

const UnspecifiedType& UnspecifiedType::default_instance() {
  protobuf_xnormal_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnspecifiedType* UnspecifiedType::New(::google::protobuf::Arena* arena) const {
  UnspecifiedType* n = new UnspecifiedType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnspecifiedType::Clear() {
// @@protoc_insertion_point(message_clear_start:xnormal.UnspecifiedType)
  baseobjecttype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UnspecifiedType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xnormal.UnspecifiedType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string baseObjectType = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_baseobjecttype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->baseobjecttype().data(), this->baseobjecttype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.UnspecifiedType.baseObjectType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes object = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xnormal.UnspecifiedType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xnormal.UnspecifiedType)
  return false;
#undef DO_
}

void UnspecifiedType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xnormal.UnspecifiedType)
  // string baseObjectType = 1;
  if (this->baseobjecttype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->baseobjecttype().data(), this->baseobjecttype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.UnspecifiedType.baseObjectType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->baseobjecttype(), output);
  }

  // bytes object = 2;
  if (this->object().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->object(), output);
  }

  // @@protoc_insertion_point(serialize_end:xnormal.UnspecifiedType)
}

::google::protobuf::uint8* UnspecifiedType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xnormal.UnspecifiedType)
  // string baseObjectType = 1;
  if (this->baseobjecttype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->baseobjecttype().data(), this->baseobjecttype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.UnspecifiedType.baseObjectType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->baseobjecttype(), target);
  }

  // bytes object = 2;
  if (this->object().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->object(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xnormal.UnspecifiedType)
  return target;
}

size_t UnspecifiedType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xnormal.UnspecifiedType)
  size_t total_size = 0;

  // string baseObjectType = 1;
  if (this->baseobjecttype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->baseobjecttype());
  }

  // bytes object = 2;
  if (this->object().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->object());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnspecifiedType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xnormal.UnspecifiedType)
  GOOGLE_DCHECK_NE(&from, this);
  const UnspecifiedType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnspecifiedType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xnormal.UnspecifiedType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xnormal.UnspecifiedType)
    MergeFrom(*source);
  }
}

void UnspecifiedType::MergeFrom(const UnspecifiedType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xnormal.UnspecifiedType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.baseobjecttype().size() > 0) {

    baseobjecttype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.baseobjecttype_);
  }
  if (from.object().size() > 0) {

    object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
  }
}

void UnspecifiedType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xnormal.UnspecifiedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnspecifiedType::CopyFrom(const UnspecifiedType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xnormal.UnspecifiedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnspecifiedType::IsInitialized() const {
  return true;
}

void UnspecifiedType::Swap(UnspecifiedType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnspecifiedType::InternalSwap(UnspecifiedType* other) {
  baseobjecttype_.Swap(&other->baseobjecttype_);
  object_.Swap(&other->object_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnspecifiedType::GetMetadata() const {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnspecifiedType

// string baseObjectType = 1;
void UnspecifiedType::clear_baseobjecttype() {
  baseobjecttype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnspecifiedType::baseobjecttype() const {
  // @@protoc_insertion_point(field_get:xnormal.UnspecifiedType.baseObjectType)
  return baseobjecttype_.GetNoArena();
}
void UnspecifiedType::set_baseobjecttype(const ::std::string& value) {
  
  baseobjecttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.UnspecifiedType.baseObjectType)
}
#if LANG_CXX11
void UnspecifiedType::set_baseobjecttype(::std::string&& value) {
  
  baseobjecttype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.UnspecifiedType.baseObjectType)
}
#endif
void UnspecifiedType::set_baseobjecttype(const char* value) {
  
  baseobjecttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.UnspecifiedType.baseObjectType)
}
void UnspecifiedType::set_baseobjecttype(const char* value, size_t size) {
  
  baseobjecttype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.UnspecifiedType.baseObjectType)
}
::std::string* UnspecifiedType::mutable_baseobjecttype() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.UnspecifiedType.baseObjectType)
  return baseobjecttype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnspecifiedType::release_baseobjecttype() {
  // @@protoc_insertion_point(field_release:xnormal.UnspecifiedType.baseObjectType)
  
  return baseobjecttype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnspecifiedType::set_allocated_baseobjecttype(::std::string* baseobjecttype) {
  if (baseobjecttype != NULL) {
    
  } else {
    
  }
  baseobjecttype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), baseobjecttype);
  // @@protoc_insertion_point(field_set_allocated:xnormal.UnspecifiedType.baseObjectType)
}

// bytes object = 2;
void UnspecifiedType::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UnspecifiedType::object() const {
  // @@protoc_insertion_point(field_get:xnormal.UnspecifiedType.object)
  return object_.GetNoArena();
}
void UnspecifiedType::set_object(const ::std::string& value) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.UnspecifiedType.object)
}
#if LANG_CXX11
void UnspecifiedType::set_object(::std::string&& value) {
  
  object_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.UnspecifiedType.object)
}
#endif
void UnspecifiedType::set_object(const char* value) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.UnspecifiedType.object)
}
void UnspecifiedType::set_object(const void* value, size_t size) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.UnspecifiedType.object)
}
::std::string* UnspecifiedType::mutable_object() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.UnspecifiedType.object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UnspecifiedType::release_object() {
  // @@protoc_insertion_point(field_release:xnormal.UnspecifiedType.object)
  
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UnspecifiedType::set_allocated_object(::std::string* object) {
  if (object != NULL) {
    
  } else {
    
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:xnormal.UnspecifiedType.object)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tMatrix::kE13FieldNumber;
const int tMatrix::kE12FieldNumber;
const int tMatrix::kE23FieldNumber;
const int tMatrix::kE31FieldNumber;
const int tMatrix::kE11FieldNumber;
const int tMatrix::kE22FieldNumber;
const int tMatrix::kE33FieldNumber;
const int tMatrix::kE21FieldNumber;
const int tMatrix::kE32FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tMatrix::tMatrix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_xnormal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xnormal.tMatrix)
}
tMatrix::tMatrix(const tMatrix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&e13_, &from.e13_,
    reinterpret_cast<char*>(&e32_) -
    reinterpret_cast<char*>(&e13_) + sizeof(e32_));
  // @@protoc_insertion_point(copy_constructor:xnormal.tMatrix)
}

void tMatrix::SharedCtor() {
  ::memset(&e13_, 0, reinterpret_cast<char*>(&e32_) -
    reinterpret_cast<char*>(&e13_) + sizeof(e32_));
  _cached_size_ = 0;
}

tMatrix::~tMatrix() {
  // @@protoc_insertion_point(destructor:xnormal.tMatrix)
  SharedDtor();
}

void tMatrix::SharedDtor() {
}

void tMatrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tMatrix::descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[1].descriptor;
}

const tMatrix& tMatrix::default_instance() {
  protobuf_xnormal_2eproto::InitDefaults();
  return *internal_default_instance();
}

tMatrix* tMatrix::New(::google::protobuf::Arena* arena) const {
  tMatrix* n = new tMatrix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tMatrix::Clear() {
// @@protoc_insertion_point(message_clear_start:xnormal.tMatrix)
  ::memset(&e13_, 0, reinterpret_cast<char*>(&e32_) -
    reinterpret_cast<char*>(&e13_) + sizeof(e32_));
}

bool tMatrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xnormal.tMatrix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float e13 = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e13_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float e12 = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e12_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float e23 = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e23_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float e31 = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e31_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float e11 = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e11_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float e22 = 6;
      case 6: {
        if (tag == 53u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e22_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float e33 = 7;
      case 7: {
        if (tag == 61u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e33_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float e21 = 8;
      case 8: {
        if (tag == 69u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e21_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float e32 = 9;
      case 9: {
        if (tag == 77u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &e32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xnormal.tMatrix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xnormal.tMatrix)
  return false;
#undef DO_
}

void tMatrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xnormal.tMatrix)
  // float e13 = 1;
  if (this->e13() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->e13(), output);
  }

  // float e12 = 2;
  if (this->e12() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->e12(), output);
  }

  // float e23 = 3;
  if (this->e23() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->e23(), output);
  }

  // float e31 = 4;
  if (this->e31() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->e31(), output);
  }

  // float e11 = 5;
  if (this->e11() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->e11(), output);
  }

  // float e22 = 6;
  if (this->e22() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->e22(), output);
  }

  // float e33 = 7;
  if (this->e33() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->e33(), output);
  }

  // float e21 = 8;
  if (this->e21() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->e21(), output);
  }

  // float e32 = 9;
  if (this->e32() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->e32(), output);
  }

  // @@protoc_insertion_point(serialize_end:xnormal.tMatrix)
}

::google::protobuf::uint8* tMatrix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xnormal.tMatrix)
  // float e13 = 1;
  if (this->e13() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->e13(), target);
  }

  // float e12 = 2;
  if (this->e12() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->e12(), target);
  }

  // float e23 = 3;
  if (this->e23() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->e23(), target);
  }

  // float e31 = 4;
  if (this->e31() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->e31(), target);
  }

  // float e11 = 5;
  if (this->e11() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->e11(), target);
  }

  // float e22 = 6;
  if (this->e22() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->e22(), target);
  }

  // float e33 = 7;
  if (this->e33() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->e33(), target);
  }

  // float e21 = 8;
  if (this->e21() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->e21(), target);
  }

  // float e32 = 9;
  if (this->e32() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->e32(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xnormal.tMatrix)
  return target;
}

size_t tMatrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xnormal.tMatrix)
  size_t total_size = 0;

  // float e13 = 1;
  if (this->e13() != 0) {
    total_size += 1 + 4;
  }

  // float e12 = 2;
  if (this->e12() != 0) {
    total_size += 1 + 4;
  }

  // float e23 = 3;
  if (this->e23() != 0) {
    total_size += 1 + 4;
  }

  // float e31 = 4;
  if (this->e31() != 0) {
    total_size += 1 + 4;
  }

  // float e11 = 5;
  if (this->e11() != 0) {
    total_size += 1 + 4;
  }

  // float e22 = 6;
  if (this->e22() != 0) {
    total_size += 1 + 4;
  }

  // float e33 = 7;
  if (this->e33() != 0) {
    total_size += 1 + 4;
  }

  // float e21 = 8;
  if (this->e21() != 0) {
    total_size += 1 + 4;
  }

  // float e32 = 9;
  if (this->e32() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tMatrix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xnormal.tMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  const tMatrix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tMatrix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xnormal.tMatrix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xnormal.tMatrix)
    MergeFrom(*source);
  }
}

void tMatrix::MergeFrom(const tMatrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xnormal.tMatrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.e13() != 0) {
    set_e13(from.e13());
  }
  if (from.e12() != 0) {
    set_e12(from.e12());
  }
  if (from.e23() != 0) {
    set_e23(from.e23());
  }
  if (from.e31() != 0) {
    set_e31(from.e31());
  }
  if (from.e11() != 0) {
    set_e11(from.e11());
  }
  if (from.e22() != 0) {
    set_e22(from.e22());
  }
  if (from.e33() != 0) {
    set_e33(from.e33());
  }
  if (from.e21() != 0) {
    set_e21(from.e21());
  }
  if (from.e32() != 0) {
    set_e32(from.e32());
  }
}

void tMatrix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xnormal.tMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tMatrix::CopyFrom(const tMatrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xnormal.tMatrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tMatrix::IsInitialized() const {
  return true;
}

void tMatrix::Swap(tMatrix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tMatrix::InternalSwap(tMatrix* other) {
  std::swap(e13_, other->e13_);
  std::swap(e12_, other->e12_);
  std::swap(e23_, other->e23_);
  std::swap(e31_, other->e31_);
  std::swap(e11_, other->e11_);
  std::swap(e22_, other->e22_);
  std::swap(e33_, other->e33_);
  std::swap(e21_, other->e21_);
  std::swap(e32_, other->e32_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tMatrix::GetMetadata() const {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tMatrix

// float e13 = 1;
void tMatrix::clear_e13() {
  e13_ = 0;
}
float tMatrix::e13() const {
  // @@protoc_insertion_point(field_get:xnormal.tMatrix.e13)
  return e13_;
}
void tMatrix::set_e13(float value) {
  
  e13_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tMatrix.e13)
}

// float e12 = 2;
void tMatrix::clear_e12() {
  e12_ = 0;
}
float tMatrix::e12() const {
  // @@protoc_insertion_point(field_get:xnormal.tMatrix.e12)
  return e12_;
}
void tMatrix::set_e12(float value) {
  
  e12_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tMatrix.e12)
}

// float e23 = 3;
void tMatrix::clear_e23() {
  e23_ = 0;
}
float tMatrix::e23() const {
  // @@protoc_insertion_point(field_get:xnormal.tMatrix.e23)
  return e23_;
}
void tMatrix::set_e23(float value) {
  
  e23_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tMatrix.e23)
}

// float e31 = 4;
void tMatrix::clear_e31() {
  e31_ = 0;
}
float tMatrix::e31() const {
  // @@protoc_insertion_point(field_get:xnormal.tMatrix.e31)
  return e31_;
}
void tMatrix::set_e31(float value) {
  
  e31_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tMatrix.e31)
}

// float e11 = 5;
void tMatrix::clear_e11() {
  e11_ = 0;
}
float tMatrix::e11() const {
  // @@protoc_insertion_point(field_get:xnormal.tMatrix.e11)
  return e11_;
}
void tMatrix::set_e11(float value) {
  
  e11_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tMatrix.e11)
}

// float e22 = 6;
void tMatrix::clear_e22() {
  e22_ = 0;
}
float tMatrix::e22() const {
  // @@protoc_insertion_point(field_get:xnormal.tMatrix.e22)
  return e22_;
}
void tMatrix::set_e22(float value) {
  
  e22_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tMatrix.e22)
}

// float e33 = 7;
void tMatrix::clear_e33() {
  e33_ = 0;
}
float tMatrix::e33() const {
  // @@protoc_insertion_point(field_get:xnormal.tMatrix.e33)
  return e33_;
}
void tMatrix::set_e33(float value) {
  
  e33_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tMatrix.e33)
}

// float e21 = 8;
void tMatrix::clear_e21() {
  e21_ = 0;
}
float tMatrix::e21() const {
  // @@protoc_insertion_point(field_get:xnormal.tMatrix.e21)
  return e21_;
}
void tMatrix::set_e21(float value) {
  
  e21_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tMatrix.e21)
}

// float e32 = 9;
void tMatrix::clear_e32() {
  e32_ = 0;
}
float tMatrix::e32() const {
  // @@protoc_insertion_point(field_get:xnormal.tMatrix.e32)
  return e32_;
}
void tMatrix::set_e32(float value) {
  
  e32_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tMatrix.e32)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tDetail::kMethodFieldNumber;
const int tDetail::kScaleFieldNumber;
const int tDetail::kFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tDetail::tDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_xnormal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xnormal.tDetail)
}
tDetail::tDetail(const tDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  ::memcpy(&method_, &from.method_,
    reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&method_) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:xnormal.tDetail)
}

void tDetail::SharedCtor() {
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&method_, 0, reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&method_) + sizeof(scale_));
  _cached_size_ = 0;
}

tDetail::~tDetail() {
  // @@protoc_insertion_point(destructor:xnormal.tDetail)
  SharedDtor();
}

void tDetail::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tDetail::descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[2].descriptor;
}

const tDetail& tDetail::default_instance() {
  protobuf_xnormal_2eproto::InitDefaults();
  return *internal_default_instance();
}

tDetail* tDetail::New(::google::protobuf::Arena* arena) const {
  tDetail* n = new tDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:xnormal.tDetail)
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&method_, 0, reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&method_) + sizeof(scale_));
}

bool tDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xnormal.tDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xnormal.tDetail.eHM2NMMethod Method = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_method(static_cast< ::xnormal::tDetail_eHM2NMMethod >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Scale = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string File = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tDetail.File"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xnormal.tDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xnormal.tDetail)
  return false;
#undef DO_
}

void tDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xnormal.tDetail)
  // .xnormal.tDetail.eHM2NMMethod Method = 1;
  if (this->method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->method(), output);
  }

  // float Scale = 2;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // string File = 3;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tDetail.File");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file(), output);
  }

  // @@protoc_insertion_point(serialize_end:xnormal.tDetail)
}

::google::protobuf::uint8* tDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xnormal.tDetail)
  // .xnormal.tDetail.eHM2NMMethod Method = 1;
  if (this->method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->method(), target);
  }

  // float Scale = 2;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // string File = 3;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tDetail.File");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xnormal.tDetail)
  return target;
}

size_t tDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xnormal.tDetail)
  size_t total_size = 0;

  // string File = 3;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // .xnormal.tDetail.eHM2NMMethod Method = 1;
  if (this->method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->method());
  }

  // float Scale = 2;
  if (this->scale() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xnormal.tDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const tDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xnormal.tDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xnormal.tDetail)
    MergeFrom(*source);
  }
}

void tDetail::MergeFrom(const tDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xnormal.tDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.method() != 0) {
    set_method(from.method());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
}

void tDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xnormal.tDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tDetail::CopyFrom(const tDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xnormal.tDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tDetail::IsInitialized() const {
  return true;
}

void tDetail::Swap(tDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tDetail::InternalSwap(tDetail* other) {
  file_.Swap(&other->file_);
  std::swap(method_, other->method_);
  std::swap(scale_, other->scale_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tDetail::GetMetadata() const {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tDetail

// .xnormal.tDetail.eHM2NMMethod Method = 1;
void tDetail::clear_method() {
  method_ = 0;
}
::xnormal::tDetail_eHM2NMMethod tDetail::method() const {
  // @@protoc_insertion_point(field_get:xnormal.tDetail.Method)
  return static_cast< ::xnormal::tDetail_eHM2NMMethod >(method_);
}
void tDetail::set_method(::xnormal::tDetail_eHM2NMMethod value) {
  
  method_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tDetail.Method)
}

// float Scale = 2;
void tDetail::clear_scale() {
  scale_ = 0;
}
float tDetail::scale() const {
  // @@protoc_insertion_point(field_get:xnormal.tDetail.Scale)
  return scale_;
}
void tDetail::set_scale(float value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tDetail.Scale)
}

// string File = 3;
void tDetail::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tDetail::file() const {
  // @@protoc_insertion_point(field_get:xnormal.tDetail.File)
  return file_.GetNoArena();
}
void tDetail::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tDetail.File)
}
#if LANG_CXX11
void tDetail::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tDetail.File)
}
#endif
void tDetail::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tDetail.File)
}
void tDetail::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tDetail.File)
}
::std::string* tDetail::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tDetail.File)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tDetail::release_file() {
  // @@protoc_insertion_point(field_release:xnormal.tDetail.File)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tDetail::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tDetail.File)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tRGB8::kRFieldNumber;
const int tRGB8::kGFieldNumber;
const int tRGB8::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tRGB8::tRGB8()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_xnormal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xnormal.tRGB8)
}
tRGB8::tRGB8(const tRGB8& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:xnormal.tRGB8)
}

void tRGB8::SharedCtor() {
  ::memset(&r_, 0, reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_) + sizeof(b_));
  _cached_size_ = 0;
}

tRGB8::~tRGB8() {
  // @@protoc_insertion_point(destructor:xnormal.tRGB8)
  SharedDtor();
}

void tRGB8::SharedDtor() {
}

void tRGB8::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tRGB8::descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[3].descriptor;
}

const tRGB8& tRGB8::default_instance() {
  protobuf_xnormal_2eproto::InitDefaults();
  return *internal_default_instance();
}

tRGB8* tRGB8::New(::google::protobuf::Arena* arena) const {
  tRGB8* n = new tRGB8;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tRGB8::Clear() {
// @@protoc_insertion_point(message_clear_start:xnormal.tRGB8)
  ::memset(&r_, 0, reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_) + sizeof(b_));
}

bool tRGB8::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xnormal.tRGB8)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 R = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 G = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 B = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xnormal.tRGB8)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xnormal.tRGB8)
  return false;
#undef DO_
}

void tRGB8::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xnormal.tRGB8)
  // uint32 R = 1;
  if (this->r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->r(), output);
  }

  // uint32 G = 2;
  if (this->g() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->g(), output);
  }

  // uint32 B = 3;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->b(), output);
  }

  // @@protoc_insertion_point(serialize_end:xnormal.tRGB8)
}

::google::protobuf::uint8* tRGB8::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xnormal.tRGB8)
  // uint32 R = 1;
  if (this->r() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->r(), target);
  }

  // uint32 G = 2;
  if (this->g() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->g(), target);
  }

  // uint32 B = 3;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->b(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xnormal.tRGB8)
  return target;
}

size_t tRGB8::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xnormal.tRGB8)
  size_t total_size = 0;

  // uint32 R = 1;
  if (this->r() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->r());
  }

  // uint32 G = 2;
  if (this->g() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->g());
  }

  // uint32 B = 3;
  if (this->b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->b());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tRGB8::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xnormal.tRGB8)
  GOOGLE_DCHECK_NE(&from, this);
  const tRGB8* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tRGB8>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xnormal.tRGB8)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xnormal.tRGB8)
    MergeFrom(*source);
  }
}

void tRGB8::MergeFrom(const tRGB8& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xnormal.tRGB8)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.r() != 0) {
    set_r(from.r());
  }
  if (from.g() != 0) {
    set_g(from.g());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
}

void tRGB8::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xnormal.tRGB8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tRGB8::CopyFrom(const tRGB8& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xnormal.tRGB8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tRGB8::IsInitialized() const {
  return true;
}

void tRGB8::Swap(tRGB8* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tRGB8::InternalSwap(tRGB8* other) {
  std::swap(r_, other->r_);
  std::swap(g_, other->g_);
  std::swap(b_, other->b_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tRGB8::GetMetadata() const {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tRGB8

// uint32 R = 1;
void tRGB8::clear_r() {
  r_ = 0u;
}
::google::protobuf::uint32 tRGB8::r() const {
  // @@protoc_insertion_point(field_get:xnormal.tRGB8.R)
  return r_;
}
void tRGB8::set_r(::google::protobuf::uint32 value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tRGB8.R)
}

// uint32 G = 2;
void tRGB8::clear_g() {
  g_ = 0u;
}
::google::protobuf::uint32 tRGB8::g() const {
  // @@protoc_insertion_point(field_get:xnormal.tRGB8.G)
  return g_;
}
void tRGB8::set_g(::google::protobuf::uint32 value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tRGB8.G)
}

// uint32 B = 3;
void tRGB8::clear_b() {
  b_ = 0u;
}
::google::protobuf::uint32 tRGB8::b() const {
  // @@protoc_insertion_point(field_get:xnormal.tRGB8.B)
  return b_;
}
void tRGB8::set_b(::google::protobuf::uint32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tRGB8.B)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tHighPolyMesh::kFileFieldNumber;
const int tHighPolyMesh::kPositionOffsetFieldNumber;
const int tHighPolyMesh::kIgnorePerVertexColorFieldNumber;
const int tHighPolyMesh::kAverageNormalsFieldNumber;
const int tHighPolyMesh::kVisibleFieldNumber;
const int tHighPolyMesh::kBaseTexIsTSNMFieldNumber;
const int tHighPolyMesh::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tHighPolyMesh::tHighPolyMesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_xnormal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xnormal.tHighPolyMesh)
}
tHighPolyMesh::tHighPolyMesh(const tHighPolyMesh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  positionoffset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.positionoffset().size() > 0) {
    positionoffset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positionoffset_);
  }
  ::memcpy(&averagenormals_, &from.averagenormals_,
    reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&averagenormals_) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:xnormal.tHighPolyMesh)
}

void tHighPolyMesh::SharedCtor() {
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positionoffset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&averagenormals_, 0, reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&averagenormals_) + sizeof(scale_));
  _cached_size_ = 0;
}

tHighPolyMesh::~tHighPolyMesh() {
  // @@protoc_insertion_point(destructor:xnormal.tHighPolyMesh)
  SharedDtor();
}

void tHighPolyMesh::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positionoffset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tHighPolyMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tHighPolyMesh::descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[4].descriptor;
}

const tHighPolyMesh& tHighPolyMesh::default_instance() {
  protobuf_xnormal_2eproto::InitDefaults();
  return *internal_default_instance();
}

tHighPolyMesh* tHighPolyMesh::New(::google::protobuf::Arena* arena) const {
  tHighPolyMesh* n = new tHighPolyMesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tHighPolyMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:xnormal.tHighPolyMesh)
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positionoffset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&averagenormals_, 0, reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&averagenormals_) + sizeof(scale_));
}

bool tHighPolyMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xnormal.tHighPolyMesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string File = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tHighPolyMesh.File"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string PositionOffset = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positionoffset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->positionoffset().data(), this->positionoffset().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tHighPolyMesh.PositionOffset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool IgnorePerVertexColor = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignorepervertexcolor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tHighPolyMesh.eSmoothNormals AverageNormals = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_averagenormals(static_cast< ::xnormal::tHighPolyMesh_eSmoothNormals >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Visible = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool BaseTexIsTSNM = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &basetexistsnm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Scale = 7;
      case 7: {
        if (tag == 61u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xnormal.tHighPolyMesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xnormal.tHighPolyMesh)
  return false;
#undef DO_
}

void tHighPolyMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xnormal.tHighPolyMesh)
  // string File = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tHighPolyMesh.File");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file(), output);
  }

  // string PositionOffset = 2;
  if (this->positionoffset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positionoffset().data(), this->positionoffset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tHighPolyMesh.PositionOffset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->positionoffset(), output);
  }

  // bool IgnorePerVertexColor = 3;
  if (this->ignorepervertexcolor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ignorepervertexcolor(), output);
  }

  // .xnormal.tHighPolyMesh.eSmoothNormals AverageNormals = 4;
  if (this->averagenormals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->averagenormals(), output);
  }

  // bool Visible = 5;
  if (this->visible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->visible(), output);
  }

  // bool BaseTexIsTSNM = 6;
  if (this->basetexistsnm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->basetexistsnm(), output);
  }

  // float Scale = 7;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->scale(), output);
  }

  // @@protoc_insertion_point(serialize_end:xnormal.tHighPolyMesh)
}

::google::protobuf::uint8* tHighPolyMesh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xnormal.tHighPolyMesh)
  // string File = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tHighPolyMesh.File");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file(), target);
  }

  // string PositionOffset = 2;
  if (this->positionoffset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positionoffset().data(), this->positionoffset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tHighPolyMesh.PositionOffset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->positionoffset(), target);
  }

  // bool IgnorePerVertexColor = 3;
  if (this->ignorepervertexcolor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ignorepervertexcolor(), target);
  }

  // .xnormal.tHighPolyMesh.eSmoothNormals AverageNormals = 4;
  if (this->averagenormals() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->averagenormals(), target);
  }

  // bool Visible = 5;
  if (this->visible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->visible(), target);
  }

  // bool BaseTexIsTSNM = 6;
  if (this->basetexistsnm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->basetexistsnm(), target);
  }

  // float Scale = 7;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->scale(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xnormal.tHighPolyMesh)
  return target;
}

size_t tHighPolyMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xnormal.tHighPolyMesh)
  size_t total_size = 0;

  // string File = 1;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // string PositionOffset = 2;
  if (this->positionoffset().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->positionoffset());
  }

  // .xnormal.tHighPolyMesh.eSmoothNormals AverageNormals = 4;
  if (this->averagenormals() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->averagenormals());
  }

  // bool IgnorePerVertexColor = 3;
  if (this->ignorepervertexcolor() != 0) {
    total_size += 1 + 1;
  }

  // bool Visible = 5;
  if (this->visible() != 0) {
    total_size += 1 + 1;
  }

  // bool BaseTexIsTSNM = 6;
  if (this->basetexistsnm() != 0) {
    total_size += 1 + 1;
  }

  // float Scale = 7;
  if (this->scale() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tHighPolyMesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xnormal.tHighPolyMesh)
  GOOGLE_DCHECK_NE(&from, this);
  const tHighPolyMesh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tHighPolyMesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xnormal.tHighPolyMesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xnormal.tHighPolyMesh)
    MergeFrom(*source);
  }
}

void tHighPolyMesh::MergeFrom(const tHighPolyMesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xnormal.tHighPolyMesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.positionoffset().size() > 0) {

    positionoffset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positionoffset_);
  }
  if (from.averagenormals() != 0) {
    set_averagenormals(from.averagenormals());
  }
  if (from.ignorepervertexcolor() != 0) {
    set_ignorepervertexcolor(from.ignorepervertexcolor());
  }
  if (from.visible() != 0) {
    set_visible(from.visible());
  }
  if (from.basetexistsnm() != 0) {
    set_basetexistsnm(from.basetexistsnm());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
}

void tHighPolyMesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xnormal.tHighPolyMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tHighPolyMesh::CopyFrom(const tHighPolyMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xnormal.tHighPolyMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tHighPolyMesh::IsInitialized() const {
  return true;
}

void tHighPolyMesh::Swap(tHighPolyMesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tHighPolyMesh::InternalSwap(tHighPolyMesh* other) {
  file_.Swap(&other->file_);
  positionoffset_.Swap(&other->positionoffset_);
  std::swap(averagenormals_, other->averagenormals_);
  std::swap(ignorepervertexcolor_, other->ignorepervertexcolor_);
  std::swap(visible_, other->visible_);
  std::swap(basetexistsnm_, other->basetexistsnm_);
  std::swap(scale_, other->scale_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tHighPolyMesh::GetMetadata() const {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tHighPolyMesh

// string File = 1;
void tHighPolyMesh::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tHighPolyMesh::file() const {
  // @@protoc_insertion_point(field_get:xnormal.tHighPolyMesh.File)
  return file_.GetNoArena();
}
void tHighPolyMesh::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tHighPolyMesh.File)
}
#if LANG_CXX11
void tHighPolyMesh::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tHighPolyMesh.File)
}
#endif
void tHighPolyMesh::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tHighPolyMesh.File)
}
void tHighPolyMesh::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tHighPolyMesh.File)
}
::std::string* tHighPolyMesh::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tHighPolyMesh.File)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tHighPolyMesh::release_file() {
  // @@protoc_insertion_point(field_release:xnormal.tHighPolyMesh.File)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tHighPolyMesh::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tHighPolyMesh.File)
}

// string PositionOffset = 2;
void tHighPolyMesh::clear_positionoffset() {
  positionoffset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tHighPolyMesh::positionoffset() const {
  // @@protoc_insertion_point(field_get:xnormal.tHighPolyMesh.PositionOffset)
  return positionoffset_.GetNoArena();
}
void tHighPolyMesh::set_positionoffset(const ::std::string& value) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tHighPolyMesh.PositionOffset)
}
#if LANG_CXX11
void tHighPolyMesh::set_positionoffset(::std::string&& value) {
  
  positionoffset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tHighPolyMesh.PositionOffset)
}
#endif
void tHighPolyMesh::set_positionoffset(const char* value) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tHighPolyMesh.PositionOffset)
}
void tHighPolyMesh::set_positionoffset(const char* value, size_t size) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tHighPolyMesh.PositionOffset)
}
::std::string* tHighPolyMesh::mutable_positionoffset() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tHighPolyMesh.PositionOffset)
  return positionoffset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tHighPolyMesh::release_positionoffset() {
  // @@protoc_insertion_point(field_release:xnormal.tHighPolyMesh.PositionOffset)
  
  return positionoffset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tHighPolyMesh::set_allocated_positionoffset(::std::string* positionoffset) {
  if (positionoffset != NULL) {
    
  } else {
    
  }
  positionoffset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positionoffset);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tHighPolyMesh.PositionOffset)
}

// bool IgnorePerVertexColor = 3;
void tHighPolyMesh::clear_ignorepervertexcolor() {
  ignorepervertexcolor_ = false;
}
bool tHighPolyMesh::ignorepervertexcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tHighPolyMesh.IgnorePerVertexColor)
  return ignorepervertexcolor_;
}
void tHighPolyMesh::set_ignorepervertexcolor(bool value) {
  
  ignorepervertexcolor_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tHighPolyMesh.IgnorePerVertexColor)
}

// .xnormal.tHighPolyMesh.eSmoothNormals AverageNormals = 4;
void tHighPolyMesh::clear_averagenormals() {
  averagenormals_ = 0;
}
::xnormal::tHighPolyMesh_eSmoothNormals tHighPolyMesh::averagenormals() const {
  // @@protoc_insertion_point(field_get:xnormal.tHighPolyMesh.AverageNormals)
  return static_cast< ::xnormal::tHighPolyMesh_eSmoothNormals >(averagenormals_);
}
void tHighPolyMesh::set_averagenormals(::xnormal::tHighPolyMesh_eSmoothNormals value) {
  
  averagenormals_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tHighPolyMesh.AverageNormals)
}

// bool Visible = 5;
void tHighPolyMesh::clear_visible() {
  visible_ = false;
}
bool tHighPolyMesh::visible() const {
  // @@protoc_insertion_point(field_get:xnormal.tHighPolyMesh.Visible)
  return visible_;
}
void tHighPolyMesh::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tHighPolyMesh.Visible)
}

// bool BaseTexIsTSNM = 6;
void tHighPolyMesh::clear_basetexistsnm() {
  basetexistsnm_ = false;
}
bool tHighPolyMesh::basetexistsnm() const {
  // @@protoc_insertion_point(field_get:xnormal.tHighPolyMesh.BaseTexIsTSNM)
  return basetexistsnm_;
}
void tHighPolyMesh::set_basetexistsnm(bool value) {
  
  basetexistsnm_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tHighPolyMesh.BaseTexIsTSNM)
}

// float Scale = 7;
void tHighPolyMesh::clear_scale() {
  scale_ = 0;
}
float tHighPolyMesh::scale() const {
  // @@protoc_insertion_point(field_get:xnormal.tHighPolyMesh.Scale)
  return scale_;
}
void tHighPolyMesh::set_scale(float value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tHighPolyMesh.Scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tLowPolyMesh::kBaseTexFieldNumber;
const int tLowPolyMesh::kBlockersFileFieldNumber;
const int tLowPolyMesh::kVVDMSwizzleZFieldNumber;
const int tLowPolyMesh::kFresnelRefractiveIndexFieldNumber;
const int tLowPolyMesh::kUOffsetFieldNumber;
const int tLowPolyMesh::kReflectHDRMultFieldNumber;
const int tLowPolyMesh::kTransparencyModeFieldNumber;
const int tLowPolyMesh::kVOffsetFieldNumber;
const int tLowPolyMesh::kReflectTexFieldNumber;
const int tLowPolyMesh::kMaxRayDistanceFrontFieldNumber;
const int tLowPolyMesh::kDiffuseGITexFieldNumber;
const int tLowPolyMesh::kNormapMapTypeFieldNumber;
const int tLowPolyMesh::kFileFieldNumber;
const int tLowPolyMesh::kVVDMSwizzleYFieldNumber;
const int tLowPolyMesh::kCageFileFieldNumber;
const int tLowPolyMesh::kHeightTexFieldNumber;
const int tLowPolyMesh::kNMSwizzleYFieldNumber;
const int tLowPolyMesh::kBatchProtectFieldNumber;
const int tLowPolyMesh::kAlphaTestValueFieldNumber;
const int tLowPolyMesh::kSubdivisionsFieldNumber;
const int tLowPolyMesh::kMatteFieldNumber;
const int tLowPolyMesh::kAverageNormalsFieldNumber;
const int tLowPolyMesh::kVectorDisplacementTSFieldNumber;
const int tLowPolyMesh::kUseCageFieldNumber;
const int tLowPolyMesh::kVisibleFieldNumber;
const int tLowPolyMesh::kNMSwizzleXFieldNumber;
const int tLowPolyMesh::kGlossTexFieldNumber;
const int tLowPolyMesh::kScaleFieldNumber;
const int tLowPolyMesh::kNMSwizzleZFieldNumber;
const int tLowPolyMesh::kVectorDisplacementTexFieldNumber;
const int tLowPolyMesh::kVVDMSwizzleXFieldNumber;
const int tLowPolyMesh::kUsePerVertexColorsFieldNumber;
const int tLowPolyMesh::kHighpolyNormalsOverrideTangentSpaceFieldNumber;
const int tLowPolyMesh::kLMAOTexFieldNumber;
const int tLowPolyMesh::kSpecTexFieldNumber;
const int tLowPolyMesh::kNormTexFieldNumber;
const int tLowPolyMesh::kHighpolyNormalOverrideFieldNumber;
const int tLowPolyMesh::kPositionOffsetFieldNumber;
const int tLowPolyMesh::kMaxRayDistanceBackFieldNumber;
const int tLowPolyMesh::kUseFresnelFieldNumber;
const int tLowPolyMesh::kReceiveShadowsFieldNumber;
const int tLowPolyMesh::kEmissiveTexFieldNumber;
const int tLowPolyMesh::kBackfaceCullFieldNumber;
const int tLowPolyMesh::kCastShadowsFieldNumber;
const int tLowPolyMesh::kMatchUVsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tLowPolyMesh::tLowPolyMesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_xnormal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xnormal.tLowPolyMesh)
}
tLowPolyMesh::tLowPolyMesh(const tLowPolyMesh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  basetex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.basetex().size() > 0) {
    basetex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basetex_);
  }
  blockersfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.blockersfile().size() > 0) {
    blockersfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockersfile_);
  }
  reflecttex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reflecttex().size() > 0) {
    reflecttex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reflecttex_);
  }
  diffusegitex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.diffusegitex().size() > 0) {
    diffusegitex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diffusegitex_);
  }
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  cagefile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cagefile().size() > 0) {
    cagefile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cagefile_);
  }
  heighttex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.heighttex().size() > 0) {
    heighttex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.heighttex_);
  }
  alphatestvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alphatestvalue().size() > 0) {
    alphatestvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alphatestvalue_);
  }
  glosstex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.glosstex().size() > 0) {
    glosstex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.glosstex_);
  }
  vectordisplacementtex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vectordisplacementtex().size() > 0) {
    vectordisplacementtex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vectordisplacementtex_);
  }
  lmaotex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.lmaotex().size() > 0) {
    lmaotex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lmaotex_);
  }
  spectex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.spectex().size() > 0) {
    spectex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spectex_);
  }
  normtex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.normtex().size() > 0) {
    normtex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normtex_);
  }
  positionoffset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.positionoffset().size() > 0) {
    positionoffset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positionoffset_);
  }
  emissivetex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.emissivetex().size() > 0) {
    emissivetex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emissivetex_);
  }
  if (from.has_highpolynormaloverride()) {
    highpolynormaloverride_ = new ::xnormal::UnspecifiedType(*from.highpolynormaloverride_);
  } else {
    highpolynormaloverride_ = NULL;
  }
  ::memcpy(&vvdmswizzlez_, &from.vvdmswizzlez_,
    reinterpret_cast<char*>(&matchuvs_) -
    reinterpret_cast<char*>(&vvdmswizzlez_) + sizeof(matchuvs_));
  // @@protoc_insertion_point(copy_constructor:xnormal.tLowPolyMesh)
}

void tLowPolyMesh::SharedCtor() {
  basetex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockersfile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reflecttex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diffusegitex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cagefile_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  heighttex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alphatestvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  glosstex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vectordisplacementtex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lmaotex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spectex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normtex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positionoffset_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emissivetex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&highpolynormaloverride_, 0, reinterpret_cast<char*>(&matchuvs_) -
    reinterpret_cast<char*>(&highpolynormaloverride_) + sizeof(matchuvs_));
  _cached_size_ = 0;
}

tLowPolyMesh::~tLowPolyMesh() {
  // @@protoc_insertion_point(destructor:xnormal.tLowPolyMesh)
  SharedDtor();
}

void tLowPolyMesh::SharedDtor() {
  basetex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockersfile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reflecttex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diffusegitex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cagefile_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  heighttex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alphatestvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  glosstex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vectordisplacementtex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lmaotex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spectex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normtex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positionoffset_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emissivetex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete highpolynormaloverride_;
  }
}

void tLowPolyMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tLowPolyMesh::descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[5].descriptor;
}

const tLowPolyMesh& tLowPolyMesh::default_instance() {
  protobuf_xnormal_2eproto::InitDefaults();
  return *internal_default_instance();
}

tLowPolyMesh* tLowPolyMesh::New(::google::protobuf::Arena* arena) const {
  tLowPolyMesh* n = new tLowPolyMesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tLowPolyMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:xnormal.tLowPolyMesh)
  basetex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blockersfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reflecttex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  diffusegitex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cagefile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  heighttex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alphatestvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  glosstex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vectordisplacementtex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lmaotex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spectex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normtex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positionoffset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emissivetex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && highpolynormaloverride_ != NULL) {
    delete highpolynormaloverride_;
  }
  highpolynormaloverride_ = NULL;
  ::memset(&vvdmswizzlez_, 0, reinterpret_cast<char*>(&matchuvs_) -
    reinterpret_cast<char*>(&vvdmswizzlez_) + sizeof(matchuvs_));
}

bool tLowPolyMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xnormal.tLowPolyMesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string BaseTex = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basetex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->basetex().data(), this->basetex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tLowPolyMesh.BaseTex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string BlockersFile = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_blockersfile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->blockersfile().data(), this->blockersfile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tLowPolyMesh.BlockersFile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tLowPolyMesh.eSwizzleComponent VVDMSwizzleZ = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vvdmswizzlez(static_cast< ::xnormal::tLowPolyMesh_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float FresnelRefractiveIndex = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fresnelrefractiveindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float UOffset = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &uoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ReflectHDRMult = 6;
      case 6: {
        if (tag == 53u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reflecthdrmult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tLowPolyMesh.eTransparencyMode TransparencyMode = 7;
      case 7: {
        if (tag == 56u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_transparencymode(static_cast< ::xnormal::tLowPolyMesh_eTransparencyMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float VOffset = 8;
      case 8: {
        if (tag == 69u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ReflectTex = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reflecttex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reflecttex().data(), this->reflecttex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tLowPolyMesh.ReflectTex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float MaxRayDistanceFront = 10;
      case 10: {
        if (tag == 85u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxraydistancefront_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string DiffuseGITex = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diffusegitex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->diffusegitex().data(), this->diffusegitex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tLowPolyMesh.DiffuseGITex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tLowPolyMesh.eNormalMapType NormapMapType = 12;
      case 12: {
        if (tag == 96u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_normapmaptype(static_cast< ::xnormal::tLowPolyMesh_eNormalMapType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string File = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tLowPolyMesh.File"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tLowPolyMesh.eSwizzleComponent VVDMSwizzleY = 14;
      case 14: {
        if (tag == 112u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vvdmswizzley(static_cast< ::xnormal::tLowPolyMesh_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string CageFile = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cagefile()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cagefile().data(), this->cagefile().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tLowPolyMesh.CageFile"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string HeightTex = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_heighttex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->heighttex().data(), this->heighttex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tLowPolyMesh.HeightTex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tLowPolyMesh.eSwizzleComponent NMSwizzleY = 17;
      case 17: {
        if (tag == 136u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nmswizzley(static_cast< ::xnormal::tLowPolyMesh_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool BatchProtect = 18;
      case 18: {
        if (tag == 144u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &batchprotect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes AlphaTestValue = 19;
      case 19: {
        if (tag == 154u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_alphatestvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Subdivisions = 20;
      case 20: {
        if (tag == 160u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subdivisions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Matte = 21;
      case 21: {
        if (tag == 168u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &matte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool AverageNormals = 22;
      case 22: {
        if (tag == 176u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &averagenormals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool VectorDisplacementTS = 23;
      case 23: {
        if (tag == 184u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vectordisplacementts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool UseCage = 24;
      case 24: {
        if (tag == 192u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usecage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Visible = 25;
      case 25: {
        if (tag == 200u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tLowPolyMesh.eSwizzleComponent NMSwizzleX = 26;
      case 26: {
        if (tag == 208u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nmswizzlex(static_cast< ::xnormal::tLowPolyMesh_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string GlossTex = 27;
      case 27: {
        if (tag == 218u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_glosstex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->glosstex().data(), this->glosstex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tLowPolyMesh.GlossTex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Scale = 28;
      case 28: {
        if (tag == 229u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tLowPolyMesh.eSwizzleComponent NMSwizzleZ = 29;
      case 29: {
        if (tag == 232u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nmswizzlez(static_cast< ::xnormal::tLowPolyMesh_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string VectorDisplacementTex = 30;
      case 30: {
        if (tag == 242u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vectordisplacementtex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vectordisplacementtex().data(), this->vectordisplacementtex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tLowPolyMesh.VectorDisplacementTex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tLowPolyMesh.eSwizzleComponent VVDMSwizzleX = 31;
      case 31: {
        if (tag == 248u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vvdmswizzlex(static_cast< ::xnormal::tLowPolyMesh_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool UsePerVertexColors = 32;
      case 32: {
        if (tag == 256u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usepervertexcolors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool HighpolyNormalsOverrideTangentSpace = 33;
      case 33: {
        if (tag == 264u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &highpolynormalsoverridetangentspace_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string LMAOTex = 34;
      case 34: {
        if (tag == 274u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lmaotex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->lmaotex().data(), this->lmaotex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tLowPolyMesh.LMAOTex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string SpecTex = 35;
      case 35: {
        if (tag == 282u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spectex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->spectex().data(), this->spectex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tLowPolyMesh.SpecTex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string NormTex = 36;
      case 36: {
        if (tag == 290u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normtex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->normtex().data(), this->normtex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tLowPolyMesh.NormTex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.UnspecifiedType HighpolyNormalOverride = 37;
      case 37: {
        if (tag == 298u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_highpolynormaloverride()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string PositionOffset = 38;
      case 38: {
        if (tag == 306u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positionoffset()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->positionoffset().data(), this->positionoffset().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tLowPolyMesh.PositionOffset"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float MaxRayDistanceBack = 39;
      case 39: {
        if (tag == 317u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxraydistanceback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool UseFresnel = 40;
      case 40: {
        if (tag == 320u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usefresnel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ReceiveShadows = 41;
      case 41: {
        if (tag == 328u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &receiveshadows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string EmissiveTex = 42;
      case 42: {
        if (tag == 338u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emissivetex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->emissivetex().data(), this->emissivetex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tLowPolyMesh.EmissiveTex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool BackfaceCull = 43;
      case 43: {
        if (tag == 344u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &backfacecull_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool CastShadows = 44;
      case 44: {
        if (tag == 352u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &castshadows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool MatchUVs = 45;
      case 45: {
        if (tag == 360u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &matchuvs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xnormal.tLowPolyMesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xnormal.tLowPolyMesh)
  return false;
#undef DO_
}

void tLowPolyMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xnormal.tLowPolyMesh)
  // string BaseTex = 1;
  if (this->basetex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basetex().data(), this->basetex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.BaseTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->basetex(), output);
  }

  // string BlockersFile = 2;
  if (this->blockersfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blockersfile().data(), this->blockersfile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.BlockersFile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->blockersfile(), output);
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent VVDMSwizzleZ = 3;
  if (this->vvdmswizzlez() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->vvdmswizzlez(), output);
  }

  // float FresnelRefractiveIndex = 4;
  if (this->fresnelrefractiveindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fresnelrefractiveindex(), output);
  }

  // float UOffset = 5;
  if (this->uoffset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->uoffset(), output);
  }

  // float ReflectHDRMult = 6;
  if (this->reflecthdrmult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->reflecthdrmult(), output);
  }

  // .xnormal.tLowPolyMesh.eTransparencyMode TransparencyMode = 7;
  if (this->transparencymode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->transparencymode(), output);
  }

  // float VOffset = 8;
  if (this->voffset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->voffset(), output);
  }

  // string ReflectTex = 9;
  if (this->reflecttex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reflecttex().data(), this->reflecttex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.ReflectTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->reflecttex(), output);
  }

  // float MaxRayDistanceFront = 10;
  if (this->maxraydistancefront() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->maxraydistancefront(), output);
  }

  // string DiffuseGITex = 11;
  if (this->diffusegitex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diffusegitex().data(), this->diffusegitex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.DiffuseGITex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->diffusegitex(), output);
  }

  // .xnormal.tLowPolyMesh.eNormalMapType NormapMapType = 12;
  if (this->normapmaptype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->normapmaptype(), output);
  }

  // string File = 13;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.File");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->file(), output);
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent VVDMSwizzleY = 14;
  if (this->vvdmswizzley() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->vvdmswizzley(), output);
  }

  // string CageFile = 15;
  if (this->cagefile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cagefile().data(), this->cagefile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.CageFile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->cagefile(), output);
  }

  // string HeightTex = 16;
  if (this->heighttex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->heighttex().data(), this->heighttex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.HeightTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->heighttex(), output);
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent NMSwizzleY = 17;
  if (this->nmswizzley() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->nmswizzley(), output);
  }

  // bool BatchProtect = 18;
  if (this->batchprotect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->batchprotect(), output);
  }

  // bytes AlphaTestValue = 19;
  if (this->alphatestvalue().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->alphatestvalue(), output);
  }

  // uint32 Subdivisions = 20;
  if (this->subdivisions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->subdivisions(), output);
  }

  // bool Matte = 21;
  if (this->matte() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->matte(), output);
  }

  // bool AverageNormals = 22;
  if (this->averagenormals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->averagenormals(), output);
  }

  // bool VectorDisplacementTS = 23;
  if (this->vectordisplacementts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->vectordisplacementts(), output);
  }

  // bool UseCage = 24;
  if (this->usecage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->usecage(), output);
  }

  // bool Visible = 25;
  if (this->visible() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->visible(), output);
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent NMSwizzleX = 26;
  if (this->nmswizzlex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->nmswizzlex(), output);
  }

  // string GlossTex = 27;
  if (this->glosstex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->glosstex().data(), this->glosstex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.GlossTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->glosstex(), output);
  }

  // float Scale = 28;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->scale(), output);
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent NMSwizzleZ = 29;
  if (this->nmswizzlez() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->nmswizzlez(), output);
  }

  // string VectorDisplacementTex = 30;
  if (this->vectordisplacementtex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vectordisplacementtex().data(), this->vectordisplacementtex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.VectorDisplacementTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->vectordisplacementtex(), output);
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent VVDMSwizzleX = 31;
  if (this->vvdmswizzlex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->vvdmswizzlex(), output);
  }

  // bool UsePerVertexColors = 32;
  if (this->usepervertexcolors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->usepervertexcolors(), output);
  }

  // bool HighpolyNormalsOverrideTangentSpace = 33;
  if (this->highpolynormalsoverridetangentspace() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->highpolynormalsoverridetangentspace(), output);
  }

  // string LMAOTex = 34;
  if (this->lmaotex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lmaotex().data(), this->lmaotex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.LMAOTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->lmaotex(), output);
  }

  // string SpecTex = 35;
  if (this->spectex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spectex().data(), this->spectex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.SpecTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      35, this->spectex(), output);
  }

  // string NormTex = 36;
  if (this->normtex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->normtex().data(), this->normtex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.NormTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      36, this->normtex(), output);
  }

  // .xnormal.UnspecifiedType HighpolyNormalOverride = 37;
  if (this->has_highpolynormaloverride()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->highpolynormaloverride_, output);
  }

  // string PositionOffset = 38;
  if (this->positionoffset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positionoffset().data(), this->positionoffset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.PositionOffset");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->positionoffset(), output);
  }

  // float MaxRayDistanceBack = 39;
  if (this->maxraydistanceback() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->maxraydistanceback(), output);
  }

  // bool UseFresnel = 40;
  if (this->usefresnel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->usefresnel(), output);
  }

  // bool ReceiveShadows = 41;
  if (this->receiveshadows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->receiveshadows(), output);
  }

  // string EmissiveTex = 42;
  if (this->emissivetex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->emissivetex().data(), this->emissivetex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.EmissiveTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      42, this->emissivetex(), output);
  }

  // bool BackfaceCull = 43;
  if (this->backfacecull() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->backfacecull(), output);
  }

  // bool CastShadows = 44;
  if (this->castshadows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->castshadows(), output);
  }

  // bool MatchUVs = 45;
  if (this->matchuvs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->matchuvs(), output);
  }

  // @@protoc_insertion_point(serialize_end:xnormal.tLowPolyMesh)
}

::google::protobuf::uint8* tLowPolyMesh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xnormal.tLowPolyMesh)
  // string BaseTex = 1;
  if (this->basetex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basetex().data(), this->basetex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.BaseTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->basetex(), target);
  }

  // string BlockersFile = 2;
  if (this->blockersfile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blockersfile().data(), this->blockersfile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.BlockersFile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->blockersfile(), target);
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent VVDMSwizzleZ = 3;
  if (this->vvdmswizzlez() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->vvdmswizzlez(), target);
  }

  // float FresnelRefractiveIndex = 4;
  if (this->fresnelrefractiveindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fresnelrefractiveindex(), target);
  }

  // float UOffset = 5;
  if (this->uoffset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->uoffset(), target);
  }

  // float ReflectHDRMult = 6;
  if (this->reflecthdrmult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->reflecthdrmult(), target);
  }

  // .xnormal.tLowPolyMesh.eTransparencyMode TransparencyMode = 7;
  if (this->transparencymode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->transparencymode(), target);
  }

  // float VOffset = 8;
  if (this->voffset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->voffset(), target);
  }

  // string ReflectTex = 9;
  if (this->reflecttex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reflecttex().data(), this->reflecttex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.ReflectTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->reflecttex(), target);
  }

  // float MaxRayDistanceFront = 10;
  if (this->maxraydistancefront() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->maxraydistancefront(), target);
  }

  // string DiffuseGITex = 11;
  if (this->diffusegitex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->diffusegitex().data(), this->diffusegitex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.DiffuseGITex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->diffusegitex(), target);
  }

  // .xnormal.tLowPolyMesh.eNormalMapType NormapMapType = 12;
  if (this->normapmaptype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->normapmaptype(), target);
  }

  // string File = 13;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.File");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->file(), target);
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent VVDMSwizzleY = 14;
  if (this->vvdmswizzley() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->vvdmswizzley(), target);
  }

  // string CageFile = 15;
  if (this->cagefile().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cagefile().data(), this->cagefile().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.CageFile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->cagefile(), target);
  }

  // string HeightTex = 16;
  if (this->heighttex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->heighttex().data(), this->heighttex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.HeightTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->heighttex(), target);
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent NMSwizzleY = 17;
  if (this->nmswizzley() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->nmswizzley(), target);
  }

  // bool BatchProtect = 18;
  if (this->batchprotect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->batchprotect(), target);
  }

  // bytes AlphaTestValue = 19;
  if (this->alphatestvalue().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->alphatestvalue(), target);
  }

  // uint32 Subdivisions = 20;
  if (this->subdivisions() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->subdivisions(), target);
  }

  // bool Matte = 21;
  if (this->matte() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->matte(), target);
  }

  // bool AverageNormals = 22;
  if (this->averagenormals() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->averagenormals(), target);
  }

  // bool VectorDisplacementTS = 23;
  if (this->vectordisplacementts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->vectordisplacementts(), target);
  }

  // bool UseCage = 24;
  if (this->usecage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->usecage(), target);
  }

  // bool Visible = 25;
  if (this->visible() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->visible(), target);
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent NMSwizzleX = 26;
  if (this->nmswizzlex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->nmswizzlex(), target);
  }

  // string GlossTex = 27;
  if (this->glosstex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->glosstex().data(), this->glosstex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.GlossTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->glosstex(), target);
  }

  // float Scale = 28;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->scale(), target);
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent NMSwizzleZ = 29;
  if (this->nmswizzlez() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      29, this->nmswizzlez(), target);
  }

  // string VectorDisplacementTex = 30;
  if (this->vectordisplacementtex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vectordisplacementtex().data(), this->vectordisplacementtex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.VectorDisplacementTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->vectordisplacementtex(), target);
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent VVDMSwizzleX = 31;
  if (this->vvdmswizzlex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->vvdmswizzlex(), target);
  }

  // bool UsePerVertexColors = 32;
  if (this->usepervertexcolors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->usepervertexcolors(), target);
  }

  // bool HighpolyNormalsOverrideTangentSpace = 33;
  if (this->highpolynormalsoverridetangentspace() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->highpolynormalsoverridetangentspace(), target);
  }

  // string LMAOTex = 34;
  if (this->lmaotex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->lmaotex().data(), this->lmaotex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.LMAOTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->lmaotex(), target);
  }

  // string SpecTex = 35;
  if (this->spectex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spectex().data(), this->spectex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.SpecTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->spectex(), target);
  }

  // string NormTex = 36;
  if (this->normtex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->normtex().data(), this->normtex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.NormTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->normtex(), target);
  }

  // .xnormal.UnspecifiedType HighpolyNormalOverride = 37;
  if (this->has_highpolynormaloverride()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->highpolynormaloverride_, false, target);
  }

  // string PositionOffset = 38;
  if (this->positionoffset().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->positionoffset().data(), this->positionoffset().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.PositionOffset");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->positionoffset(), target);
  }

  // float MaxRayDistanceBack = 39;
  if (this->maxraydistanceback() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->maxraydistanceback(), target);
  }

  // bool UseFresnel = 40;
  if (this->usefresnel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->usefresnel(), target);
  }

  // bool ReceiveShadows = 41;
  if (this->receiveshadows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->receiveshadows(), target);
  }

  // string EmissiveTex = 42;
  if (this->emissivetex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->emissivetex().data(), this->emissivetex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tLowPolyMesh.EmissiveTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->emissivetex(), target);
  }

  // bool BackfaceCull = 43;
  if (this->backfacecull() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->backfacecull(), target);
  }

  // bool CastShadows = 44;
  if (this->castshadows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->castshadows(), target);
  }

  // bool MatchUVs = 45;
  if (this->matchuvs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->matchuvs(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xnormal.tLowPolyMesh)
  return target;
}

size_t tLowPolyMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xnormal.tLowPolyMesh)
  size_t total_size = 0;

  // string BaseTex = 1;
  if (this->basetex().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->basetex());
  }

  // string BlockersFile = 2;
  if (this->blockersfile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->blockersfile());
  }

  // string ReflectTex = 9;
  if (this->reflecttex().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reflecttex());
  }

  // string DiffuseGITex = 11;
  if (this->diffusegitex().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->diffusegitex());
  }

  // string File = 13;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // string CageFile = 15;
  if (this->cagefile().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cagefile());
  }

  // string HeightTex = 16;
  if (this->heighttex().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->heighttex());
  }

  // bytes AlphaTestValue = 19;
  if (this->alphatestvalue().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->alphatestvalue());
  }

  // string GlossTex = 27;
  if (this->glosstex().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->glosstex());
  }

  // string VectorDisplacementTex = 30;
  if (this->vectordisplacementtex().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vectordisplacementtex());
  }

  // string LMAOTex = 34;
  if (this->lmaotex().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lmaotex());
  }

  // string SpecTex = 35;
  if (this->spectex().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->spectex());
  }

  // string NormTex = 36;
  if (this->normtex().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->normtex());
  }

  // string PositionOffset = 38;
  if (this->positionoffset().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->positionoffset());
  }

  // string EmissiveTex = 42;
  if (this->emissivetex().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->emissivetex());
  }

  // .xnormal.UnspecifiedType HighpolyNormalOverride = 37;
  if (this->has_highpolynormaloverride()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->highpolynormaloverride_);
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent VVDMSwizzleZ = 3;
  if (this->vvdmswizzlez() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vvdmswizzlez());
  }

  // float FresnelRefractiveIndex = 4;
  if (this->fresnelrefractiveindex() != 0) {
    total_size += 1 + 4;
  }

  // float UOffset = 5;
  if (this->uoffset() != 0) {
    total_size += 1 + 4;
  }

  // float ReflectHDRMult = 6;
  if (this->reflecthdrmult() != 0) {
    total_size += 1 + 4;
  }

  // .xnormal.tLowPolyMesh.eTransparencyMode TransparencyMode = 7;
  if (this->transparencymode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->transparencymode());
  }

  // float VOffset = 8;
  if (this->voffset() != 0) {
    total_size += 1 + 4;
  }

  // float MaxRayDistanceFront = 10;
  if (this->maxraydistancefront() != 0) {
    total_size += 1 + 4;
  }

  // .xnormal.tLowPolyMesh.eNormalMapType NormapMapType = 12;
  if (this->normapmaptype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->normapmaptype());
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent VVDMSwizzleY = 14;
  if (this->vvdmswizzley() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vvdmswizzley());
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent NMSwizzleY = 17;
  if (this->nmswizzley() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nmswizzley());
  }

  // uint32 Subdivisions = 20;
  if (this->subdivisions() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->subdivisions());
  }

  // bool BatchProtect = 18;
  if (this->batchprotect() != 0) {
    total_size += 2 + 1;
  }

  // bool Matte = 21;
  if (this->matte() != 0) {
    total_size += 2 + 1;
  }

  // bool AverageNormals = 22;
  if (this->averagenormals() != 0) {
    total_size += 2 + 1;
  }

  // bool VectorDisplacementTS = 23;
  if (this->vectordisplacementts() != 0) {
    total_size += 2 + 1;
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent NMSwizzleX = 26;
  if (this->nmswizzlex() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nmswizzlex());
  }

  // float Scale = 28;
  if (this->scale() != 0) {
    total_size += 2 + 4;
  }

  // bool UseCage = 24;
  if (this->usecage() != 0) {
    total_size += 2 + 1;
  }

  // bool Visible = 25;
  if (this->visible() != 0) {
    total_size += 2 + 1;
  }

  // bool UsePerVertexColors = 32;
  if (this->usepervertexcolors() != 0) {
    total_size += 2 + 1;
  }

  // bool HighpolyNormalsOverrideTangentSpace = 33;
  if (this->highpolynormalsoverridetangentspace() != 0) {
    total_size += 2 + 1;
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent NMSwizzleZ = 29;
  if (this->nmswizzlez() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nmswizzlez());
  }

  // .xnormal.tLowPolyMesh.eSwizzleComponent VVDMSwizzleX = 31;
  if (this->vvdmswizzlex() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vvdmswizzlex());
  }

  // float MaxRayDistanceBack = 39;
  if (this->maxraydistanceback() != 0) {
    total_size += 2 + 4;
  }

  // bool UseFresnel = 40;
  if (this->usefresnel() != 0) {
    total_size += 2 + 1;
  }

  // bool ReceiveShadows = 41;
  if (this->receiveshadows() != 0) {
    total_size += 2 + 1;
  }

  // bool BackfaceCull = 43;
  if (this->backfacecull() != 0) {
    total_size += 2 + 1;
  }

  // bool CastShadows = 44;
  if (this->castshadows() != 0) {
    total_size += 2 + 1;
  }

  // bool MatchUVs = 45;
  if (this->matchuvs() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tLowPolyMesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xnormal.tLowPolyMesh)
  GOOGLE_DCHECK_NE(&from, this);
  const tLowPolyMesh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tLowPolyMesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xnormal.tLowPolyMesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xnormal.tLowPolyMesh)
    MergeFrom(*source);
  }
}

void tLowPolyMesh::MergeFrom(const tLowPolyMesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xnormal.tLowPolyMesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.basetex().size() > 0) {

    basetex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basetex_);
  }
  if (from.blockersfile().size() > 0) {

    blockersfile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.blockersfile_);
  }
  if (from.reflecttex().size() > 0) {

    reflecttex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reflecttex_);
  }
  if (from.diffusegitex().size() > 0) {

    diffusegitex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.diffusegitex_);
  }
  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.cagefile().size() > 0) {

    cagefile_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cagefile_);
  }
  if (from.heighttex().size() > 0) {

    heighttex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.heighttex_);
  }
  if (from.alphatestvalue().size() > 0) {

    alphatestvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alphatestvalue_);
  }
  if (from.glosstex().size() > 0) {

    glosstex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.glosstex_);
  }
  if (from.vectordisplacementtex().size() > 0) {

    vectordisplacementtex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vectordisplacementtex_);
  }
  if (from.lmaotex().size() > 0) {

    lmaotex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lmaotex_);
  }
  if (from.spectex().size() > 0) {

    spectex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spectex_);
  }
  if (from.normtex().size() > 0) {

    normtex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normtex_);
  }
  if (from.positionoffset().size() > 0) {

    positionoffset_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.positionoffset_);
  }
  if (from.emissivetex().size() > 0) {

    emissivetex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emissivetex_);
  }
  if (from.has_highpolynormaloverride()) {
    mutable_highpolynormaloverride()->::xnormal::UnspecifiedType::MergeFrom(from.highpolynormaloverride());
  }
  if (from.vvdmswizzlez() != 0) {
    set_vvdmswizzlez(from.vvdmswizzlez());
  }
  if (from.fresnelrefractiveindex() != 0) {
    set_fresnelrefractiveindex(from.fresnelrefractiveindex());
  }
  if (from.uoffset() != 0) {
    set_uoffset(from.uoffset());
  }
  if (from.reflecthdrmult() != 0) {
    set_reflecthdrmult(from.reflecthdrmult());
  }
  if (from.transparencymode() != 0) {
    set_transparencymode(from.transparencymode());
  }
  if (from.voffset() != 0) {
    set_voffset(from.voffset());
  }
  if (from.maxraydistancefront() != 0) {
    set_maxraydistancefront(from.maxraydistancefront());
  }
  if (from.normapmaptype() != 0) {
    set_normapmaptype(from.normapmaptype());
  }
  if (from.vvdmswizzley() != 0) {
    set_vvdmswizzley(from.vvdmswizzley());
  }
  if (from.nmswizzley() != 0) {
    set_nmswizzley(from.nmswizzley());
  }
  if (from.subdivisions() != 0) {
    set_subdivisions(from.subdivisions());
  }
  if (from.batchprotect() != 0) {
    set_batchprotect(from.batchprotect());
  }
  if (from.matte() != 0) {
    set_matte(from.matte());
  }
  if (from.averagenormals() != 0) {
    set_averagenormals(from.averagenormals());
  }
  if (from.vectordisplacementts() != 0) {
    set_vectordisplacementts(from.vectordisplacementts());
  }
  if (from.nmswizzlex() != 0) {
    set_nmswizzlex(from.nmswizzlex());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
  if (from.usecage() != 0) {
    set_usecage(from.usecage());
  }
  if (from.visible() != 0) {
    set_visible(from.visible());
  }
  if (from.usepervertexcolors() != 0) {
    set_usepervertexcolors(from.usepervertexcolors());
  }
  if (from.highpolynormalsoverridetangentspace() != 0) {
    set_highpolynormalsoverridetangentspace(from.highpolynormalsoverridetangentspace());
  }
  if (from.nmswizzlez() != 0) {
    set_nmswizzlez(from.nmswizzlez());
  }
  if (from.vvdmswizzlex() != 0) {
    set_vvdmswizzlex(from.vvdmswizzlex());
  }
  if (from.maxraydistanceback() != 0) {
    set_maxraydistanceback(from.maxraydistanceback());
  }
  if (from.usefresnel() != 0) {
    set_usefresnel(from.usefresnel());
  }
  if (from.receiveshadows() != 0) {
    set_receiveshadows(from.receiveshadows());
  }
  if (from.backfacecull() != 0) {
    set_backfacecull(from.backfacecull());
  }
  if (from.castshadows() != 0) {
    set_castshadows(from.castshadows());
  }
  if (from.matchuvs() != 0) {
    set_matchuvs(from.matchuvs());
  }
}

void tLowPolyMesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xnormal.tLowPolyMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tLowPolyMesh::CopyFrom(const tLowPolyMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xnormal.tLowPolyMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tLowPolyMesh::IsInitialized() const {
  return true;
}

void tLowPolyMesh::Swap(tLowPolyMesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tLowPolyMesh::InternalSwap(tLowPolyMesh* other) {
  basetex_.Swap(&other->basetex_);
  blockersfile_.Swap(&other->blockersfile_);
  reflecttex_.Swap(&other->reflecttex_);
  diffusegitex_.Swap(&other->diffusegitex_);
  file_.Swap(&other->file_);
  cagefile_.Swap(&other->cagefile_);
  heighttex_.Swap(&other->heighttex_);
  alphatestvalue_.Swap(&other->alphatestvalue_);
  glosstex_.Swap(&other->glosstex_);
  vectordisplacementtex_.Swap(&other->vectordisplacementtex_);
  lmaotex_.Swap(&other->lmaotex_);
  spectex_.Swap(&other->spectex_);
  normtex_.Swap(&other->normtex_);
  positionoffset_.Swap(&other->positionoffset_);
  emissivetex_.Swap(&other->emissivetex_);
  std::swap(highpolynormaloverride_, other->highpolynormaloverride_);
  std::swap(vvdmswizzlez_, other->vvdmswizzlez_);
  std::swap(fresnelrefractiveindex_, other->fresnelrefractiveindex_);
  std::swap(uoffset_, other->uoffset_);
  std::swap(reflecthdrmult_, other->reflecthdrmult_);
  std::swap(transparencymode_, other->transparencymode_);
  std::swap(voffset_, other->voffset_);
  std::swap(maxraydistancefront_, other->maxraydistancefront_);
  std::swap(normapmaptype_, other->normapmaptype_);
  std::swap(vvdmswizzley_, other->vvdmswizzley_);
  std::swap(nmswizzley_, other->nmswizzley_);
  std::swap(subdivisions_, other->subdivisions_);
  std::swap(batchprotect_, other->batchprotect_);
  std::swap(matte_, other->matte_);
  std::swap(averagenormals_, other->averagenormals_);
  std::swap(vectordisplacementts_, other->vectordisplacementts_);
  std::swap(nmswizzlex_, other->nmswizzlex_);
  std::swap(scale_, other->scale_);
  std::swap(usecage_, other->usecage_);
  std::swap(visible_, other->visible_);
  std::swap(usepervertexcolors_, other->usepervertexcolors_);
  std::swap(highpolynormalsoverridetangentspace_, other->highpolynormalsoverridetangentspace_);
  std::swap(nmswizzlez_, other->nmswizzlez_);
  std::swap(vvdmswizzlex_, other->vvdmswizzlex_);
  std::swap(maxraydistanceback_, other->maxraydistanceback_);
  std::swap(usefresnel_, other->usefresnel_);
  std::swap(receiveshadows_, other->receiveshadows_);
  std::swap(backfacecull_, other->backfacecull_);
  std::swap(castshadows_, other->castshadows_);
  std::swap(matchuvs_, other->matchuvs_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tLowPolyMesh::GetMetadata() const {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tLowPolyMesh

// string BaseTex = 1;
void tLowPolyMesh::clear_basetex() {
  basetex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tLowPolyMesh::basetex() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.BaseTex)
  return basetex_.GetNoArena();
}
void tLowPolyMesh::set_basetex(const ::std::string& value) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.BaseTex)
}
#if LANG_CXX11
void tLowPolyMesh::set_basetex(::std::string&& value) {
  
  basetex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tLowPolyMesh.BaseTex)
}
#endif
void tLowPolyMesh::set_basetex(const char* value) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tLowPolyMesh.BaseTex)
}
void tLowPolyMesh::set_basetex(const char* value, size_t size) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tLowPolyMesh.BaseTex)
}
::std::string* tLowPolyMesh::mutable_basetex() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tLowPolyMesh.BaseTex)
  return basetex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tLowPolyMesh::release_basetex() {
  // @@protoc_insertion_point(field_release:xnormal.tLowPolyMesh.BaseTex)
  
  return basetex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tLowPolyMesh::set_allocated_basetex(::std::string* basetex) {
  if (basetex != NULL) {
    
  } else {
    
  }
  basetex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basetex);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tLowPolyMesh.BaseTex)
}

// string BlockersFile = 2;
void tLowPolyMesh::clear_blockersfile() {
  blockersfile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tLowPolyMesh::blockersfile() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.BlockersFile)
  return blockersfile_.GetNoArena();
}
void tLowPolyMesh::set_blockersfile(const ::std::string& value) {
  
  blockersfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.BlockersFile)
}
#if LANG_CXX11
void tLowPolyMesh::set_blockersfile(::std::string&& value) {
  
  blockersfile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tLowPolyMesh.BlockersFile)
}
#endif
void tLowPolyMesh::set_blockersfile(const char* value) {
  
  blockersfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tLowPolyMesh.BlockersFile)
}
void tLowPolyMesh::set_blockersfile(const char* value, size_t size) {
  
  blockersfile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tLowPolyMesh.BlockersFile)
}
::std::string* tLowPolyMesh::mutable_blockersfile() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tLowPolyMesh.BlockersFile)
  return blockersfile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tLowPolyMesh::release_blockersfile() {
  // @@protoc_insertion_point(field_release:xnormal.tLowPolyMesh.BlockersFile)
  
  return blockersfile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tLowPolyMesh::set_allocated_blockersfile(::std::string* blockersfile) {
  if (blockersfile != NULL) {
    
  } else {
    
  }
  blockersfile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockersfile);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tLowPolyMesh.BlockersFile)
}

// .xnormal.tLowPolyMesh.eSwizzleComponent VVDMSwizzleZ = 3;
void tLowPolyMesh::clear_vvdmswizzlez() {
  vvdmswizzlez_ = 0;
}
::xnormal::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::vvdmswizzlez() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.VVDMSwizzleZ)
  return static_cast< ::xnormal::tLowPolyMesh_eSwizzleComponent >(vvdmswizzlez_);
}
void tLowPolyMesh::set_vvdmswizzlez(::xnormal::tLowPolyMesh_eSwizzleComponent value) {
  
  vvdmswizzlez_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.VVDMSwizzleZ)
}

// float FresnelRefractiveIndex = 4;
void tLowPolyMesh::clear_fresnelrefractiveindex() {
  fresnelrefractiveindex_ = 0;
}
float tLowPolyMesh::fresnelrefractiveindex() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.FresnelRefractiveIndex)
  return fresnelrefractiveindex_;
}
void tLowPolyMesh::set_fresnelrefractiveindex(float value) {
  
  fresnelrefractiveindex_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.FresnelRefractiveIndex)
}

// float UOffset = 5;
void tLowPolyMesh::clear_uoffset() {
  uoffset_ = 0;
}
float tLowPolyMesh::uoffset() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.UOffset)
  return uoffset_;
}
void tLowPolyMesh::set_uoffset(float value) {
  
  uoffset_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.UOffset)
}

// float ReflectHDRMult = 6;
void tLowPolyMesh::clear_reflecthdrmult() {
  reflecthdrmult_ = 0;
}
float tLowPolyMesh::reflecthdrmult() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.ReflectHDRMult)
  return reflecthdrmult_;
}
void tLowPolyMesh::set_reflecthdrmult(float value) {
  
  reflecthdrmult_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.ReflectHDRMult)
}

// .xnormal.tLowPolyMesh.eTransparencyMode TransparencyMode = 7;
void tLowPolyMesh::clear_transparencymode() {
  transparencymode_ = 0;
}
::xnormal::tLowPolyMesh_eTransparencyMode tLowPolyMesh::transparencymode() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.TransparencyMode)
  return static_cast< ::xnormal::tLowPolyMesh_eTransparencyMode >(transparencymode_);
}
void tLowPolyMesh::set_transparencymode(::xnormal::tLowPolyMesh_eTransparencyMode value) {
  
  transparencymode_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.TransparencyMode)
}

// float VOffset = 8;
void tLowPolyMesh::clear_voffset() {
  voffset_ = 0;
}
float tLowPolyMesh::voffset() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.VOffset)
  return voffset_;
}
void tLowPolyMesh::set_voffset(float value) {
  
  voffset_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.VOffset)
}

// string ReflectTex = 9;
void tLowPolyMesh::clear_reflecttex() {
  reflecttex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tLowPolyMesh::reflecttex() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.ReflectTex)
  return reflecttex_.GetNoArena();
}
void tLowPolyMesh::set_reflecttex(const ::std::string& value) {
  
  reflecttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.ReflectTex)
}
#if LANG_CXX11
void tLowPolyMesh::set_reflecttex(::std::string&& value) {
  
  reflecttex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tLowPolyMesh.ReflectTex)
}
#endif
void tLowPolyMesh::set_reflecttex(const char* value) {
  
  reflecttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tLowPolyMesh.ReflectTex)
}
void tLowPolyMesh::set_reflecttex(const char* value, size_t size) {
  
  reflecttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tLowPolyMesh.ReflectTex)
}
::std::string* tLowPolyMesh::mutable_reflecttex() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tLowPolyMesh.ReflectTex)
  return reflecttex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tLowPolyMesh::release_reflecttex() {
  // @@protoc_insertion_point(field_release:xnormal.tLowPolyMesh.ReflectTex)
  
  return reflecttex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tLowPolyMesh::set_allocated_reflecttex(::std::string* reflecttex) {
  if (reflecttex != NULL) {
    
  } else {
    
  }
  reflecttex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reflecttex);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tLowPolyMesh.ReflectTex)
}

// float MaxRayDistanceFront = 10;
void tLowPolyMesh::clear_maxraydistancefront() {
  maxraydistancefront_ = 0;
}
float tLowPolyMesh::maxraydistancefront() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.MaxRayDistanceFront)
  return maxraydistancefront_;
}
void tLowPolyMesh::set_maxraydistancefront(float value) {
  
  maxraydistancefront_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.MaxRayDistanceFront)
}

// string DiffuseGITex = 11;
void tLowPolyMesh::clear_diffusegitex() {
  diffusegitex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tLowPolyMesh::diffusegitex() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.DiffuseGITex)
  return diffusegitex_.GetNoArena();
}
void tLowPolyMesh::set_diffusegitex(const ::std::string& value) {
  
  diffusegitex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.DiffuseGITex)
}
#if LANG_CXX11
void tLowPolyMesh::set_diffusegitex(::std::string&& value) {
  
  diffusegitex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tLowPolyMesh.DiffuseGITex)
}
#endif
void tLowPolyMesh::set_diffusegitex(const char* value) {
  
  diffusegitex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tLowPolyMesh.DiffuseGITex)
}
void tLowPolyMesh::set_diffusegitex(const char* value, size_t size) {
  
  diffusegitex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tLowPolyMesh.DiffuseGITex)
}
::std::string* tLowPolyMesh::mutable_diffusegitex() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tLowPolyMesh.DiffuseGITex)
  return diffusegitex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tLowPolyMesh::release_diffusegitex() {
  // @@protoc_insertion_point(field_release:xnormal.tLowPolyMesh.DiffuseGITex)
  
  return diffusegitex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tLowPolyMesh::set_allocated_diffusegitex(::std::string* diffusegitex) {
  if (diffusegitex != NULL) {
    
  } else {
    
  }
  diffusegitex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), diffusegitex);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tLowPolyMesh.DiffuseGITex)
}

// .xnormal.tLowPolyMesh.eNormalMapType NormapMapType = 12;
void tLowPolyMesh::clear_normapmaptype() {
  normapmaptype_ = 0;
}
::xnormal::tLowPolyMesh_eNormalMapType tLowPolyMesh::normapmaptype() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.NormapMapType)
  return static_cast< ::xnormal::tLowPolyMesh_eNormalMapType >(normapmaptype_);
}
void tLowPolyMesh::set_normapmaptype(::xnormal::tLowPolyMesh_eNormalMapType value) {
  
  normapmaptype_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.NormapMapType)
}

// string File = 13;
void tLowPolyMesh::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tLowPolyMesh::file() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.File)
  return file_.GetNoArena();
}
void tLowPolyMesh::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.File)
}
#if LANG_CXX11
void tLowPolyMesh::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tLowPolyMesh.File)
}
#endif
void tLowPolyMesh::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tLowPolyMesh.File)
}
void tLowPolyMesh::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tLowPolyMesh.File)
}
::std::string* tLowPolyMesh::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tLowPolyMesh.File)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tLowPolyMesh::release_file() {
  // @@protoc_insertion_point(field_release:xnormal.tLowPolyMesh.File)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tLowPolyMesh::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tLowPolyMesh.File)
}

// .xnormal.tLowPolyMesh.eSwizzleComponent VVDMSwizzleY = 14;
void tLowPolyMesh::clear_vvdmswizzley() {
  vvdmswizzley_ = 0;
}
::xnormal::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::vvdmswizzley() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.VVDMSwizzleY)
  return static_cast< ::xnormal::tLowPolyMesh_eSwizzleComponent >(vvdmswizzley_);
}
void tLowPolyMesh::set_vvdmswizzley(::xnormal::tLowPolyMesh_eSwizzleComponent value) {
  
  vvdmswizzley_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.VVDMSwizzleY)
}

// string CageFile = 15;
void tLowPolyMesh::clear_cagefile() {
  cagefile_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tLowPolyMesh::cagefile() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.CageFile)
  return cagefile_.GetNoArena();
}
void tLowPolyMesh::set_cagefile(const ::std::string& value) {
  
  cagefile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.CageFile)
}
#if LANG_CXX11
void tLowPolyMesh::set_cagefile(::std::string&& value) {
  
  cagefile_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tLowPolyMesh.CageFile)
}
#endif
void tLowPolyMesh::set_cagefile(const char* value) {
  
  cagefile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tLowPolyMesh.CageFile)
}
void tLowPolyMesh::set_cagefile(const char* value, size_t size) {
  
  cagefile_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tLowPolyMesh.CageFile)
}
::std::string* tLowPolyMesh::mutable_cagefile() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tLowPolyMesh.CageFile)
  return cagefile_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tLowPolyMesh::release_cagefile() {
  // @@protoc_insertion_point(field_release:xnormal.tLowPolyMesh.CageFile)
  
  return cagefile_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tLowPolyMesh::set_allocated_cagefile(::std::string* cagefile) {
  if (cagefile != NULL) {
    
  } else {
    
  }
  cagefile_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cagefile);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tLowPolyMesh.CageFile)
}

// string HeightTex = 16;
void tLowPolyMesh::clear_heighttex() {
  heighttex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tLowPolyMesh::heighttex() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.HeightTex)
  return heighttex_.GetNoArena();
}
void tLowPolyMesh::set_heighttex(const ::std::string& value) {
  
  heighttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.HeightTex)
}
#if LANG_CXX11
void tLowPolyMesh::set_heighttex(::std::string&& value) {
  
  heighttex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tLowPolyMesh.HeightTex)
}
#endif
void tLowPolyMesh::set_heighttex(const char* value) {
  
  heighttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tLowPolyMesh.HeightTex)
}
void tLowPolyMesh::set_heighttex(const char* value, size_t size) {
  
  heighttex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tLowPolyMesh.HeightTex)
}
::std::string* tLowPolyMesh::mutable_heighttex() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tLowPolyMesh.HeightTex)
  return heighttex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tLowPolyMesh::release_heighttex() {
  // @@protoc_insertion_point(field_release:xnormal.tLowPolyMesh.HeightTex)
  
  return heighttex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tLowPolyMesh::set_allocated_heighttex(::std::string* heighttex) {
  if (heighttex != NULL) {
    
  } else {
    
  }
  heighttex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), heighttex);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tLowPolyMesh.HeightTex)
}

// .xnormal.tLowPolyMesh.eSwizzleComponent NMSwizzleY = 17;
void tLowPolyMesh::clear_nmswizzley() {
  nmswizzley_ = 0;
}
::xnormal::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::nmswizzley() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.NMSwizzleY)
  return static_cast< ::xnormal::tLowPolyMesh_eSwizzleComponent >(nmswizzley_);
}
void tLowPolyMesh::set_nmswizzley(::xnormal::tLowPolyMesh_eSwizzleComponent value) {
  
  nmswizzley_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.NMSwizzleY)
}

// bool BatchProtect = 18;
void tLowPolyMesh::clear_batchprotect() {
  batchprotect_ = false;
}
bool tLowPolyMesh::batchprotect() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.BatchProtect)
  return batchprotect_;
}
void tLowPolyMesh::set_batchprotect(bool value) {
  
  batchprotect_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.BatchProtect)
}

// bytes AlphaTestValue = 19;
void tLowPolyMesh::clear_alphatestvalue() {
  alphatestvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tLowPolyMesh::alphatestvalue() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.AlphaTestValue)
  return alphatestvalue_.GetNoArena();
}
void tLowPolyMesh::set_alphatestvalue(const ::std::string& value) {
  
  alphatestvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.AlphaTestValue)
}
#if LANG_CXX11
void tLowPolyMesh::set_alphatestvalue(::std::string&& value) {
  
  alphatestvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tLowPolyMesh.AlphaTestValue)
}
#endif
void tLowPolyMesh::set_alphatestvalue(const char* value) {
  
  alphatestvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tLowPolyMesh.AlphaTestValue)
}
void tLowPolyMesh::set_alphatestvalue(const void* value, size_t size) {
  
  alphatestvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tLowPolyMesh.AlphaTestValue)
}
::std::string* tLowPolyMesh::mutable_alphatestvalue() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tLowPolyMesh.AlphaTestValue)
  return alphatestvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tLowPolyMesh::release_alphatestvalue() {
  // @@protoc_insertion_point(field_release:xnormal.tLowPolyMesh.AlphaTestValue)
  
  return alphatestvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tLowPolyMesh::set_allocated_alphatestvalue(::std::string* alphatestvalue) {
  if (alphatestvalue != NULL) {
    
  } else {
    
  }
  alphatestvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alphatestvalue);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tLowPolyMesh.AlphaTestValue)
}

// uint32 Subdivisions = 20;
void tLowPolyMesh::clear_subdivisions() {
  subdivisions_ = 0u;
}
::google::protobuf::uint32 tLowPolyMesh::subdivisions() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.Subdivisions)
  return subdivisions_;
}
void tLowPolyMesh::set_subdivisions(::google::protobuf::uint32 value) {
  
  subdivisions_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.Subdivisions)
}

// bool Matte = 21;
void tLowPolyMesh::clear_matte() {
  matte_ = false;
}
bool tLowPolyMesh::matte() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.Matte)
  return matte_;
}
void tLowPolyMesh::set_matte(bool value) {
  
  matte_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.Matte)
}

// bool AverageNormals = 22;
void tLowPolyMesh::clear_averagenormals() {
  averagenormals_ = false;
}
bool tLowPolyMesh::averagenormals() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.AverageNormals)
  return averagenormals_;
}
void tLowPolyMesh::set_averagenormals(bool value) {
  
  averagenormals_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.AverageNormals)
}

// bool VectorDisplacementTS = 23;
void tLowPolyMesh::clear_vectordisplacementts() {
  vectordisplacementts_ = false;
}
bool tLowPolyMesh::vectordisplacementts() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.VectorDisplacementTS)
  return vectordisplacementts_;
}
void tLowPolyMesh::set_vectordisplacementts(bool value) {
  
  vectordisplacementts_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.VectorDisplacementTS)
}

// bool UseCage = 24;
void tLowPolyMesh::clear_usecage() {
  usecage_ = false;
}
bool tLowPolyMesh::usecage() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.UseCage)
  return usecage_;
}
void tLowPolyMesh::set_usecage(bool value) {
  
  usecage_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.UseCage)
}

// bool Visible = 25;
void tLowPolyMesh::clear_visible() {
  visible_ = false;
}
bool tLowPolyMesh::visible() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.Visible)
  return visible_;
}
void tLowPolyMesh::set_visible(bool value) {
  
  visible_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.Visible)
}

// .xnormal.tLowPolyMesh.eSwizzleComponent NMSwizzleX = 26;
void tLowPolyMesh::clear_nmswizzlex() {
  nmswizzlex_ = 0;
}
::xnormal::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::nmswizzlex() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.NMSwizzleX)
  return static_cast< ::xnormal::tLowPolyMesh_eSwizzleComponent >(nmswizzlex_);
}
void tLowPolyMesh::set_nmswizzlex(::xnormal::tLowPolyMesh_eSwizzleComponent value) {
  
  nmswizzlex_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.NMSwizzleX)
}

// string GlossTex = 27;
void tLowPolyMesh::clear_glosstex() {
  glosstex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tLowPolyMesh::glosstex() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.GlossTex)
  return glosstex_.GetNoArena();
}
void tLowPolyMesh::set_glosstex(const ::std::string& value) {
  
  glosstex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.GlossTex)
}
#if LANG_CXX11
void tLowPolyMesh::set_glosstex(::std::string&& value) {
  
  glosstex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tLowPolyMesh.GlossTex)
}
#endif
void tLowPolyMesh::set_glosstex(const char* value) {
  
  glosstex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tLowPolyMesh.GlossTex)
}
void tLowPolyMesh::set_glosstex(const char* value, size_t size) {
  
  glosstex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tLowPolyMesh.GlossTex)
}
::std::string* tLowPolyMesh::mutable_glosstex() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tLowPolyMesh.GlossTex)
  return glosstex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tLowPolyMesh::release_glosstex() {
  // @@protoc_insertion_point(field_release:xnormal.tLowPolyMesh.GlossTex)
  
  return glosstex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tLowPolyMesh::set_allocated_glosstex(::std::string* glosstex) {
  if (glosstex != NULL) {
    
  } else {
    
  }
  glosstex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), glosstex);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tLowPolyMesh.GlossTex)
}

// float Scale = 28;
void tLowPolyMesh::clear_scale() {
  scale_ = 0;
}
float tLowPolyMesh::scale() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.Scale)
  return scale_;
}
void tLowPolyMesh::set_scale(float value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.Scale)
}

// .xnormal.tLowPolyMesh.eSwizzleComponent NMSwizzleZ = 29;
void tLowPolyMesh::clear_nmswizzlez() {
  nmswizzlez_ = 0;
}
::xnormal::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::nmswizzlez() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.NMSwizzleZ)
  return static_cast< ::xnormal::tLowPolyMesh_eSwizzleComponent >(nmswizzlez_);
}
void tLowPolyMesh::set_nmswizzlez(::xnormal::tLowPolyMesh_eSwizzleComponent value) {
  
  nmswizzlez_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.NMSwizzleZ)
}

// string VectorDisplacementTex = 30;
void tLowPolyMesh::clear_vectordisplacementtex() {
  vectordisplacementtex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tLowPolyMesh::vectordisplacementtex() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.VectorDisplacementTex)
  return vectordisplacementtex_.GetNoArena();
}
void tLowPolyMesh::set_vectordisplacementtex(const ::std::string& value) {
  
  vectordisplacementtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.VectorDisplacementTex)
}
#if LANG_CXX11
void tLowPolyMesh::set_vectordisplacementtex(::std::string&& value) {
  
  vectordisplacementtex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tLowPolyMesh.VectorDisplacementTex)
}
#endif
void tLowPolyMesh::set_vectordisplacementtex(const char* value) {
  
  vectordisplacementtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tLowPolyMesh.VectorDisplacementTex)
}
void tLowPolyMesh::set_vectordisplacementtex(const char* value, size_t size) {
  
  vectordisplacementtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tLowPolyMesh.VectorDisplacementTex)
}
::std::string* tLowPolyMesh::mutable_vectordisplacementtex() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tLowPolyMesh.VectorDisplacementTex)
  return vectordisplacementtex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tLowPolyMesh::release_vectordisplacementtex() {
  // @@protoc_insertion_point(field_release:xnormal.tLowPolyMesh.VectorDisplacementTex)
  
  return vectordisplacementtex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tLowPolyMesh::set_allocated_vectordisplacementtex(::std::string* vectordisplacementtex) {
  if (vectordisplacementtex != NULL) {
    
  } else {
    
  }
  vectordisplacementtex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vectordisplacementtex);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tLowPolyMesh.VectorDisplacementTex)
}

// .xnormal.tLowPolyMesh.eSwizzleComponent VVDMSwizzleX = 31;
void tLowPolyMesh::clear_vvdmswizzlex() {
  vvdmswizzlex_ = 0;
}
::xnormal::tLowPolyMesh_eSwizzleComponent tLowPolyMesh::vvdmswizzlex() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.VVDMSwizzleX)
  return static_cast< ::xnormal::tLowPolyMesh_eSwizzleComponent >(vvdmswizzlex_);
}
void tLowPolyMesh::set_vvdmswizzlex(::xnormal::tLowPolyMesh_eSwizzleComponent value) {
  
  vvdmswizzlex_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.VVDMSwizzleX)
}

// bool UsePerVertexColors = 32;
void tLowPolyMesh::clear_usepervertexcolors() {
  usepervertexcolors_ = false;
}
bool tLowPolyMesh::usepervertexcolors() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.UsePerVertexColors)
  return usepervertexcolors_;
}
void tLowPolyMesh::set_usepervertexcolors(bool value) {
  
  usepervertexcolors_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.UsePerVertexColors)
}

// bool HighpolyNormalsOverrideTangentSpace = 33;
void tLowPolyMesh::clear_highpolynormalsoverridetangentspace() {
  highpolynormalsoverridetangentspace_ = false;
}
bool tLowPolyMesh::highpolynormalsoverridetangentspace() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.HighpolyNormalsOverrideTangentSpace)
  return highpolynormalsoverridetangentspace_;
}
void tLowPolyMesh::set_highpolynormalsoverridetangentspace(bool value) {
  
  highpolynormalsoverridetangentspace_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.HighpolyNormalsOverrideTangentSpace)
}

// string LMAOTex = 34;
void tLowPolyMesh::clear_lmaotex() {
  lmaotex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tLowPolyMesh::lmaotex() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.LMAOTex)
  return lmaotex_.GetNoArena();
}
void tLowPolyMesh::set_lmaotex(const ::std::string& value) {
  
  lmaotex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.LMAOTex)
}
#if LANG_CXX11
void tLowPolyMesh::set_lmaotex(::std::string&& value) {
  
  lmaotex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tLowPolyMesh.LMAOTex)
}
#endif
void tLowPolyMesh::set_lmaotex(const char* value) {
  
  lmaotex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tLowPolyMesh.LMAOTex)
}
void tLowPolyMesh::set_lmaotex(const char* value, size_t size) {
  
  lmaotex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tLowPolyMesh.LMAOTex)
}
::std::string* tLowPolyMesh::mutable_lmaotex() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tLowPolyMesh.LMAOTex)
  return lmaotex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tLowPolyMesh::release_lmaotex() {
  // @@protoc_insertion_point(field_release:xnormal.tLowPolyMesh.LMAOTex)
  
  return lmaotex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tLowPolyMesh::set_allocated_lmaotex(::std::string* lmaotex) {
  if (lmaotex != NULL) {
    
  } else {
    
  }
  lmaotex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lmaotex);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tLowPolyMesh.LMAOTex)
}

// string SpecTex = 35;
void tLowPolyMesh::clear_spectex() {
  spectex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tLowPolyMesh::spectex() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.SpecTex)
  return spectex_.GetNoArena();
}
void tLowPolyMesh::set_spectex(const ::std::string& value) {
  
  spectex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.SpecTex)
}
#if LANG_CXX11
void tLowPolyMesh::set_spectex(::std::string&& value) {
  
  spectex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tLowPolyMesh.SpecTex)
}
#endif
void tLowPolyMesh::set_spectex(const char* value) {
  
  spectex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tLowPolyMesh.SpecTex)
}
void tLowPolyMesh::set_spectex(const char* value, size_t size) {
  
  spectex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tLowPolyMesh.SpecTex)
}
::std::string* tLowPolyMesh::mutable_spectex() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tLowPolyMesh.SpecTex)
  return spectex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tLowPolyMesh::release_spectex() {
  // @@protoc_insertion_point(field_release:xnormal.tLowPolyMesh.SpecTex)
  
  return spectex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tLowPolyMesh::set_allocated_spectex(::std::string* spectex) {
  if (spectex != NULL) {
    
  } else {
    
  }
  spectex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spectex);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tLowPolyMesh.SpecTex)
}

// string NormTex = 36;
void tLowPolyMesh::clear_normtex() {
  normtex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tLowPolyMesh::normtex() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.NormTex)
  return normtex_.GetNoArena();
}
void tLowPolyMesh::set_normtex(const ::std::string& value) {
  
  normtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.NormTex)
}
#if LANG_CXX11
void tLowPolyMesh::set_normtex(::std::string&& value) {
  
  normtex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tLowPolyMesh.NormTex)
}
#endif
void tLowPolyMesh::set_normtex(const char* value) {
  
  normtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tLowPolyMesh.NormTex)
}
void tLowPolyMesh::set_normtex(const char* value, size_t size) {
  
  normtex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tLowPolyMesh.NormTex)
}
::std::string* tLowPolyMesh::mutable_normtex() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tLowPolyMesh.NormTex)
  return normtex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tLowPolyMesh::release_normtex() {
  // @@protoc_insertion_point(field_release:xnormal.tLowPolyMesh.NormTex)
  
  return normtex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tLowPolyMesh::set_allocated_normtex(::std::string* normtex) {
  if (normtex != NULL) {
    
  } else {
    
  }
  normtex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normtex);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tLowPolyMesh.NormTex)
}

// .xnormal.UnspecifiedType HighpolyNormalOverride = 37;
bool tLowPolyMesh::has_highpolynormaloverride() const {
  return this != internal_default_instance() && highpolynormaloverride_ != NULL;
}
void tLowPolyMesh::clear_highpolynormaloverride() {
  if (GetArenaNoVirtual() == NULL && highpolynormaloverride_ != NULL) delete highpolynormaloverride_;
  highpolynormaloverride_ = NULL;
}
const ::xnormal::UnspecifiedType& tLowPolyMesh::highpolynormaloverride() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.HighpolyNormalOverride)
  return highpolynormaloverride_ != NULL ? *highpolynormaloverride_
                         : *::xnormal::UnspecifiedType::internal_default_instance();
}
::xnormal::UnspecifiedType* tLowPolyMesh::mutable_highpolynormaloverride() {
  
  if (highpolynormaloverride_ == NULL) {
    highpolynormaloverride_ = new ::xnormal::UnspecifiedType;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tLowPolyMesh.HighpolyNormalOverride)
  return highpolynormaloverride_;
}
::xnormal::UnspecifiedType* tLowPolyMesh::release_highpolynormaloverride() {
  // @@protoc_insertion_point(field_release:xnormal.tLowPolyMesh.HighpolyNormalOverride)
  
  ::xnormal::UnspecifiedType* temp = highpolynormaloverride_;
  highpolynormaloverride_ = NULL;
  return temp;
}
void tLowPolyMesh::set_allocated_highpolynormaloverride(::xnormal::UnspecifiedType* highpolynormaloverride) {
  delete highpolynormaloverride_;
  highpolynormaloverride_ = highpolynormaloverride;
  if (highpolynormaloverride) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tLowPolyMesh.HighpolyNormalOverride)
}

// string PositionOffset = 38;
void tLowPolyMesh::clear_positionoffset() {
  positionoffset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tLowPolyMesh::positionoffset() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.PositionOffset)
  return positionoffset_.GetNoArena();
}
void tLowPolyMesh::set_positionoffset(const ::std::string& value) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.PositionOffset)
}
#if LANG_CXX11
void tLowPolyMesh::set_positionoffset(::std::string&& value) {
  
  positionoffset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tLowPolyMesh.PositionOffset)
}
#endif
void tLowPolyMesh::set_positionoffset(const char* value) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tLowPolyMesh.PositionOffset)
}
void tLowPolyMesh::set_positionoffset(const char* value, size_t size) {
  
  positionoffset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tLowPolyMesh.PositionOffset)
}
::std::string* tLowPolyMesh::mutable_positionoffset() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tLowPolyMesh.PositionOffset)
  return positionoffset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tLowPolyMesh::release_positionoffset() {
  // @@protoc_insertion_point(field_release:xnormal.tLowPolyMesh.PositionOffset)
  
  return positionoffset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tLowPolyMesh::set_allocated_positionoffset(::std::string* positionoffset) {
  if (positionoffset != NULL) {
    
  } else {
    
  }
  positionoffset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positionoffset);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tLowPolyMesh.PositionOffset)
}

// float MaxRayDistanceBack = 39;
void tLowPolyMesh::clear_maxraydistanceback() {
  maxraydistanceback_ = 0;
}
float tLowPolyMesh::maxraydistanceback() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.MaxRayDistanceBack)
  return maxraydistanceback_;
}
void tLowPolyMesh::set_maxraydistanceback(float value) {
  
  maxraydistanceback_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.MaxRayDistanceBack)
}

// bool UseFresnel = 40;
void tLowPolyMesh::clear_usefresnel() {
  usefresnel_ = false;
}
bool tLowPolyMesh::usefresnel() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.UseFresnel)
  return usefresnel_;
}
void tLowPolyMesh::set_usefresnel(bool value) {
  
  usefresnel_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.UseFresnel)
}

// bool ReceiveShadows = 41;
void tLowPolyMesh::clear_receiveshadows() {
  receiveshadows_ = false;
}
bool tLowPolyMesh::receiveshadows() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.ReceiveShadows)
  return receiveshadows_;
}
void tLowPolyMesh::set_receiveshadows(bool value) {
  
  receiveshadows_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.ReceiveShadows)
}

// string EmissiveTex = 42;
void tLowPolyMesh::clear_emissivetex() {
  emissivetex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tLowPolyMesh::emissivetex() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.EmissiveTex)
  return emissivetex_.GetNoArena();
}
void tLowPolyMesh::set_emissivetex(const ::std::string& value) {
  
  emissivetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.EmissiveTex)
}
#if LANG_CXX11
void tLowPolyMesh::set_emissivetex(::std::string&& value) {
  
  emissivetex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tLowPolyMesh.EmissiveTex)
}
#endif
void tLowPolyMesh::set_emissivetex(const char* value) {
  
  emissivetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tLowPolyMesh.EmissiveTex)
}
void tLowPolyMesh::set_emissivetex(const char* value, size_t size) {
  
  emissivetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tLowPolyMesh.EmissiveTex)
}
::std::string* tLowPolyMesh::mutable_emissivetex() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tLowPolyMesh.EmissiveTex)
  return emissivetex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tLowPolyMesh::release_emissivetex() {
  // @@protoc_insertion_point(field_release:xnormal.tLowPolyMesh.EmissiveTex)
  
  return emissivetex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tLowPolyMesh::set_allocated_emissivetex(::std::string* emissivetex) {
  if (emissivetex != NULL) {
    
  } else {
    
  }
  emissivetex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emissivetex);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tLowPolyMesh.EmissiveTex)
}

// bool BackfaceCull = 43;
void tLowPolyMesh::clear_backfacecull() {
  backfacecull_ = false;
}
bool tLowPolyMesh::backfacecull() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.BackfaceCull)
  return backfacecull_;
}
void tLowPolyMesh::set_backfacecull(bool value) {
  
  backfacecull_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.BackfaceCull)
}

// bool CastShadows = 44;
void tLowPolyMesh::clear_castshadows() {
  castshadows_ = false;
}
bool tLowPolyMesh::castshadows() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.CastShadows)
  return castshadows_;
}
void tLowPolyMesh::set_castshadows(bool value) {
  
  castshadows_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.CastShadows)
}

// bool MatchUVs = 45;
void tLowPolyMesh::clear_matchuvs() {
  matchuvs_ = false;
}
bool tLowPolyMesh::matchuvs() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyMesh.MatchUVs)
  return matchuvs_;
}
void tLowPolyMesh::set_matchuvs(bool value) {
  
  matchuvs_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyMesh.MatchUVs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tVector3::kXFieldNumber;
const int tVector3::kYFieldNumber;
const int tVector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tVector3::tVector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_xnormal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xnormal.tVector3)
}
tVector3::tVector3(const tVector3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:xnormal.tVector3)
}

void tVector3::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

tVector3::~tVector3() {
  // @@protoc_insertion_point(destructor:xnormal.tVector3)
  SharedDtor();
}

void tVector3::SharedDtor() {
}

void tVector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tVector3::descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[6].descriptor;
}

const tVector3& tVector3::default_instance() {
  protobuf_xnormal_2eproto::InitDefaults();
  return *internal_default_instance();
}

tVector3* tVector3::New(::google::protobuf::Arena* arena) const {
  tVector3* n = new tVector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tVector3::Clear() {
// @@protoc_insertion_point(message_clear_start:xnormal.tVector3)
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

bool tVector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xnormal.tVector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xnormal.tVector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xnormal.tVector3)
  return false;
#undef DO_
}

void tVector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xnormal.tVector3)
  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:xnormal.tVector3)
}

::google::protobuf::uint8* tVector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xnormal.tVector3)
  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xnormal.tVector3)
  return target;
}

size_t tVector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xnormal.tVector3)
  size_t total_size = 0;

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tVector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xnormal.tVector3)
  GOOGLE_DCHECK_NE(&from, this);
  const tVector3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tVector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xnormal.tVector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xnormal.tVector3)
    MergeFrom(*source);
  }
}

void tVector3::MergeFrom(const tVector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xnormal.tVector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void tVector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xnormal.tVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tVector3::CopyFrom(const tVector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xnormal.tVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tVector3::IsInitialized() const {
  return true;
}

void tVector3::Swap(tVector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tVector3::InternalSwap(tVector3* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tVector3::GetMetadata() const {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tVector3

// float x = 1;
void tVector3::clear_x() {
  x_ = 0;
}
float tVector3::x() const {
  // @@protoc_insertion_point(field_get:xnormal.tVector3.x)
  return x_;
}
void tVector3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tVector3.x)
}

// float y = 2;
void tVector3::clear_y() {
  y_ = 0;
}
float tVector3::y() const {
  // @@protoc_insertion_point(field_get:xnormal.tVector3.y)
  return y_;
}
void tVector3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tVector3.y)
}

// float z = 3;
void tVector3::clear_z() {
  z_ = 0;
}
float tVector3::z() const {
  // @@protoc_insertion_point(field_get:xnormal.tVector3.z)
  return z_;
}
void tVector3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tVector3.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tGenerateMaps::kNMBackgroundColorFieldNumber;
const int tGenerateMaps::kHMBackgroundColorFieldNumber;
const int tGenerateMaps::kBakeHighpolyBaseTextureNoTexColFieldNumber;
const int tGenerateMaps::kBakeHighpolyBaseTextureBackgroundColorFieldNumber;
const int tGenerateMaps::kRenderWireframeBackgroundColorFieldNumber;
const int tGenerateMaps::kRenderWireframeColFieldNumber;
const int tGenerateMaps::kRenderCWColFieldNumber;
const int tGenerateMaps::kRenderSeamColFieldNumber;
const int tGenerateMaps::kRenderRayFailsColFieldNumber;
const int tGenerateMaps::kAOOccludedColorFieldNumber;
const int tGenerateMaps::kAOUnoccludedColorFieldNumber;
const int tGenerateMaps::kAOBackgroundColorFieldNumber;
const int tGenerateMaps::kBentBackgroundColorFieldNumber;
const int tGenerateMaps::kPRTBackgroundColorFieldNumber;
const int tGenerateMaps::kConvexityBackgroundColorFieldNumber;
const int tGenerateMaps::kThicknessBackgroundColorFieldNumber;
const int tGenerateMaps::kProximityBackgroundColorFieldNumber;
const int tGenerateMaps::kCavityBackgroundColorFieldNumber;
const int tGenerateMaps::kVDMBackgroundColorFieldNumber;
const int tGenerateMaps::kRadNMBackgroundColorFieldNumber;
const int tGenerateMaps::kCurvBackgroundColorFieldNumber;
const int tGenerateMaps::kDerivNMBackgroundColorFieldNumber;
const int tGenerateMaps::kTransluBackgroundColorFieldNumber;
const int tGenerateMaps::kBakeHighpolyVColsBackgroundColFieldNumber;
const int tGenerateMaps::kClosestIfFailsFieldNumber;
const int tGenerateMaps::kDirectionsTonemapMaxFieldNumber;
const int tGenerateMaps::kCurvMonocromeFieldNumber;
const int tGenerateMaps::kAOBiasFieldNumber;
const int tGenerateMaps::kBentTangentSpaceFieldNumber;
const int tGenerateMaps::kGenTransluFieldNumber;
const int tGenerateMaps::kAODistributionFieldNumber;
const int tGenerateMaps::kPRTThresholdFieldNumber;
const int tGenerateMaps::kDirectionsTonemapMinFieldNumber;
const int tGenerateMaps::kCurvDistributionFieldNumber;
const int tGenerateMaps::kBentJitterFieldNumber;
const int tGenerateMaps::kBentDistributionFieldNumber;
const int tGenerateMaps::kBakeHighpolyBaseTextureFieldNumber;
const int tGenerateMaps::kGenConvexityFieldNumber;
const int tGenerateMaps::kRadiosityNormalsAttenLinearFieldNumber;
const int tGenerateMaps::kTransluRaysPerSampleFieldNumber;
const int tGenerateMaps::kCurvSearchDistanceFieldNumber;
const int tGenerateMaps::kSwizzleZFieldNumber;
const int tGenerateMaps::kTransluBiasFieldNumber;
const int tGenerateMaps::kPRTLimitRayDistanceFieldNumber;
const int tGenerateMaps::kGenBentFieldNumber;
const int tGenerateMaps::kAOLimitRayDistanceFieldNumber;
const int tGenerateMaps::kCurvRaysPerSampleFieldNumber;
const int tGenerateMaps::kRadiosityNormalsDistributionFieldNumber;
const int tGenerateMaps::kRadiosityNormalsRaysPerSampleFieldNumber;
const int tGenerateMaps::kCurvJitterFieldNumber;
const int tGenerateMaps::kTangentSpaceFieldNumber;
const int tGenerateMaps::kRadiosityNormalsAllowPureOcclusionFieldNumber;
const int tGenerateMaps::kBentSwizzleXFieldNumber;
const int tGenerateMaps::kSwizzleYFieldNumber;
const int tGenerateMaps::kGenCurvFieldNumber;
const int tGenerateMaps::kPRTJitterFieldNumber;
const int tGenerateMaps::kAOAttenCuadraticFieldNumber;
const int tGenerateMaps::kBentConeAngleFieldNumber;
const int tGenerateMaps::kSwizzleXFieldNumber;
const int tGenerateMaps::kRenderRayFailsFieldNumber;
const int tGenerateMaps::kCavitySearchRadiusFieldNumber;
const int tGenerateMaps::kRadiosityNormalsEncodeAOFieldNumber;
const int tGenerateMaps::kTransluConeAngleFieldNumber;
const int tGenerateMaps::kBentRaysPerSampleFieldNumber;
const int tGenerateMaps::kConvexityScaleFieldNumber;
const int tGenerateMaps::kRadiosityNormalsConeAngleFieldNumber;
const int tGenerateMaps::kFileFieldNumber;
const int tGenerateMaps::kGenDerivNMFieldNumber;
const int tGenerateMaps::kBentLimitRayDistanceFieldNumber;
const int tGenerateMaps::kPRTBiasFieldNumber;
const int tGenerateMaps::kRenderWireframeFieldNumber;
const int tGenerateMaps::kPRTNormalizeFieldNumber;
const int tGenerateMaps::kGenAOFieldNumber;
const int tGenerateMaps::kPRTConeAngleFieldNumber;
const int tGenerateMaps::kHeightFieldNumber;
const int tGenerateMaps::kRadiosityNormalsAttenCuadraticFieldNumber;
const int tGenerateMaps::kDirectionsTonemapFieldNumber;
const int tGenerateMaps::kDirectionsTSFieldNumber;
const int tGenerateMaps::kPRTRaysPerSampleFieldNumber;
const int tGenerateMaps::kEdgePaddingFieldNumber;
const int tGenerateMaps::kDirectionsSwizzleZFieldNumber;
const int tGenerateMaps::kAOAllowPureOccludedFieldNumber;
const int tGenerateMaps::kAOIgnoreBackfaceHitsFieldNumber;
const int tGenerateMaps::kCavityRaysPerSampleFieldNumber;
const int tGenerateMaps::kAOAttenConstantFieldNumber;
const int tGenerateMaps::kCavityJitterFieldNumber;
const int tGenerateMaps::kHeightTonemapMaxFieldNumber;
const int tGenerateMaps::kGenDirectionsFieldNumber;
const int tGenerateMaps::kRadiosityNormalsLimitRayDistanceFieldNumber;
const int tGenerateMaps::kHeightTonemapMinFieldNumber;
const int tGenerateMaps::kRadiosityNormalsJitterFieldNumber;
const int tGenerateMaps::kDirectionsSwizzleYFieldNumber;
const int tGenerateMaps::kWidthFieldNumber;
const int tGenerateMaps::kBakeHighpolyBaseTextureDrawObjectIDIfNoTextureFieldNumber;
const int tGenerateMaps::kConcavityFieldNumber;
const int tGenerateMaps::kDirectionsSwizzleXFieldNumber;
const int tGenerateMaps::kGenNormalsFieldNumber;
const int tGenerateMaps::kProximityRaysPerSampleFieldNumber;
const int tGenerateMaps::kGenHeightsFieldNumber;
const int tGenerateMaps::kRadiosityNormalsAttenConstantFieldNumber;
const int tGenerateMaps::kGenProximityFieldNumber;
const int tGenerateMaps::kGenPRTFieldNumber;
const int tGenerateMaps::kCavityContrastFieldNumber;
const int tGenerateMaps::kRadiosityNormalsCoordSysFieldNumber;
const int tGenerateMaps::kTransluJitterFieldNumber;
const int tGenerateMaps::kAORaysPerSampleFieldNumber;
const int tGenerateMaps::kBentBiasFieldNumber;
const int tGenerateMaps::kDiscardRayBackFacesHitsFieldNumber;
const int tGenerateMaps::kAOConeAngleFieldNumber;
const int tGenerateMaps::kBentSwizzleYFieldNumber;
const int tGenerateMaps::kRadiosityNormalsBiasFieldNumber;
const int tGenerateMaps::kRadiosityNormalsContrastFieldNumber;
const int tGenerateMaps::kCavityStepsFieldNumber;
const int tGenerateMaps::kAAFieldNumber;
const int tGenerateMaps::kBentSwizzleZFieldNumber;
const int tGenerateMaps::kBucketSizeFieldNumber;
const int tGenerateMaps::kCurvConeAngleFieldNumber;
const int tGenerateMaps::kTransluDistFieldNumber;
const int tGenerateMaps::kAOJitterFieldNumber;
const int tGenerateMaps::kCurvBiasFieldNumber;
const int tGenerateMaps::kGenWireRaysFieldNumber;
const int tGenerateMaps::kCurvAlgorithmFieldNumber;
const int tGenerateMaps::kTransluDistributionFieldNumber;
const int tGenerateMaps::kAOAttenLinearFieldNumber;
const int tGenerateMaps::kProximityLimitRayDistanceFieldNumber;
const int tGenerateMaps::kGenRadiosityNormalsFieldNumber;
const int tGenerateMaps::kProximityConeAngleFieldNumber;
const int tGenerateMaps::kHeightTonemapFieldNumber;
const int tGenerateMaps::kGenCavityFieldNumber;
const int tGenerateMaps::kBakeHighpolyVColsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tGenerateMaps::tGenerateMaps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_xnormal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xnormal.tGenerateMaps)
}
tGenerateMaps::tGenerateMaps(const tGenerateMaps& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.has_nmbackgroundcolor()) {
    nmbackgroundcolor_ = new ::xnormal::tRGB8(*from.nmbackgroundcolor_);
  } else {
    nmbackgroundcolor_ = NULL;
  }
  if (from.has_hmbackgroundcolor()) {
    hmbackgroundcolor_ = new ::xnormal::tRGB8(*from.hmbackgroundcolor_);
  } else {
    hmbackgroundcolor_ = NULL;
  }
  if (from.has_bakehighpolybasetexturenotexcol()) {
    bakehighpolybasetexturenotexcol_ = new ::xnormal::tRGB8(*from.bakehighpolybasetexturenotexcol_);
  } else {
    bakehighpolybasetexturenotexcol_ = NULL;
  }
  if (from.has_bakehighpolybasetexturebackgroundcolor()) {
    bakehighpolybasetexturebackgroundcolor_ = new ::xnormal::tRGB8(*from.bakehighpolybasetexturebackgroundcolor_);
  } else {
    bakehighpolybasetexturebackgroundcolor_ = NULL;
  }
  if (from.has_renderwireframebackgroundcolor()) {
    renderwireframebackgroundcolor_ = new ::xnormal::tRGB8(*from.renderwireframebackgroundcolor_);
  } else {
    renderwireframebackgroundcolor_ = NULL;
  }
  if (from.has_renderwireframecol()) {
    renderwireframecol_ = new ::xnormal::tRGB8(*from.renderwireframecol_);
  } else {
    renderwireframecol_ = NULL;
  }
  if (from.has_rendercwcol()) {
    rendercwcol_ = new ::xnormal::tRGB8(*from.rendercwcol_);
  } else {
    rendercwcol_ = NULL;
  }
  if (from.has_renderseamcol()) {
    renderseamcol_ = new ::xnormal::tRGB8(*from.renderseamcol_);
  } else {
    renderseamcol_ = NULL;
  }
  if (from.has_renderrayfailscol()) {
    renderrayfailscol_ = new ::xnormal::tRGB8(*from.renderrayfailscol_);
  } else {
    renderrayfailscol_ = NULL;
  }
  if (from.has_aooccludedcolor()) {
    aooccludedcolor_ = new ::xnormal::tRGB8(*from.aooccludedcolor_);
  } else {
    aooccludedcolor_ = NULL;
  }
  if (from.has_aounoccludedcolor()) {
    aounoccludedcolor_ = new ::xnormal::tRGB8(*from.aounoccludedcolor_);
  } else {
    aounoccludedcolor_ = NULL;
  }
  if (from.has_aobackgroundcolor()) {
    aobackgroundcolor_ = new ::xnormal::tRGB8(*from.aobackgroundcolor_);
  } else {
    aobackgroundcolor_ = NULL;
  }
  if (from.has_bentbackgroundcolor()) {
    bentbackgroundcolor_ = new ::xnormal::tRGB8(*from.bentbackgroundcolor_);
  } else {
    bentbackgroundcolor_ = NULL;
  }
  if (from.has_prtbackgroundcolor()) {
    prtbackgroundcolor_ = new ::xnormal::tRGB8(*from.prtbackgroundcolor_);
  } else {
    prtbackgroundcolor_ = NULL;
  }
  if (from.has_convexitybackgroundcolor()) {
    convexitybackgroundcolor_ = new ::xnormal::tRGB8(*from.convexitybackgroundcolor_);
  } else {
    convexitybackgroundcolor_ = NULL;
  }
  if (from.has_thicknessbackgroundcolor()) {
    thicknessbackgroundcolor_ = new ::xnormal::tRGB8(*from.thicknessbackgroundcolor_);
  } else {
    thicknessbackgroundcolor_ = NULL;
  }
  if (from.has_proximitybackgroundcolor()) {
    proximitybackgroundcolor_ = new ::xnormal::tRGB8(*from.proximitybackgroundcolor_);
  } else {
    proximitybackgroundcolor_ = NULL;
  }
  if (from.has_cavitybackgroundcolor()) {
    cavitybackgroundcolor_ = new ::xnormal::tRGB8(*from.cavitybackgroundcolor_);
  } else {
    cavitybackgroundcolor_ = NULL;
  }
  if (from.has_vdmbackgroundcolor()) {
    vdmbackgroundcolor_ = new ::xnormal::tRGB8(*from.vdmbackgroundcolor_);
  } else {
    vdmbackgroundcolor_ = NULL;
  }
  if (from.has_radnmbackgroundcolor()) {
    radnmbackgroundcolor_ = new ::xnormal::tRGB8(*from.radnmbackgroundcolor_);
  } else {
    radnmbackgroundcolor_ = NULL;
  }
  if (from.has_curvbackgroundcolor()) {
    curvbackgroundcolor_ = new ::xnormal::tRGB8(*from.curvbackgroundcolor_);
  } else {
    curvbackgroundcolor_ = NULL;
  }
  if (from.has_derivnmbackgroundcolor()) {
    derivnmbackgroundcolor_ = new ::xnormal::tRGB8(*from.derivnmbackgroundcolor_);
  } else {
    derivnmbackgroundcolor_ = NULL;
  }
  if (from.has_translubackgroundcolor()) {
    translubackgroundcolor_ = new ::xnormal::tRGB8(*from.translubackgroundcolor_);
  } else {
    translubackgroundcolor_ = NULL;
  }
  if (from.has_bakehighpolyvcolsbackgroundcol()) {
    bakehighpolyvcolsbackgroundcol_ = new ::xnormal::tRGB8(*from.bakehighpolyvcolsbackgroundcol_);
  } else {
    bakehighpolyvcolsbackgroundcol_ = NULL;
  }
  ::memcpy(&directionstonemapmax_, &from.directionstonemapmax_,
    reinterpret_cast<char*>(&bakehighpolyvcols_) -
    reinterpret_cast<char*>(&directionstonemapmax_) + sizeof(bakehighpolyvcols_));
  // @@protoc_insertion_point(copy_constructor:xnormal.tGenerateMaps)
}

void tGenerateMaps::SharedCtor() {
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nmbackgroundcolor_, 0, reinterpret_cast<char*>(&bakehighpolyvcols_) -
    reinterpret_cast<char*>(&nmbackgroundcolor_) + sizeof(bakehighpolyvcols_));
  _cached_size_ = 0;
}

tGenerateMaps::~tGenerateMaps() {
  // @@protoc_insertion_point(destructor:xnormal.tGenerateMaps)
  SharedDtor();
}

void tGenerateMaps::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete nmbackgroundcolor_;
  }
  if (this != internal_default_instance()) {
    delete hmbackgroundcolor_;
  }
  if (this != internal_default_instance()) {
    delete bakehighpolybasetexturenotexcol_;
  }
  if (this != internal_default_instance()) {
    delete bakehighpolybasetexturebackgroundcolor_;
  }
  if (this != internal_default_instance()) {
    delete renderwireframebackgroundcolor_;
  }
  if (this != internal_default_instance()) {
    delete renderwireframecol_;
  }
  if (this != internal_default_instance()) {
    delete rendercwcol_;
  }
  if (this != internal_default_instance()) {
    delete renderseamcol_;
  }
  if (this != internal_default_instance()) {
    delete renderrayfailscol_;
  }
  if (this != internal_default_instance()) {
    delete aooccludedcolor_;
  }
  if (this != internal_default_instance()) {
    delete aounoccludedcolor_;
  }
  if (this != internal_default_instance()) {
    delete aobackgroundcolor_;
  }
  if (this != internal_default_instance()) {
    delete bentbackgroundcolor_;
  }
  if (this != internal_default_instance()) {
    delete prtbackgroundcolor_;
  }
  if (this != internal_default_instance()) {
    delete convexitybackgroundcolor_;
  }
  if (this != internal_default_instance()) {
    delete thicknessbackgroundcolor_;
  }
  if (this != internal_default_instance()) {
    delete proximitybackgroundcolor_;
  }
  if (this != internal_default_instance()) {
    delete cavitybackgroundcolor_;
  }
  if (this != internal_default_instance()) {
    delete vdmbackgroundcolor_;
  }
  if (this != internal_default_instance()) {
    delete radnmbackgroundcolor_;
  }
  if (this != internal_default_instance()) {
    delete curvbackgroundcolor_;
  }
  if (this != internal_default_instance()) {
    delete derivnmbackgroundcolor_;
  }
  if (this != internal_default_instance()) {
    delete translubackgroundcolor_;
  }
  if (this != internal_default_instance()) {
    delete bakehighpolyvcolsbackgroundcol_;
  }
}

void tGenerateMaps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tGenerateMaps::descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[7].descriptor;
}

const tGenerateMaps& tGenerateMaps::default_instance() {
  protobuf_xnormal_2eproto::InitDefaults();
  return *internal_default_instance();
}

tGenerateMaps* tGenerateMaps::New(::google::protobuf::Arena* arena) const {
  tGenerateMaps* n = new tGenerateMaps;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tGenerateMaps::Clear() {
// @@protoc_insertion_point(message_clear_start:xnormal.tGenerateMaps)
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && nmbackgroundcolor_ != NULL) {
    delete nmbackgroundcolor_;
  }
  nmbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && hmbackgroundcolor_ != NULL) {
    delete hmbackgroundcolor_;
  }
  hmbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && bakehighpolybasetexturenotexcol_ != NULL) {
    delete bakehighpolybasetexturenotexcol_;
  }
  bakehighpolybasetexturenotexcol_ = NULL;
  if (GetArenaNoVirtual() == NULL && bakehighpolybasetexturebackgroundcolor_ != NULL) {
    delete bakehighpolybasetexturebackgroundcolor_;
  }
  bakehighpolybasetexturebackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && renderwireframebackgroundcolor_ != NULL) {
    delete renderwireframebackgroundcolor_;
  }
  renderwireframebackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && renderwireframecol_ != NULL) {
    delete renderwireframecol_;
  }
  renderwireframecol_ = NULL;
  if (GetArenaNoVirtual() == NULL && rendercwcol_ != NULL) {
    delete rendercwcol_;
  }
  rendercwcol_ = NULL;
  if (GetArenaNoVirtual() == NULL && renderseamcol_ != NULL) {
    delete renderseamcol_;
  }
  renderseamcol_ = NULL;
  if (GetArenaNoVirtual() == NULL && renderrayfailscol_ != NULL) {
    delete renderrayfailscol_;
  }
  renderrayfailscol_ = NULL;
  if (GetArenaNoVirtual() == NULL && aooccludedcolor_ != NULL) {
    delete aooccludedcolor_;
  }
  aooccludedcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && aounoccludedcolor_ != NULL) {
    delete aounoccludedcolor_;
  }
  aounoccludedcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && aobackgroundcolor_ != NULL) {
    delete aobackgroundcolor_;
  }
  aobackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && bentbackgroundcolor_ != NULL) {
    delete bentbackgroundcolor_;
  }
  bentbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && prtbackgroundcolor_ != NULL) {
    delete prtbackgroundcolor_;
  }
  prtbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && convexitybackgroundcolor_ != NULL) {
    delete convexitybackgroundcolor_;
  }
  convexitybackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && thicknessbackgroundcolor_ != NULL) {
    delete thicknessbackgroundcolor_;
  }
  thicknessbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && proximitybackgroundcolor_ != NULL) {
    delete proximitybackgroundcolor_;
  }
  proximitybackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && cavitybackgroundcolor_ != NULL) {
    delete cavitybackgroundcolor_;
  }
  cavitybackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && vdmbackgroundcolor_ != NULL) {
    delete vdmbackgroundcolor_;
  }
  vdmbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && radnmbackgroundcolor_ != NULL) {
    delete radnmbackgroundcolor_;
  }
  radnmbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && curvbackgroundcolor_ != NULL) {
    delete curvbackgroundcolor_;
  }
  curvbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && derivnmbackgroundcolor_ != NULL) {
    delete derivnmbackgroundcolor_;
  }
  derivnmbackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && translubackgroundcolor_ != NULL) {
    delete translubackgroundcolor_;
  }
  translubackgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && bakehighpolyvcolsbackgroundcol_ != NULL) {
    delete bakehighpolyvcolsbackgroundcol_;
  }
  bakehighpolyvcolsbackgroundcol_ = NULL;
  ::memset(&directionstonemapmax_, 0, reinterpret_cast<char*>(&bakehighpolyvcols_) -
    reinterpret_cast<char*>(&directionstonemapmax_) + sizeof(bakehighpolyvcols_));
}

bool tGenerateMaps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xnormal.tGenerateMaps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xnormal.tRGB8 NMBackgroundColor = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nmbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 HMBackgroundColor = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hmbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 BakeHighpolyBaseTextureNoTexCol = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bakehighpolybasetexturenotexcol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 BakeHighpolyBaseTextureBackgroundColor = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bakehighpolybasetexturebackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 RenderWireframeBackgroundColor = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renderwireframebackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 RenderWireframeCol = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renderwireframecol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 RenderCWCol = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rendercwcol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 RenderSeamCol = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renderseamcol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 RenderRayFailsCol = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renderrayfailscol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 AOOccludedColor = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aooccludedcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 AOUnoccludedColor = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aounoccludedcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 AOBackgroundColor = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aobackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 BentBackgroundColor = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bentbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 PRTBackgroundColor = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prtbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 ConvexityBackgroundColor = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convexitybackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 ThicknessBackgroundColor = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thicknessbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 ProximityBackgroundColor = 17;
      case 17: {
        if (tag == 138u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proximitybackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 CavityBackgroundColor = 18;
      case 18: {
        if (tag == 146u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cavitybackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 VDMBackgroundColor = 19;
      case 19: {
        if (tag == 154u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vdmbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 RadNMBackgroundColor = 20;
      case 20: {
        if (tag == 162u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radnmbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 CurvBackgroundColor = 21;
      case 21: {
        if (tag == 170u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curvbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 DerivNMBackgroundColor = 22;
      case 22: {
        if (tag == 178u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_derivnmbackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 TransluBackgroundColor = 23;
      case 23: {
        if (tag == 186u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translubackgroundcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 BakeHighpolyVColsBackgroundCol = 24;
      case 24: {
        if (tag == 194u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bakehighpolyvcolsbackgroundcol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ClosestIfFails = 25;
      case 25: {
        if (tag == 200u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &closestiffails_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float DirectionsTonemapMax = 26;
      case 26: {
        if (tag == 213u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &directionstonemapmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool CurvMonocrome = 27;
      case 27: {
        if (tag == 216u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &curvmonocrome_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float AOBias = 28;
      case 28: {
        if (tag == 229u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aobias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool BentTangentSpace = 29;
      case 29: {
        if (tag == 232u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &benttangentspace_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool GenTranslu = 30;
      case 30: {
        if (tag == 240u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gentranslu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eAODistribution AODistribution = 31;
      case 31: {
        if (tag == 248u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_aodistribution(static_cast< ::xnormal::tGenerateMaps_eAODistribution >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float PRTThreshold = 32;
      case 32: {
        if (tag == 261u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prtthreshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float DirectionsTonemapMin = 33;
      case 33: {
        if (tag == 269u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &directionstonemapmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eAODistribution CurvDistribution = 34;
      case 34: {
        if (tag == 272u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_curvdistribution(static_cast< ::xnormal::tGenerateMaps_eAODistribution >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool BentJitter = 35;
      case 35: {
        if (tag == 280u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bentjitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eAODistribution BentDistribution = 36;
      case 36: {
        if (tag == 288u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bentdistribution(static_cast< ::xnormal::tGenerateMaps_eAODistribution >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool BakeHighpolyBaseTexture = 37;
      case 37: {
        if (tag == 296u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bakehighpolybasetexture_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool GenConvexity = 38;
      case 38: {
        if (tag == 304u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genconvexity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float RadiosityNormalsAttenLinear = 39;
      case 39: {
        if (tag == 317u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radiositynormalsattenlinear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TransluRaysPerSample = 40;
      case 40: {
        if (tag == 320u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &translurayspersample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float CurvSearchDistance = 41;
      case 41: {
        if (tag == 333u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curvsearchdistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eSwizzleComponent SwizzleZ = 42;
      case 42: {
        if (tag == 336u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_swizzlez(static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float TransluBias = 43;
      case 43: {
        if (tag == 349u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &translubias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool PRTLimitRayDistance = 44;
      case 44: {
        if (tag == 352u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prtlimitraydistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool GenBent = 45;
      case 45: {
        if (tag == 360u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genbent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool AOLimitRayDistance = 46;
      case 46: {
        if (tag == 368u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aolimitraydistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 CurvRaysPerSample = 47;
      case 47: {
        if (tag == 376u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curvrayspersample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eAODistribution RadiosityNormalsDistribution = 48;
      case 48: {
        if (tag == 384u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_radiositynormalsdistribution(static_cast< ::xnormal::tGenerateMaps_eAODistribution >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 RadiosityNormalsRaysPerSample = 49;
      case 49: {
        if (tag == 392u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiositynormalsrayspersample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool CurvJitter = 50;
      case 50: {
        if (tag == 400u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &curvjitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool TangentSpace = 51;
      case 51: {
        if (tag == 408u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tangentspace_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool RadiosityNormalsAllowPureOcclusion = 52;
      case 52: {
        if (tag == 416u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &radiositynormalsallowpureocclusion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eSwizzleComponent BentSwizzleX = 53;
      case 53: {
        if (tag == 424u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bentswizzlex(static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eSwizzleComponent SwizzleY = 54;
      case 54: {
        if (tag == 432u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_swizzley(static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool GenCurv = 55;
      case 55: {
        if (tag == 440u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gencurv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool PRTJitter = 56;
      case 56: {
        if (tag == 448u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prtjitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float AOAttenCuadratic = 57;
      case 57: {
        if (tag == 461u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aoattencuadratic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float BentConeAngle = 58;
      case 58: {
        if (tag == 469u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bentconeangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eSwizzleComponent SwizzleX = 59;
      case 59: {
        if (tag == 472u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_swizzlex(static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool RenderRayFails = 60;
      case 60: {
        if (tag == 480u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &renderrayfails_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float CavitySearchRadius = 61;
      case 61: {
        if (tag == 493u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cavitysearchradius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool RadiosityNormalsEncodeAO = 62;
      case 62: {
        if (tag == 496u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &radiositynormalsencodeao_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float TransluConeAngle = 63;
      case 63: {
        if (tag == 509u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transluconeangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 BentRaysPerSample = 64;
      case 64: {
        if (tag == 512u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bentrayspersample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ConvexityScale = 65;
      case 65: {
        if (tag == 525u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &convexityscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float RadiosityNormalsConeAngle = 66;
      case 66: {
        if (tag == 533u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radiositynormalsconeangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string File = 67;
      case 67: {
        if (tag == 538u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tGenerateMaps.File"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool GenDerivNM = 68;
      case 68: {
        if (tag == 544u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genderivnm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool BentLimitRayDistance = 69;
      case 69: {
        if (tag == 552u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bentlimitraydistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float PRTBias = 70;
      case 70: {
        if (tag == 565u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prtbias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool RenderWireframe = 71;
      case 71: {
        if (tag == 568u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &renderwireframe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool PRTNormalize = 72;
      case 72: {
        if (tag == 576u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prtnormalize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool GenAO = 73;
      case 73: {
        if (tag == 584u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genao_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float PRTConeAngle = 74;
      case 74: {
        if (tag == 597u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prtconeangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Height = 75;
      case 75: {
        if (tag == 600u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float RadiosityNormalsAttenCuadratic = 76;
      case 76: {
        if (tag == 613u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radiositynormalsattencuadratic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eHMNormalization DirectionsTonemap = 77;
      case 77: {
        if (tag == 616u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_directionstonemap(static_cast< ::xnormal::tGenerateMaps_eHMNormalization >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool DirectionsTS = 78;
      case 78: {
        if (tag == 624u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &directionsts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 PRTRaysPerSample = 79;
      case 79: {
        if (tag == 632u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prtrayspersample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 EdgePadding = 80;
      case 80: {
        if (tag == 640u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &edgepadding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eSwizzleComponent DirectionsSwizzleZ = 81;
      case 81: {
        if (tag == 648u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_directionsswizzlez(static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool AOAllowPureOccluded = 82;
      case 82: {
        if (tag == 656u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aoallowpureoccluded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool AOIgnoreBackfaceHits = 83;
      case 83: {
        if (tag == 664u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aoignorebackfacehits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 CavityRaysPerSample = 84;
      case 84: {
        if (tag == 672u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cavityrayspersample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float AOAttenConstant = 85;
      case 85: {
        if (tag == 685u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aoattenconstant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool CavityJitter = 86;
      case 86: {
        if (tag == 688u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cavityjitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float HeightTonemapMax = 87;
      case 87: {
        if (tag == 701u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heighttonemapmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool GenDirections = 88;
      case 88: {
        if (tag == 704u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gendirections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool RadiosityNormalsLimitRayDistance = 89;
      case 89: {
        if (tag == 712u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &radiositynormalslimitraydistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float HeightTonemapMin = 90;
      case 90: {
        if (tag == 725u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heighttonemapmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool RadiosityNormalsJitter = 91;
      case 91: {
        if (tag == 728u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &radiositynormalsjitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eSwizzleComponent DirectionsSwizzleY = 92;
      case 92: {
        if (tag == 736u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_directionsswizzley(static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Width = 93;
      case 93: {
        if (tag == 744u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool BakeHighpolyBaseTextureDrawObjectIDIfNoTexture = 94;
      case 94: {
        if (tag == 752u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bakehighpolybasetexturedrawobjectidifnotexture_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Concavity = 95;
      case 95: {
        if (tag == 760u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &concavity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eSwizzleComponent DirectionsSwizzleX = 96;
      case 96: {
        if (tag == 768u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_directionsswizzlex(static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool GenNormals = 97;
      case 97: {
        if (tag == 776u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gennormals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ProximityRaysPerSample = 98;
      case 98: {
        if (tag == 784u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proximityrayspersample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool GenHeights = 99;
      case 99: {
        if (tag == 792u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genheights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float RadiosityNormalsAttenConstant = 100;
      case 100: {
        if (tag == 805u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radiositynormalsattenconstant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool GenProximity = 101;
      case 101: {
        if (tag == 808u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genproximity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool GenPRT = 102;
      case 102: {
        if (tag == 816u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genprt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float CavityContrast = 103;
      case 103: {
        if (tag == 829u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cavitycontrast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eRNMCoordSys RadiosityNormalsCoordSys = 104;
      case 104: {
        if (tag == 832u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_radiositynormalscoordsys(static_cast< ::xnormal::tGenerateMaps_eRNMCoordSys >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool TransluJitter = 105;
      case 105: {
        if (tag == 840u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &translujitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 AORaysPerSample = 106;
      case 106: {
        if (tag == 848u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aorayspersample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float BentBias = 107;
      case 107: {
        if (tag == 861u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bentbias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool DiscardRayBackFacesHits = 108;
      case 108: {
        if (tag == 864u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discardraybackfaceshits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float AOConeAngle = 109;
      case 109: {
        if (tag == 877u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aoconeangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eSwizzleComponent BentSwizzleY = 110;
      case 110: {
        if (tag == 880u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bentswizzley(static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float RadiosityNormalsBias = 111;
      case 111: {
        if (tag == 893u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radiositynormalsbias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float RadiosityNormalsContrast = 112;
      case 112: {
        if (tag == 901u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radiositynormalscontrast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 CavitySteps = 113;
      case 113: {
        if (tag == 904u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cavitysteps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eAntialiasing AA = 114;
      case 114: {
        if (tag == 912u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_aa(static_cast< ::xnormal::tGenerateMaps_eAntialiasing >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eSwizzleComponent BentSwizzleZ = 115;
      case 115: {
        if (tag == 920u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bentswizzlez(static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 BucketSize = 116;
      case 116: {
        if (tag == 928u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bucketsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float CurvConeAngle = 117;
      case 117: {
        if (tag == 941u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curvconeangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float TransluDist = 118;
      case 118: {
        if (tag == 949u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transludist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool AOJitter = 119;
      case 119: {
        if (tag == 952u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aojitter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float CurvBias = 120;
      case 120: {
        if (tag == 965u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curvbias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool GenWireRays = 121;
      case 121: {
        if (tag == 968u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genwirerays_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eCurvAlgorithm CurvAlgorithm = 122;
      case 122: {
        if (tag == 976u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_curvalgorithm(static_cast< ::xnormal::tGenerateMaps_eCurvAlgorithm >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eAODistribution TransluDistribution = 123;
      case 123: {
        if (tag == 984u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_transludistribution(static_cast< ::xnormal::tGenerateMaps_eAODistribution >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float AOAttenLinear = 124;
      case 124: {
        if (tag == 997u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &aoattenlinear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ProximityLimitRayDistance = 125;
      case 125: {
        if (tag == 1000u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &proximitylimitraydistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool GenRadiosityNormals = 126;
      case 126: {
        if (tag == 1008u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &genradiositynormals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ProximityConeAngle = 127;
      case 127: {
        if (tag == 1021u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &proximityconeangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps.eHMNormalization HeightTonemap = 128;
      case 128: {
        if (tag == 1024u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_heighttonemap(static_cast< ::xnormal::tGenerateMaps_eHMNormalization >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool GenCavity = 129;
      case 129: {
        if (tag == 1032u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gencavity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool BakeHighpolyVCols = 130;
      case 130: {
        if (tag == 1040u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bakehighpolyvcols_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xnormal.tGenerateMaps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xnormal.tGenerateMaps)
  return false;
#undef DO_
}

void tGenerateMaps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xnormal.tGenerateMaps)
  // .xnormal.tRGB8 NMBackgroundColor = 1;
  if (this->has_nmbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->nmbackgroundcolor_, output);
  }

  // .xnormal.tRGB8 HMBackgroundColor = 2;
  if (this->has_hmbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->hmbackgroundcolor_, output);
  }

  // .xnormal.tRGB8 BakeHighpolyBaseTextureNoTexCol = 3;
  if (this->has_bakehighpolybasetexturenotexcol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->bakehighpolybasetexturenotexcol_, output);
  }

  // .xnormal.tRGB8 BakeHighpolyBaseTextureBackgroundColor = 4;
  if (this->has_bakehighpolybasetexturebackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bakehighpolybasetexturebackgroundcolor_, output);
  }

  // .xnormal.tRGB8 RenderWireframeBackgroundColor = 5;
  if (this->has_renderwireframebackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->renderwireframebackgroundcolor_, output);
  }

  // .xnormal.tRGB8 RenderWireframeCol = 6;
  if (this->has_renderwireframecol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->renderwireframecol_, output);
  }

  // .xnormal.tRGB8 RenderCWCol = 7;
  if (this->has_rendercwcol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->rendercwcol_, output);
  }

  // .xnormal.tRGB8 RenderSeamCol = 8;
  if (this->has_renderseamcol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->renderseamcol_, output);
  }

  // .xnormal.tRGB8 RenderRayFailsCol = 9;
  if (this->has_renderrayfailscol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->renderrayfailscol_, output);
  }

  // .xnormal.tRGB8 AOOccludedColor = 10;
  if (this->has_aooccludedcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->aooccludedcolor_, output);
  }

  // .xnormal.tRGB8 AOUnoccludedColor = 11;
  if (this->has_aounoccludedcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->aounoccludedcolor_, output);
  }

  // .xnormal.tRGB8 AOBackgroundColor = 12;
  if (this->has_aobackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->aobackgroundcolor_, output);
  }

  // .xnormal.tRGB8 BentBackgroundColor = 13;
  if (this->has_bentbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->bentbackgroundcolor_, output);
  }

  // .xnormal.tRGB8 PRTBackgroundColor = 14;
  if (this->has_prtbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->prtbackgroundcolor_, output);
  }

  // .xnormal.tRGB8 ConvexityBackgroundColor = 15;
  if (this->has_convexitybackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->convexitybackgroundcolor_, output);
  }

  // .xnormal.tRGB8 ThicknessBackgroundColor = 16;
  if (this->has_thicknessbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->thicknessbackgroundcolor_, output);
  }

  // .xnormal.tRGB8 ProximityBackgroundColor = 17;
  if (this->has_proximitybackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->proximitybackgroundcolor_, output);
  }

  // .xnormal.tRGB8 CavityBackgroundColor = 18;
  if (this->has_cavitybackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->cavitybackgroundcolor_, output);
  }

  // .xnormal.tRGB8 VDMBackgroundColor = 19;
  if (this->has_vdmbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->vdmbackgroundcolor_, output);
  }

  // .xnormal.tRGB8 RadNMBackgroundColor = 20;
  if (this->has_radnmbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->radnmbackgroundcolor_, output);
  }

  // .xnormal.tRGB8 CurvBackgroundColor = 21;
  if (this->has_curvbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->curvbackgroundcolor_, output);
  }

  // .xnormal.tRGB8 DerivNMBackgroundColor = 22;
  if (this->has_derivnmbackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->derivnmbackgroundcolor_, output);
  }

  // .xnormal.tRGB8 TransluBackgroundColor = 23;
  if (this->has_translubackgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->translubackgroundcolor_, output);
  }

  // .xnormal.tRGB8 BakeHighpolyVColsBackgroundCol = 24;
  if (this->has_bakehighpolyvcolsbackgroundcol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->bakehighpolyvcolsbackgroundcol_, output);
  }

  // bool ClosestIfFails = 25;
  if (this->closestiffails() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->closestiffails(), output);
  }

  // float DirectionsTonemapMax = 26;
  if (this->directionstonemapmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->directionstonemapmax(), output);
  }

  // bool CurvMonocrome = 27;
  if (this->curvmonocrome() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->curvmonocrome(), output);
  }

  // float AOBias = 28;
  if (this->aobias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->aobias(), output);
  }

  // bool BentTangentSpace = 29;
  if (this->benttangentspace() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->benttangentspace(), output);
  }

  // bool GenTranslu = 30;
  if (this->gentranslu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->gentranslu(), output);
  }

  // .xnormal.tGenerateMaps.eAODistribution AODistribution = 31;
  if (this->aodistribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->aodistribution(), output);
  }

  // float PRTThreshold = 32;
  if (this->prtthreshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->prtthreshold(), output);
  }

  // float DirectionsTonemapMin = 33;
  if (this->directionstonemapmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->directionstonemapmin(), output);
  }

  // .xnormal.tGenerateMaps.eAODistribution CurvDistribution = 34;
  if (this->curvdistribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      34, this->curvdistribution(), output);
  }

  // bool BentJitter = 35;
  if (this->bentjitter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->bentjitter(), output);
  }

  // .xnormal.tGenerateMaps.eAODistribution BentDistribution = 36;
  if (this->bentdistribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      36, this->bentdistribution(), output);
  }

  // bool BakeHighpolyBaseTexture = 37;
  if (this->bakehighpolybasetexture() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->bakehighpolybasetexture(), output);
  }

  // bool GenConvexity = 38;
  if (this->genconvexity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->genconvexity(), output);
  }

  // float RadiosityNormalsAttenLinear = 39;
  if (this->radiositynormalsattenlinear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->radiositynormalsattenlinear(), output);
  }

  // uint32 TransluRaysPerSample = 40;
  if (this->translurayspersample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->translurayspersample(), output);
  }

  // float CurvSearchDistance = 41;
  if (this->curvsearchdistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->curvsearchdistance(), output);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent SwizzleZ = 42;
  if (this->swizzlez() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      42, this->swizzlez(), output);
  }

  // float TransluBias = 43;
  if (this->translubias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->translubias(), output);
  }

  // bool PRTLimitRayDistance = 44;
  if (this->prtlimitraydistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->prtlimitraydistance(), output);
  }

  // bool GenBent = 45;
  if (this->genbent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->genbent(), output);
  }

  // bool AOLimitRayDistance = 46;
  if (this->aolimitraydistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(46, this->aolimitraydistance(), output);
  }

  // uint32 CurvRaysPerSample = 47;
  if (this->curvrayspersample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->curvrayspersample(), output);
  }

  // .xnormal.tGenerateMaps.eAODistribution RadiosityNormalsDistribution = 48;
  if (this->radiositynormalsdistribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      48, this->radiositynormalsdistribution(), output);
  }

  // uint32 RadiosityNormalsRaysPerSample = 49;
  if (this->radiositynormalsrayspersample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->radiositynormalsrayspersample(), output);
  }

  // bool CurvJitter = 50;
  if (this->curvjitter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->curvjitter(), output);
  }

  // bool TangentSpace = 51;
  if (this->tangentspace() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->tangentspace(), output);
  }

  // bool RadiosityNormalsAllowPureOcclusion = 52;
  if (this->radiositynormalsallowpureocclusion() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(52, this->radiositynormalsallowpureocclusion(), output);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent BentSwizzleX = 53;
  if (this->bentswizzlex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      53, this->bentswizzlex(), output);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent SwizzleY = 54;
  if (this->swizzley() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      54, this->swizzley(), output);
  }

  // bool GenCurv = 55;
  if (this->gencurv() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->gencurv(), output);
  }

  // bool PRTJitter = 56;
  if (this->prtjitter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->prtjitter(), output);
  }

  // float AOAttenCuadratic = 57;
  if (this->aoattencuadratic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(57, this->aoattencuadratic(), output);
  }

  // float BentConeAngle = 58;
  if (this->bentconeangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(58, this->bentconeangle(), output);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent SwizzleX = 59;
  if (this->swizzlex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      59, this->swizzlex(), output);
  }

  // bool RenderRayFails = 60;
  if (this->renderrayfails() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->renderrayfails(), output);
  }

  // float CavitySearchRadius = 61;
  if (this->cavitysearchradius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(61, this->cavitysearchradius(), output);
  }

  // bool RadiosityNormalsEncodeAO = 62;
  if (this->radiositynormalsencodeao() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(62, this->radiositynormalsencodeao(), output);
  }

  // float TransluConeAngle = 63;
  if (this->transluconeangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(63, this->transluconeangle(), output);
  }

  // uint32 BentRaysPerSample = 64;
  if (this->bentrayspersample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->bentrayspersample(), output);
  }

  // float ConvexityScale = 65;
  if (this->convexityscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(65, this->convexityscale(), output);
  }

  // float RadiosityNormalsConeAngle = 66;
  if (this->radiositynormalsconeangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(66, this->radiositynormalsconeangle(), output);
  }

  // string File = 67;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tGenerateMaps.File");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      67, this->file(), output);
  }

  // bool GenDerivNM = 68;
  if (this->genderivnm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(68, this->genderivnm(), output);
  }

  // bool BentLimitRayDistance = 69;
  if (this->bentlimitraydistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(69, this->bentlimitraydistance(), output);
  }

  // float PRTBias = 70;
  if (this->prtbias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(70, this->prtbias(), output);
  }

  // bool RenderWireframe = 71;
  if (this->renderwireframe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(71, this->renderwireframe(), output);
  }

  // bool PRTNormalize = 72;
  if (this->prtnormalize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(72, this->prtnormalize(), output);
  }

  // bool GenAO = 73;
  if (this->genao() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(73, this->genao(), output);
  }

  // float PRTConeAngle = 74;
  if (this->prtconeangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(74, this->prtconeangle(), output);
  }

  // uint32 Height = 75;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(75, this->height(), output);
  }

  // float RadiosityNormalsAttenCuadratic = 76;
  if (this->radiositynormalsattencuadratic() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(76, this->radiositynormalsattencuadratic(), output);
  }

  // .xnormal.tGenerateMaps.eHMNormalization DirectionsTonemap = 77;
  if (this->directionstonemap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      77, this->directionstonemap(), output);
  }

  // bool DirectionsTS = 78;
  if (this->directionsts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(78, this->directionsts(), output);
  }

  // uint32 PRTRaysPerSample = 79;
  if (this->prtrayspersample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(79, this->prtrayspersample(), output);
  }

  // uint32 EdgePadding = 80;
  if (this->edgepadding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(80, this->edgepadding(), output);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent DirectionsSwizzleZ = 81;
  if (this->directionsswizzlez() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      81, this->directionsswizzlez(), output);
  }

  // bool AOAllowPureOccluded = 82;
  if (this->aoallowpureoccluded() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(82, this->aoallowpureoccluded(), output);
  }

  // bool AOIgnoreBackfaceHits = 83;
  if (this->aoignorebackfacehits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->aoignorebackfacehits(), output);
  }

  // uint32 CavityRaysPerSample = 84;
  if (this->cavityrayspersample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(84, this->cavityrayspersample(), output);
  }

  // float AOAttenConstant = 85;
  if (this->aoattenconstant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(85, this->aoattenconstant(), output);
  }

  // bool CavityJitter = 86;
  if (this->cavityjitter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(86, this->cavityjitter(), output);
  }

  // float HeightTonemapMax = 87;
  if (this->heighttonemapmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(87, this->heighttonemapmax(), output);
  }

  // bool GenDirections = 88;
  if (this->gendirections() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(88, this->gendirections(), output);
  }

  // bool RadiosityNormalsLimitRayDistance = 89;
  if (this->radiositynormalslimitraydistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(89, this->radiositynormalslimitraydistance(), output);
  }

  // float HeightTonemapMin = 90;
  if (this->heighttonemapmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(90, this->heighttonemapmin(), output);
  }

  // bool RadiosityNormalsJitter = 91;
  if (this->radiositynormalsjitter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(91, this->radiositynormalsjitter(), output);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent DirectionsSwizzleY = 92;
  if (this->directionsswizzley() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      92, this->directionsswizzley(), output);
  }

  // uint32 Width = 93;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(93, this->width(), output);
  }

  // bool BakeHighpolyBaseTextureDrawObjectIDIfNoTexture = 94;
  if (this->bakehighpolybasetexturedrawobjectidifnotexture() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(94, this->bakehighpolybasetexturedrawobjectidifnotexture(), output);
  }

  // bool Concavity = 95;
  if (this->concavity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(95, this->concavity(), output);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent DirectionsSwizzleX = 96;
  if (this->directionsswizzlex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      96, this->directionsswizzlex(), output);
  }

  // bool GenNormals = 97;
  if (this->gennormals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(97, this->gennormals(), output);
  }

  // uint32 ProximityRaysPerSample = 98;
  if (this->proximityrayspersample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(98, this->proximityrayspersample(), output);
  }

  // bool GenHeights = 99;
  if (this->genheights() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(99, this->genheights(), output);
  }

  // float RadiosityNormalsAttenConstant = 100;
  if (this->radiositynormalsattenconstant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(100, this->radiositynormalsattenconstant(), output);
  }

  // bool GenProximity = 101;
  if (this->genproximity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(101, this->genproximity(), output);
  }

  // bool GenPRT = 102;
  if (this->genprt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->genprt(), output);
  }

  // float CavityContrast = 103;
  if (this->cavitycontrast() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(103, this->cavitycontrast(), output);
  }

  // .xnormal.tGenerateMaps.eRNMCoordSys RadiosityNormalsCoordSys = 104;
  if (this->radiositynormalscoordsys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      104, this->radiositynormalscoordsys(), output);
  }

  // bool TransluJitter = 105;
  if (this->translujitter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(105, this->translujitter(), output);
  }

  // uint32 AORaysPerSample = 106;
  if (this->aorayspersample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(106, this->aorayspersample(), output);
  }

  // float BentBias = 107;
  if (this->bentbias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(107, this->bentbias(), output);
  }

  // bool DiscardRayBackFacesHits = 108;
  if (this->discardraybackfaceshits() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(108, this->discardraybackfaceshits(), output);
  }

  // float AOConeAngle = 109;
  if (this->aoconeangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(109, this->aoconeangle(), output);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent BentSwizzleY = 110;
  if (this->bentswizzley() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      110, this->bentswizzley(), output);
  }

  // float RadiosityNormalsBias = 111;
  if (this->radiositynormalsbias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(111, this->radiositynormalsbias(), output);
  }

  // float RadiosityNormalsContrast = 112;
  if (this->radiositynormalscontrast() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(112, this->radiositynormalscontrast(), output);
  }

  // uint32 CavitySteps = 113;
  if (this->cavitysteps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(113, this->cavitysteps(), output);
  }

  // .xnormal.tGenerateMaps.eAntialiasing AA = 114;
  if (this->aa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      114, this->aa(), output);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent BentSwizzleZ = 115;
  if (this->bentswizzlez() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      115, this->bentswizzlez(), output);
  }

  // uint32 BucketSize = 116;
  if (this->bucketsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(116, this->bucketsize(), output);
  }

  // float CurvConeAngle = 117;
  if (this->curvconeangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(117, this->curvconeangle(), output);
  }

  // float TransluDist = 118;
  if (this->transludist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(118, this->transludist(), output);
  }

  // bool AOJitter = 119;
  if (this->aojitter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(119, this->aojitter(), output);
  }

  // float CurvBias = 120;
  if (this->curvbias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(120, this->curvbias(), output);
  }

  // bool GenWireRays = 121;
  if (this->genwirerays() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(121, this->genwirerays(), output);
  }

  // .xnormal.tGenerateMaps.eCurvAlgorithm CurvAlgorithm = 122;
  if (this->curvalgorithm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      122, this->curvalgorithm(), output);
  }

  // .xnormal.tGenerateMaps.eAODistribution TransluDistribution = 123;
  if (this->transludistribution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      123, this->transludistribution(), output);
  }

  // float AOAttenLinear = 124;
  if (this->aoattenlinear() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(124, this->aoattenlinear(), output);
  }

  // bool ProximityLimitRayDistance = 125;
  if (this->proximitylimitraydistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(125, this->proximitylimitraydistance(), output);
  }

  // bool GenRadiosityNormals = 126;
  if (this->genradiositynormals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(126, this->genradiositynormals(), output);
  }

  // float ProximityConeAngle = 127;
  if (this->proximityconeangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(127, this->proximityconeangle(), output);
  }

  // .xnormal.tGenerateMaps.eHMNormalization HeightTonemap = 128;
  if (this->heighttonemap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      128, this->heighttonemap(), output);
  }

  // bool GenCavity = 129;
  if (this->gencavity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(129, this->gencavity(), output);
  }

  // bool BakeHighpolyVCols = 130;
  if (this->bakehighpolyvcols() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(130, this->bakehighpolyvcols(), output);
  }

  // @@protoc_insertion_point(serialize_end:xnormal.tGenerateMaps)
}

::google::protobuf::uint8* tGenerateMaps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xnormal.tGenerateMaps)
  // .xnormal.tRGB8 NMBackgroundColor = 1;
  if (this->has_nmbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->nmbackgroundcolor_, false, target);
  }

  // .xnormal.tRGB8 HMBackgroundColor = 2;
  if (this->has_hmbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->hmbackgroundcolor_, false, target);
  }

  // .xnormal.tRGB8 BakeHighpolyBaseTextureNoTexCol = 3;
  if (this->has_bakehighpolybasetexturenotexcol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->bakehighpolybasetexturenotexcol_, false, target);
  }

  // .xnormal.tRGB8 BakeHighpolyBaseTextureBackgroundColor = 4;
  if (this->has_bakehighpolybasetexturebackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bakehighpolybasetexturebackgroundcolor_, false, target);
  }

  // .xnormal.tRGB8 RenderWireframeBackgroundColor = 5;
  if (this->has_renderwireframebackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->renderwireframebackgroundcolor_, false, target);
  }

  // .xnormal.tRGB8 RenderWireframeCol = 6;
  if (this->has_renderwireframecol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->renderwireframecol_, false, target);
  }

  // .xnormal.tRGB8 RenderCWCol = 7;
  if (this->has_rendercwcol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->rendercwcol_, false, target);
  }

  // .xnormal.tRGB8 RenderSeamCol = 8;
  if (this->has_renderseamcol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->renderseamcol_, false, target);
  }

  // .xnormal.tRGB8 RenderRayFailsCol = 9;
  if (this->has_renderrayfailscol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->renderrayfailscol_, false, target);
  }

  // .xnormal.tRGB8 AOOccludedColor = 10;
  if (this->has_aooccludedcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->aooccludedcolor_, false, target);
  }

  // .xnormal.tRGB8 AOUnoccludedColor = 11;
  if (this->has_aounoccludedcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->aounoccludedcolor_, false, target);
  }

  // .xnormal.tRGB8 AOBackgroundColor = 12;
  if (this->has_aobackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->aobackgroundcolor_, false, target);
  }

  // .xnormal.tRGB8 BentBackgroundColor = 13;
  if (this->has_bentbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->bentbackgroundcolor_, false, target);
  }

  // .xnormal.tRGB8 PRTBackgroundColor = 14;
  if (this->has_prtbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->prtbackgroundcolor_, false, target);
  }

  // .xnormal.tRGB8 ConvexityBackgroundColor = 15;
  if (this->has_convexitybackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->convexitybackgroundcolor_, false, target);
  }

  // .xnormal.tRGB8 ThicknessBackgroundColor = 16;
  if (this->has_thicknessbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->thicknessbackgroundcolor_, false, target);
  }

  // .xnormal.tRGB8 ProximityBackgroundColor = 17;
  if (this->has_proximitybackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->proximitybackgroundcolor_, false, target);
  }

  // .xnormal.tRGB8 CavityBackgroundColor = 18;
  if (this->has_cavitybackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->cavitybackgroundcolor_, false, target);
  }

  // .xnormal.tRGB8 VDMBackgroundColor = 19;
  if (this->has_vdmbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->vdmbackgroundcolor_, false, target);
  }

  // .xnormal.tRGB8 RadNMBackgroundColor = 20;
  if (this->has_radnmbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->radnmbackgroundcolor_, false, target);
  }

  // .xnormal.tRGB8 CurvBackgroundColor = 21;
  if (this->has_curvbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->curvbackgroundcolor_, false, target);
  }

  // .xnormal.tRGB8 DerivNMBackgroundColor = 22;
  if (this->has_derivnmbackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->derivnmbackgroundcolor_, false, target);
  }

  // .xnormal.tRGB8 TransluBackgroundColor = 23;
  if (this->has_translubackgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->translubackgroundcolor_, false, target);
  }

  // .xnormal.tRGB8 BakeHighpolyVColsBackgroundCol = 24;
  if (this->has_bakehighpolyvcolsbackgroundcol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->bakehighpolyvcolsbackgroundcol_, false, target);
  }

  // bool ClosestIfFails = 25;
  if (this->closestiffails() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->closestiffails(), target);
  }

  // float DirectionsTonemapMax = 26;
  if (this->directionstonemapmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->directionstonemapmax(), target);
  }

  // bool CurvMonocrome = 27;
  if (this->curvmonocrome() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->curvmonocrome(), target);
  }

  // float AOBias = 28;
  if (this->aobias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->aobias(), target);
  }

  // bool BentTangentSpace = 29;
  if (this->benttangentspace() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->benttangentspace(), target);
  }

  // bool GenTranslu = 30;
  if (this->gentranslu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->gentranslu(), target);
  }

  // .xnormal.tGenerateMaps.eAODistribution AODistribution = 31;
  if (this->aodistribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->aodistribution(), target);
  }

  // float PRTThreshold = 32;
  if (this->prtthreshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->prtthreshold(), target);
  }

  // float DirectionsTonemapMin = 33;
  if (this->directionstonemapmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->directionstonemapmin(), target);
  }

  // .xnormal.tGenerateMaps.eAODistribution CurvDistribution = 34;
  if (this->curvdistribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      34, this->curvdistribution(), target);
  }

  // bool BentJitter = 35;
  if (this->bentjitter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->bentjitter(), target);
  }

  // .xnormal.tGenerateMaps.eAODistribution BentDistribution = 36;
  if (this->bentdistribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      36, this->bentdistribution(), target);
  }

  // bool BakeHighpolyBaseTexture = 37;
  if (this->bakehighpolybasetexture() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->bakehighpolybasetexture(), target);
  }

  // bool GenConvexity = 38;
  if (this->genconvexity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->genconvexity(), target);
  }

  // float RadiosityNormalsAttenLinear = 39;
  if (this->radiositynormalsattenlinear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->radiositynormalsattenlinear(), target);
  }

  // uint32 TransluRaysPerSample = 40;
  if (this->translurayspersample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->translurayspersample(), target);
  }

  // float CurvSearchDistance = 41;
  if (this->curvsearchdistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->curvsearchdistance(), target);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent SwizzleZ = 42;
  if (this->swizzlez() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      42, this->swizzlez(), target);
  }

  // float TransluBias = 43;
  if (this->translubias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(43, this->translubias(), target);
  }

  // bool PRTLimitRayDistance = 44;
  if (this->prtlimitraydistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(44, this->prtlimitraydistance(), target);
  }

  // bool GenBent = 45;
  if (this->genbent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->genbent(), target);
  }

  // bool AOLimitRayDistance = 46;
  if (this->aolimitraydistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(46, this->aolimitraydistance(), target);
  }

  // uint32 CurvRaysPerSample = 47;
  if (this->curvrayspersample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->curvrayspersample(), target);
  }

  // .xnormal.tGenerateMaps.eAODistribution RadiosityNormalsDistribution = 48;
  if (this->radiositynormalsdistribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      48, this->radiositynormalsdistribution(), target);
  }

  // uint32 RadiosityNormalsRaysPerSample = 49;
  if (this->radiositynormalsrayspersample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->radiositynormalsrayspersample(), target);
  }

  // bool CurvJitter = 50;
  if (this->curvjitter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->curvjitter(), target);
  }

  // bool TangentSpace = 51;
  if (this->tangentspace() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->tangentspace(), target);
  }

  // bool RadiosityNormalsAllowPureOcclusion = 52;
  if (this->radiositynormalsallowpureocclusion() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(52, this->radiositynormalsallowpureocclusion(), target);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent BentSwizzleX = 53;
  if (this->bentswizzlex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      53, this->bentswizzlex(), target);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent SwizzleY = 54;
  if (this->swizzley() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      54, this->swizzley(), target);
  }

  // bool GenCurv = 55;
  if (this->gencurv() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->gencurv(), target);
  }

  // bool PRTJitter = 56;
  if (this->prtjitter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->prtjitter(), target);
  }

  // float AOAttenCuadratic = 57;
  if (this->aoattencuadratic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(57, this->aoattencuadratic(), target);
  }

  // float BentConeAngle = 58;
  if (this->bentconeangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(58, this->bentconeangle(), target);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent SwizzleX = 59;
  if (this->swizzlex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      59, this->swizzlex(), target);
  }

  // bool RenderRayFails = 60;
  if (this->renderrayfails() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->renderrayfails(), target);
  }

  // float CavitySearchRadius = 61;
  if (this->cavitysearchradius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(61, this->cavitysearchradius(), target);
  }

  // bool RadiosityNormalsEncodeAO = 62;
  if (this->radiositynormalsencodeao() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(62, this->radiositynormalsencodeao(), target);
  }

  // float TransluConeAngle = 63;
  if (this->transluconeangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(63, this->transluconeangle(), target);
  }

  // uint32 BentRaysPerSample = 64;
  if (this->bentrayspersample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->bentrayspersample(), target);
  }

  // float ConvexityScale = 65;
  if (this->convexityscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(65, this->convexityscale(), target);
  }

  // float RadiosityNormalsConeAngle = 66;
  if (this->radiositynormalsconeangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(66, this->radiositynormalsconeangle(), target);
  }

  // string File = 67;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tGenerateMaps.File");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        67, this->file(), target);
  }

  // bool GenDerivNM = 68;
  if (this->genderivnm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(68, this->genderivnm(), target);
  }

  // bool BentLimitRayDistance = 69;
  if (this->bentlimitraydistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(69, this->bentlimitraydistance(), target);
  }

  // float PRTBias = 70;
  if (this->prtbias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(70, this->prtbias(), target);
  }

  // bool RenderWireframe = 71;
  if (this->renderwireframe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(71, this->renderwireframe(), target);
  }

  // bool PRTNormalize = 72;
  if (this->prtnormalize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(72, this->prtnormalize(), target);
  }

  // bool GenAO = 73;
  if (this->genao() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(73, this->genao(), target);
  }

  // float PRTConeAngle = 74;
  if (this->prtconeangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(74, this->prtconeangle(), target);
  }

  // uint32 Height = 75;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(75, this->height(), target);
  }

  // float RadiosityNormalsAttenCuadratic = 76;
  if (this->radiositynormalsattencuadratic() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(76, this->radiositynormalsattencuadratic(), target);
  }

  // .xnormal.tGenerateMaps.eHMNormalization DirectionsTonemap = 77;
  if (this->directionstonemap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      77, this->directionstonemap(), target);
  }

  // bool DirectionsTS = 78;
  if (this->directionsts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(78, this->directionsts(), target);
  }

  // uint32 PRTRaysPerSample = 79;
  if (this->prtrayspersample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(79, this->prtrayspersample(), target);
  }

  // uint32 EdgePadding = 80;
  if (this->edgepadding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(80, this->edgepadding(), target);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent DirectionsSwizzleZ = 81;
  if (this->directionsswizzlez() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      81, this->directionsswizzlez(), target);
  }

  // bool AOAllowPureOccluded = 82;
  if (this->aoallowpureoccluded() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(82, this->aoallowpureoccluded(), target);
  }

  // bool AOIgnoreBackfaceHits = 83;
  if (this->aoignorebackfacehits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(83, this->aoignorebackfacehits(), target);
  }

  // uint32 CavityRaysPerSample = 84;
  if (this->cavityrayspersample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(84, this->cavityrayspersample(), target);
  }

  // float AOAttenConstant = 85;
  if (this->aoattenconstant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(85, this->aoattenconstant(), target);
  }

  // bool CavityJitter = 86;
  if (this->cavityjitter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(86, this->cavityjitter(), target);
  }

  // float HeightTonemapMax = 87;
  if (this->heighttonemapmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(87, this->heighttonemapmax(), target);
  }

  // bool GenDirections = 88;
  if (this->gendirections() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(88, this->gendirections(), target);
  }

  // bool RadiosityNormalsLimitRayDistance = 89;
  if (this->radiositynormalslimitraydistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(89, this->radiositynormalslimitraydistance(), target);
  }

  // float HeightTonemapMin = 90;
  if (this->heighttonemapmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(90, this->heighttonemapmin(), target);
  }

  // bool RadiosityNormalsJitter = 91;
  if (this->radiositynormalsjitter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(91, this->radiositynormalsjitter(), target);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent DirectionsSwizzleY = 92;
  if (this->directionsswizzley() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      92, this->directionsswizzley(), target);
  }

  // uint32 Width = 93;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(93, this->width(), target);
  }

  // bool BakeHighpolyBaseTextureDrawObjectIDIfNoTexture = 94;
  if (this->bakehighpolybasetexturedrawobjectidifnotexture() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(94, this->bakehighpolybasetexturedrawobjectidifnotexture(), target);
  }

  // bool Concavity = 95;
  if (this->concavity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(95, this->concavity(), target);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent DirectionsSwizzleX = 96;
  if (this->directionsswizzlex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      96, this->directionsswizzlex(), target);
  }

  // bool GenNormals = 97;
  if (this->gennormals() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(97, this->gennormals(), target);
  }

  // uint32 ProximityRaysPerSample = 98;
  if (this->proximityrayspersample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(98, this->proximityrayspersample(), target);
  }

  // bool GenHeights = 99;
  if (this->genheights() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(99, this->genheights(), target);
  }

  // float RadiosityNormalsAttenConstant = 100;
  if (this->radiositynormalsattenconstant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(100, this->radiositynormalsattenconstant(), target);
  }

  // bool GenProximity = 101;
  if (this->genproximity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(101, this->genproximity(), target);
  }

  // bool GenPRT = 102;
  if (this->genprt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->genprt(), target);
  }

  // float CavityContrast = 103;
  if (this->cavitycontrast() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(103, this->cavitycontrast(), target);
  }

  // .xnormal.tGenerateMaps.eRNMCoordSys RadiosityNormalsCoordSys = 104;
  if (this->radiositynormalscoordsys() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      104, this->radiositynormalscoordsys(), target);
  }

  // bool TransluJitter = 105;
  if (this->translujitter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(105, this->translujitter(), target);
  }

  // uint32 AORaysPerSample = 106;
  if (this->aorayspersample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(106, this->aorayspersample(), target);
  }

  // float BentBias = 107;
  if (this->bentbias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(107, this->bentbias(), target);
  }

  // bool DiscardRayBackFacesHits = 108;
  if (this->discardraybackfaceshits() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(108, this->discardraybackfaceshits(), target);
  }

  // float AOConeAngle = 109;
  if (this->aoconeangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(109, this->aoconeangle(), target);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent BentSwizzleY = 110;
  if (this->bentswizzley() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      110, this->bentswizzley(), target);
  }

  // float RadiosityNormalsBias = 111;
  if (this->radiositynormalsbias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(111, this->radiositynormalsbias(), target);
  }

  // float RadiosityNormalsContrast = 112;
  if (this->radiositynormalscontrast() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(112, this->radiositynormalscontrast(), target);
  }

  // uint32 CavitySteps = 113;
  if (this->cavitysteps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(113, this->cavitysteps(), target);
  }

  // .xnormal.tGenerateMaps.eAntialiasing AA = 114;
  if (this->aa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      114, this->aa(), target);
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent BentSwizzleZ = 115;
  if (this->bentswizzlez() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      115, this->bentswizzlez(), target);
  }

  // uint32 BucketSize = 116;
  if (this->bucketsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(116, this->bucketsize(), target);
  }

  // float CurvConeAngle = 117;
  if (this->curvconeangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(117, this->curvconeangle(), target);
  }

  // float TransluDist = 118;
  if (this->transludist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(118, this->transludist(), target);
  }

  // bool AOJitter = 119;
  if (this->aojitter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(119, this->aojitter(), target);
  }

  // float CurvBias = 120;
  if (this->curvbias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(120, this->curvbias(), target);
  }

  // bool GenWireRays = 121;
  if (this->genwirerays() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(121, this->genwirerays(), target);
  }

  // .xnormal.tGenerateMaps.eCurvAlgorithm CurvAlgorithm = 122;
  if (this->curvalgorithm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      122, this->curvalgorithm(), target);
  }

  // .xnormal.tGenerateMaps.eAODistribution TransluDistribution = 123;
  if (this->transludistribution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      123, this->transludistribution(), target);
  }

  // float AOAttenLinear = 124;
  if (this->aoattenlinear() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(124, this->aoattenlinear(), target);
  }

  // bool ProximityLimitRayDistance = 125;
  if (this->proximitylimitraydistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(125, this->proximitylimitraydistance(), target);
  }

  // bool GenRadiosityNormals = 126;
  if (this->genradiositynormals() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(126, this->genradiositynormals(), target);
  }

  // float ProximityConeAngle = 127;
  if (this->proximityconeangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(127, this->proximityconeangle(), target);
  }

  // .xnormal.tGenerateMaps.eHMNormalization HeightTonemap = 128;
  if (this->heighttonemap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      128, this->heighttonemap(), target);
  }

  // bool GenCavity = 129;
  if (this->gencavity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(129, this->gencavity(), target);
  }

  // bool BakeHighpolyVCols = 130;
  if (this->bakehighpolyvcols() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(130, this->bakehighpolyvcols(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xnormal.tGenerateMaps)
  return target;
}

size_t tGenerateMaps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xnormal.tGenerateMaps)
  size_t total_size = 0;

  // string File = 67;
  if (this->file().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // .xnormal.tRGB8 NMBackgroundColor = 1;
  if (this->has_nmbackgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nmbackgroundcolor_);
  }

  // .xnormal.tRGB8 HMBackgroundColor = 2;
  if (this->has_hmbackgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hmbackgroundcolor_);
  }

  // .xnormal.tRGB8 BakeHighpolyBaseTextureNoTexCol = 3;
  if (this->has_bakehighpolybasetexturenotexcol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bakehighpolybasetexturenotexcol_);
  }

  // .xnormal.tRGB8 BakeHighpolyBaseTextureBackgroundColor = 4;
  if (this->has_bakehighpolybasetexturebackgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bakehighpolybasetexturebackgroundcolor_);
  }

  // .xnormal.tRGB8 RenderWireframeBackgroundColor = 5;
  if (this->has_renderwireframebackgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->renderwireframebackgroundcolor_);
  }

  // .xnormal.tRGB8 RenderWireframeCol = 6;
  if (this->has_renderwireframecol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->renderwireframecol_);
  }

  // .xnormal.tRGB8 RenderCWCol = 7;
  if (this->has_rendercwcol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rendercwcol_);
  }

  // .xnormal.tRGB8 RenderSeamCol = 8;
  if (this->has_renderseamcol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->renderseamcol_);
  }

  // .xnormal.tRGB8 RenderRayFailsCol = 9;
  if (this->has_renderrayfailscol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->renderrayfailscol_);
  }

  // .xnormal.tRGB8 AOOccludedColor = 10;
  if (this->has_aooccludedcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aooccludedcolor_);
  }

  // .xnormal.tRGB8 AOUnoccludedColor = 11;
  if (this->has_aounoccludedcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aounoccludedcolor_);
  }

  // .xnormal.tRGB8 AOBackgroundColor = 12;
  if (this->has_aobackgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->aobackgroundcolor_);
  }

  // .xnormal.tRGB8 BentBackgroundColor = 13;
  if (this->has_bentbackgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bentbackgroundcolor_);
  }

  // .xnormal.tRGB8 PRTBackgroundColor = 14;
  if (this->has_prtbackgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prtbackgroundcolor_);
  }

  // .xnormal.tRGB8 ConvexityBackgroundColor = 15;
  if (this->has_convexitybackgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->convexitybackgroundcolor_);
  }

  // .xnormal.tRGB8 ThicknessBackgroundColor = 16;
  if (this->has_thicknessbackgroundcolor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->thicknessbackgroundcolor_);
  }

  // .xnormal.tRGB8 ProximityBackgroundColor = 17;
  if (this->has_proximitybackgroundcolor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->proximitybackgroundcolor_);
  }

  // .xnormal.tRGB8 CavityBackgroundColor = 18;
  if (this->has_cavitybackgroundcolor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cavitybackgroundcolor_);
  }

  // .xnormal.tRGB8 VDMBackgroundColor = 19;
  if (this->has_vdmbackgroundcolor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->vdmbackgroundcolor_);
  }

  // .xnormal.tRGB8 RadNMBackgroundColor = 20;
  if (this->has_radnmbackgroundcolor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->radnmbackgroundcolor_);
  }

  // .xnormal.tRGB8 CurvBackgroundColor = 21;
  if (this->has_curvbackgroundcolor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->curvbackgroundcolor_);
  }

  // .xnormal.tRGB8 DerivNMBackgroundColor = 22;
  if (this->has_derivnmbackgroundcolor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->derivnmbackgroundcolor_);
  }

  // .xnormal.tRGB8 TransluBackgroundColor = 23;
  if (this->has_translubackgroundcolor()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->translubackgroundcolor_);
  }

  // .xnormal.tRGB8 BakeHighpolyVColsBackgroundCol = 24;
  if (this->has_bakehighpolyvcolsbackgroundcol()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bakehighpolyvcolsbackgroundcol_);
  }

  // float DirectionsTonemapMax = 26;
  if (this->directionstonemapmax() != 0) {
    total_size += 2 + 4;
  }

  // bool ClosestIfFails = 25;
  if (this->closestiffails() != 0) {
    total_size += 2 + 1;
  }

  // bool CurvMonocrome = 27;
  if (this->curvmonocrome() != 0) {
    total_size += 2 + 1;
  }

  // bool BentTangentSpace = 29;
  if (this->benttangentspace() != 0) {
    total_size += 2 + 1;
  }

  // bool GenTranslu = 30;
  if (this->gentranslu() != 0) {
    total_size += 2 + 1;
  }

  // float AOBias = 28;
  if (this->aobias() != 0) {
    total_size += 2 + 4;
  }

  // .xnormal.tGenerateMaps.eAODistribution AODistribution = 31;
  if (this->aodistribution() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->aodistribution());
  }

  // float PRTThreshold = 32;
  if (this->prtthreshold() != 0) {
    total_size += 2 + 4;
  }

  // float DirectionsTonemapMin = 33;
  if (this->directionstonemapmin() != 0) {
    total_size += 2 + 4;
  }

  // .xnormal.tGenerateMaps.eAODistribution CurvDistribution = 34;
  if (this->curvdistribution() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->curvdistribution());
  }

  // .xnormal.tGenerateMaps.eAODistribution BentDistribution = 36;
  if (this->bentdistribution() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bentdistribution());
  }

  // bool BentJitter = 35;
  if (this->bentjitter() != 0) {
    total_size += 2 + 1;
  }

  // bool BakeHighpolyBaseTexture = 37;
  if (this->bakehighpolybasetexture() != 0) {
    total_size += 2 + 1;
  }

  // bool GenConvexity = 38;
  if (this->genconvexity() != 0) {
    total_size += 2 + 1;
  }

  // bool PRTLimitRayDistance = 44;
  if (this->prtlimitraydistance() != 0) {
    total_size += 2 + 1;
  }

  // float RadiosityNormalsAttenLinear = 39;
  if (this->radiositynormalsattenlinear() != 0) {
    total_size += 2 + 4;
  }

  // uint32 TransluRaysPerSample = 40;
  if (this->translurayspersample() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->translurayspersample());
  }

  // float CurvSearchDistance = 41;
  if (this->curvsearchdistance() != 0) {
    total_size += 2 + 4;
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent SwizzleZ = 42;
  if (this->swizzlez() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->swizzlez());
  }

  // float TransluBias = 43;
  if (this->translubias() != 0) {
    total_size += 2 + 4;
  }

  // uint32 CurvRaysPerSample = 47;
  if (this->curvrayspersample() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->curvrayspersample());
  }

  // .xnormal.tGenerateMaps.eAODistribution RadiosityNormalsDistribution = 48;
  if (this->radiositynormalsdistribution() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->radiositynormalsdistribution());
  }

  // bool GenBent = 45;
  if (this->genbent() != 0) {
    total_size += 2 + 1;
  }

  // bool AOLimitRayDistance = 46;
  if (this->aolimitraydistance() != 0) {
    total_size += 2 + 1;
  }

  // bool CurvJitter = 50;
  if (this->curvjitter() != 0) {
    total_size += 2 + 1;
  }

  // bool TangentSpace = 51;
  if (this->tangentspace() != 0) {
    total_size += 2 + 1;
  }

  // uint32 RadiosityNormalsRaysPerSample = 49;
  if (this->radiositynormalsrayspersample() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->radiositynormalsrayspersample());
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent BentSwizzleX = 53;
  if (this->bentswizzlex() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bentswizzlex());
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent SwizzleY = 54;
  if (this->swizzley() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->swizzley());
  }

  // bool RadiosityNormalsAllowPureOcclusion = 52;
  if (this->radiositynormalsallowpureocclusion() != 0) {
    total_size += 2 + 1;
  }

  // bool GenCurv = 55;
  if (this->gencurv() != 0) {
    total_size += 2 + 1;
  }

  // bool PRTJitter = 56;
  if (this->prtjitter() != 0) {
    total_size += 2 + 1;
  }

  // bool RenderRayFails = 60;
  if (this->renderrayfails() != 0) {
    total_size += 2 + 1;
  }

  // float AOAttenCuadratic = 57;
  if (this->aoattencuadratic() != 0) {
    total_size += 2 + 4;
  }

  // float BentConeAngle = 58;
  if (this->bentconeangle() != 0) {
    total_size += 2 + 4;
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent SwizzleX = 59;
  if (this->swizzlex() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->swizzlex());
  }

  // float CavitySearchRadius = 61;
  if (this->cavitysearchradius() != 0) {
    total_size += 2 + 4;
  }

  // float TransluConeAngle = 63;
  if (this->transluconeangle() != 0) {
    total_size += 2 + 4;
  }

  // uint32 BentRaysPerSample = 64;
  if (this->bentrayspersample() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bentrayspersample());
  }

  // float ConvexityScale = 65;
  if (this->convexityscale() != 0) {
    total_size += 2 + 4;
  }

  // float RadiosityNormalsConeAngle = 66;
  if (this->radiositynormalsconeangle() != 0) {
    total_size += 2 + 4;
  }

  // bool RadiosityNormalsEncodeAO = 62;
  if (this->radiositynormalsencodeao() != 0) {
    total_size += 2 + 1;
  }

  // bool GenDerivNM = 68;
  if (this->genderivnm() != 0) {
    total_size += 2 + 1;
  }

  // bool BentLimitRayDistance = 69;
  if (this->bentlimitraydistance() != 0) {
    total_size += 2 + 1;
  }

  // bool RenderWireframe = 71;
  if (this->renderwireframe() != 0) {
    total_size += 2 + 1;
  }

  // float PRTBias = 70;
  if (this->prtbias() != 0) {
    total_size += 2 + 4;
  }

  // float PRTConeAngle = 74;
  if (this->prtconeangle() != 0) {
    total_size += 2 + 4;
  }

  // uint32 Height = 75;
  if (this->height() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // float RadiosityNormalsAttenCuadratic = 76;
  if (this->radiositynormalsattencuadratic() != 0) {
    total_size += 2 + 4;
  }

  // bool PRTNormalize = 72;
  if (this->prtnormalize() != 0) {
    total_size += 2 + 1;
  }

  // bool GenAO = 73;
  if (this->genao() != 0) {
    total_size += 2 + 1;
  }

  // bool DirectionsTS = 78;
  if (this->directionsts() != 0) {
    total_size += 2 + 1;
  }

  // bool AOAllowPureOccluded = 82;
  if (this->aoallowpureoccluded() != 0) {
    total_size += 2 + 1;
  }

  // .xnormal.tGenerateMaps.eHMNormalization DirectionsTonemap = 77;
  if (this->directionstonemap() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->directionstonemap());
  }

  // uint32 PRTRaysPerSample = 79;
  if (this->prtrayspersample() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prtrayspersample());
  }

  // uint32 EdgePadding = 80;
  if (this->edgepadding() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->edgepadding());
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent DirectionsSwizzleZ = 81;
  if (this->directionsswizzlez() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->directionsswizzlez());
  }

  // uint32 CavityRaysPerSample = 84;
  if (this->cavityrayspersample() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cavityrayspersample());
  }

  // float AOAttenConstant = 85;
  if (this->aoattenconstant() != 0) {
    total_size += 2 + 4;
  }

  // bool AOIgnoreBackfaceHits = 83;
  if (this->aoignorebackfacehits() != 0) {
    total_size += 2 + 1;
  }

  // bool CavityJitter = 86;
  if (this->cavityjitter() != 0) {
    total_size += 2 + 1;
  }

  // bool GenDirections = 88;
  if (this->gendirections() != 0) {
    total_size += 2 + 1;
  }

  // bool RadiosityNormalsLimitRayDistance = 89;
  if (this->radiositynormalslimitraydistance() != 0) {
    total_size += 2 + 1;
  }

  // float HeightTonemapMax = 87;
  if (this->heighttonemapmax() != 0) {
    total_size += 2 + 4;
  }

  // float HeightTonemapMin = 90;
  if (this->heighttonemapmin() != 0) {
    total_size += 2 + 4;
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent DirectionsSwizzleY = 92;
  if (this->directionsswizzley() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->directionsswizzley());
  }

  // uint32 Width = 93;
  if (this->width() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // bool RadiosityNormalsJitter = 91;
  if (this->radiositynormalsjitter() != 0) {
    total_size += 2 + 1;
  }

  // bool BakeHighpolyBaseTextureDrawObjectIDIfNoTexture = 94;
  if (this->bakehighpolybasetexturedrawobjectidifnotexture() != 0) {
    total_size += 2 + 1;
  }

  // bool Concavity = 95;
  if (this->concavity() != 0) {
    total_size += 2 + 1;
  }

  // bool GenNormals = 97;
  if (this->gennormals() != 0) {
    total_size += 2 + 1;
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent DirectionsSwizzleX = 96;
  if (this->directionsswizzlex() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->directionsswizzlex());
  }

  // uint32 ProximityRaysPerSample = 98;
  if (this->proximityrayspersample() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proximityrayspersample());
  }

  // float RadiosityNormalsAttenConstant = 100;
  if (this->radiositynormalsattenconstant() != 0) {
    total_size += 2 + 4;
  }

  // bool GenHeights = 99;
  if (this->genheights() != 0) {
    total_size += 2 + 1;
  }

  // bool GenProximity = 101;
  if (this->genproximity() != 0) {
    total_size += 2 + 1;
  }

  // bool GenPRT = 102;
  if (this->genprt() != 0) {
    total_size += 2 + 1;
  }

  // bool TransluJitter = 105;
  if (this->translujitter() != 0) {
    total_size += 2 + 1;
  }

  // float CavityContrast = 103;
  if (this->cavitycontrast() != 0) {
    total_size += 2 + 4;
  }

  // .xnormal.tGenerateMaps.eRNMCoordSys RadiosityNormalsCoordSys = 104;
  if (this->radiositynormalscoordsys() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->radiositynormalscoordsys());
  }

  // uint32 AORaysPerSample = 106;
  if (this->aorayspersample() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->aorayspersample());
  }

  // float BentBias = 107;
  if (this->bentbias() != 0) {
    total_size += 2 + 4;
  }

  // float AOConeAngle = 109;
  if (this->aoconeangle() != 0) {
    total_size += 2 + 4;
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent BentSwizzleY = 110;
  if (this->bentswizzley() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bentswizzley());
  }

  // float RadiosityNormalsBias = 111;
  if (this->radiositynormalsbias() != 0) {
    total_size += 2 + 4;
  }

  // float RadiosityNormalsContrast = 112;
  if (this->radiositynormalscontrast() != 0) {
    total_size += 2 + 4;
  }

  // uint32 CavitySteps = 113;
  if (this->cavitysteps() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cavitysteps());
  }

  // .xnormal.tGenerateMaps.eAntialiasing AA = 114;
  if (this->aa() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->aa());
  }

  // .xnormal.tGenerateMaps.eSwizzleComponent BentSwizzleZ = 115;
  if (this->bentswizzlez() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bentswizzlez());
  }

  // uint32 BucketSize = 116;
  if (this->bucketsize() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bucketsize());
  }

  // float CurvConeAngle = 117;
  if (this->curvconeangle() != 0) {
    total_size += 2 + 4;
  }

  // float TransluDist = 118;
  if (this->transludist() != 0) {
    total_size += 2 + 4;
  }

  // bool DiscardRayBackFacesHits = 108;
  if (this->discardraybackfaceshits() != 0) {
    total_size += 2 + 1;
  }

  // bool AOJitter = 119;
  if (this->aojitter() != 0) {
    total_size += 2 + 1;
  }

  // bool GenWireRays = 121;
  if (this->genwirerays() != 0) {
    total_size += 2 + 1;
  }

  // bool ProximityLimitRayDistance = 125;
  if (this->proximitylimitraydistance() != 0) {
    total_size += 2 + 1;
  }

  // float CurvBias = 120;
  if (this->curvbias() != 0) {
    total_size += 2 + 4;
  }

  // .xnormal.tGenerateMaps.eCurvAlgorithm CurvAlgorithm = 122;
  if (this->curvalgorithm() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->curvalgorithm());
  }

  // .xnormal.tGenerateMaps.eAODistribution TransluDistribution = 123;
  if (this->transludistribution() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->transludistribution());
  }

  // float AOAttenLinear = 124;
  if (this->aoattenlinear() != 0) {
    total_size += 2 + 4;
  }

  // float ProximityConeAngle = 127;
  if (this->proximityconeangle() != 0) {
    total_size += 2 + 4;
  }

  // .xnormal.tGenerateMaps.eHMNormalization HeightTonemap = 128;
  if (this->heighttonemap() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->heighttonemap());
  }

  // bool GenRadiosityNormals = 126;
  if (this->genradiositynormals() != 0) {
    total_size += 2 + 1;
  }

  // bool GenCavity = 129;
  if (this->gencavity() != 0) {
    total_size += 2 + 1;
  }

  // bool BakeHighpolyVCols = 130;
  if (this->bakehighpolyvcols() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tGenerateMaps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xnormal.tGenerateMaps)
  GOOGLE_DCHECK_NE(&from, this);
  const tGenerateMaps* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tGenerateMaps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xnormal.tGenerateMaps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xnormal.tGenerateMaps)
    MergeFrom(*source);
  }
}

void tGenerateMaps::MergeFrom(const tGenerateMaps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xnormal.tGenerateMaps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.has_nmbackgroundcolor()) {
    mutable_nmbackgroundcolor()->::xnormal::tRGB8::MergeFrom(from.nmbackgroundcolor());
  }
  if (from.has_hmbackgroundcolor()) {
    mutable_hmbackgroundcolor()->::xnormal::tRGB8::MergeFrom(from.hmbackgroundcolor());
  }
  if (from.has_bakehighpolybasetexturenotexcol()) {
    mutable_bakehighpolybasetexturenotexcol()->::xnormal::tRGB8::MergeFrom(from.bakehighpolybasetexturenotexcol());
  }
  if (from.has_bakehighpolybasetexturebackgroundcolor()) {
    mutable_bakehighpolybasetexturebackgroundcolor()->::xnormal::tRGB8::MergeFrom(from.bakehighpolybasetexturebackgroundcolor());
  }
  if (from.has_renderwireframebackgroundcolor()) {
    mutable_renderwireframebackgroundcolor()->::xnormal::tRGB8::MergeFrom(from.renderwireframebackgroundcolor());
  }
  if (from.has_renderwireframecol()) {
    mutable_renderwireframecol()->::xnormal::tRGB8::MergeFrom(from.renderwireframecol());
  }
  if (from.has_rendercwcol()) {
    mutable_rendercwcol()->::xnormal::tRGB8::MergeFrom(from.rendercwcol());
  }
  if (from.has_renderseamcol()) {
    mutable_renderseamcol()->::xnormal::tRGB8::MergeFrom(from.renderseamcol());
  }
  if (from.has_renderrayfailscol()) {
    mutable_renderrayfailscol()->::xnormal::tRGB8::MergeFrom(from.renderrayfailscol());
  }
  if (from.has_aooccludedcolor()) {
    mutable_aooccludedcolor()->::xnormal::tRGB8::MergeFrom(from.aooccludedcolor());
  }
  if (from.has_aounoccludedcolor()) {
    mutable_aounoccludedcolor()->::xnormal::tRGB8::MergeFrom(from.aounoccludedcolor());
  }
  if (from.has_aobackgroundcolor()) {
    mutable_aobackgroundcolor()->::xnormal::tRGB8::MergeFrom(from.aobackgroundcolor());
  }
  if (from.has_bentbackgroundcolor()) {
    mutable_bentbackgroundcolor()->::xnormal::tRGB8::MergeFrom(from.bentbackgroundcolor());
  }
  if (from.has_prtbackgroundcolor()) {
    mutable_prtbackgroundcolor()->::xnormal::tRGB8::MergeFrom(from.prtbackgroundcolor());
  }
  if (from.has_convexitybackgroundcolor()) {
    mutable_convexitybackgroundcolor()->::xnormal::tRGB8::MergeFrom(from.convexitybackgroundcolor());
  }
  if (from.has_thicknessbackgroundcolor()) {
    mutable_thicknessbackgroundcolor()->::xnormal::tRGB8::MergeFrom(from.thicknessbackgroundcolor());
  }
  if (from.has_proximitybackgroundcolor()) {
    mutable_proximitybackgroundcolor()->::xnormal::tRGB8::MergeFrom(from.proximitybackgroundcolor());
  }
  if (from.has_cavitybackgroundcolor()) {
    mutable_cavitybackgroundcolor()->::xnormal::tRGB8::MergeFrom(from.cavitybackgroundcolor());
  }
  if (from.has_vdmbackgroundcolor()) {
    mutable_vdmbackgroundcolor()->::xnormal::tRGB8::MergeFrom(from.vdmbackgroundcolor());
  }
  if (from.has_radnmbackgroundcolor()) {
    mutable_radnmbackgroundcolor()->::xnormal::tRGB8::MergeFrom(from.radnmbackgroundcolor());
  }
  if (from.has_curvbackgroundcolor()) {
    mutable_curvbackgroundcolor()->::xnormal::tRGB8::MergeFrom(from.curvbackgroundcolor());
  }
  if (from.has_derivnmbackgroundcolor()) {
    mutable_derivnmbackgroundcolor()->::xnormal::tRGB8::MergeFrom(from.derivnmbackgroundcolor());
  }
  if (from.has_translubackgroundcolor()) {
    mutable_translubackgroundcolor()->::xnormal::tRGB8::MergeFrom(from.translubackgroundcolor());
  }
  if (from.has_bakehighpolyvcolsbackgroundcol()) {
    mutable_bakehighpolyvcolsbackgroundcol()->::xnormal::tRGB8::MergeFrom(from.bakehighpolyvcolsbackgroundcol());
  }
  if (from.directionstonemapmax() != 0) {
    set_directionstonemapmax(from.directionstonemapmax());
  }
  if (from.closestiffails() != 0) {
    set_closestiffails(from.closestiffails());
  }
  if (from.curvmonocrome() != 0) {
    set_curvmonocrome(from.curvmonocrome());
  }
  if (from.benttangentspace() != 0) {
    set_benttangentspace(from.benttangentspace());
  }
  if (from.gentranslu() != 0) {
    set_gentranslu(from.gentranslu());
  }
  if (from.aobias() != 0) {
    set_aobias(from.aobias());
  }
  if (from.aodistribution() != 0) {
    set_aodistribution(from.aodistribution());
  }
  if (from.prtthreshold() != 0) {
    set_prtthreshold(from.prtthreshold());
  }
  if (from.directionstonemapmin() != 0) {
    set_directionstonemapmin(from.directionstonemapmin());
  }
  if (from.curvdistribution() != 0) {
    set_curvdistribution(from.curvdistribution());
  }
  if (from.bentdistribution() != 0) {
    set_bentdistribution(from.bentdistribution());
  }
  if (from.bentjitter() != 0) {
    set_bentjitter(from.bentjitter());
  }
  if (from.bakehighpolybasetexture() != 0) {
    set_bakehighpolybasetexture(from.bakehighpolybasetexture());
  }
  if (from.genconvexity() != 0) {
    set_genconvexity(from.genconvexity());
  }
  if (from.prtlimitraydistance() != 0) {
    set_prtlimitraydistance(from.prtlimitraydistance());
  }
  if (from.radiositynormalsattenlinear() != 0) {
    set_radiositynormalsattenlinear(from.radiositynormalsattenlinear());
  }
  if (from.translurayspersample() != 0) {
    set_translurayspersample(from.translurayspersample());
  }
  if (from.curvsearchdistance() != 0) {
    set_curvsearchdistance(from.curvsearchdistance());
  }
  if (from.swizzlez() != 0) {
    set_swizzlez(from.swizzlez());
  }
  if (from.translubias() != 0) {
    set_translubias(from.translubias());
  }
  if (from.curvrayspersample() != 0) {
    set_curvrayspersample(from.curvrayspersample());
  }
  if (from.radiositynormalsdistribution() != 0) {
    set_radiositynormalsdistribution(from.radiositynormalsdistribution());
  }
  if (from.genbent() != 0) {
    set_genbent(from.genbent());
  }
  if (from.aolimitraydistance() != 0) {
    set_aolimitraydistance(from.aolimitraydistance());
  }
  if (from.curvjitter() != 0) {
    set_curvjitter(from.curvjitter());
  }
  if (from.tangentspace() != 0) {
    set_tangentspace(from.tangentspace());
  }
  if (from.radiositynormalsrayspersample() != 0) {
    set_radiositynormalsrayspersample(from.radiositynormalsrayspersample());
  }
  if (from.bentswizzlex() != 0) {
    set_bentswizzlex(from.bentswizzlex());
  }
  if (from.swizzley() != 0) {
    set_swizzley(from.swizzley());
  }
  if (from.radiositynormalsallowpureocclusion() != 0) {
    set_radiositynormalsallowpureocclusion(from.radiositynormalsallowpureocclusion());
  }
  if (from.gencurv() != 0) {
    set_gencurv(from.gencurv());
  }
  if (from.prtjitter() != 0) {
    set_prtjitter(from.prtjitter());
  }
  if (from.renderrayfails() != 0) {
    set_renderrayfails(from.renderrayfails());
  }
  if (from.aoattencuadratic() != 0) {
    set_aoattencuadratic(from.aoattencuadratic());
  }
  if (from.bentconeangle() != 0) {
    set_bentconeangle(from.bentconeangle());
  }
  if (from.swizzlex() != 0) {
    set_swizzlex(from.swizzlex());
  }
  if (from.cavitysearchradius() != 0) {
    set_cavitysearchradius(from.cavitysearchradius());
  }
  if (from.transluconeangle() != 0) {
    set_transluconeangle(from.transluconeangle());
  }
  if (from.bentrayspersample() != 0) {
    set_bentrayspersample(from.bentrayspersample());
  }
  if (from.convexityscale() != 0) {
    set_convexityscale(from.convexityscale());
  }
  if (from.radiositynormalsconeangle() != 0) {
    set_radiositynormalsconeangle(from.radiositynormalsconeangle());
  }
  if (from.radiositynormalsencodeao() != 0) {
    set_radiositynormalsencodeao(from.radiositynormalsencodeao());
  }
  if (from.genderivnm() != 0) {
    set_genderivnm(from.genderivnm());
  }
  if (from.bentlimitraydistance() != 0) {
    set_bentlimitraydistance(from.bentlimitraydistance());
  }
  if (from.renderwireframe() != 0) {
    set_renderwireframe(from.renderwireframe());
  }
  if (from.prtbias() != 0) {
    set_prtbias(from.prtbias());
  }
  if (from.prtconeangle() != 0) {
    set_prtconeangle(from.prtconeangle());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.radiositynormalsattencuadratic() != 0) {
    set_radiositynormalsattencuadratic(from.radiositynormalsattencuadratic());
  }
  if (from.prtnormalize() != 0) {
    set_prtnormalize(from.prtnormalize());
  }
  if (from.genao() != 0) {
    set_genao(from.genao());
  }
  if (from.directionsts() != 0) {
    set_directionsts(from.directionsts());
  }
  if (from.aoallowpureoccluded() != 0) {
    set_aoallowpureoccluded(from.aoallowpureoccluded());
  }
  if (from.directionstonemap() != 0) {
    set_directionstonemap(from.directionstonemap());
  }
  if (from.prtrayspersample() != 0) {
    set_prtrayspersample(from.prtrayspersample());
  }
  if (from.edgepadding() != 0) {
    set_edgepadding(from.edgepadding());
  }
  if (from.directionsswizzlez() != 0) {
    set_directionsswizzlez(from.directionsswizzlez());
  }
  if (from.cavityrayspersample() != 0) {
    set_cavityrayspersample(from.cavityrayspersample());
  }
  if (from.aoattenconstant() != 0) {
    set_aoattenconstant(from.aoattenconstant());
  }
  if (from.aoignorebackfacehits() != 0) {
    set_aoignorebackfacehits(from.aoignorebackfacehits());
  }
  if (from.cavityjitter() != 0) {
    set_cavityjitter(from.cavityjitter());
  }
  if (from.gendirections() != 0) {
    set_gendirections(from.gendirections());
  }
  if (from.radiositynormalslimitraydistance() != 0) {
    set_radiositynormalslimitraydistance(from.radiositynormalslimitraydistance());
  }
  if (from.heighttonemapmax() != 0) {
    set_heighttonemapmax(from.heighttonemapmax());
  }
  if (from.heighttonemapmin() != 0) {
    set_heighttonemapmin(from.heighttonemapmin());
  }
  if (from.directionsswizzley() != 0) {
    set_directionsswizzley(from.directionsswizzley());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.radiositynormalsjitter() != 0) {
    set_radiositynormalsjitter(from.radiositynormalsjitter());
  }
  if (from.bakehighpolybasetexturedrawobjectidifnotexture() != 0) {
    set_bakehighpolybasetexturedrawobjectidifnotexture(from.bakehighpolybasetexturedrawobjectidifnotexture());
  }
  if (from.concavity() != 0) {
    set_concavity(from.concavity());
  }
  if (from.gennormals() != 0) {
    set_gennormals(from.gennormals());
  }
  if (from.directionsswizzlex() != 0) {
    set_directionsswizzlex(from.directionsswizzlex());
  }
  if (from.proximityrayspersample() != 0) {
    set_proximityrayspersample(from.proximityrayspersample());
  }
  if (from.radiositynormalsattenconstant() != 0) {
    set_radiositynormalsattenconstant(from.radiositynormalsattenconstant());
  }
  if (from.genheights() != 0) {
    set_genheights(from.genheights());
  }
  if (from.genproximity() != 0) {
    set_genproximity(from.genproximity());
  }
  if (from.genprt() != 0) {
    set_genprt(from.genprt());
  }
  if (from.translujitter() != 0) {
    set_translujitter(from.translujitter());
  }
  if (from.cavitycontrast() != 0) {
    set_cavitycontrast(from.cavitycontrast());
  }
  if (from.radiositynormalscoordsys() != 0) {
    set_radiositynormalscoordsys(from.radiositynormalscoordsys());
  }
  if (from.aorayspersample() != 0) {
    set_aorayspersample(from.aorayspersample());
  }
  if (from.bentbias() != 0) {
    set_bentbias(from.bentbias());
  }
  if (from.aoconeangle() != 0) {
    set_aoconeangle(from.aoconeangle());
  }
  if (from.bentswizzley() != 0) {
    set_bentswizzley(from.bentswizzley());
  }
  if (from.radiositynormalsbias() != 0) {
    set_radiositynormalsbias(from.radiositynormalsbias());
  }
  if (from.radiositynormalscontrast() != 0) {
    set_radiositynormalscontrast(from.radiositynormalscontrast());
  }
  if (from.cavitysteps() != 0) {
    set_cavitysteps(from.cavitysteps());
  }
  if (from.aa() != 0) {
    set_aa(from.aa());
  }
  if (from.bentswizzlez() != 0) {
    set_bentswizzlez(from.bentswizzlez());
  }
  if (from.bucketsize() != 0) {
    set_bucketsize(from.bucketsize());
  }
  if (from.curvconeangle() != 0) {
    set_curvconeangle(from.curvconeangle());
  }
  if (from.transludist() != 0) {
    set_transludist(from.transludist());
  }
  if (from.discardraybackfaceshits() != 0) {
    set_discardraybackfaceshits(from.discardraybackfaceshits());
  }
  if (from.aojitter() != 0) {
    set_aojitter(from.aojitter());
  }
  if (from.genwirerays() != 0) {
    set_genwirerays(from.genwirerays());
  }
  if (from.proximitylimitraydistance() != 0) {
    set_proximitylimitraydistance(from.proximitylimitraydistance());
  }
  if (from.curvbias() != 0) {
    set_curvbias(from.curvbias());
  }
  if (from.curvalgorithm() != 0) {
    set_curvalgorithm(from.curvalgorithm());
  }
  if (from.transludistribution() != 0) {
    set_transludistribution(from.transludistribution());
  }
  if (from.aoattenlinear() != 0) {
    set_aoattenlinear(from.aoattenlinear());
  }
  if (from.proximityconeangle() != 0) {
    set_proximityconeangle(from.proximityconeangle());
  }
  if (from.heighttonemap() != 0) {
    set_heighttonemap(from.heighttonemap());
  }
  if (from.genradiositynormals() != 0) {
    set_genradiositynormals(from.genradiositynormals());
  }
  if (from.gencavity() != 0) {
    set_gencavity(from.gencavity());
  }
  if (from.bakehighpolyvcols() != 0) {
    set_bakehighpolyvcols(from.bakehighpolyvcols());
  }
}

void tGenerateMaps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xnormal.tGenerateMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tGenerateMaps::CopyFrom(const tGenerateMaps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xnormal.tGenerateMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tGenerateMaps::IsInitialized() const {
  return true;
}

void tGenerateMaps::Swap(tGenerateMaps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tGenerateMaps::InternalSwap(tGenerateMaps* other) {
  file_.Swap(&other->file_);
  std::swap(nmbackgroundcolor_, other->nmbackgroundcolor_);
  std::swap(hmbackgroundcolor_, other->hmbackgroundcolor_);
  std::swap(bakehighpolybasetexturenotexcol_, other->bakehighpolybasetexturenotexcol_);
  std::swap(bakehighpolybasetexturebackgroundcolor_, other->bakehighpolybasetexturebackgroundcolor_);
  std::swap(renderwireframebackgroundcolor_, other->renderwireframebackgroundcolor_);
  std::swap(renderwireframecol_, other->renderwireframecol_);
  std::swap(rendercwcol_, other->rendercwcol_);
  std::swap(renderseamcol_, other->renderseamcol_);
  std::swap(renderrayfailscol_, other->renderrayfailscol_);
  std::swap(aooccludedcolor_, other->aooccludedcolor_);
  std::swap(aounoccludedcolor_, other->aounoccludedcolor_);
  std::swap(aobackgroundcolor_, other->aobackgroundcolor_);
  std::swap(bentbackgroundcolor_, other->bentbackgroundcolor_);
  std::swap(prtbackgroundcolor_, other->prtbackgroundcolor_);
  std::swap(convexitybackgroundcolor_, other->convexitybackgroundcolor_);
  std::swap(thicknessbackgroundcolor_, other->thicknessbackgroundcolor_);
  std::swap(proximitybackgroundcolor_, other->proximitybackgroundcolor_);
  std::swap(cavitybackgroundcolor_, other->cavitybackgroundcolor_);
  std::swap(vdmbackgroundcolor_, other->vdmbackgroundcolor_);
  std::swap(radnmbackgroundcolor_, other->radnmbackgroundcolor_);
  std::swap(curvbackgroundcolor_, other->curvbackgroundcolor_);
  std::swap(derivnmbackgroundcolor_, other->derivnmbackgroundcolor_);
  std::swap(translubackgroundcolor_, other->translubackgroundcolor_);
  std::swap(bakehighpolyvcolsbackgroundcol_, other->bakehighpolyvcolsbackgroundcol_);
  std::swap(directionstonemapmax_, other->directionstonemapmax_);
  std::swap(closestiffails_, other->closestiffails_);
  std::swap(curvmonocrome_, other->curvmonocrome_);
  std::swap(benttangentspace_, other->benttangentspace_);
  std::swap(gentranslu_, other->gentranslu_);
  std::swap(aobias_, other->aobias_);
  std::swap(aodistribution_, other->aodistribution_);
  std::swap(prtthreshold_, other->prtthreshold_);
  std::swap(directionstonemapmin_, other->directionstonemapmin_);
  std::swap(curvdistribution_, other->curvdistribution_);
  std::swap(bentdistribution_, other->bentdistribution_);
  std::swap(bentjitter_, other->bentjitter_);
  std::swap(bakehighpolybasetexture_, other->bakehighpolybasetexture_);
  std::swap(genconvexity_, other->genconvexity_);
  std::swap(prtlimitraydistance_, other->prtlimitraydistance_);
  std::swap(radiositynormalsattenlinear_, other->radiositynormalsattenlinear_);
  std::swap(translurayspersample_, other->translurayspersample_);
  std::swap(curvsearchdistance_, other->curvsearchdistance_);
  std::swap(swizzlez_, other->swizzlez_);
  std::swap(translubias_, other->translubias_);
  std::swap(curvrayspersample_, other->curvrayspersample_);
  std::swap(radiositynormalsdistribution_, other->radiositynormalsdistribution_);
  std::swap(genbent_, other->genbent_);
  std::swap(aolimitraydistance_, other->aolimitraydistance_);
  std::swap(curvjitter_, other->curvjitter_);
  std::swap(tangentspace_, other->tangentspace_);
  std::swap(radiositynormalsrayspersample_, other->radiositynormalsrayspersample_);
  std::swap(bentswizzlex_, other->bentswizzlex_);
  std::swap(swizzley_, other->swizzley_);
  std::swap(radiositynormalsallowpureocclusion_, other->radiositynormalsallowpureocclusion_);
  std::swap(gencurv_, other->gencurv_);
  std::swap(prtjitter_, other->prtjitter_);
  std::swap(renderrayfails_, other->renderrayfails_);
  std::swap(aoattencuadratic_, other->aoattencuadratic_);
  std::swap(bentconeangle_, other->bentconeangle_);
  std::swap(swizzlex_, other->swizzlex_);
  std::swap(cavitysearchradius_, other->cavitysearchradius_);
  std::swap(transluconeangle_, other->transluconeangle_);
  std::swap(bentrayspersample_, other->bentrayspersample_);
  std::swap(convexityscale_, other->convexityscale_);
  std::swap(radiositynormalsconeangle_, other->radiositynormalsconeangle_);
  std::swap(radiositynormalsencodeao_, other->radiositynormalsencodeao_);
  std::swap(genderivnm_, other->genderivnm_);
  std::swap(bentlimitraydistance_, other->bentlimitraydistance_);
  std::swap(renderwireframe_, other->renderwireframe_);
  std::swap(prtbias_, other->prtbias_);
  std::swap(prtconeangle_, other->prtconeangle_);
  std::swap(height_, other->height_);
  std::swap(radiositynormalsattencuadratic_, other->radiositynormalsattencuadratic_);
  std::swap(prtnormalize_, other->prtnormalize_);
  std::swap(genao_, other->genao_);
  std::swap(directionsts_, other->directionsts_);
  std::swap(aoallowpureoccluded_, other->aoallowpureoccluded_);
  std::swap(directionstonemap_, other->directionstonemap_);
  std::swap(prtrayspersample_, other->prtrayspersample_);
  std::swap(edgepadding_, other->edgepadding_);
  std::swap(directionsswizzlez_, other->directionsswizzlez_);
  std::swap(cavityrayspersample_, other->cavityrayspersample_);
  std::swap(aoattenconstant_, other->aoattenconstant_);
  std::swap(aoignorebackfacehits_, other->aoignorebackfacehits_);
  std::swap(cavityjitter_, other->cavityjitter_);
  std::swap(gendirections_, other->gendirections_);
  std::swap(radiositynormalslimitraydistance_, other->radiositynormalslimitraydistance_);
  std::swap(heighttonemapmax_, other->heighttonemapmax_);
  std::swap(heighttonemapmin_, other->heighttonemapmin_);
  std::swap(directionsswizzley_, other->directionsswizzley_);
  std::swap(width_, other->width_);
  std::swap(radiositynormalsjitter_, other->radiositynormalsjitter_);
  std::swap(bakehighpolybasetexturedrawobjectidifnotexture_, other->bakehighpolybasetexturedrawobjectidifnotexture_);
  std::swap(concavity_, other->concavity_);
  std::swap(gennormals_, other->gennormals_);
  std::swap(directionsswizzlex_, other->directionsswizzlex_);
  std::swap(proximityrayspersample_, other->proximityrayspersample_);
  std::swap(radiositynormalsattenconstant_, other->radiositynormalsattenconstant_);
  std::swap(genheights_, other->genheights_);
  std::swap(genproximity_, other->genproximity_);
  std::swap(genprt_, other->genprt_);
  std::swap(translujitter_, other->translujitter_);
  std::swap(cavitycontrast_, other->cavitycontrast_);
  std::swap(radiositynormalscoordsys_, other->radiositynormalscoordsys_);
  std::swap(aorayspersample_, other->aorayspersample_);
  std::swap(bentbias_, other->bentbias_);
  std::swap(aoconeangle_, other->aoconeangle_);
  std::swap(bentswizzley_, other->bentswizzley_);
  std::swap(radiositynormalsbias_, other->radiositynormalsbias_);
  std::swap(radiositynormalscontrast_, other->radiositynormalscontrast_);
  std::swap(cavitysteps_, other->cavitysteps_);
  std::swap(aa_, other->aa_);
  std::swap(bentswizzlez_, other->bentswizzlez_);
  std::swap(bucketsize_, other->bucketsize_);
  std::swap(curvconeangle_, other->curvconeangle_);
  std::swap(transludist_, other->transludist_);
  std::swap(discardraybackfaceshits_, other->discardraybackfaceshits_);
  std::swap(aojitter_, other->aojitter_);
  std::swap(genwirerays_, other->genwirerays_);
  std::swap(proximitylimitraydistance_, other->proximitylimitraydistance_);
  std::swap(curvbias_, other->curvbias_);
  std::swap(curvalgorithm_, other->curvalgorithm_);
  std::swap(transludistribution_, other->transludistribution_);
  std::swap(aoattenlinear_, other->aoattenlinear_);
  std::swap(proximityconeangle_, other->proximityconeangle_);
  std::swap(heighttonemap_, other->heighttonemap_);
  std::swap(genradiositynormals_, other->genradiositynormals_);
  std::swap(gencavity_, other->gencavity_);
  std::swap(bakehighpolyvcols_, other->bakehighpolyvcols_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tGenerateMaps::GetMetadata() const {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tGenerateMaps

// .xnormal.tRGB8 NMBackgroundColor = 1;
bool tGenerateMaps::has_nmbackgroundcolor() const {
  return this != internal_default_instance() && nmbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_nmbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && nmbackgroundcolor_ != NULL) delete nmbackgroundcolor_;
  nmbackgroundcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::nmbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.NMBackgroundColor)
  return nmbackgroundcolor_ != NULL ? *nmbackgroundcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_nmbackgroundcolor() {
  
  if (nmbackgroundcolor_ == NULL) {
    nmbackgroundcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.NMBackgroundColor)
  return nmbackgroundcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_nmbackgroundcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.NMBackgroundColor)
  
  ::xnormal::tRGB8* temp = nmbackgroundcolor_;
  nmbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_nmbackgroundcolor(::xnormal::tRGB8* nmbackgroundcolor) {
  delete nmbackgroundcolor_;
  nmbackgroundcolor_ = nmbackgroundcolor;
  if (nmbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.NMBackgroundColor)
}

// .xnormal.tRGB8 HMBackgroundColor = 2;
bool tGenerateMaps::has_hmbackgroundcolor() const {
  return this != internal_default_instance() && hmbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_hmbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && hmbackgroundcolor_ != NULL) delete hmbackgroundcolor_;
  hmbackgroundcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::hmbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.HMBackgroundColor)
  return hmbackgroundcolor_ != NULL ? *hmbackgroundcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_hmbackgroundcolor() {
  
  if (hmbackgroundcolor_ == NULL) {
    hmbackgroundcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.HMBackgroundColor)
  return hmbackgroundcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_hmbackgroundcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.HMBackgroundColor)
  
  ::xnormal::tRGB8* temp = hmbackgroundcolor_;
  hmbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_hmbackgroundcolor(::xnormal::tRGB8* hmbackgroundcolor) {
  delete hmbackgroundcolor_;
  hmbackgroundcolor_ = hmbackgroundcolor;
  if (hmbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.HMBackgroundColor)
}

// .xnormal.tRGB8 BakeHighpolyBaseTextureNoTexCol = 3;
bool tGenerateMaps::has_bakehighpolybasetexturenotexcol() const {
  return this != internal_default_instance() && bakehighpolybasetexturenotexcol_ != NULL;
}
void tGenerateMaps::clear_bakehighpolybasetexturenotexcol() {
  if (GetArenaNoVirtual() == NULL && bakehighpolybasetexturenotexcol_ != NULL) delete bakehighpolybasetexturenotexcol_;
  bakehighpolybasetexturenotexcol_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::bakehighpolybasetexturenotexcol() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BakeHighpolyBaseTextureNoTexCol)
  return bakehighpolybasetexturenotexcol_ != NULL ? *bakehighpolybasetexturenotexcol_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_bakehighpolybasetexturenotexcol() {
  
  if (bakehighpolybasetexturenotexcol_ == NULL) {
    bakehighpolybasetexturenotexcol_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.BakeHighpolyBaseTextureNoTexCol)
  return bakehighpolybasetexturenotexcol_;
}
::xnormal::tRGB8* tGenerateMaps::release_bakehighpolybasetexturenotexcol() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.BakeHighpolyBaseTextureNoTexCol)
  
  ::xnormal::tRGB8* temp = bakehighpolybasetexturenotexcol_;
  bakehighpolybasetexturenotexcol_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_bakehighpolybasetexturenotexcol(::xnormal::tRGB8* bakehighpolybasetexturenotexcol) {
  delete bakehighpolybasetexturenotexcol_;
  bakehighpolybasetexturenotexcol_ = bakehighpolybasetexturenotexcol;
  if (bakehighpolybasetexturenotexcol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.BakeHighpolyBaseTextureNoTexCol)
}

// .xnormal.tRGB8 BakeHighpolyBaseTextureBackgroundColor = 4;
bool tGenerateMaps::has_bakehighpolybasetexturebackgroundcolor() const {
  return this != internal_default_instance() && bakehighpolybasetexturebackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_bakehighpolybasetexturebackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && bakehighpolybasetexturebackgroundcolor_ != NULL) delete bakehighpolybasetexturebackgroundcolor_;
  bakehighpolybasetexturebackgroundcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::bakehighpolybasetexturebackgroundcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BakeHighpolyBaseTextureBackgroundColor)
  return bakehighpolybasetexturebackgroundcolor_ != NULL ? *bakehighpolybasetexturebackgroundcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_bakehighpolybasetexturebackgroundcolor() {
  
  if (bakehighpolybasetexturebackgroundcolor_ == NULL) {
    bakehighpolybasetexturebackgroundcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.BakeHighpolyBaseTextureBackgroundColor)
  return bakehighpolybasetexturebackgroundcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_bakehighpolybasetexturebackgroundcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.BakeHighpolyBaseTextureBackgroundColor)
  
  ::xnormal::tRGB8* temp = bakehighpolybasetexturebackgroundcolor_;
  bakehighpolybasetexturebackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_bakehighpolybasetexturebackgroundcolor(::xnormal::tRGB8* bakehighpolybasetexturebackgroundcolor) {
  delete bakehighpolybasetexturebackgroundcolor_;
  bakehighpolybasetexturebackgroundcolor_ = bakehighpolybasetexturebackgroundcolor;
  if (bakehighpolybasetexturebackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.BakeHighpolyBaseTextureBackgroundColor)
}

// .xnormal.tRGB8 RenderWireframeBackgroundColor = 5;
bool tGenerateMaps::has_renderwireframebackgroundcolor() const {
  return this != internal_default_instance() && renderwireframebackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_renderwireframebackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && renderwireframebackgroundcolor_ != NULL) delete renderwireframebackgroundcolor_;
  renderwireframebackgroundcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::renderwireframebackgroundcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RenderWireframeBackgroundColor)
  return renderwireframebackgroundcolor_ != NULL ? *renderwireframebackgroundcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_renderwireframebackgroundcolor() {
  
  if (renderwireframebackgroundcolor_ == NULL) {
    renderwireframebackgroundcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.RenderWireframeBackgroundColor)
  return renderwireframebackgroundcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_renderwireframebackgroundcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.RenderWireframeBackgroundColor)
  
  ::xnormal::tRGB8* temp = renderwireframebackgroundcolor_;
  renderwireframebackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_renderwireframebackgroundcolor(::xnormal::tRGB8* renderwireframebackgroundcolor) {
  delete renderwireframebackgroundcolor_;
  renderwireframebackgroundcolor_ = renderwireframebackgroundcolor;
  if (renderwireframebackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.RenderWireframeBackgroundColor)
}

// .xnormal.tRGB8 RenderWireframeCol = 6;
bool tGenerateMaps::has_renderwireframecol() const {
  return this != internal_default_instance() && renderwireframecol_ != NULL;
}
void tGenerateMaps::clear_renderwireframecol() {
  if (GetArenaNoVirtual() == NULL && renderwireframecol_ != NULL) delete renderwireframecol_;
  renderwireframecol_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::renderwireframecol() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RenderWireframeCol)
  return renderwireframecol_ != NULL ? *renderwireframecol_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_renderwireframecol() {
  
  if (renderwireframecol_ == NULL) {
    renderwireframecol_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.RenderWireframeCol)
  return renderwireframecol_;
}
::xnormal::tRGB8* tGenerateMaps::release_renderwireframecol() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.RenderWireframeCol)
  
  ::xnormal::tRGB8* temp = renderwireframecol_;
  renderwireframecol_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_renderwireframecol(::xnormal::tRGB8* renderwireframecol) {
  delete renderwireframecol_;
  renderwireframecol_ = renderwireframecol;
  if (renderwireframecol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.RenderWireframeCol)
}

// .xnormal.tRGB8 RenderCWCol = 7;
bool tGenerateMaps::has_rendercwcol() const {
  return this != internal_default_instance() && rendercwcol_ != NULL;
}
void tGenerateMaps::clear_rendercwcol() {
  if (GetArenaNoVirtual() == NULL && rendercwcol_ != NULL) delete rendercwcol_;
  rendercwcol_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::rendercwcol() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RenderCWCol)
  return rendercwcol_ != NULL ? *rendercwcol_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_rendercwcol() {
  
  if (rendercwcol_ == NULL) {
    rendercwcol_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.RenderCWCol)
  return rendercwcol_;
}
::xnormal::tRGB8* tGenerateMaps::release_rendercwcol() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.RenderCWCol)
  
  ::xnormal::tRGB8* temp = rendercwcol_;
  rendercwcol_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_rendercwcol(::xnormal::tRGB8* rendercwcol) {
  delete rendercwcol_;
  rendercwcol_ = rendercwcol;
  if (rendercwcol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.RenderCWCol)
}

// .xnormal.tRGB8 RenderSeamCol = 8;
bool tGenerateMaps::has_renderseamcol() const {
  return this != internal_default_instance() && renderseamcol_ != NULL;
}
void tGenerateMaps::clear_renderseamcol() {
  if (GetArenaNoVirtual() == NULL && renderseamcol_ != NULL) delete renderseamcol_;
  renderseamcol_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::renderseamcol() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RenderSeamCol)
  return renderseamcol_ != NULL ? *renderseamcol_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_renderseamcol() {
  
  if (renderseamcol_ == NULL) {
    renderseamcol_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.RenderSeamCol)
  return renderseamcol_;
}
::xnormal::tRGB8* tGenerateMaps::release_renderseamcol() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.RenderSeamCol)
  
  ::xnormal::tRGB8* temp = renderseamcol_;
  renderseamcol_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_renderseamcol(::xnormal::tRGB8* renderseamcol) {
  delete renderseamcol_;
  renderseamcol_ = renderseamcol;
  if (renderseamcol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.RenderSeamCol)
}

// .xnormal.tRGB8 RenderRayFailsCol = 9;
bool tGenerateMaps::has_renderrayfailscol() const {
  return this != internal_default_instance() && renderrayfailscol_ != NULL;
}
void tGenerateMaps::clear_renderrayfailscol() {
  if (GetArenaNoVirtual() == NULL && renderrayfailscol_ != NULL) delete renderrayfailscol_;
  renderrayfailscol_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::renderrayfailscol() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RenderRayFailsCol)
  return renderrayfailscol_ != NULL ? *renderrayfailscol_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_renderrayfailscol() {
  
  if (renderrayfailscol_ == NULL) {
    renderrayfailscol_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.RenderRayFailsCol)
  return renderrayfailscol_;
}
::xnormal::tRGB8* tGenerateMaps::release_renderrayfailscol() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.RenderRayFailsCol)
  
  ::xnormal::tRGB8* temp = renderrayfailscol_;
  renderrayfailscol_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_renderrayfailscol(::xnormal::tRGB8* renderrayfailscol) {
  delete renderrayfailscol_;
  renderrayfailscol_ = renderrayfailscol;
  if (renderrayfailscol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.RenderRayFailsCol)
}

// .xnormal.tRGB8 AOOccludedColor = 10;
bool tGenerateMaps::has_aooccludedcolor() const {
  return this != internal_default_instance() && aooccludedcolor_ != NULL;
}
void tGenerateMaps::clear_aooccludedcolor() {
  if (GetArenaNoVirtual() == NULL && aooccludedcolor_ != NULL) delete aooccludedcolor_;
  aooccludedcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::aooccludedcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.AOOccludedColor)
  return aooccludedcolor_ != NULL ? *aooccludedcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_aooccludedcolor() {
  
  if (aooccludedcolor_ == NULL) {
    aooccludedcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.AOOccludedColor)
  return aooccludedcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_aooccludedcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.AOOccludedColor)
  
  ::xnormal::tRGB8* temp = aooccludedcolor_;
  aooccludedcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_aooccludedcolor(::xnormal::tRGB8* aooccludedcolor) {
  delete aooccludedcolor_;
  aooccludedcolor_ = aooccludedcolor;
  if (aooccludedcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.AOOccludedColor)
}

// .xnormal.tRGB8 AOUnoccludedColor = 11;
bool tGenerateMaps::has_aounoccludedcolor() const {
  return this != internal_default_instance() && aounoccludedcolor_ != NULL;
}
void tGenerateMaps::clear_aounoccludedcolor() {
  if (GetArenaNoVirtual() == NULL && aounoccludedcolor_ != NULL) delete aounoccludedcolor_;
  aounoccludedcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::aounoccludedcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.AOUnoccludedColor)
  return aounoccludedcolor_ != NULL ? *aounoccludedcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_aounoccludedcolor() {
  
  if (aounoccludedcolor_ == NULL) {
    aounoccludedcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.AOUnoccludedColor)
  return aounoccludedcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_aounoccludedcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.AOUnoccludedColor)
  
  ::xnormal::tRGB8* temp = aounoccludedcolor_;
  aounoccludedcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_aounoccludedcolor(::xnormal::tRGB8* aounoccludedcolor) {
  delete aounoccludedcolor_;
  aounoccludedcolor_ = aounoccludedcolor;
  if (aounoccludedcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.AOUnoccludedColor)
}

// .xnormal.tRGB8 AOBackgroundColor = 12;
bool tGenerateMaps::has_aobackgroundcolor() const {
  return this != internal_default_instance() && aobackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_aobackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && aobackgroundcolor_ != NULL) delete aobackgroundcolor_;
  aobackgroundcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::aobackgroundcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.AOBackgroundColor)
  return aobackgroundcolor_ != NULL ? *aobackgroundcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_aobackgroundcolor() {
  
  if (aobackgroundcolor_ == NULL) {
    aobackgroundcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.AOBackgroundColor)
  return aobackgroundcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_aobackgroundcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.AOBackgroundColor)
  
  ::xnormal::tRGB8* temp = aobackgroundcolor_;
  aobackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_aobackgroundcolor(::xnormal::tRGB8* aobackgroundcolor) {
  delete aobackgroundcolor_;
  aobackgroundcolor_ = aobackgroundcolor;
  if (aobackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.AOBackgroundColor)
}

// .xnormal.tRGB8 BentBackgroundColor = 13;
bool tGenerateMaps::has_bentbackgroundcolor() const {
  return this != internal_default_instance() && bentbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_bentbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && bentbackgroundcolor_ != NULL) delete bentbackgroundcolor_;
  bentbackgroundcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::bentbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BentBackgroundColor)
  return bentbackgroundcolor_ != NULL ? *bentbackgroundcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_bentbackgroundcolor() {
  
  if (bentbackgroundcolor_ == NULL) {
    bentbackgroundcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.BentBackgroundColor)
  return bentbackgroundcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_bentbackgroundcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.BentBackgroundColor)
  
  ::xnormal::tRGB8* temp = bentbackgroundcolor_;
  bentbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_bentbackgroundcolor(::xnormal::tRGB8* bentbackgroundcolor) {
  delete bentbackgroundcolor_;
  bentbackgroundcolor_ = bentbackgroundcolor;
  if (bentbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.BentBackgroundColor)
}

// .xnormal.tRGB8 PRTBackgroundColor = 14;
bool tGenerateMaps::has_prtbackgroundcolor() const {
  return this != internal_default_instance() && prtbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_prtbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && prtbackgroundcolor_ != NULL) delete prtbackgroundcolor_;
  prtbackgroundcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::prtbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.PRTBackgroundColor)
  return prtbackgroundcolor_ != NULL ? *prtbackgroundcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_prtbackgroundcolor() {
  
  if (prtbackgroundcolor_ == NULL) {
    prtbackgroundcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.PRTBackgroundColor)
  return prtbackgroundcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_prtbackgroundcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.PRTBackgroundColor)
  
  ::xnormal::tRGB8* temp = prtbackgroundcolor_;
  prtbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_prtbackgroundcolor(::xnormal::tRGB8* prtbackgroundcolor) {
  delete prtbackgroundcolor_;
  prtbackgroundcolor_ = prtbackgroundcolor;
  if (prtbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.PRTBackgroundColor)
}

// .xnormal.tRGB8 ConvexityBackgroundColor = 15;
bool tGenerateMaps::has_convexitybackgroundcolor() const {
  return this != internal_default_instance() && convexitybackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_convexitybackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && convexitybackgroundcolor_ != NULL) delete convexitybackgroundcolor_;
  convexitybackgroundcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::convexitybackgroundcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.ConvexityBackgroundColor)
  return convexitybackgroundcolor_ != NULL ? *convexitybackgroundcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_convexitybackgroundcolor() {
  
  if (convexitybackgroundcolor_ == NULL) {
    convexitybackgroundcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.ConvexityBackgroundColor)
  return convexitybackgroundcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_convexitybackgroundcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.ConvexityBackgroundColor)
  
  ::xnormal::tRGB8* temp = convexitybackgroundcolor_;
  convexitybackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_convexitybackgroundcolor(::xnormal::tRGB8* convexitybackgroundcolor) {
  delete convexitybackgroundcolor_;
  convexitybackgroundcolor_ = convexitybackgroundcolor;
  if (convexitybackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.ConvexityBackgroundColor)
}

// .xnormal.tRGB8 ThicknessBackgroundColor = 16;
bool tGenerateMaps::has_thicknessbackgroundcolor() const {
  return this != internal_default_instance() && thicknessbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_thicknessbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && thicknessbackgroundcolor_ != NULL) delete thicknessbackgroundcolor_;
  thicknessbackgroundcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::thicknessbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.ThicknessBackgroundColor)
  return thicknessbackgroundcolor_ != NULL ? *thicknessbackgroundcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_thicknessbackgroundcolor() {
  
  if (thicknessbackgroundcolor_ == NULL) {
    thicknessbackgroundcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.ThicknessBackgroundColor)
  return thicknessbackgroundcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_thicknessbackgroundcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.ThicknessBackgroundColor)
  
  ::xnormal::tRGB8* temp = thicknessbackgroundcolor_;
  thicknessbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_thicknessbackgroundcolor(::xnormal::tRGB8* thicknessbackgroundcolor) {
  delete thicknessbackgroundcolor_;
  thicknessbackgroundcolor_ = thicknessbackgroundcolor;
  if (thicknessbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.ThicknessBackgroundColor)
}

// .xnormal.tRGB8 ProximityBackgroundColor = 17;
bool tGenerateMaps::has_proximitybackgroundcolor() const {
  return this != internal_default_instance() && proximitybackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_proximitybackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && proximitybackgroundcolor_ != NULL) delete proximitybackgroundcolor_;
  proximitybackgroundcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::proximitybackgroundcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.ProximityBackgroundColor)
  return proximitybackgroundcolor_ != NULL ? *proximitybackgroundcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_proximitybackgroundcolor() {
  
  if (proximitybackgroundcolor_ == NULL) {
    proximitybackgroundcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.ProximityBackgroundColor)
  return proximitybackgroundcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_proximitybackgroundcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.ProximityBackgroundColor)
  
  ::xnormal::tRGB8* temp = proximitybackgroundcolor_;
  proximitybackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_proximitybackgroundcolor(::xnormal::tRGB8* proximitybackgroundcolor) {
  delete proximitybackgroundcolor_;
  proximitybackgroundcolor_ = proximitybackgroundcolor;
  if (proximitybackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.ProximityBackgroundColor)
}

// .xnormal.tRGB8 CavityBackgroundColor = 18;
bool tGenerateMaps::has_cavitybackgroundcolor() const {
  return this != internal_default_instance() && cavitybackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_cavitybackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && cavitybackgroundcolor_ != NULL) delete cavitybackgroundcolor_;
  cavitybackgroundcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::cavitybackgroundcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.CavityBackgroundColor)
  return cavitybackgroundcolor_ != NULL ? *cavitybackgroundcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_cavitybackgroundcolor() {
  
  if (cavitybackgroundcolor_ == NULL) {
    cavitybackgroundcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.CavityBackgroundColor)
  return cavitybackgroundcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_cavitybackgroundcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.CavityBackgroundColor)
  
  ::xnormal::tRGB8* temp = cavitybackgroundcolor_;
  cavitybackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_cavitybackgroundcolor(::xnormal::tRGB8* cavitybackgroundcolor) {
  delete cavitybackgroundcolor_;
  cavitybackgroundcolor_ = cavitybackgroundcolor;
  if (cavitybackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.CavityBackgroundColor)
}

// .xnormal.tRGB8 VDMBackgroundColor = 19;
bool tGenerateMaps::has_vdmbackgroundcolor() const {
  return this != internal_default_instance() && vdmbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_vdmbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && vdmbackgroundcolor_ != NULL) delete vdmbackgroundcolor_;
  vdmbackgroundcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::vdmbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.VDMBackgroundColor)
  return vdmbackgroundcolor_ != NULL ? *vdmbackgroundcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_vdmbackgroundcolor() {
  
  if (vdmbackgroundcolor_ == NULL) {
    vdmbackgroundcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.VDMBackgroundColor)
  return vdmbackgroundcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_vdmbackgroundcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.VDMBackgroundColor)
  
  ::xnormal::tRGB8* temp = vdmbackgroundcolor_;
  vdmbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_vdmbackgroundcolor(::xnormal::tRGB8* vdmbackgroundcolor) {
  delete vdmbackgroundcolor_;
  vdmbackgroundcolor_ = vdmbackgroundcolor;
  if (vdmbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.VDMBackgroundColor)
}

// .xnormal.tRGB8 RadNMBackgroundColor = 20;
bool tGenerateMaps::has_radnmbackgroundcolor() const {
  return this != internal_default_instance() && radnmbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_radnmbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && radnmbackgroundcolor_ != NULL) delete radnmbackgroundcolor_;
  radnmbackgroundcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::radnmbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RadNMBackgroundColor)
  return radnmbackgroundcolor_ != NULL ? *radnmbackgroundcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_radnmbackgroundcolor() {
  
  if (radnmbackgroundcolor_ == NULL) {
    radnmbackgroundcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.RadNMBackgroundColor)
  return radnmbackgroundcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_radnmbackgroundcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.RadNMBackgroundColor)
  
  ::xnormal::tRGB8* temp = radnmbackgroundcolor_;
  radnmbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_radnmbackgroundcolor(::xnormal::tRGB8* radnmbackgroundcolor) {
  delete radnmbackgroundcolor_;
  radnmbackgroundcolor_ = radnmbackgroundcolor;
  if (radnmbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.RadNMBackgroundColor)
}

// .xnormal.tRGB8 CurvBackgroundColor = 21;
bool tGenerateMaps::has_curvbackgroundcolor() const {
  return this != internal_default_instance() && curvbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_curvbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && curvbackgroundcolor_ != NULL) delete curvbackgroundcolor_;
  curvbackgroundcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::curvbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.CurvBackgroundColor)
  return curvbackgroundcolor_ != NULL ? *curvbackgroundcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_curvbackgroundcolor() {
  
  if (curvbackgroundcolor_ == NULL) {
    curvbackgroundcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.CurvBackgroundColor)
  return curvbackgroundcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_curvbackgroundcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.CurvBackgroundColor)
  
  ::xnormal::tRGB8* temp = curvbackgroundcolor_;
  curvbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_curvbackgroundcolor(::xnormal::tRGB8* curvbackgroundcolor) {
  delete curvbackgroundcolor_;
  curvbackgroundcolor_ = curvbackgroundcolor;
  if (curvbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.CurvBackgroundColor)
}

// .xnormal.tRGB8 DerivNMBackgroundColor = 22;
bool tGenerateMaps::has_derivnmbackgroundcolor() const {
  return this != internal_default_instance() && derivnmbackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_derivnmbackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && derivnmbackgroundcolor_ != NULL) delete derivnmbackgroundcolor_;
  derivnmbackgroundcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::derivnmbackgroundcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.DerivNMBackgroundColor)
  return derivnmbackgroundcolor_ != NULL ? *derivnmbackgroundcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_derivnmbackgroundcolor() {
  
  if (derivnmbackgroundcolor_ == NULL) {
    derivnmbackgroundcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.DerivNMBackgroundColor)
  return derivnmbackgroundcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_derivnmbackgroundcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.DerivNMBackgroundColor)
  
  ::xnormal::tRGB8* temp = derivnmbackgroundcolor_;
  derivnmbackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_derivnmbackgroundcolor(::xnormal::tRGB8* derivnmbackgroundcolor) {
  delete derivnmbackgroundcolor_;
  derivnmbackgroundcolor_ = derivnmbackgroundcolor;
  if (derivnmbackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.DerivNMBackgroundColor)
}

// .xnormal.tRGB8 TransluBackgroundColor = 23;
bool tGenerateMaps::has_translubackgroundcolor() const {
  return this != internal_default_instance() && translubackgroundcolor_ != NULL;
}
void tGenerateMaps::clear_translubackgroundcolor() {
  if (GetArenaNoVirtual() == NULL && translubackgroundcolor_ != NULL) delete translubackgroundcolor_;
  translubackgroundcolor_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::translubackgroundcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.TransluBackgroundColor)
  return translubackgroundcolor_ != NULL ? *translubackgroundcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_translubackgroundcolor() {
  
  if (translubackgroundcolor_ == NULL) {
    translubackgroundcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.TransluBackgroundColor)
  return translubackgroundcolor_;
}
::xnormal::tRGB8* tGenerateMaps::release_translubackgroundcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.TransluBackgroundColor)
  
  ::xnormal::tRGB8* temp = translubackgroundcolor_;
  translubackgroundcolor_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_translubackgroundcolor(::xnormal::tRGB8* translubackgroundcolor) {
  delete translubackgroundcolor_;
  translubackgroundcolor_ = translubackgroundcolor;
  if (translubackgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.TransluBackgroundColor)
}

// .xnormal.tRGB8 BakeHighpolyVColsBackgroundCol = 24;
bool tGenerateMaps::has_bakehighpolyvcolsbackgroundcol() const {
  return this != internal_default_instance() && bakehighpolyvcolsbackgroundcol_ != NULL;
}
void tGenerateMaps::clear_bakehighpolyvcolsbackgroundcol() {
  if (GetArenaNoVirtual() == NULL && bakehighpolyvcolsbackgroundcol_ != NULL) delete bakehighpolyvcolsbackgroundcol_;
  bakehighpolyvcolsbackgroundcol_ = NULL;
}
const ::xnormal::tRGB8& tGenerateMaps::bakehighpolyvcolsbackgroundcol() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BakeHighpolyVColsBackgroundCol)
  return bakehighpolyvcolsbackgroundcol_ != NULL ? *bakehighpolyvcolsbackgroundcol_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tGenerateMaps::mutable_bakehighpolyvcolsbackgroundcol() {
  
  if (bakehighpolyvcolsbackgroundcol_ == NULL) {
    bakehighpolyvcolsbackgroundcol_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.BakeHighpolyVColsBackgroundCol)
  return bakehighpolyvcolsbackgroundcol_;
}
::xnormal::tRGB8* tGenerateMaps::release_bakehighpolyvcolsbackgroundcol() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.BakeHighpolyVColsBackgroundCol)
  
  ::xnormal::tRGB8* temp = bakehighpolyvcolsbackgroundcol_;
  bakehighpolyvcolsbackgroundcol_ = NULL;
  return temp;
}
void tGenerateMaps::set_allocated_bakehighpolyvcolsbackgroundcol(::xnormal::tRGB8* bakehighpolyvcolsbackgroundcol) {
  delete bakehighpolyvcolsbackgroundcol_;
  bakehighpolyvcolsbackgroundcol_ = bakehighpolyvcolsbackgroundcol;
  if (bakehighpolyvcolsbackgroundcol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.BakeHighpolyVColsBackgroundCol)
}

// bool ClosestIfFails = 25;
void tGenerateMaps::clear_closestiffails() {
  closestiffails_ = false;
}
bool tGenerateMaps::closestiffails() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.ClosestIfFails)
  return closestiffails_;
}
void tGenerateMaps::set_closestiffails(bool value) {
  
  closestiffails_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.ClosestIfFails)
}

// float DirectionsTonemapMax = 26;
void tGenerateMaps::clear_directionstonemapmax() {
  directionstonemapmax_ = 0;
}
float tGenerateMaps::directionstonemapmax() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.DirectionsTonemapMax)
  return directionstonemapmax_;
}
void tGenerateMaps::set_directionstonemapmax(float value) {
  
  directionstonemapmax_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.DirectionsTonemapMax)
}

// bool CurvMonocrome = 27;
void tGenerateMaps::clear_curvmonocrome() {
  curvmonocrome_ = false;
}
bool tGenerateMaps::curvmonocrome() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.CurvMonocrome)
  return curvmonocrome_;
}
void tGenerateMaps::set_curvmonocrome(bool value) {
  
  curvmonocrome_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.CurvMonocrome)
}

// float AOBias = 28;
void tGenerateMaps::clear_aobias() {
  aobias_ = 0;
}
float tGenerateMaps::aobias() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.AOBias)
  return aobias_;
}
void tGenerateMaps::set_aobias(float value) {
  
  aobias_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.AOBias)
}

// bool BentTangentSpace = 29;
void tGenerateMaps::clear_benttangentspace() {
  benttangentspace_ = false;
}
bool tGenerateMaps::benttangentspace() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BentTangentSpace)
  return benttangentspace_;
}
void tGenerateMaps::set_benttangentspace(bool value) {
  
  benttangentspace_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.BentTangentSpace)
}

// bool GenTranslu = 30;
void tGenerateMaps::clear_gentranslu() {
  gentranslu_ = false;
}
bool tGenerateMaps::gentranslu() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.GenTranslu)
  return gentranslu_;
}
void tGenerateMaps::set_gentranslu(bool value) {
  
  gentranslu_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.GenTranslu)
}

// .xnormal.tGenerateMaps.eAODistribution AODistribution = 31;
void tGenerateMaps::clear_aodistribution() {
  aodistribution_ = 0;
}
::xnormal::tGenerateMaps_eAODistribution tGenerateMaps::aodistribution() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.AODistribution)
  return static_cast< ::xnormal::tGenerateMaps_eAODistribution >(aodistribution_);
}
void tGenerateMaps::set_aodistribution(::xnormal::tGenerateMaps_eAODistribution value) {
  
  aodistribution_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.AODistribution)
}

// float PRTThreshold = 32;
void tGenerateMaps::clear_prtthreshold() {
  prtthreshold_ = 0;
}
float tGenerateMaps::prtthreshold() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.PRTThreshold)
  return prtthreshold_;
}
void tGenerateMaps::set_prtthreshold(float value) {
  
  prtthreshold_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.PRTThreshold)
}

// float DirectionsTonemapMin = 33;
void tGenerateMaps::clear_directionstonemapmin() {
  directionstonemapmin_ = 0;
}
float tGenerateMaps::directionstonemapmin() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.DirectionsTonemapMin)
  return directionstonemapmin_;
}
void tGenerateMaps::set_directionstonemapmin(float value) {
  
  directionstonemapmin_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.DirectionsTonemapMin)
}

// .xnormal.tGenerateMaps.eAODistribution CurvDistribution = 34;
void tGenerateMaps::clear_curvdistribution() {
  curvdistribution_ = 0;
}
::xnormal::tGenerateMaps_eAODistribution tGenerateMaps::curvdistribution() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.CurvDistribution)
  return static_cast< ::xnormal::tGenerateMaps_eAODistribution >(curvdistribution_);
}
void tGenerateMaps::set_curvdistribution(::xnormal::tGenerateMaps_eAODistribution value) {
  
  curvdistribution_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.CurvDistribution)
}

// bool BentJitter = 35;
void tGenerateMaps::clear_bentjitter() {
  bentjitter_ = false;
}
bool tGenerateMaps::bentjitter() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BentJitter)
  return bentjitter_;
}
void tGenerateMaps::set_bentjitter(bool value) {
  
  bentjitter_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.BentJitter)
}

// .xnormal.tGenerateMaps.eAODistribution BentDistribution = 36;
void tGenerateMaps::clear_bentdistribution() {
  bentdistribution_ = 0;
}
::xnormal::tGenerateMaps_eAODistribution tGenerateMaps::bentdistribution() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BentDistribution)
  return static_cast< ::xnormal::tGenerateMaps_eAODistribution >(bentdistribution_);
}
void tGenerateMaps::set_bentdistribution(::xnormal::tGenerateMaps_eAODistribution value) {
  
  bentdistribution_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.BentDistribution)
}

// bool BakeHighpolyBaseTexture = 37;
void tGenerateMaps::clear_bakehighpolybasetexture() {
  bakehighpolybasetexture_ = false;
}
bool tGenerateMaps::bakehighpolybasetexture() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BakeHighpolyBaseTexture)
  return bakehighpolybasetexture_;
}
void tGenerateMaps::set_bakehighpolybasetexture(bool value) {
  
  bakehighpolybasetexture_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.BakeHighpolyBaseTexture)
}

// bool GenConvexity = 38;
void tGenerateMaps::clear_genconvexity() {
  genconvexity_ = false;
}
bool tGenerateMaps::genconvexity() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.GenConvexity)
  return genconvexity_;
}
void tGenerateMaps::set_genconvexity(bool value) {
  
  genconvexity_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.GenConvexity)
}

// float RadiosityNormalsAttenLinear = 39;
void tGenerateMaps::clear_radiositynormalsattenlinear() {
  radiositynormalsattenlinear_ = 0;
}
float tGenerateMaps::radiositynormalsattenlinear() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RadiosityNormalsAttenLinear)
  return radiositynormalsattenlinear_;
}
void tGenerateMaps::set_radiositynormalsattenlinear(float value) {
  
  radiositynormalsattenlinear_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.RadiosityNormalsAttenLinear)
}

// uint32 TransluRaysPerSample = 40;
void tGenerateMaps::clear_translurayspersample() {
  translurayspersample_ = 0u;
}
::google::protobuf::uint32 tGenerateMaps::translurayspersample() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.TransluRaysPerSample)
  return translurayspersample_;
}
void tGenerateMaps::set_translurayspersample(::google::protobuf::uint32 value) {
  
  translurayspersample_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.TransluRaysPerSample)
}

// float CurvSearchDistance = 41;
void tGenerateMaps::clear_curvsearchdistance() {
  curvsearchdistance_ = 0;
}
float tGenerateMaps::curvsearchdistance() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.CurvSearchDistance)
  return curvsearchdistance_;
}
void tGenerateMaps::set_curvsearchdistance(float value) {
  
  curvsearchdistance_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.CurvSearchDistance)
}

// .xnormal.tGenerateMaps.eSwizzleComponent SwizzleZ = 42;
void tGenerateMaps::clear_swizzlez() {
  swizzlez_ = 0;
}
::xnormal::tGenerateMaps_eSwizzleComponent tGenerateMaps::swizzlez() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.SwizzleZ)
  return static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(swizzlez_);
}
void tGenerateMaps::set_swizzlez(::xnormal::tGenerateMaps_eSwizzleComponent value) {
  
  swizzlez_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.SwizzleZ)
}

// float TransluBias = 43;
void tGenerateMaps::clear_translubias() {
  translubias_ = 0;
}
float tGenerateMaps::translubias() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.TransluBias)
  return translubias_;
}
void tGenerateMaps::set_translubias(float value) {
  
  translubias_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.TransluBias)
}

// bool PRTLimitRayDistance = 44;
void tGenerateMaps::clear_prtlimitraydistance() {
  prtlimitraydistance_ = false;
}
bool tGenerateMaps::prtlimitraydistance() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.PRTLimitRayDistance)
  return prtlimitraydistance_;
}
void tGenerateMaps::set_prtlimitraydistance(bool value) {
  
  prtlimitraydistance_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.PRTLimitRayDistance)
}

// bool GenBent = 45;
void tGenerateMaps::clear_genbent() {
  genbent_ = false;
}
bool tGenerateMaps::genbent() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.GenBent)
  return genbent_;
}
void tGenerateMaps::set_genbent(bool value) {
  
  genbent_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.GenBent)
}

// bool AOLimitRayDistance = 46;
void tGenerateMaps::clear_aolimitraydistance() {
  aolimitraydistance_ = false;
}
bool tGenerateMaps::aolimitraydistance() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.AOLimitRayDistance)
  return aolimitraydistance_;
}
void tGenerateMaps::set_aolimitraydistance(bool value) {
  
  aolimitraydistance_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.AOLimitRayDistance)
}

// uint32 CurvRaysPerSample = 47;
void tGenerateMaps::clear_curvrayspersample() {
  curvrayspersample_ = 0u;
}
::google::protobuf::uint32 tGenerateMaps::curvrayspersample() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.CurvRaysPerSample)
  return curvrayspersample_;
}
void tGenerateMaps::set_curvrayspersample(::google::protobuf::uint32 value) {
  
  curvrayspersample_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.CurvRaysPerSample)
}

// .xnormal.tGenerateMaps.eAODistribution RadiosityNormalsDistribution = 48;
void tGenerateMaps::clear_radiositynormalsdistribution() {
  radiositynormalsdistribution_ = 0;
}
::xnormal::tGenerateMaps_eAODistribution tGenerateMaps::radiositynormalsdistribution() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RadiosityNormalsDistribution)
  return static_cast< ::xnormal::tGenerateMaps_eAODistribution >(radiositynormalsdistribution_);
}
void tGenerateMaps::set_radiositynormalsdistribution(::xnormal::tGenerateMaps_eAODistribution value) {
  
  radiositynormalsdistribution_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.RadiosityNormalsDistribution)
}

// uint32 RadiosityNormalsRaysPerSample = 49;
void tGenerateMaps::clear_radiositynormalsrayspersample() {
  radiositynormalsrayspersample_ = 0u;
}
::google::protobuf::uint32 tGenerateMaps::radiositynormalsrayspersample() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RadiosityNormalsRaysPerSample)
  return radiositynormalsrayspersample_;
}
void tGenerateMaps::set_radiositynormalsrayspersample(::google::protobuf::uint32 value) {
  
  radiositynormalsrayspersample_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.RadiosityNormalsRaysPerSample)
}

// bool CurvJitter = 50;
void tGenerateMaps::clear_curvjitter() {
  curvjitter_ = false;
}
bool tGenerateMaps::curvjitter() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.CurvJitter)
  return curvjitter_;
}
void tGenerateMaps::set_curvjitter(bool value) {
  
  curvjitter_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.CurvJitter)
}

// bool TangentSpace = 51;
void tGenerateMaps::clear_tangentspace() {
  tangentspace_ = false;
}
bool tGenerateMaps::tangentspace() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.TangentSpace)
  return tangentspace_;
}
void tGenerateMaps::set_tangentspace(bool value) {
  
  tangentspace_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.TangentSpace)
}

// bool RadiosityNormalsAllowPureOcclusion = 52;
void tGenerateMaps::clear_radiositynormalsallowpureocclusion() {
  radiositynormalsallowpureocclusion_ = false;
}
bool tGenerateMaps::radiositynormalsallowpureocclusion() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RadiosityNormalsAllowPureOcclusion)
  return radiositynormalsallowpureocclusion_;
}
void tGenerateMaps::set_radiositynormalsallowpureocclusion(bool value) {
  
  radiositynormalsallowpureocclusion_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.RadiosityNormalsAllowPureOcclusion)
}

// .xnormal.tGenerateMaps.eSwizzleComponent BentSwizzleX = 53;
void tGenerateMaps::clear_bentswizzlex() {
  bentswizzlex_ = 0;
}
::xnormal::tGenerateMaps_eSwizzleComponent tGenerateMaps::bentswizzlex() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BentSwizzleX)
  return static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(bentswizzlex_);
}
void tGenerateMaps::set_bentswizzlex(::xnormal::tGenerateMaps_eSwizzleComponent value) {
  
  bentswizzlex_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.BentSwizzleX)
}

// .xnormal.tGenerateMaps.eSwizzleComponent SwizzleY = 54;
void tGenerateMaps::clear_swizzley() {
  swizzley_ = 0;
}
::xnormal::tGenerateMaps_eSwizzleComponent tGenerateMaps::swizzley() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.SwizzleY)
  return static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(swizzley_);
}
void tGenerateMaps::set_swizzley(::xnormal::tGenerateMaps_eSwizzleComponent value) {
  
  swizzley_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.SwizzleY)
}

// bool GenCurv = 55;
void tGenerateMaps::clear_gencurv() {
  gencurv_ = false;
}
bool tGenerateMaps::gencurv() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.GenCurv)
  return gencurv_;
}
void tGenerateMaps::set_gencurv(bool value) {
  
  gencurv_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.GenCurv)
}

// bool PRTJitter = 56;
void tGenerateMaps::clear_prtjitter() {
  prtjitter_ = false;
}
bool tGenerateMaps::prtjitter() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.PRTJitter)
  return prtjitter_;
}
void tGenerateMaps::set_prtjitter(bool value) {
  
  prtjitter_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.PRTJitter)
}

// float AOAttenCuadratic = 57;
void tGenerateMaps::clear_aoattencuadratic() {
  aoattencuadratic_ = 0;
}
float tGenerateMaps::aoattencuadratic() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.AOAttenCuadratic)
  return aoattencuadratic_;
}
void tGenerateMaps::set_aoattencuadratic(float value) {
  
  aoattencuadratic_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.AOAttenCuadratic)
}

// float BentConeAngle = 58;
void tGenerateMaps::clear_bentconeangle() {
  bentconeangle_ = 0;
}
float tGenerateMaps::bentconeangle() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BentConeAngle)
  return bentconeangle_;
}
void tGenerateMaps::set_bentconeangle(float value) {
  
  bentconeangle_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.BentConeAngle)
}

// .xnormal.tGenerateMaps.eSwizzleComponent SwizzleX = 59;
void tGenerateMaps::clear_swizzlex() {
  swizzlex_ = 0;
}
::xnormal::tGenerateMaps_eSwizzleComponent tGenerateMaps::swizzlex() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.SwizzleX)
  return static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(swizzlex_);
}
void tGenerateMaps::set_swizzlex(::xnormal::tGenerateMaps_eSwizzleComponent value) {
  
  swizzlex_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.SwizzleX)
}

// bool RenderRayFails = 60;
void tGenerateMaps::clear_renderrayfails() {
  renderrayfails_ = false;
}
bool tGenerateMaps::renderrayfails() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RenderRayFails)
  return renderrayfails_;
}
void tGenerateMaps::set_renderrayfails(bool value) {
  
  renderrayfails_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.RenderRayFails)
}

// float CavitySearchRadius = 61;
void tGenerateMaps::clear_cavitysearchradius() {
  cavitysearchradius_ = 0;
}
float tGenerateMaps::cavitysearchradius() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.CavitySearchRadius)
  return cavitysearchradius_;
}
void tGenerateMaps::set_cavitysearchradius(float value) {
  
  cavitysearchradius_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.CavitySearchRadius)
}

// bool RadiosityNormalsEncodeAO = 62;
void tGenerateMaps::clear_radiositynormalsencodeao() {
  radiositynormalsencodeao_ = false;
}
bool tGenerateMaps::radiositynormalsencodeao() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RadiosityNormalsEncodeAO)
  return radiositynormalsencodeao_;
}
void tGenerateMaps::set_radiositynormalsencodeao(bool value) {
  
  radiositynormalsencodeao_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.RadiosityNormalsEncodeAO)
}

// float TransluConeAngle = 63;
void tGenerateMaps::clear_transluconeangle() {
  transluconeangle_ = 0;
}
float tGenerateMaps::transluconeangle() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.TransluConeAngle)
  return transluconeangle_;
}
void tGenerateMaps::set_transluconeangle(float value) {
  
  transluconeangle_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.TransluConeAngle)
}

// uint32 BentRaysPerSample = 64;
void tGenerateMaps::clear_bentrayspersample() {
  bentrayspersample_ = 0u;
}
::google::protobuf::uint32 tGenerateMaps::bentrayspersample() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BentRaysPerSample)
  return bentrayspersample_;
}
void tGenerateMaps::set_bentrayspersample(::google::protobuf::uint32 value) {
  
  bentrayspersample_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.BentRaysPerSample)
}

// float ConvexityScale = 65;
void tGenerateMaps::clear_convexityscale() {
  convexityscale_ = 0;
}
float tGenerateMaps::convexityscale() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.ConvexityScale)
  return convexityscale_;
}
void tGenerateMaps::set_convexityscale(float value) {
  
  convexityscale_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.ConvexityScale)
}

// float RadiosityNormalsConeAngle = 66;
void tGenerateMaps::clear_radiositynormalsconeangle() {
  radiositynormalsconeangle_ = 0;
}
float tGenerateMaps::radiositynormalsconeangle() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RadiosityNormalsConeAngle)
  return radiositynormalsconeangle_;
}
void tGenerateMaps::set_radiositynormalsconeangle(float value) {
  
  radiositynormalsconeangle_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.RadiosityNormalsConeAngle)
}

// string File = 67;
void tGenerateMaps::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tGenerateMaps::file() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.File)
  return file_.GetNoArena();
}
void tGenerateMaps::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.File)
}
#if LANG_CXX11
void tGenerateMaps::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tGenerateMaps.File)
}
#endif
void tGenerateMaps::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tGenerateMaps.File)
}
void tGenerateMaps::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tGenerateMaps.File)
}
::std::string* tGenerateMaps::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tGenerateMaps.File)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tGenerateMaps::release_file() {
  // @@protoc_insertion_point(field_release:xnormal.tGenerateMaps.File)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tGenerateMaps::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tGenerateMaps.File)
}

// bool GenDerivNM = 68;
void tGenerateMaps::clear_genderivnm() {
  genderivnm_ = false;
}
bool tGenerateMaps::genderivnm() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.GenDerivNM)
  return genderivnm_;
}
void tGenerateMaps::set_genderivnm(bool value) {
  
  genderivnm_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.GenDerivNM)
}

// bool BentLimitRayDistance = 69;
void tGenerateMaps::clear_bentlimitraydistance() {
  bentlimitraydistance_ = false;
}
bool tGenerateMaps::bentlimitraydistance() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BentLimitRayDistance)
  return bentlimitraydistance_;
}
void tGenerateMaps::set_bentlimitraydistance(bool value) {
  
  bentlimitraydistance_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.BentLimitRayDistance)
}

// float PRTBias = 70;
void tGenerateMaps::clear_prtbias() {
  prtbias_ = 0;
}
float tGenerateMaps::prtbias() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.PRTBias)
  return prtbias_;
}
void tGenerateMaps::set_prtbias(float value) {
  
  prtbias_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.PRTBias)
}

// bool RenderWireframe = 71;
void tGenerateMaps::clear_renderwireframe() {
  renderwireframe_ = false;
}
bool tGenerateMaps::renderwireframe() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RenderWireframe)
  return renderwireframe_;
}
void tGenerateMaps::set_renderwireframe(bool value) {
  
  renderwireframe_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.RenderWireframe)
}

// bool PRTNormalize = 72;
void tGenerateMaps::clear_prtnormalize() {
  prtnormalize_ = false;
}
bool tGenerateMaps::prtnormalize() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.PRTNormalize)
  return prtnormalize_;
}
void tGenerateMaps::set_prtnormalize(bool value) {
  
  prtnormalize_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.PRTNormalize)
}

// bool GenAO = 73;
void tGenerateMaps::clear_genao() {
  genao_ = false;
}
bool tGenerateMaps::genao() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.GenAO)
  return genao_;
}
void tGenerateMaps::set_genao(bool value) {
  
  genao_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.GenAO)
}

// float PRTConeAngle = 74;
void tGenerateMaps::clear_prtconeangle() {
  prtconeangle_ = 0;
}
float tGenerateMaps::prtconeangle() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.PRTConeAngle)
  return prtconeangle_;
}
void tGenerateMaps::set_prtconeangle(float value) {
  
  prtconeangle_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.PRTConeAngle)
}

// uint32 Height = 75;
void tGenerateMaps::clear_height() {
  height_ = 0u;
}
::google::protobuf::uint32 tGenerateMaps::height() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.Height)
  return height_;
}
void tGenerateMaps::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.Height)
}

// float RadiosityNormalsAttenCuadratic = 76;
void tGenerateMaps::clear_radiositynormalsattencuadratic() {
  radiositynormalsattencuadratic_ = 0;
}
float tGenerateMaps::radiositynormalsattencuadratic() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RadiosityNormalsAttenCuadratic)
  return radiositynormalsattencuadratic_;
}
void tGenerateMaps::set_radiositynormalsattencuadratic(float value) {
  
  radiositynormalsattencuadratic_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.RadiosityNormalsAttenCuadratic)
}

// .xnormal.tGenerateMaps.eHMNormalization DirectionsTonemap = 77;
void tGenerateMaps::clear_directionstonemap() {
  directionstonemap_ = 0;
}
::xnormal::tGenerateMaps_eHMNormalization tGenerateMaps::directionstonemap() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.DirectionsTonemap)
  return static_cast< ::xnormal::tGenerateMaps_eHMNormalization >(directionstonemap_);
}
void tGenerateMaps::set_directionstonemap(::xnormal::tGenerateMaps_eHMNormalization value) {
  
  directionstonemap_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.DirectionsTonemap)
}

// bool DirectionsTS = 78;
void tGenerateMaps::clear_directionsts() {
  directionsts_ = false;
}
bool tGenerateMaps::directionsts() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.DirectionsTS)
  return directionsts_;
}
void tGenerateMaps::set_directionsts(bool value) {
  
  directionsts_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.DirectionsTS)
}

// uint32 PRTRaysPerSample = 79;
void tGenerateMaps::clear_prtrayspersample() {
  prtrayspersample_ = 0u;
}
::google::protobuf::uint32 tGenerateMaps::prtrayspersample() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.PRTRaysPerSample)
  return prtrayspersample_;
}
void tGenerateMaps::set_prtrayspersample(::google::protobuf::uint32 value) {
  
  prtrayspersample_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.PRTRaysPerSample)
}

// uint32 EdgePadding = 80;
void tGenerateMaps::clear_edgepadding() {
  edgepadding_ = 0u;
}
::google::protobuf::uint32 tGenerateMaps::edgepadding() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.EdgePadding)
  return edgepadding_;
}
void tGenerateMaps::set_edgepadding(::google::protobuf::uint32 value) {
  
  edgepadding_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.EdgePadding)
}

// .xnormal.tGenerateMaps.eSwizzleComponent DirectionsSwizzleZ = 81;
void tGenerateMaps::clear_directionsswizzlez() {
  directionsswizzlez_ = 0;
}
::xnormal::tGenerateMaps_eSwizzleComponent tGenerateMaps::directionsswizzlez() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.DirectionsSwizzleZ)
  return static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(directionsswizzlez_);
}
void tGenerateMaps::set_directionsswizzlez(::xnormal::tGenerateMaps_eSwizzleComponent value) {
  
  directionsswizzlez_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.DirectionsSwizzleZ)
}

// bool AOAllowPureOccluded = 82;
void tGenerateMaps::clear_aoallowpureoccluded() {
  aoallowpureoccluded_ = false;
}
bool tGenerateMaps::aoallowpureoccluded() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.AOAllowPureOccluded)
  return aoallowpureoccluded_;
}
void tGenerateMaps::set_aoallowpureoccluded(bool value) {
  
  aoallowpureoccluded_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.AOAllowPureOccluded)
}

// bool AOIgnoreBackfaceHits = 83;
void tGenerateMaps::clear_aoignorebackfacehits() {
  aoignorebackfacehits_ = false;
}
bool tGenerateMaps::aoignorebackfacehits() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.AOIgnoreBackfaceHits)
  return aoignorebackfacehits_;
}
void tGenerateMaps::set_aoignorebackfacehits(bool value) {
  
  aoignorebackfacehits_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.AOIgnoreBackfaceHits)
}

// uint32 CavityRaysPerSample = 84;
void tGenerateMaps::clear_cavityrayspersample() {
  cavityrayspersample_ = 0u;
}
::google::protobuf::uint32 tGenerateMaps::cavityrayspersample() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.CavityRaysPerSample)
  return cavityrayspersample_;
}
void tGenerateMaps::set_cavityrayspersample(::google::protobuf::uint32 value) {
  
  cavityrayspersample_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.CavityRaysPerSample)
}

// float AOAttenConstant = 85;
void tGenerateMaps::clear_aoattenconstant() {
  aoattenconstant_ = 0;
}
float tGenerateMaps::aoattenconstant() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.AOAttenConstant)
  return aoattenconstant_;
}
void tGenerateMaps::set_aoattenconstant(float value) {
  
  aoattenconstant_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.AOAttenConstant)
}

// bool CavityJitter = 86;
void tGenerateMaps::clear_cavityjitter() {
  cavityjitter_ = false;
}
bool tGenerateMaps::cavityjitter() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.CavityJitter)
  return cavityjitter_;
}
void tGenerateMaps::set_cavityjitter(bool value) {
  
  cavityjitter_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.CavityJitter)
}

// float HeightTonemapMax = 87;
void tGenerateMaps::clear_heighttonemapmax() {
  heighttonemapmax_ = 0;
}
float tGenerateMaps::heighttonemapmax() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.HeightTonemapMax)
  return heighttonemapmax_;
}
void tGenerateMaps::set_heighttonemapmax(float value) {
  
  heighttonemapmax_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.HeightTonemapMax)
}

// bool GenDirections = 88;
void tGenerateMaps::clear_gendirections() {
  gendirections_ = false;
}
bool tGenerateMaps::gendirections() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.GenDirections)
  return gendirections_;
}
void tGenerateMaps::set_gendirections(bool value) {
  
  gendirections_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.GenDirections)
}

// bool RadiosityNormalsLimitRayDistance = 89;
void tGenerateMaps::clear_radiositynormalslimitraydistance() {
  radiositynormalslimitraydistance_ = false;
}
bool tGenerateMaps::radiositynormalslimitraydistance() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RadiosityNormalsLimitRayDistance)
  return radiositynormalslimitraydistance_;
}
void tGenerateMaps::set_radiositynormalslimitraydistance(bool value) {
  
  radiositynormalslimitraydistance_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.RadiosityNormalsLimitRayDistance)
}

// float HeightTonemapMin = 90;
void tGenerateMaps::clear_heighttonemapmin() {
  heighttonemapmin_ = 0;
}
float tGenerateMaps::heighttonemapmin() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.HeightTonemapMin)
  return heighttonemapmin_;
}
void tGenerateMaps::set_heighttonemapmin(float value) {
  
  heighttonemapmin_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.HeightTonemapMin)
}

// bool RadiosityNormalsJitter = 91;
void tGenerateMaps::clear_radiositynormalsjitter() {
  radiositynormalsjitter_ = false;
}
bool tGenerateMaps::radiositynormalsjitter() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RadiosityNormalsJitter)
  return radiositynormalsjitter_;
}
void tGenerateMaps::set_radiositynormalsjitter(bool value) {
  
  radiositynormalsjitter_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.RadiosityNormalsJitter)
}

// .xnormal.tGenerateMaps.eSwizzleComponent DirectionsSwizzleY = 92;
void tGenerateMaps::clear_directionsswizzley() {
  directionsswizzley_ = 0;
}
::xnormal::tGenerateMaps_eSwizzleComponent tGenerateMaps::directionsswizzley() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.DirectionsSwizzleY)
  return static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(directionsswizzley_);
}
void tGenerateMaps::set_directionsswizzley(::xnormal::tGenerateMaps_eSwizzleComponent value) {
  
  directionsswizzley_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.DirectionsSwizzleY)
}

// uint32 Width = 93;
void tGenerateMaps::clear_width() {
  width_ = 0u;
}
::google::protobuf::uint32 tGenerateMaps::width() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.Width)
  return width_;
}
void tGenerateMaps::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.Width)
}

// bool BakeHighpolyBaseTextureDrawObjectIDIfNoTexture = 94;
void tGenerateMaps::clear_bakehighpolybasetexturedrawobjectidifnotexture() {
  bakehighpolybasetexturedrawobjectidifnotexture_ = false;
}
bool tGenerateMaps::bakehighpolybasetexturedrawobjectidifnotexture() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BakeHighpolyBaseTextureDrawObjectIDIfNoTexture)
  return bakehighpolybasetexturedrawobjectidifnotexture_;
}
void tGenerateMaps::set_bakehighpolybasetexturedrawobjectidifnotexture(bool value) {
  
  bakehighpolybasetexturedrawobjectidifnotexture_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.BakeHighpolyBaseTextureDrawObjectIDIfNoTexture)
}

// bool Concavity = 95;
void tGenerateMaps::clear_concavity() {
  concavity_ = false;
}
bool tGenerateMaps::concavity() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.Concavity)
  return concavity_;
}
void tGenerateMaps::set_concavity(bool value) {
  
  concavity_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.Concavity)
}

// .xnormal.tGenerateMaps.eSwizzleComponent DirectionsSwizzleX = 96;
void tGenerateMaps::clear_directionsswizzlex() {
  directionsswizzlex_ = 0;
}
::xnormal::tGenerateMaps_eSwizzleComponent tGenerateMaps::directionsswizzlex() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.DirectionsSwizzleX)
  return static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(directionsswizzlex_);
}
void tGenerateMaps::set_directionsswizzlex(::xnormal::tGenerateMaps_eSwizzleComponent value) {
  
  directionsswizzlex_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.DirectionsSwizzleX)
}

// bool GenNormals = 97;
void tGenerateMaps::clear_gennormals() {
  gennormals_ = false;
}
bool tGenerateMaps::gennormals() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.GenNormals)
  return gennormals_;
}
void tGenerateMaps::set_gennormals(bool value) {
  
  gennormals_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.GenNormals)
}

// uint32 ProximityRaysPerSample = 98;
void tGenerateMaps::clear_proximityrayspersample() {
  proximityrayspersample_ = 0u;
}
::google::protobuf::uint32 tGenerateMaps::proximityrayspersample() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.ProximityRaysPerSample)
  return proximityrayspersample_;
}
void tGenerateMaps::set_proximityrayspersample(::google::protobuf::uint32 value) {
  
  proximityrayspersample_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.ProximityRaysPerSample)
}

// bool GenHeights = 99;
void tGenerateMaps::clear_genheights() {
  genheights_ = false;
}
bool tGenerateMaps::genheights() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.GenHeights)
  return genheights_;
}
void tGenerateMaps::set_genheights(bool value) {
  
  genheights_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.GenHeights)
}

// float RadiosityNormalsAttenConstant = 100;
void tGenerateMaps::clear_radiositynormalsattenconstant() {
  radiositynormalsattenconstant_ = 0;
}
float tGenerateMaps::radiositynormalsattenconstant() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RadiosityNormalsAttenConstant)
  return radiositynormalsattenconstant_;
}
void tGenerateMaps::set_radiositynormalsattenconstant(float value) {
  
  radiositynormalsattenconstant_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.RadiosityNormalsAttenConstant)
}

// bool GenProximity = 101;
void tGenerateMaps::clear_genproximity() {
  genproximity_ = false;
}
bool tGenerateMaps::genproximity() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.GenProximity)
  return genproximity_;
}
void tGenerateMaps::set_genproximity(bool value) {
  
  genproximity_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.GenProximity)
}

// bool GenPRT = 102;
void tGenerateMaps::clear_genprt() {
  genprt_ = false;
}
bool tGenerateMaps::genprt() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.GenPRT)
  return genprt_;
}
void tGenerateMaps::set_genprt(bool value) {
  
  genprt_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.GenPRT)
}

// float CavityContrast = 103;
void tGenerateMaps::clear_cavitycontrast() {
  cavitycontrast_ = 0;
}
float tGenerateMaps::cavitycontrast() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.CavityContrast)
  return cavitycontrast_;
}
void tGenerateMaps::set_cavitycontrast(float value) {
  
  cavitycontrast_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.CavityContrast)
}

// .xnormal.tGenerateMaps.eRNMCoordSys RadiosityNormalsCoordSys = 104;
void tGenerateMaps::clear_radiositynormalscoordsys() {
  radiositynormalscoordsys_ = 0;
}
::xnormal::tGenerateMaps_eRNMCoordSys tGenerateMaps::radiositynormalscoordsys() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RadiosityNormalsCoordSys)
  return static_cast< ::xnormal::tGenerateMaps_eRNMCoordSys >(radiositynormalscoordsys_);
}
void tGenerateMaps::set_radiositynormalscoordsys(::xnormal::tGenerateMaps_eRNMCoordSys value) {
  
  radiositynormalscoordsys_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.RadiosityNormalsCoordSys)
}

// bool TransluJitter = 105;
void tGenerateMaps::clear_translujitter() {
  translujitter_ = false;
}
bool tGenerateMaps::translujitter() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.TransluJitter)
  return translujitter_;
}
void tGenerateMaps::set_translujitter(bool value) {
  
  translujitter_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.TransluJitter)
}

// uint32 AORaysPerSample = 106;
void tGenerateMaps::clear_aorayspersample() {
  aorayspersample_ = 0u;
}
::google::protobuf::uint32 tGenerateMaps::aorayspersample() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.AORaysPerSample)
  return aorayspersample_;
}
void tGenerateMaps::set_aorayspersample(::google::protobuf::uint32 value) {
  
  aorayspersample_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.AORaysPerSample)
}

// float BentBias = 107;
void tGenerateMaps::clear_bentbias() {
  bentbias_ = 0;
}
float tGenerateMaps::bentbias() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BentBias)
  return bentbias_;
}
void tGenerateMaps::set_bentbias(float value) {
  
  bentbias_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.BentBias)
}

// bool DiscardRayBackFacesHits = 108;
void tGenerateMaps::clear_discardraybackfaceshits() {
  discardraybackfaceshits_ = false;
}
bool tGenerateMaps::discardraybackfaceshits() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.DiscardRayBackFacesHits)
  return discardraybackfaceshits_;
}
void tGenerateMaps::set_discardraybackfaceshits(bool value) {
  
  discardraybackfaceshits_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.DiscardRayBackFacesHits)
}

// float AOConeAngle = 109;
void tGenerateMaps::clear_aoconeangle() {
  aoconeangle_ = 0;
}
float tGenerateMaps::aoconeangle() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.AOConeAngle)
  return aoconeangle_;
}
void tGenerateMaps::set_aoconeangle(float value) {
  
  aoconeangle_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.AOConeAngle)
}

// .xnormal.tGenerateMaps.eSwizzleComponent BentSwizzleY = 110;
void tGenerateMaps::clear_bentswizzley() {
  bentswizzley_ = 0;
}
::xnormal::tGenerateMaps_eSwizzleComponent tGenerateMaps::bentswizzley() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BentSwizzleY)
  return static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(bentswizzley_);
}
void tGenerateMaps::set_bentswizzley(::xnormal::tGenerateMaps_eSwizzleComponent value) {
  
  bentswizzley_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.BentSwizzleY)
}

// float RadiosityNormalsBias = 111;
void tGenerateMaps::clear_radiositynormalsbias() {
  radiositynormalsbias_ = 0;
}
float tGenerateMaps::radiositynormalsbias() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RadiosityNormalsBias)
  return radiositynormalsbias_;
}
void tGenerateMaps::set_radiositynormalsbias(float value) {
  
  radiositynormalsbias_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.RadiosityNormalsBias)
}

// float RadiosityNormalsContrast = 112;
void tGenerateMaps::clear_radiositynormalscontrast() {
  radiositynormalscontrast_ = 0;
}
float tGenerateMaps::radiositynormalscontrast() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.RadiosityNormalsContrast)
  return radiositynormalscontrast_;
}
void tGenerateMaps::set_radiositynormalscontrast(float value) {
  
  radiositynormalscontrast_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.RadiosityNormalsContrast)
}

// uint32 CavitySteps = 113;
void tGenerateMaps::clear_cavitysteps() {
  cavitysteps_ = 0u;
}
::google::protobuf::uint32 tGenerateMaps::cavitysteps() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.CavitySteps)
  return cavitysteps_;
}
void tGenerateMaps::set_cavitysteps(::google::protobuf::uint32 value) {
  
  cavitysteps_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.CavitySteps)
}

// .xnormal.tGenerateMaps.eAntialiasing AA = 114;
void tGenerateMaps::clear_aa() {
  aa_ = 0;
}
::xnormal::tGenerateMaps_eAntialiasing tGenerateMaps::aa() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.AA)
  return static_cast< ::xnormal::tGenerateMaps_eAntialiasing >(aa_);
}
void tGenerateMaps::set_aa(::xnormal::tGenerateMaps_eAntialiasing value) {
  
  aa_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.AA)
}

// .xnormal.tGenerateMaps.eSwizzleComponent BentSwizzleZ = 115;
void tGenerateMaps::clear_bentswizzlez() {
  bentswizzlez_ = 0;
}
::xnormal::tGenerateMaps_eSwizzleComponent tGenerateMaps::bentswizzlez() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BentSwizzleZ)
  return static_cast< ::xnormal::tGenerateMaps_eSwizzleComponent >(bentswizzlez_);
}
void tGenerateMaps::set_bentswizzlez(::xnormal::tGenerateMaps_eSwizzleComponent value) {
  
  bentswizzlez_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.BentSwizzleZ)
}

// uint32 BucketSize = 116;
void tGenerateMaps::clear_bucketsize() {
  bucketsize_ = 0u;
}
::google::protobuf::uint32 tGenerateMaps::bucketsize() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BucketSize)
  return bucketsize_;
}
void tGenerateMaps::set_bucketsize(::google::protobuf::uint32 value) {
  
  bucketsize_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.BucketSize)
}

// float CurvConeAngle = 117;
void tGenerateMaps::clear_curvconeangle() {
  curvconeangle_ = 0;
}
float tGenerateMaps::curvconeangle() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.CurvConeAngle)
  return curvconeangle_;
}
void tGenerateMaps::set_curvconeangle(float value) {
  
  curvconeangle_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.CurvConeAngle)
}

// float TransluDist = 118;
void tGenerateMaps::clear_transludist() {
  transludist_ = 0;
}
float tGenerateMaps::transludist() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.TransluDist)
  return transludist_;
}
void tGenerateMaps::set_transludist(float value) {
  
  transludist_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.TransluDist)
}

// bool AOJitter = 119;
void tGenerateMaps::clear_aojitter() {
  aojitter_ = false;
}
bool tGenerateMaps::aojitter() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.AOJitter)
  return aojitter_;
}
void tGenerateMaps::set_aojitter(bool value) {
  
  aojitter_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.AOJitter)
}

// float CurvBias = 120;
void tGenerateMaps::clear_curvbias() {
  curvbias_ = 0;
}
float tGenerateMaps::curvbias() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.CurvBias)
  return curvbias_;
}
void tGenerateMaps::set_curvbias(float value) {
  
  curvbias_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.CurvBias)
}

// bool GenWireRays = 121;
void tGenerateMaps::clear_genwirerays() {
  genwirerays_ = false;
}
bool tGenerateMaps::genwirerays() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.GenWireRays)
  return genwirerays_;
}
void tGenerateMaps::set_genwirerays(bool value) {
  
  genwirerays_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.GenWireRays)
}

// .xnormal.tGenerateMaps.eCurvAlgorithm CurvAlgorithm = 122;
void tGenerateMaps::clear_curvalgorithm() {
  curvalgorithm_ = 0;
}
::xnormal::tGenerateMaps_eCurvAlgorithm tGenerateMaps::curvalgorithm() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.CurvAlgorithm)
  return static_cast< ::xnormal::tGenerateMaps_eCurvAlgorithm >(curvalgorithm_);
}
void tGenerateMaps::set_curvalgorithm(::xnormal::tGenerateMaps_eCurvAlgorithm value) {
  
  curvalgorithm_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.CurvAlgorithm)
}

// .xnormal.tGenerateMaps.eAODistribution TransluDistribution = 123;
void tGenerateMaps::clear_transludistribution() {
  transludistribution_ = 0;
}
::xnormal::tGenerateMaps_eAODistribution tGenerateMaps::transludistribution() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.TransluDistribution)
  return static_cast< ::xnormal::tGenerateMaps_eAODistribution >(transludistribution_);
}
void tGenerateMaps::set_transludistribution(::xnormal::tGenerateMaps_eAODistribution value) {
  
  transludistribution_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.TransluDistribution)
}

// float AOAttenLinear = 124;
void tGenerateMaps::clear_aoattenlinear() {
  aoattenlinear_ = 0;
}
float tGenerateMaps::aoattenlinear() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.AOAttenLinear)
  return aoattenlinear_;
}
void tGenerateMaps::set_aoattenlinear(float value) {
  
  aoattenlinear_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.AOAttenLinear)
}

// bool ProximityLimitRayDistance = 125;
void tGenerateMaps::clear_proximitylimitraydistance() {
  proximitylimitraydistance_ = false;
}
bool tGenerateMaps::proximitylimitraydistance() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.ProximityLimitRayDistance)
  return proximitylimitraydistance_;
}
void tGenerateMaps::set_proximitylimitraydistance(bool value) {
  
  proximitylimitraydistance_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.ProximityLimitRayDistance)
}

// bool GenRadiosityNormals = 126;
void tGenerateMaps::clear_genradiositynormals() {
  genradiositynormals_ = false;
}
bool tGenerateMaps::genradiositynormals() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.GenRadiosityNormals)
  return genradiositynormals_;
}
void tGenerateMaps::set_genradiositynormals(bool value) {
  
  genradiositynormals_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.GenRadiosityNormals)
}

// float ProximityConeAngle = 127;
void tGenerateMaps::clear_proximityconeangle() {
  proximityconeangle_ = 0;
}
float tGenerateMaps::proximityconeangle() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.ProximityConeAngle)
  return proximityconeangle_;
}
void tGenerateMaps::set_proximityconeangle(float value) {
  
  proximityconeangle_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.ProximityConeAngle)
}

// .xnormal.tGenerateMaps.eHMNormalization HeightTonemap = 128;
void tGenerateMaps::clear_heighttonemap() {
  heighttonemap_ = 0;
}
::xnormal::tGenerateMaps_eHMNormalization tGenerateMaps::heighttonemap() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.HeightTonemap)
  return static_cast< ::xnormal::tGenerateMaps_eHMNormalization >(heighttonemap_);
}
void tGenerateMaps::set_heighttonemap(::xnormal::tGenerateMaps_eHMNormalization value) {
  
  heighttonemap_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.HeightTonemap)
}

// bool GenCavity = 129;
void tGenerateMaps::clear_gencavity() {
  gencavity_ = false;
}
bool tGenerateMaps::gencavity() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.GenCavity)
  return gencavity_;
}
void tGenerateMaps::set_gencavity(bool value) {
  
  gencavity_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.GenCavity)
}

// bool BakeHighpolyVCols = 130;
void tGenerateMaps::clear_bakehighpolyvcols() {
  bakehighpolyvcols_ = false;
}
bool tGenerateMaps::bakehighpolyvcols() const {
  // @@protoc_insertion_point(field_get:xnormal.tGenerateMaps.BakeHighpolyVCols)
  return bakehighpolyvcols_;
}
void tGenerateMaps::set_bakehighpolyvcols(bool value) {
  
  bakehighpolyvcols_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tGenerateMaps.BakeHighpolyVCols)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tHighPolyModel::kMeshFieldNumber;
const int tHighPolyModel::kBaseTexFieldNumber;
const int tHighPolyModel::kDefaultMeshScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tHighPolyModel::tHighPolyModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_xnormal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xnormal.tHighPolyModel)
}
tHighPolyModel::tHighPolyModel(const tHighPolyModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mesh_(from.mesh_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  basetex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.basetex().size() > 0) {
    basetex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basetex_);
  }
  defaultmeshscale_ = from.defaultmeshscale_;
  // @@protoc_insertion_point(copy_constructor:xnormal.tHighPolyModel)
}

void tHighPolyModel::SharedCtor() {
  basetex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defaultmeshscale_ = 0;
  _cached_size_ = 0;
}

tHighPolyModel::~tHighPolyModel() {
  // @@protoc_insertion_point(destructor:xnormal.tHighPolyModel)
  SharedDtor();
}

void tHighPolyModel::SharedDtor() {
  basetex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tHighPolyModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tHighPolyModel::descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[8].descriptor;
}

const tHighPolyModel& tHighPolyModel::default_instance() {
  protobuf_xnormal_2eproto::InitDefaults();
  return *internal_default_instance();
}

tHighPolyModel* tHighPolyModel::New(::google::protobuf::Arena* arena) const {
  tHighPolyModel* n = new tHighPolyModel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tHighPolyModel::Clear() {
// @@protoc_insertion_point(message_clear_start:xnormal.tHighPolyModel)
  mesh_.Clear();
  basetex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defaultmeshscale_ = 0;
}

bool tHighPolyModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xnormal.tHighPolyModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xnormal.tHighPolyMesh Mesh = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mesh()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // string BaseTex = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basetex()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->basetex().data(), this->basetex().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.tHighPolyModel.BaseTex"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float DefaultMeshScale = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &defaultmeshscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xnormal.tHighPolyModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xnormal.tHighPolyModel)
  return false;
#undef DO_
}

void tHighPolyModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xnormal.tHighPolyModel)
  // repeated .xnormal.tHighPolyMesh Mesh = 1;
  for (unsigned int i = 0, n = this->mesh_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mesh(i), output);
  }

  // string BaseTex = 2;
  if (this->basetex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basetex().data(), this->basetex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tHighPolyModel.BaseTex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->basetex(), output);
  }

  // float DefaultMeshScale = 3;
  if (this->defaultmeshscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->defaultmeshscale(), output);
  }

  // @@protoc_insertion_point(serialize_end:xnormal.tHighPolyModel)
}

::google::protobuf::uint8* tHighPolyModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xnormal.tHighPolyModel)
  // repeated .xnormal.tHighPolyMesh Mesh = 1;
  for (unsigned int i = 0, n = this->mesh_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mesh(i), false, target);
  }

  // string BaseTex = 2;
  if (this->basetex().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->basetex().data(), this->basetex().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.tHighPolyModel.BaseTex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->basetex(), target);
  }

  // float DefaultMeshScale = 3;
  if (this->defaultmeshscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->defaultmeshscale(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xnormal.tHighPolyModel)
  return target;
}

size_t tHighPolyModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xnormal.tHighPolyModel)
  size_t total_size = 0;

  // repeated .xnormal.tHighPolyMesh Mesh = 1;
  {
    unsigned int count = this->mesh_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mesh(i));
    }
  }

  // string BaseTex = 2;
  if (this->basetex().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->basetex());
  }

  // float DefaultMeshScale = 3;
  if (this->defaultmeshscale() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tHighPolyModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xnormal.tHighPolyModel)
  GOOGLE_DCHECK_NE(&from, this);
  const tHighPolyModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tHighPolyModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xnormal.tHighPolyModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xnormal.tHighPolyModel)
    MergeFrom(*source);
  }
}

void tHighPolyModel::MergeFrom(const tHighPolyModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xnormal.tHighPolyModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mesh_.MergeFrom(from.mesh_);
  if (from.basetex().size() > 0) {

    basetex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.basetex_);
  }
  if (from.defaultmeshscale() != 0) {
    set_defaultmeshscale(from.defaultmeshscale());
  }
}

void tHighPolyModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xnormal.tHighPolyModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tHighPolyModel::CopyFrom(const tHighPolyModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xnormal.tHighPolyModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tHighPolyModel::IsInitialized() const {
  return true;
}

void tHighPolyModel::Swap(tHighPolyModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tHighPolyModel::InternalSwap(tHighPolyModel* other) {
  mesh_.UnsafeArenaSwap(&other->mesh_);
  basetex_.Swap(&other->basetex_);
  std::swap(defaultmeshscale_, other->defaultmeshscale_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tHighPolyModel::GetMetadata() const {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tHighPolyModel

// repeated .xnormal.tHighPolyMesh Mesh = 1;
int tHighPolyModel::mesh_size() const {
  return mesh_.size();
}
void tHighPolyModel::clear_mesh() {
  mesh_.Clear();
}
const ::xnormal::tHighPolyMesh& tHighPolyModel::mesh(int index) const {
  // @@protoc_insertion_point(field_get:xnormal.tHighPolyModel.Mesh)
  return mesh_.Get(index);
}
::xnormal::tHighPolyMesh* tHighPolyModel::mutable_mesh(int index) {
  // @@protoc_insertion_point(field_mutable:xnormal.tHighPolyModel.Mesh)
  return mesh_.Mutable(index);
}
::xnormal::tHighPolyMesh* tHighPolyModel::add_mesh() {
  // @@protoc_insertion_point(field_add:xnormal.tHighPolyModel.Mesh)
  return mesh_.Add();
}
::google::protobuf::RepeatedPtrField< ::xnormal::tHighPolyMesh >*
tHighPolyModel::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable_list:xnormal.tHighPolyModel.Mesh)
  return &mesh_;
}
const ::google::protobuf::RepeatedPtrField< ::xnormal::tHighPolyMesh >&
tHighPolyModel::mesh() const {
  // @@protoc_insertion_point(field_list:xnormal.tHighPolyModel.Mesh)
  return mesh_;
}

// string BaseTex = 2;
void tHighPolyModel::clear_basetex() {
  basetex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tHighPolyModel::basetex() const {
  // @@protoc_insertion_point(field_get:xnormal.tHighPolyModel.BaseTex)
  return basetex_.GetNoArena();
}
void tHighPolyModel::set_basetex(const ::std::string& value) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.tHighPolyModel.BaseTex)
}
#if LANG_CXX11
void tHighPolyModel::set_basetex(::std::string&& value) {
  
  basetex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.tHighPolyModel.BaseTex)
}
#endif
void tHighPolyModel::set_basetex(const char* value) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.tHighPolyModel.BaseTex)
}
void tHighPolyModel::set_basetex(const char* value, size_t size) {
  
  basetex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.tHighPolyModel.BaseTex)
}
::std::string* tHighPolyModel::mutable_basetex() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.tHighPolyModel.BaseTex)
  return basetex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tHighPolyModel::release_basetex() {
  // @@protoc_insertion_point(field_release:xnormal.tHighPolyModel.BaseTex)
  
  return basetex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tHighPolyModel::set_allocated_basetex(::std::string* basetex) {
  if (basetex != NULL) {
    
  } else {
    
  }
  basetex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), basetex);
  // @@protoc_insertion_point(field_set_allocated:xnormal.tHighPolyModel.BaseTex)
}

// float DefaultMeshScale = 3;
void tHighPolyModel::clear_defaultmeshscale() {
  defaultmeshscale_ = 0;
}
float tHighPolyModel::defaultmeshscale() const {
  // @@protoc_insertion_point(field_get:xnormal.tHighPolyModel.DefaultMeshScale)
  return defaultmeshscale_;
}
void tHighPolyModel::set_defaultmeshscale(float value) {
  
  defaultmeshscale_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tHighPolyModel.DefaultMeshScale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tLowPolyModel::kMeshFieldNumber;
const int tLowPolyModel::kDefaultMeshScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tLowPolyModel::tLowPolyModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_xnormal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xnormal.tLowPolyModel)
}
tLowPolyModel::tLowPolyModel(const tLowPolyModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mesh_(from.mesh_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  defaultmeshscale_ = from.defaultmeshscale_;
  // @@protoc_insertion_point(copy_constructor:xnormal.tLowPolyModel)
}

void tLowPolyModel::SharedCtor() {
  defaultmeshscale_ = 0;
  _cached_size_ = 0;
}

tLowPolyModel::~tLowPolyModel() {
  // @@protoc_insertion_point(destructor:xnormal.tLowPolyModel)
  SharedDtor();
}

void tLowPolyModel::SharedDtor() {
}

void tLowPolyModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tLowPolyModel::descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[9].descriptor;
}

const tLowPolyModel& tLowPolyModel::default_instance() {
  protobuf_xnormal_2eproto::InitDefaults();
  return *internal_default_instance();
}

tLowPolyModel* tLowPolyModel::New(::google::protobuf::Arena* arena) const {
  tLowPolyModel* n = new tLowPolyModel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tLowPolyModel::Clear() {
// @@protoc_insertion_point(message_clear_start:xnormal.tLowPolyModel)
  mesh_.Clear();
  defaultmeshscale_ = 0;
}

bool tLowPolyModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xnormal.tLowPolyModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .xnormal.tLowPolyMesh Mesh = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_mesh()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // float DefaultMeshScale = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &defaultmeshscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xnormal.tLowPolyModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xnormal.tLowPolyModel)
  return false;
#undef DO_
}

void tLowPolyModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xnormal.tLowPolyModel)
  // repeated .xnormal.tLowPolyMesh Mesh = 1;
  for (unsigned int i = 0, n = this->mesh_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mesh(i), output);
  }

  // float DefaultMeshScale = 2;
  if (this->defaultmeshscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->defaultmeshscale(), output);
  }

  // @@protoc_insertion_point(serialize_end:xnormal.tLowPolyModel)
}

::google::protobuf::uint8* tLowPolyModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xnormal.tLowPolyModel)
  // repeated .xnormal.tLowPolyMesh Mesh = 1;
  for (unsigned int i = 0, n = this->mesh_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mesh(i), false, target);
  }

  // float DefaultMeshScale = 2;
  if (this->defaultmeshscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->defaultmeshscale(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xnormal.tLowPolyModel)
  return target;
}

size_t tLowPolyModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xnormal.tLowPolyModel)
  size_t total_size = 0;

  // repeated .xnormal.tLowPolyMesh Mesh = 1;
  {
    unsigned int count = this->mesh_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mesh(i));
    }
  }

  // float DefaultMeshScale = 2;
  if (this->defaultmeshscale() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tLowPolyModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xnormal.tLowPolyModel)
  GOOGLE_DCHECK_NE(&from, this);
  const tLowPolyModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tLowPolyModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xnormal.tLowPolyModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xnormal.tLowPolyModel)
    MergeFrom(*source);
  }
}

void tLowPolyModel::MergeFrom(const tLowPolyModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xnormal.tLowPolyModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mesh_.MergeFrom(from.mesh_);
  if (from.defaultmeshscale() != 0) {
    set_defaultmeshscale(from.defaultmeshscale());
  }
}

void tLowPolyModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xnormal.tLowPolyModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tLowPolyModel::CopyFrom(const tLowPolyModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xnormal.tLowPolyModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tLowPolyModel::IsInitialized() const {
  return true;
}

void tLowPolyModel::Swap(tLowPolyModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tLowPolyModel::InternalSwap(tLowPolyModel* other) {
  mesh_.UnsafeArenaSwap(&other->mesh_);
  std::swap(defaultmeshscale_, other->defaultmeshscale_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tLowPolyModel::GetMetadata() const {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tLowPolyModel

// repeated .xnormal.tLowPolyMesh Mesh = 1;
int tLowPolyModel::mesh_size() const {
  return mesh_.size();
}
void tLowPolyModel::clear_mesh() {
  mesh_.Clear();
}
const ::xnormal::tLowPolyMesh& tLowPolyModel::mesh(int index) const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyModel.Mesh)
  return mesh_.Get(index);
}
::xnormal::tLowPolyMesh* tLowPolyModel::mutable_mesh(int index) {
  // @@protoc_insertion_point(field_mutable:xnormal.tLowPolyModel.Mesh)
  return mesh_.Mutable(index);
}
::xnormal::tLowPolyMesh* tLowPolyModel::add_mesh() {
  // @@protoc_insertion_point(field_add:xnormal.tLowPolyModel.Mesh)
  return mesh_.Add();
}
::google::protobuf::RepeatedPtrField< ::xnormal::tLowPolyMesh >*
tLowPolyModel::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable_list:xnormal.tLowPolyModel.Mesh)
  return &mesh_;
}
const ::google::protobuf::RepeatedPtrField< ::xnormal::tLowPolyMesh >&
tLowPolyModel::mesh() const {
  // @@protoc_insertion_point(field_list:xnormal.tLowPolyModel.Mesh)
  return mesh_;
}

// float DefaultMeshScale = 2;
void tLowPolyModel::clear_defaultmeshscale() {
  defaultmeshscale_ = 0;
}
float tLowPolyModel::defaultmeshscale() const {
  // @@protoc_insertion_point(field_get:xnormal.tLowPolyModel.DefaultMeshScale)
  return defaultmeshscale_;
}
void tLowPolyModel::set_defaultmeshscale(float value) {
  
  defaultmeshscale_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tLowPolyModel.DefaultMeshScale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tViewer3D::kLightAmbientColorFieldNumber;
const int tViewer3D::kLightDiffuseColorFieldNumber;
const int tViewer3D::kLightSpecularColorFieldNumber;
const int tViewer3D::kLightSecondaryColorFieldNumber;
const int tViewer3D::kLightTertiaryColorFieldNumber;
const int tViewer3D::kBackgroundColorFieldNumber;
const int tViewer3D::kGridColorFieldNumber;
const int tViewer3D::kCageColorFieldNumber;
const int tViewer3D::kCameraRotationFieldNumber;
const int tViewer3D::kCameraPositionFieldNumber;
const int tViewer3D::kLightPositionFieldNumber;
const int tViewer3D::kAxisSclFieldNumber;
const int tViewer3D::kXemakosExampleFieldNumber;
const int tViewer3D::kShowWireframeFieldNumber;
const int tViewer3D::kCageOpacityFieldNumber;
const int tViewer3D::kDiffuseGIIntensityFieldNumber;
const int tViewer3D::kShowAOFieldNumber;
const int tViewer3D::kSSAOContrastFieldNumber;
const int tViewer3D::kShadowAreaFieldNumber;
const int tViewer3D::kLightIndiretIntensityFieldNumber;
const int tViewer3D::kShowHighpolysFieldNumber;
const int tViewer3D::kShowStarfieldFieldNumber;
const int tViewer3D::kShowBlockersFieldNumber;
const int tViewer3D::kHDRThresholdFieldNumber;
const int tViewer3D::kSSAOBrightFieldNumber;
const int tViewer3D::kSSAOBlurRadiusFieldNumber;
const int tViewer3D::kShowGridFieldNumber;
const int tViewer3D::kParallaxStrengthFieldNumber;
const int tViewer3D::kSSAOAttenFieldNumber;
const int tViewer3D::kCameraOrbitDistanceFieldNumber;
const int tViewer3D::kUseGlowFieldNumber;
const int tViewer3D::kSSAOEnabledFieldNumber;
const int tViewer3D::kShadowBiasFieldNumber;
const int tViewer3D::kSSAORadiusFieldNumber;
const int tViewer3D::kLightIntensityFieldNumber;
const int tViewer3D::kExposureFieldNumber;
const int tViewer3D::kCameraOrbitAutoCenterFieldNumber;
const int tViewer3D::kCastShadowsFieldNumber;
const int tViewer3D::kShowNormalsFieldNumber;
const int tViewer3D::kMaxTessellationLevelFieldNumber;
const int tViewer3D::kShowTangentsFieldNumber;
const int tViewer3D::kGlowIntensityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tViewer3D::tViewer3D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_xnormal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xnormal.tViewer3D)
}
tViewer3D::tViewer3D(const tViewer3D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lightambientcolor()) {
    lightambientcolor_ = new ::xnormal::tRGB8(*from.lightambientcolor_);
  } else {
    lightambientcolor_ = NULL;
  }
  if (from.has_lightdiffusecolor()) {
    lightdiffusecolor_ = new ::xnormal::tRGB8(*from.lightdiffusecolor_);
  } else {
    lightdiffusecolor_ = NULL;
  }
  if (from.has_lightspecularcolor()) {
    lightspecularcolor_ = new ::xnormal::tRGB8(*from.lightspecularcolor_);
  } else {
    lightspecularcolor_ = NULL;
  }
  if (from.has_lightsecondarycolor()) {
    lightsecondarycolor_ = new ::xnormal::tRGB8(*from.lightsecondarycolor_);
  } else {
    lightsecondarycolor_ = NULL;
  }
  if (from.has_lighttertiarycolor()) {
    lighttertiarycolor_ = new ::xnormal::tRGB8(*from.lighttertiarycolor_);
  } else {
    lighttertiarycolor_ = NULL;
  }
  if (from.has_backgroundcolor()) {
    backgroundcolor_ = new ::xnormal::tRGB8(*from.backgroundcolor_);
  } else {
    backgroundcolor_ = NULL;
  }
  if (from.has_gridcolor()) {
    gridcolor_ = new ::xnormal::tRGB8(*from.gridcolor_);
  } else {
    gridcolor_ = NULL;
  }
  if (from.has_cagecolor()) {
    cagecolor_ = new ::xnormal::tRGB8(*from.cagecolor_);
  } else {
    cagecolor_ = NULL;
  }
  if (from.has_camerarotation()) {
    camerarotation_ = new ::xnormal::tMatrix(*from.camerarotation_);
  } else {
    camerarotation_ = NULL;
  }
  if (from.has_cameraposition()) {
    cameraposition_ = new ::xnormal::tVector3(*from.cameraposition_);
  } else {
    cameraposition_ = NULL;
  }
  if (from.has_lightposition()) {
    lightposition_ = new ::xnormal::tVector3(*from.lightposition_);
  } else {
    lightposition_ = NULL;
  }
  ::memcpy(&axisscl_, &from.axisscl_,
    reinterpret_cast<char*>(&glowintensity_) -
    reinterpret_cast<char*>(&axisscl_) + sizeof(glowintensity_));
  // @@protoc_insertion_point(copy_constructor:xnormal.tViewer3D)
}

void tViewer3D::SharedCtor() {
  ::memset(&lightambientcolor_, 0, reinterpret_cast<char*>(&glowintensity_) -
    reinterpret_cast<char*>(&lightambientcolor_) + sizeof(glowintensity_));
  _cached_size_ = 0;
}

tViewer3D::~tViewer3D() {
  // @@protoc_insertion_point(destructor:xnormal.tViewer3D)
  SharedDtor();
}

void tViewer3D::SharedDtor() {
  if (this != internal_default_instance()) {
    delete lightambientcolor_;
  }
  if (this != internal_default_instance()) {
    delete lightdiffusecolor_;
  }
  if (this != internal_default_instance()) {
    delete lightspecularcolor_;
  }
  if (this != internal_default_instance()) {
    delete lightsecondarycolor_;
  }
  if (this != internal_default_instance()) {
    delete lighttertiarycolor_;
  }
  if (this != internal_default_instance()) {
    delete backgroundcolor_;
  }
  if (this != internal_default_instance()) {
    delete gridcolor_;
  }
  if (this != internal_default_instance()) {
    delete cagecolor_;
  }
  if (this != internal_default_instance()) {
    delete camerarotation_;
  }
  if (this != internal_default_instance()) {
    delete cameraposition_;
  }
  if (this != internal_default_instance()) {
    delete lightposition_;
  }
}

void tViewer3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tViewer3D::descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[10].descriptor;
}

const tViewer3D& tViewer3D::default_instance() {
  protobuf_xnormal_2eproto::InitDefaults();
  return *internal_default_instance();
}

tViewer3D* tViewer3D::New(::google::protobuf::Arena* arena) const {
  tViewer3D* n = new tViewer3D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tViewer3D::Clear() {
// @@protoc_insertion_point(message_clear_start:xnormal.tViewer3D)
  if (GetArenaNoVirtual() == NULL && lightambientcolor_ != NULL) {
    delete lightambientcolor_;
  }
  lightambientcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && lightdiffusecolor_ != NULL) {
    delete lightdiffusecolor_;
  }
  lightdiffusecolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && lightspecularcolor_ != NULL) {
    delete lightspecularcolor_;
  }
  lightspecularcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && lightsecondarycolor_ != NULL) {
    delete lightsecondarycolor_;
  }
  lightsecondarycolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && lighttertiarycolor_ != NULL) {
    delete lighttertiarycolor_;
  }
  lighttertiarycolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && backgroundcolor_ != NULL) {
    delete backgroundcolor_;
  }
  backgroundcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && gridcolor_ != NULL) {
    delete gridcolor_;
  }
  gridcolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && cagecolor_ != NULL) {
    delete cagecolor_;
  }
  cagecolor_ = NULL;
  if (GetArenaNoVirtual() == NULL && camerarotation_ != NULL) {
    delete camerarotation_;
  }
  camerarotation_ = NULL;
  if (GetArenaNoVirtual() == NULL && cameraposition_ != NULL) {
    delete cameraposition_;
  }
  cameraposition_ = NULL;
  if (GetArenaNoVirtual() == NULL && lightposition_ != NULL) {
    delete lightposition_;
  }
  lightposition_ = NULL;
  ::memset(&axisscl_, 0, reinterpret_cast<char*>(&glowintensity_) -
    reinterpret_cast<char*>(&axisscl_) + sizeof(glowintensity_));
}

bool tViewer3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xnormal.tViewer3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xnormal.tRGB8 LightAmbientColor = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lightambientcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 LightDiffuseColor = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lightdiffusecolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 LightSpecularColor = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lightspecularcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 LightSecondaryColor = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lightsecondarycolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 LightTertiaryColor = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lighttertiarycolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 BackgroundColor = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backgroundcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 GridColor = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gridcolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tRGB8 CageColor = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cagecolor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tMatrix CameraRotation = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camerarotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tVector3 CameraPosition = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cameraposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tVector3 LightPosition = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lightposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float AxisScl = 12;
      case 12: {
        if (tag == 101u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &axisscl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool XemakosExample = 13;
      case 13: {
        if (tag == 104u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xemakosexample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ShowWireframe = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showwireframe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float CageOpacity = 15;
      case 15: {
        if (tag == 125u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cageopacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float DiffuseGIIntensity = 16;
      case 16: {
        if (tag == 133u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &diffusegiintensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ShowAO = 17;
      case 17: {
        if (tag == 136u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showao_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float SSAOContrast = 18;
      case 18: {
        if (tag == 149u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ssaocontrast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ShadowArea = 19;
      case 19: {
        if (tag == 157u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shadowarea_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float LightIndiretIntensity = 20;
      case 20: {
        if (tag == 165u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lightindiretintensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ShowHighpolys = 21;
      case 21: {
        if (tag == 168u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showhighpolys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ShowStarfield = 22;
      case 22: {
        if (tag == 176u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showstarfield_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ShowBlockers = 23;
      case 23: {
        if (tag == 184u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showblockers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float HDRThreshold = 24;
      case 24: {
        if (tag == 197u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hdrthreshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float SSAOBright = 25;
      case 25: {
        if (tag == 205u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ssaobright_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float SSAOBlurRadius = 26;
      case 26: {
        if (tag == 213u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ssaoblurradius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ShowGrid = 27;
      case 27: {
        if (tag == 216u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showgrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ParallaxStrength = 28;
      case 28: {
        if (tag == 229u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &parallaxstrength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float SSAOAtten = 29;
      case 29: {
        if (tag == 237u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ssaoatten_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float CameraOrbitDistance = 30;
      case 30: {
        if (tag == 245u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cameraorbitdistance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool UseGlow = 31;
      case 31: {
        if (tag == 248u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useglow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool SSAOEnabled = 32;
      case 32: {
        if (tag == 256u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ssaoenabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ShadowBias = 33;
      case 33: {
        if (tag == 269u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shadowbias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float SSAORadius = 34;
      case 34: {
        if (tag == 277u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ssaoradius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float LightIntensity = 35;
      case 35: {
        if (tag == 285u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lightintensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float Exposure = 36;
      case 36: {
        if (tag == 293u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exposure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool CameraOrbitAutoCenter = 37;
      case 37: {
        if (tag == 296u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cameraorbitautocenter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool CastShadows = 38;
      case 38: {
        if (tag == 304u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &castshadows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ShowNormals = 39;
      case 39: {
        if (tag == 312u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shownormals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 MaxTessellationLevel = 40;
      case 40: {
        if (tag == 320u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxtessellationlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ShowTangents = 41;
      case 41: {
        if (tag == 328u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showtangents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float GlowIntensity = 42;
      case 42: {
        if (tag == 341u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &glowintensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xnormal.tViewer3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xnormal.tViewer3D)
  return false;
#undef DO_
}

void tViewer3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xnormal.tViewer3D)
  // .xnormal.tRGB8 LightAmbientColor = 1;
  if (this->has_lightambientcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->lightambientcolor_, output);
  }

  // .xnormal.tRGB8 LightDiffuseColor = 2;
  if (this->has_lightdiffusecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lightdiffusecolor_, output);
  }

  // .xnormal.tRGB8 LightSpecularColor = 3;
  if (this->has_lightspecularcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->lightspecularcolor_, output);
  }

  // .xnormal.tRGB8 LightSecondaryColor = 4;
  if (this->has_lightsecondarycolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->lightsecondarycolor_, output);
  }

  // .xnormal.tRGB8 LightTertiaryColor = 5;
  if (this->has_lighttertiarycolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->lighttertiarycolor_, output);
  }

  // .xnormal.tRGB8 BackgroundColor = 6;
  if (this->has_backgroundcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->backgroundcolor_, output);
  }

  // .xnormal.tRGB8 GridColor = 7;
  if (this->has_gridcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->gridcolor_, output);
  }

  // .xnormal.tRGB8 CageColor = 8;
  if (this->has_cagecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->cagecolor_, output);
  }

  // .xnormal.tMatrix CameraRotation = 9;
  if (this->has_camerarotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->camerarotation_, output);
  }

  // .xnormal.tVector3 CameraPosition = 10;
  if (this->has_cameraposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->cameraposition_, output);
  }

  // .xnormal.tVector3 LightPosition = 11;
  if (this->has_lightposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->lightposition_, output);
  }

  // float AxisScl = 12;
  if (this->axisscl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->axisscl(), output);
  }

  // bool XemakosExample = 13;
  if (this->xemakosexample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->xemakosexample(), output);
  }

  // bool ShowWireframe = 14;
  if (this->showwireframe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->showwireframe(), output);
  }

  // float CageOpacity = 15;
  if (this->cageopacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->cageopacity(), output);
  }

  // float DiffuseGIIntensity = 16;
  if (this->diffusegiintensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->diffusegiintensity(), output);
  }

  // bool ShowAO = 17;
  if (this->showao() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->showao(), output);
  }

  // float SSAOContrast = 18;
  if (this->ssaocontrast() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->ssaocontrast(), output);
  }

  // float ShadowArea = 19;
  if (this->shadowarea() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->shadowarea(), output);
  }

  // float LightIndiretIntensity = 20;
  if (this->lightindiretintensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->lightindiretintensity(), output);
  }

  // bool ShowHighpolys = 21;
  if (this->showhighpolys() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->showhighpolys(), output);
  }

  // bool ShowStarfield = 22;
  if (this->showstarfield() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->showstarfield(), output);
  }

  // bool ShowBlockers = 23;
  if (this->showblockers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->showblockers(), output);
  }

  // float HDRThreshold = 24;
  if (this->hdrthreshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->hdrthreshold(), output);
  }

  // float SSAOBright = 25;
  if (this->ssaobright() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->ssaobright(), output);
  }

  // float SSAOBlurRadius = 26;
  if (this->ssaoblurradius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->ssaoblurradius(), output);
  }

  // bool ShowGrid = 27;
  if (this->showgrid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->showgrid(), output);
  }

  // float ParallaxStrength = 28;
  if (this->parallaxstrength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->parallaxstrength(), output);
  }

  // float SSAOAtten = 29;
  if (this->ssaoatten() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->ssaoatten(), output);
  }

  // float CameraOrbitDistance = 30;
  if (this->cameraorbitdistance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->cameraorbitdistance(), output);
  }

  // bool UseGlow = 31;
  if (this->useglow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->useglow(), output);
  }

  // bool SSAOEnabled = 32;
  if (this->ssaoenabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->ssaoenabled(), output);
  }

  // float ShadowBias = 33;
  if (this->shadowbias() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->shadowbias(), output);
  }

  // float SSAORadius = 34;
  if (this->ssaoradius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->ssaoradius(), output);
  }

  // float LightIntensity = 35;
  if (this->lightintensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(35, this->lightintensity(), output);
  }

  // float Exposure = 36;
  if (this->exposure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->exposure(), output);
  }

  // bool CameraOrbitAutoCenter = 37;
  if (this->cameraorbitautocenter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->cameraorbitautocenter(), output);
  }

  // bool CastShadows = 38;
  if (this->castshadows() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->castshadows(), output);
  }

  // bool ShowNormals = 39;
  if (this->shownormals() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->shownormals(), output);
  }

  // int64 MaxTessellationLevel = 40;
  if (this->maxtessellationlevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->maxtessellationlevel(), output);
  }

  // bool ShowTangents = 41;
  if (this->showtangents() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->showtangents(), output);
  }

  // float GlowIntensity = 42;
  if (this->glowintensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->glowintensity(), output);
  }

  // @@protoc_insertion_point(serialize_end:xnormal.tViewer3D)
}

::google::protobuf::uint8* tViewer3D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xnormal.tViewer3D)
  // .xnormal.tRGB8 LightAmbientColor = 1;
  if (this->has_lightambientcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->lightambientcolor_, false, target);
  }

  // .xnormal.tRGB8 LightDiffuseColor = 2;
  if (this->has_lightdiffusecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->lightdiffusecolor_, false, target);
  }

  // .xnormal.tRGB8 LightSpecularColor = 3;
  if (this->has_lightspecularcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->lightspecularcolor_, false, target);
  }

  // .xnormal.tRGB8 LightSecondaryColor = 4;
  if (this->has_lightsecondarycolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->lightsecondarycolor_, false, target);
  }

  // .xnormal.tRGB8 LightTertiaryColor = 5;
  if (this->has_lighttertiarycolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->lighttertiarycolor_, false, target);
  }

  // .xnormal.tRGB8 BackgroundColor = 6;
  if (this->has_backgroundcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->backgroundcolor_, false, target);
  }

  // .xnormal.tRGB8 GridColor = 7;
  if (this->has_gridcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->gridcolor_, false, target);
  }

  // .xnormal.tRGB8 CageColor = 8;
  if (this->has_cagecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->cagecolor_, false, target);
  }

  // .xnormal.tMatrix CameraRotation = 9;
  if (this->has_camerarotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->camerarotation_, false, target);
  }

  // .xnormal.tVector3 CameraPosition = 10;
  if (this->has_cameraposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->cameraposition_, false, target);
  }

  // .xnormal.tVector3 LightPosition = 11;
  if (this->has_lightposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->lightposition_, false, target);
  }

  // float AxisScl = 12;
  if (this->axisscl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->axisscl(), target);
  }

  // bool XemakosExample = 13;
  if (this->xemakosexample() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->xemakosexample(), target);
  }

  // bool ShowWireframe = 14;
  if (this->showwireframe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->showwireframe(), target);
  }

  // float CageOpacity = 15;
  if (this->cageopacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->cageopacity(), target);
  }

  // float DiffuseGIIntensity = 16;
  if (this->diffusegiintensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->diffusegiintensity(), target);
  }

  // bool ShowAO = 17;
  if (this->showao() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->showao(), target);
  }

  // float SSAOContrast = 18;
  if (this->ssaocontrast() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->ssaocontrast(), target);
  }

  // float ShadowArea = 19;
  if (this->shadowarea() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->shadowarea(), target);
  }

  // float LightIndiretIntensity = 20;
  if (this->lightindiretintensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->lightindiretintensity(), target);
  }

  // bool ShowHighpolys = 21;
  if (this->showhighpolys() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->showhighpolys(), target);
  }

  // bool ShowStarfield = 22;
  if (this->showstarfield() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->showstarfield(), target);
  }

  // bool ShowBlockers = 23;
  if (this->showblockers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->showblockers(), target);
  }

  // float HDRThreshold = 24;
  if (this->hdrthreshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->hdrthreshold(), target);
  }

  // float SSAOBright = 25;
  if (this->ssaobright() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->ssaobright(), target);
  }

  // float SSAOBlurRadius = 26;
  if (this->ssaoblurradius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->ssaoblurradius(), target);
  }

  // bool ShowGrid = 27;
  if (this->showgrid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->showgrid(), target);
  }

  // float ParallaxStrength = 28;
  if (this->parallaxstrength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->parallaxstrength(), target);
  }

  // float SSAOAtten = 29;
  if (this->ssaoatten() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->ssaoatten(), target);
  }

  // float CameraOrbitDistance = 30;
  if (this->cameraorbitdistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->cameraorbitdistance(), target);
  }

  // bool UseGlow = 31;
  if (this->useglow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->useglow(), target);
  }

  // bool SSAOEnabled = 32;
  if (this->ssaoenabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->ssaoenabled(), target);
  }

  // float ShadowBias = 33;
  if (this->shadowbias() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->shadowbias(), target);
  }

  // float SSAORadius = 34;
  if (this->ssaoradius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->ssaoradius(), target);
  }

  // float LightIntensity = 35;
  if (this->lightintensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(35, this->lightintensity(), target);
  }

  // float Exposure = 36;
  if (this->exposure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->exposure(), target);
  }

  // bool CameraOrbitAutoCenter = 37;
  if (this->cameraorbitautocenter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->cameraorbitautocenter(), target);
  }

  // bool CastShadows = 38;
  if (this->castshadows() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->castshadows(), target);
  }

  // bool ShowNormals = 39;
  if (this->shownormals() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->shownormals(), target);
  }

  // int64 MaxTessellationLevel = 40;
  if (this->maxtessellationlevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->maxtessellationlevel(), target);
  }

  // bool ShowTangents = 41;
  if (this->showtangents() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->showtangents(), target);
  }

  // float GlowIntensity = 42;
  if (this->glowintensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->glowintensity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xnormal.tViewer3D)
  return target;
}

size_t tViewer3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xnormal.tViewer3D)
  size_t total_size = 0;

  // .xnormal.tRGB8 LightAmbientColor = 1;
  if (this->has_lightambientcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lightambientcolor_);
  }

  // .xnormal.tRGB8 LightDiffuseColor = 2;
  if (this->has_lightdiffusecolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lightdiffusecolor_);
  }

  // .xnormal.tRGB8 LightSpecularColor = 3;
  if (this->has_lightspecularcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lightspecularcolor_);
  }

  // .xnormal.tRGB8 LightSecondaryColor = 4;
  if (this->has_lightsecondarycolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lightsecondarycolor_);
  }

  // .xnormal.tRGB8 LightTertiaryColor = 5;
  if (this->has_lighttertiarycolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lighttertiarycolor_);
  }

  // .xnormal.tRGB8 BackgroundColor = 6;
  if (this->has_backgroundcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->backgroundcolor_);
  }

  // .xnormal.tRGB8 GridColor = 7;
  if (this->has_gridcolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gridcolor_);
  }

  // .xnormal.tRGB8 CageColor = 8;
  if (this->has_cagecolor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cagecolor_);
  }

  // .xnormal.tMatrix CameraRotation = 9;
  if (this->has_camerarotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->camerarotation_);
  }

  // .xnormal.tVector3 CameraPosition = 10;
  if (this->has_cameraposition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cameraposition_);
  }

  // .xnormal.tVector3 LightPosition = 11;
  if (this->has_lightposition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lightposition_);
  }

  // float AxisScl = 12;
  if (this->axisscl() != 0) {
    total_size += 1 + 4;
  }

  // float CageOpacity = 15;
  if (this->cageopacity() != 0) {
    total_size += 1 + 4;
  }

  // float DiffuseGIIntensity = 16;
  if (this->diffusegiintensity() != 0) {
    total_size += 2 + 4;
  }

  // bool XemakosExample = 13;
  if (this->xemakosexample() != 0) {
    total_size += 1 + 1;
  }

  // bool ShowWireframe = 14;
  if (this->showwireframe() != 0) {
    total_size += 1 + 1;
  }

  // bool ShowAO = 17;
  if (this->showao() != 0) {
    total_size += 2 + 1;
  }

  // bool ShowHighpolys = 21;
  if (this->showhighpolys() != 0) {
    total_size += 2 + 1;
  }

  // float SSAOContrast = 18;
  if (this->ssaocontrast() != 0) {
    total_size += 2 + 4;
  }

  // float ShadowArea = 19;
  if (this->shadowarea() != 0) {
    total_size += 2 + 4;
  }

  // float LightIndiretIntensity = 20;
  if (this->lightindiretintensity() != 0) {
    total_size += 2 + 4;
  }

  // float HDRThreshold = 24;
  if (this->hdrthreshold() != 0) {
    total_size += 2 + 4;
  }

  // float SSAOBright = 25;
  if (this->ssaobright() != 0) {
    total_size += 2 + 4;
  }

  // bool ShowStarfield = 22;
  if (this->showstarfield() != 0) {
    total_size += 2 + 1;
  }

  // bool ShowBlockers = 23;
  if (this->showblockers() != 0) {
    total_size += 2 + 1;
  }

  // bool ShowGrid = 27;
  if (this->showgrid() != 0) {
    total_size += 2 + 1;
  }

  // bool UseGlow = 31;
  if (this->useglow() != 0) {
    total_size += 2 + 1;
  }

  // float SSAOBlurRadius = 26;
  if (this->ssaoblurradius() != 0) {
    total_size += 2 + 4;
  }

  // float ParallaxStrength = 28;
  if (this->parallaxstrength() != 0) {
    total_size += 2 + 4;
  }

  // float SSAOAtten = 29;
  if (this->ssaoatten() != 0) {
    total_size += 2 + 4;
  }

  // float CameraOrbitDistance = 30;
  if (this->cameraorbitdistance() != 0) {
    total_size += 2 + 4;
  }

  // float ShadowBias = 33;
  if (this->shadowbias() != 0) {
    total_size += 2 + 4;
  }

  // float SSAORadius = 34;
  if (this->ssaoradius() != 0) {
    total_size += 2 + 4;
  }

  // float LightIntensity = 35;
  if (this->lightintensity() != 0) {
    total_size += 2 + 4;
  }

  // float Exposure = 36;
  if (this->exposure() != 0) {
    total_size += 2 + 4;
  }

  // bool SSAOEnabled = 32;
  if (this->ssaoenabled() != 0) {
    total_size += 2 + 1;
  }

  // bool CameraOrbitAutoCenter = 37;
  if (this->cameraorbitautocenter() != 0) {
    total_size += 2 + 1;
  }

  // bool CastShadows = 38;
  if (this->castshadows() != 0) {
    total_size += 2 + 1;
  }

  // bool ShowNormals = 39;
  if (this->shownormals() != 0) {
    total_size += 2 + 1;
  }

  // bool ShowTangents = 41;
  if (this->showtangents() != 0) {
    total_size += 2 + 1;
  }

  // int64 MaxTessellationLevel = 40;
  if (this->maxtessellationlevel() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->maxtessellationlevel());
  }

  // float GlowIntensity = 42;
  if (this->glowintensity() != 0) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tViewer3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xnormal.tViewer3D)
  GOOGLE_DCHECK_NE(&from, this);
  const tViewer3D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tViewer3D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xnormal.tViewer3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xnormal.tViewer3D)
    MergeFrom(*source);
  }
}

void tViewer3D::MergeFrom(const tViewer3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xnormal.tViewer3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lightambientcolor()) {
    mutable_lightambientcolor()->::xnormal::tRGB8::MergeFrom(from.lightambientcolor());
  }
  if (from.has_lightdiffusecolor()) {
    mutable_lightdiffusecolor()->::xnormal::tRGB8::MergeFrom(from.lightdiffusecolor());
  }
  if (from.has_lightspecularcolor()) {
    mutable_lightspecularcolor()->::xnormal::tRGB8::MergeFrom(from.lightspecularcolor());
  }
  if (from.has_lightsecondarycolor()) {
    mutable_lightsecondarycolor()->::xnormal::tRGB8::MergeFrom(from.lightsecondarycolor());
  }
  if (from.has_lighttertiarycolor()) {
    mutable_lighttertiarycolor()->::xnormal::tRGB8::MergeFrom(from.lighttertiarycolor());
  }
  if (from.has_backgroundcolor()) {
    mutable_backgroundcolor()->::xnormal::tRGB8::MergeFrom(from.backgroundcolor());
  }
  if (from.has_gridcolor()) {
    mutable_gridcolor()->::xnormal::tRGB8::MergeFrom(from.gridcolor());
  }
  if (from.has_cagecolor()) {
    mutable_cagecolor()->::xnormal::tRGB8::MergeFrom(from.cagecolor());
  }
  if (from.has_camerarotation()) {
    mutable_camerarotation()->::xnormal::tMatrix::MergeFrom(from.camerarotation());
  }
  if (from.has_cameraposition()) {
    mutable_cameraposition()->::xnormal::tVector3::MergeFrom(from.cameraposition());
  }
  if (from.has_lightposition()) {
    mutable_lightposition()->::xnormal::tVector3::MergeFrom(from.lightposition());
  }
  if (from.axisscl() != 0) {
    set_axisscl(from.axisscl());
  }
  if (from.cageopacity() != 0) {
    set_cageopacity(from.cageopacity());
  }
  if (from.diffusegiintensity() != 0) {
    set_diffusegiintensity(from.diffusegiintensity());
  }
  if (from.xemakosexample() != 0) {
    set_xemakosexample(from.xemakosexample());
  }
  if (from.showwireframe() != 0) {
    set_showwireframe(from.showwireframe());
  }
  if (from.showao() != 0) {
    set_showao(from.showao());
  }
  if (from.showhighpolys() != 0) {
    set_showhighpolys(from.showhighpolys());
  }
  if (from.ssaocontrast() != 0) {
    set_ssaocontrast(from.ssaocontrast());
  }
  if (from.shadowarea() != 0) {
    set_shadowarea(from.shadowarea());
  }
  if (from.lightindiretintensity() != 0) {
    set_lightindiretintensity(from.lightindiretintensity());
  }
  if (from.hdrthreshold() != 0) {
    set_hdrthreshold(from.hdrthreshold());
  }
  if (from.ssaobright() != 0) {
    set_ssaobright(from.ssaobright());
  }
  if (from.showstarfield() != 0) {
    set_showstarfield(from.showstarfield());
  }
  if (from.showblockers() != 0) {
    set_showblockers(from.showblockers());
  }
  if (from.showgrid() != 0) {
    set_showgrid(from.showgrid());
  }
  if (from.useglow() != 0) {
    set_useglow(from.useglow());
  }
  if (from.ssaoblurradius() != 0) {
    set_ssaoblurradius(from.ssaoblurradius());
  }
  if (from.parallaxstrength() != 0) {
    set_parallaxstrength(from.parallaxstrength());
  }
  if (from.ssaoatten() != 0) {
    set_ssaoatten(from.ssaoatten());
  }
  if (from.cameraorbitdistance() != 0) {
    set_cameraorbitdistance(from.cameraorbitdistance());
  }
  if (from.shadowbias() != 0) {
    set_shadowbias(from.shadowbias());
  }
  if (from.ssaoradius() != 0) {
    set_ssaoradius(from.ssaoradius());
  }
  if (from.lightintensity() != 0) {
    set_lightintensity(from.lightintensity());
  }
  if (from.exposure() != 0) {
    set_exposure(from.exposure());
  }
  if (from.ssaoenabled() != 0) {
    set_ssaoenabled(from.ssaoenabled());
  }
  if (from.cameraorbitautocenter() != 0) {
    set_cameraorbitautocenter(from.cameraorbitautocenter());
  }
  if (from.castshadows() != 0) {
    set_castshadows(from.castshadows());
  }
  if (from.shownormals() != 0) {
    set_shownormals(from.shownormals());
  }
  if (from.showtangents() != 0) {
    set_showtangents(from.showtangents());
  }
  if (from.maxtessellationlevel() != 0) {
    set_maxtessellationlevel(from.maxtessellationlevel());
  }
  if (from.glowintensity() != 0) {
    set_glowintensity(from.glowintensity());
  }
}

void tViewer3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xnormal.tViewer3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tViewer3D::CopyFrom(const tViewer3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xnormal.tViewer3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tViewer3D::IsInitialized() const {
  return true;
}

void tViewer3D::Swap(tViewer3D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tViewer3D::InternalSwap(tViewer3D* other) {
  std::swap(lightambientcolor_, other->lightambientcolor_);
  std::swap(lightdiffusecolor_, other->lightdiffusecolor_);
  std::swap(lightspecularcolor_, other->lightspecularcolor_);
  std::swap(lightsecondarycolor_, other->lightsecondarycolor_);
  std::swap(lighttertiarycolor_, other->lighttertiarycolor_);
  std::swap(backgroundcolor_, other->backgroundcolor_);
  std::swap(gridcolor_, other->gridcolor_);
  std::swap(cagecolor_, other->cagecolor_);
  std::swap(camerarotation_, other->camerarotation_);
  std::swap(cameraposition_, other->cameraposition_);
  std::swap(lightposition_, other->lightposition_);
  std::swap(axisscl_, other->axisscl_);
  std::swap(cageopacity_, other->cageopacity_);
  std::swap(diffusegiintensity_, other->diffusegiintensity_);
  std::swap(xemakosexample_, other->xemakosexample_);
  std::swap(showwireframe_, other->showwireframe_);
  std::swap(showao_, other->showao_);
  std::swap(showhighpolys_, other->showhighpolys_);
  std::swap(ssaocontrast_, other->ssaocontrast_);
  std::swap(shadowarea_, other->shadowarea_);
  std::swap(lightindiretintensity_, other->lightindiretintensity_);
  std::swap(hdrthreshold_, other->hdrthreshold_);
  std::swap(ssaobright_, other->ssaobright_);
  std::swap(showstarfield_, other->showstarfield_);
  std::swap(showblockers_, other->showblockers_);
  std::swap(showgrid_, other->showgrid_);
  std::swap(useglow_, other->useglow_);
  std::swap(ssaoblurradius_, other->ssaoblurradius_);
  std::swap(parallaxstrength_, other->parallaxstrength_);
  std::swap(ssaoatten_, other->ssaoatten_);
  std::swap(cameraorbitdistance_, other->cameraorbitdistance_);
  std::swap(shadowbias_, other->shadowbias_);
  std::swap(ssaoradius_, other->ssaoradius_);
  std::swap(lightintensity_, other->lightintensity_);
  std::swap(exposure_, other->exposure_);
  std::swap(ssaoenabled_, other->ssaoenabled_);
  std::swap(cameraorbitautocenter_, other->cameraorbitautocenter_);
  std::swap(castshadows_, other->castshadows_);
  std::swap(shownormals_, other->shownormals_);
  std::swap(showtangents_, other->showtangents_);
  std::swap(maxtessellationlevel_, other->maxtessellationlevel_);
  std::swap(glowintensity_, other->glowintensity_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tViewer3D::GetMetadata() const {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tViewer3D

// .xnormal.tRGB8 LightAmbientColor = 1;
bool tViewer3D::has_lightambientcolor() const {
  return this != internal_default_instance() && lightambientcolor_ != NULL;
}
void tViewer3D::clear_lightambientcolor() {
  if (GetArenaNoVirtual() == NULL && lightambientcolor_ != NULL) delete lightambientcolor_;
  lightambientcolor_ = NULL;
}
const ::xnormal::tRGB8& tViewer3D::lightambientcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.LightAmbientColor)
  return lightambientcolor_ != NULL ? *lightambientcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tViewer3D::mutable_lightambientcolor() {
  
  if (lightambientcolor_ == NULL) {
    lightambientcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tViewer3D.LightAmbientColor)
  return lightambientcolor_;
}
::xnormal::tRGB8* tViewer3D::release_lightambientcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tViewer3D.LightAmbientColor)
  
  ::xnormal::tRGB8* temp = lightambientcolor_;
  lightambientcolor_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_lightambientcolor(::xnormal::tRGB8* lightambientcolor) {
  delete lightambientcolor_;
  lightambientcolor_ = lightambientcolor;
  if (lightambientcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tViewer3D.LightAmbientColor)
}

// .xnormal.tRGB8 LightDiffuseColor = 2;
bool tViewer3D::has_lightdiffusecolor() const {
  return this != internal_default_instance() && lightdiffusecolor_ != NULL;
}
void tViewer3D::clear_lightdiffusecolor() {
  if (GetArenaNoVirtual() == NULL && lightdiffusecolor_ != NULL) delete lightdiffusecolor_;
  lightdiffusecolor_ = NULL;
}
const ::xnormal::tRGB8& tViewer3D::lightdiffusecolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.LightDiffuseColor)
  return lightdiffusecolor_ != NULL ? *lightdiffusecolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tViewer3D::mutable_lightdiffusecolor() {
  
  if (lightdiffusecolor_ == NULL) {
    lightdiffusecolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tViewer3D.LightDiffuseColor)
  return lightdiffusecolor_;
}
::xnormal::tRGB8* tViewer3D::release_lightdiffusecolor() {
  // @@protoc_insertion_point(field_release:xnormal.tViewer3D.LightDiffuseColor)
  
  ::xnormal::tRGB8* temp = lightdiffusecolor_;
  lightdiffusecolor_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_lightdiffusecolor(::xnormal::tRGB8* lightdiffusecolor) {
  delete lightdiffusecolor_;
  lightdiffusecolor_ = lightdiffusecolor;
  if (lightdiffusecolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tViewer3D.LightDiffuseColor)
}

// .xnormal.tRGB8 LightSpecularColor = 3;
bool tViewer3D::has_lightspecularcolor() const {
  return this != internal_default_instance() && lightspecularcolor_ != NULL;
}
void tViewer3D::clear_lightspecularcolor() {
  if (GetArenaNoVirtual() == NULL && lightspecularcolor_ != NULL) delete lightspecularcolor_;
  lightspecularcolor_ = NULL;
}
const ::xnormal::tRGB8& tViewer3D::lightspecularcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.LightSpecularColor)
  return lightspecularcolor_ != NULL ? *lightspecularcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tViewer3D::mutable_lightspecularcolor() {
  
  if (lightspecularcolor_ == NULL) {
    lightspecularcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tViewer3D.LightSpecularColor)
  return lightspecularcolor_;
}
::xnormal::tRGB8* tViewer3D::release_lightspecularcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tViewer3D.LightSpecularColor)
  
  ::xnormal::tRGB8* temp = lightspecularcolor_;
  lightspecularcolor_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_lightspecularcolor(::xnormal::tRGB8* lightspecularcolor) {
  delete lightspecularcolor_;
  lightspecularcolor_ = lightspecularcolor;
  if (lightspecularcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tViewer3D.LightSpecularColor)
}

// .xnormal.tRGB8 LightSecondaryColor = 4;
bool tViewer3D::has_lightsecondarycolor() const {
  return this != internal_default_instance() && lightsecondarycolor_ != NULL;
}
void tViewer3D::clear_lightsecondarycolor() {
  if (GetArenaNoVirtual() == NULL && lightsecondarycolor_ != NULL) delete lightsecondarycolor_;
  lightsecondarycolor_ = NULL;
}
const ::xnormal::tRGB8& tViewer3D::lightsecondarycolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.LightSecondaryColor)
  return lightsecondarycolor_ != NULL ? *lightsecondarycolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tViewer3D::mutable_lightsecondarycolor() {
  
  if (lightsecondarycolor_ == NULL) {
    lightsecondarycolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tViewer3D.LightSecondaryColor)
  return lightsecondarycolor_;
}
::xnormal::tRGB8* tViewer3D::release_lightsecondarycolor() {
  // @@protoc_insertion_point(field_release:xnormal.tViewer3D.LightSecondaryColor)
  
  ::xnormal::tRGB8* temp = lightsecondarycolor_;
  lightsecondarycolor_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_lightsecondarycolor(::xnormal::tRGB8* lightsecondarycolor) {
  delete lightsecondarycolor_;
  lightsecondarycolor_ = lightsecondarycolor;
  if (lightsecondarycolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tViewer3D.LightSecondaryColor)
}

// .xnormal.tRGB8 LightTertiaryColor = 5;
bool tViewer3D::has_lighttertiarycolor() const {
  return this != internal_default_instance() && lighttertiarycolor_ != NULL;
}
void tViewer3D::clear_lighttertiarycolor() {
  if (GetArenaNoVirtual() == NULL && lighttertiarycolor_ != NULL) delete lighttertiarycolor_;
  lighttertiarycolor_ = NULL;
}
const ::xnormal::tRGB8& tViewer3D::lighttertiarycolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.LightTertiaryColor)
  return lighttertiarycolor_ != NULL ? *lighttertiarycolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tViewer3D::mutable_lighttertiarycolor() {
  
  if (lighttertiarycolor_ == NULL) {
    lighttertiarycolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tViewer3D.LightTertiaryColor)
  return lighttertiarycolor_;
}
::xnormal::tRGB8* tViewer3D::release_lighttertiarycolor() {
  // @@protoc_insertion_point(field_release:xnormal.tViewer3D.LightTertiaryColor)
  
  ::xnormal::tRGB8* temp = lighttertiarycolor_;
  lighttertiarycolor_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_lighttertiarycolor(::xnormal::tRGB8* lighttertiarycolor) {
  delete lighttertiarycolor_;
  lighttertiarycolor_ = lighttertiarycolor;
  if (lighttertiarycolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tViewer3D.LightTertiaryColor)
}

// .xnormal.tRGB8 BackgroundColor = 6;
bool tViewer3D::has_backgroundcolor() const {
  return this != internal_default_instance() && backgroundcolor_ != NULL;
}
void tViewer3D::clear_backgroundcolor() {
  if (GetArenaNoVirtual() == NULL && backgroundcolor_ != NULL) delete backgroundcolor_;
  backgroundcolor_ = NULL;
}
const ::xnormal::tRGB8& tViewer3D::backgroundcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.BackgroundColor)
  return backgroundcolor_ != NULL ? *backgroundcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tViewer3D::mutable_backgroundcolor() {
  
  if (backgroundcolor_ == NULL) {
    backgroundcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tViewer3D.BackgroundColor)
  return backgroundcolor_;
}
::xnormal::tRGB8* tViewer3D::release_backgroundcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tViewer3D.BackgroundColor)
  
  ::xnormal::tRGB8* temp = backgroundcolor_;
  backgroundcolor_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_backgroundcolor(::xnormal::tRGB8* backgroundcolor) {
  delete backgroundcolor_;
  backgroundcolor_ = backgroundcolor;
  if (backgroundcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tViewer3D.BackgroundColor)
}

// .xnormal.tRGB8 GridColor = 7;
bool tViewer3D::has_gridcolor() const {
  return this != internal_default_instance() && gridcolor_ != NULL;
}
void tViewer3D::clear_gridcolor() {
  if (GetArenaNoVirtual() == NULL && gridcolor_ != NULL) delete gridcolor_;
  gridcolor_ = NULL;
}
const ::xnormal::tRGB8& tViewer3D::gridcolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.GridColor)
  return gridcolor_ != NULL ? *gridcolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tViewer3D::mutable_gridcolor() {
  
  if (gridcolor_ == NULL) {
    gridcolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tViewer3D.GridColor)
  return gridcolor_;
}
::xnormal::tRGB8* tViewer3D::release_gridcolor() {
  // @@protoc_insertion_point(field_release:xnormal.tViewer3D.GridColor)
  
  ::xnormal::tRGB8* temp = gridcolor_;
  gridcolor_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_gridcolor(::xnormal::tRGB8* gridcolor) {
  delete gridcolor_;
  gridcolor_ = gridcolor;
  if (gridcolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tViewer3D.GridColor)
}

// .xnormal.tRGB8 CageColor = 8;
bool tViewer3D::has_cagecolor() const {
  return this != internal_default_instance() && cagecolor_ != NULL;
}
void tViewer3D::clear_cagecolor() {
  if (GetArenaNoVirtual() == NULL && cagecolor_ != NULL) delete cagecolor_;
  cagecolor_ = NULL;
}
const ::xnormal::tRGB8& tViewer3D::cagecolor() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.CageColor)
  return cagecolor_ != NULL ? *cagecolor_
                         : *::xnormal::tRGB8::internal_default_instance();
}
::xnormal::tRGB8* tViewer3D::mutable_cagecolor() {
  
  if (cagecolor_ == NULL) {
    cagecolor_ = new ::xnormal::tRGB8;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tViewer3D.CageColor)
  return cagecolor_;
}
::xnormal::tRGB8* tViewer3D::release_cagecolor() {
  // @@protoc_insertion_point(field_release:xnormal.tViewer3D.CageColor)
  
  ::xnormal::tRGB8* temp = cagecolor_;
  cagecolor_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_cagecolor(::xnormal::tRGB8* cagecolor) {
  delete cagecolor_;
  cagecolor_ = cagecolor;
  if (cagecolor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tViewer3D.CageColor)
}

// .xnormal.tMatrix CameraRotation = 9;
bool tViewer3D::has_camerarotation() const {
  return this != internal_default_instance() && camerarotation_ != NULL;
}
void tViewer3D::clear_camerarotation() {
  if (GetArenaNoVirtual() == NULL && camerarotation_ != NULL) delete camerarotation_;
  camerarotation_ = NULL;
}
const ::xnormal::tMatrix& tViewer3D::camerarotation() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.CameraRotation)
  return camerarotation_ != NULL ? *camerarotation_
                         : *::xnormal::tMatrix::internal_default_instance();
}
::xnormal::tMatrix* tViewer3D::mutable_camerarotation() {
  
  if (camerarotation_ == NULL) {
    camerarotation_ = new ::xnormal::tMatrix;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tViewer3D.CameraRotation)
  return camerarotation_;
}
::xnormal::tMatrix* tViewer3D::release_camerarotation() {
  // @@protoc_insertion_point(field_release:xnormal.tViewer3D.CameraRotation)
  
  ::xnormal::tMatrix* temp = camerarotation_;
  camerarotation_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_camerarotation(::xnormal::tMatrix* camerarotation) {
  delete camerarotation_;
  camerarotation_ = camerarotation;
  if (camerarotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tViewer3D.CameraRotation)
}

// .xnormal.tVector3 CameraPosition = 10;
bool tViewer3D::has_cameraposition() const {
  return this != internal_default_instance() && cameraposition_ != NULL;
}
void tViewer3D::clear_cameraposition() {
  if (GetArenaNoVirtual() == NULL && cameraposition_ != NULL) delete cameraposition_;
  cameraposition_ = NULL;
}
const ::xnormal::tVector3& tViewer3D::cameraposition() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.CameraPosition)
  return cameraposition_ != NULL ? *cameraposition_
                         : *::xnormal::tVector3::internal_default_instance();
}
::xnormal::tVector3* tViewer3D::mutable_cameraposition() {
  
  if (cameraposition_ == NULL) {
    cameraposition_ = new ::xnormal::tVector3;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tViewer3D.CameraPosition)
  return cameraposition_;
}
::xnormal::tVector3* tViewer3D::release_cameraposition() {
  // @@protoc_insertion_point(field_release:xnormal.tViewer3D.CameraPosition)
  
  ::xnormal::tVector3* temp = cameraposition_;
  cameraposition_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_cameraposition(::xnormal::tVector3* cameraposition) {
  delete cameraposition_;
  cameraposition_ = cameraposition;
  if (cameraposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tViewer3D.CameraPosition)
}

// .xnormal.tVector3 LightPosition = 11;
bool tViewer3D::has_lightposition() const {
  return this != internal_default_instance() && lightposition_ != NULL;
}
void tViewer3D::clear_lightposition() {
  if (GetArenaNoVirtual() == NULL && lightposition_ != NULL) delete lightposition_;
  lightposition_ = NULL;
}
const ::xnormal::tVector3& tViewer3D::lightposition() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.LightPosition)
  return lightposition_ != NULL ? *lightposition_
                         : *::xnormal::tVector3::internal_default_instance();
}
::xnormal::tVector3* tViewer3D::mutable_lightposition() {
  
  if (lightposition_ == NULL) {
    lightposition_ = new ::xnormal::tVector3;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.tViewer3D.LightPosition)
  return lightposition_;
}
::xnormal::tVector3* tViewer3D::release_lightposition() {
  // @@protoc_insertion_point(field_release:xnormal.tViewer3D.LightPosition)
  
  ::xnormal::tVector3* temp = lightposition_;
  lightposition_ = NULL;
  return temp;
}
void tViewer3D::set_allocated_lightposition(::xnormal::tVector3* lightposition) {
  delete lightposition_;
  lightposition_ = lightposition;
  if (lightposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.tViewer3D.LightPosition)
}

// float AxisScl = 12;
void tViewer3D::clear_axisscl() {
  axisscl_ = 0;
}
float tViewer3D::axisscl() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.AxisScl)
  return axisscl_;
}
void tViewer3D::set_axisscl(float value) {
  
  axisscl_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.AxisScl)
}

// bool XemakosExample = 13;
void tViewer3D::clear_xemakosexample() {
  xemakosexample_ = false;
}
bool tViewer3D::xemakosexample() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.XemakosExample)
  return xemakosexample_;
}
void tViewer3D::set_xemakosexample(bool value) {
  
  xemakosexample_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.XemakosExample)
}

// bool ShowWireframe = 14;
void tViewer3D::clear_showwireframe() {
  showwireframe_ = false;
}
bool tViewer3D::showwireframe() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.ShowWireframe)
  return showwireframe_;
}
void tViewer3D::set_showwireframe(bool value) {
  
  showwireframe_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.ShowWireframe)
}

// float CageOpacity = 15;
void tViewer3D::clear_cageopacity() {
  cageopacity_ = 0;
}
float tViewer3D::cageopacity() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.CageOpacity)
  return cageopacity_;
}
void tViewer3D::set_cageopacity(float value) {
  
  cageopacity_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.CageOpacity)
}

// float DiffuseGIIntensity = 16;
void tViewer3D::clear_diffusegiintensity() {
  diffusegiintensity_ = 0;
}
float tViewer3D::diffusegiintensity() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.DiffuseGIIntensity)
  return diffusegiintensity_;
}
void tViewer3D::set_diffusegiintensity(float value) {
  
  diffusegiintensity_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.DiffuseGIIntensity)
}

// bool ShowAO = 17;
void tViewer3D::clear_showao() {
  showao_ = false;
}
bool tViewer3D::showao() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.ShowAO)
  return showao_;
}
void tViewer3D::set_showao(bool value) {
  
  showao_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.ShowAO)
}

// float SSAOContrast = 18;
void tViewer3D::clear_ssaocontrast() {
  ssaocontrast_ = 0;
}
float tViewer3D::ssaocontrast() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.SSAOContrast)
  return ssaocontrast_;
}
void tViewer3D::set_ssaocontrast(float value) {
  
  ssaocontrast_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.SSAOContrast)
}

// float ShadowArea = 19;
void tViewer3D::clear_shadowarea() {
  shadowarea_ = 0;
}
float tViewer3D::shadowarea() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.ShadowArea)
  return shadowarea_;
}
void tViewer3D::set_shadowarea(float value) {
  
  shadowarea_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.ShadowArea)
}

// float LightIndiretIntensity = 20;
void tViewer3D::clear_lightindiretintensity() {
  lightindiretintensity_ = 0;
}
float tViewer3D::lightindiretintensity() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.LightIndiretIntensity)
  return lightindiretintensity_;
}
void tViewer3D::set_lightindiretintensity(float value) {
  
  lightindiretintensity_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.LightIndiretIntensity)
}

// bool ShowHighpolys = 21;
void tViewer3D::clear_showhighpolys() {
  showhighpolys_ = false;
}
bool tViewer3D::showhighpolys() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.ShowHighpolys)
  return showhighpolys_;
}
void tViewer3D::set_showhighpolys(bool value) {
  
  showhighpolys_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.ShowHighpolys)
}

// bool ShowStarfield = 22;
void tViewer3D::clear_showstarfield() {
  showstarfield_ = false;
}
bool tViewer3D::showstarfield() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.ShowStarfield)
  return showstarfield_;
}
void tViewer3D::set_showstarfield(bool value) {
  
  showstarfield_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.ShowStarfield)
}

// bool ShowBlockers = 23;
void tViewer3D::clear_showblockers() {
  showblockers_ = false;
}
bool tViewer3D::showblockers() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.ShowBlockers)
  return showblockers_;
}
void tViewer3D::set_showblockers(bool value) {
  
  showblockers_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.ShowBlockers)
}

// float HDRThreshold = 24;
void tViewer3D::clear_hdrthreshold() {
  hdrthreshold_ = 0;
}
float tViewer3D::hdrthreshold() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.HDRThreshold)
  return hdrthreshold_;
}
void tViewer3D::set_hdrthreshold(float value) {
  
  hdrthreshold_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.HDRThreshold)
}

// float SSAOBright = 25;
void tViewer3D::clear_ssaobright() {
  ssaobright_ = 0;
}
float tViewer3D::ssaobright() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.SSAOBright)
  return ssaobright_;
}
void tViewer3D::set_ssaobright(float value) {
  
  ssaobright_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.SSAOBright)
}

// float SSAOBlurRadius = 26;
void tViewer3D::clear_ssaoblurradius() {
  ssaoblurradius_ = 0;
}
float tViewer3D::ssaoblurradius() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.SSAOBlurRadius)
  return ssaoblurradius_;
}
void tViewer3D::set_ssaoblurradius(float value) {
  
  ssaoblurradius_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.SSAOBlurRadius)
}

// bool ShowGrid = 27;
void tViewer3D::clear_showgrid() {
  showgrid_ = false;
}
bool tViewer3D::showgrid() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.ShowGrid)
  return showgrid_;
}
void tViewer3D::set_showgrid(bool value) {
  
  showgrid_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.ShowGrid)
}

// float ParallaxStrength = 28;
void tViewer3D::clear_parallaxstrength() {
  parallaxstrength_ = 0;
}
float tViewer3D::parallaxstrength() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.ParallaxStrength)
  return parallaxstrength_;
}
void tViewer3D::set_parallaxstrength(float value) {
  
  parallaxstrength_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.ParallaxStrength)
}

// float SSAOAtten = 29;
void tViewer3D::clear_ssaoatten() {
  ssaoatten_ = 0;
}
float tViewer3D::ssaoatten() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.SSAOAtten)
  return ssaoatten_;
}
void tViewer3D::set_ssaoatten(float value) {
  
  ssaoatten_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.SSAOAtten)
}

// float CameraOrbitDistance = 30;
void tViewer3D::clear_cameraorbitdistance() {
  cameraorbitdistance_ = 0;
}
float tViewer3D::cameraorbitdistance() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.CameraOrbitDistance)
  return cameraorbitdistance_;
}
void tViewer3D::set_cameraorbitdistance(float value) {
  
  cameraorbitdistance_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.CameraOrbitDistance)
}

// bool UseGlow = 31;
void tViewer3D::clear_useglow() {
  useglow_ = false;
}
bool tViewer3D::useglow() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.UseGlow)
  return useglow_;
}
void tViewer3D::set_useglow(bool value) {
  
  useglow_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.UseGlow)
}

// bool SSAOEnabled = 32;
void tViewer3D::clear_ssaoenabled() {
  ssaoenabled_ = false;
}
bool tViewer3D::ssaoenabled() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.SSAOEnabled)
  return ssaoenabled_;
}
void tViewer3D::set_ssaoenabled(bool value) {
  
  ssaoenabled_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.SSAOEnabled)
}

// float ShadowBias = 33;
void tViewer3D::clear_shadowbias() {
  shadowbias_ = 0;
}
float tViewer3D::shadowbias() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.ShadowBias)
  return shadowbias_;
}
void tViewer3D::set_shadowbias(float value) {
  
  shadowbias_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.ShadowBias)
}

// float SSAORadius = 34;
void tViewer3D::clear_ssaoradius() {
  ssaoradius_ = 0;
}
float tViewer3D::ssaoradius() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.SSAORadius)
  return ssaoradius_;
}
void tViewer3D::set_ssaoradius(float value) {
  
  ssaoradius_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.SSAORadius)
}

// float LightIntensity = 35;
void tViewer3D::clear_lightintensity() {
  lightintensity_ = 0;
}
float tViewer3D::lightintensity() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.LightIntensity)
  return lightintensity_;
}
void tViewer3D::set_lightintensity(float value) {
  
  lightintensity_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.LightIntensity)
}

// float Exposure = 36;
void tViewer3D::clear_exposure() {
  exposure_ = 0;
}
float tViewer3D::exposure() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.Exposure)
  return exposure_;
}
void tViewer3D::set_exposure(float value) {
  
  exposure_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.Exposure)
}

// bool CameraOrbitAutoCenter = 37;
void tViewer3D::clear_cameraorbitautocenter() {
  cameraorbitautocenter_ = false;
}
bool tViewer3D::cameraorbitautocenter() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.CameraOrbitAutoCenter)
  return cameraorbitautocenter_;
}
void tViewer3D::set_cameraorbitautocenter(bool value) {
  
  cameraorbitautocenter_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.CameraOrbitAutoCenter)
}

// bool CastShadows = 38;
void tViewer3D::clear_castshadows() {
  castshadows_ = false;
}
bool tViewer3D::castshadows() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.CastShadows)
  return castshadows_;
}
void tViewer3D::set_castshadows(bool value) {
  
  castshadows_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.CastShadows)
}

// bool ShowNormals = 39;
void tViewer3D::clear_shownormals() {
  shownormals_ = false;
}
bool tViewer3D::shownormals() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.ShowNormals)
  return shownormals_;
}
void tViewer3D::set_shownormals(bool value) {
  
  shownormals_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.ShowNormals)
}

// int64 MaxTessellationLevel = 40;
void tViewer3D::clear_maxtessellationlevel() {
  maxtessellationlevel_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 tViewer3D::maxtessellationlevel() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.MaxTessellationLevel)
  return maxtessellationlevel_;
}
void tViewer3D::set_maxtessellationlevel(::google::protobuf::int64 value) {
  
  maxtessellationlevel_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.MaxTessellationLevel)
}

// bool ShowTangents = 41;
void tViewer3D::clear_showtangents() {
  showtangents_ = false;
}
bool tViewer3D::showtangents() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.ShowTangents)
  return showtangents_;
}
void tViewer3D::set_showtangents(bool value) {
  
  showtangents_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.ShowTangents)
}

// float GlowIntensity = 42;
void tViewer3D::clear_glowintensity() {
  glowintensity_ = 0;
}
float tViewer3D::glowintensity() const {
  // @@protoc_insertion_point(field_get:xnormal.tViewer3D.GlowIntensity)
  return glowintensity_;
}
void tViewer3D::set_glowintensity(float value) {
  
  glowintensity_ = value;
  // @@protoc_insertion_point(field_set:xnormal.tViewer3D.GlowIntensity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Settings::kHighPolyModelFieldNumber;
const int Settings::kLowPolyModelFieldNumber;
const int Settings::kGenerateMapsFieldNumber;
const int Settings::kDetailFieldNumber;
const int Settings::kViewer3DFieldNumber;
const int Settings::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Settings::Settings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_xnormal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:xnormal.Settings)
}
Settings::Settings(const Settings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_highpolymodel()) {
    highpolymodel_ = new ::xnormal::tHighPolyModel(*from.highpolymodel_);
  } else {
    highpolymodel_ = NULL;
  }
  if (from.has_lowpolymodel()) {
    lowpolymodel_ = new ::xnormal::tLowPolyModel(*from.lowpolymodel_);
  } else {
    lowpolymodel_ = NULL;
  }
  if (from.has_generatemaps()) {
    generatemaps_ = new ::xnormal::tGenerateMaps(*from.generatemaps_);
  } else {
    generatemaps_ = NULL;
  }
  if (from.has_detail()) {
    detail_ = new ::xnormal::tDetail(*from.detail_);
  } else {
    detail_ = NULL;
  }
  if (from.has_viewer3d()) {
    viewer3d_ = new ::xnormal::tViewer3D(*from.viewer3d_);
  } else {
    viewer3d_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:xnormal.Settings)
}

void Settings::SharedCtor() {
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&highpolymodel_, 0, reinterpret_cast<char*>(&viewer3d_) -
    reinterpret_cast<char*>(&highpolymodel_) + sizeof(viewer3d_));
  _cached_size_ = 0;
}

Settings::~Settings() {
  // @@protoc_insertion_point(destructor:xnormal.Settings)
  SharedDtor();
}

void Settings::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete highpolymodel_;
  }
  if (this != internal_default_instance()) {
    delete lowpolymodel_;
  }
  if (this != internal_default_instance()) {
    delete generatemaps_;
  }
  if (this != internal_default_instance()) {
    delete detail_;
  }
  if (this != internal_default_instance()) {
    delete viewer3d_;
  }
}

void Settings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Settings::descriptor() {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[11].descriptor;
}

const Settings& Settings::default_instance() {
  protobuf_xnormal_2eproto::InitDefaults();
  return *internal_default_instance();
}

Settings* Settings::New(::google::protobuf::Arena* arena) const {
  Settings* n = new Settings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:xnormal.Settings)
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && highpolymodel_ != NULL) {
    delete highpolymodel_;
  }
  highpolymodel_ = NULL;
  if (GetArenaNoVirtual() == NULL && lowpolymodel_ != NULL) {
    delete lowpolymodel_;
  }
  lowpolymodel_ = NULL;
  if (GetArenaNoVirtual() == NULL && generatemaps_ != NULL) {
    delete generatemaps_;
  }
  generatemaps_ = NULL;
  if (GetArenaNoVirtual() == NULL && detail_ != NULL) {
    delete detail_;
  }
  detail_ = NULL;
  if (GetArenaNoVirtual() == NULL && viewer3d_ != NULL) {
    delete viewer3d_;
  }
  viewer3d_ = NULL;
}

bool Settings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xnormal.Settings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .xnormal.tHighPolyModel HighPolyModel = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_highpolymodel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tLowPolyModel LowPolyModel = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lowpolymodel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tGenerateMaps GenerateMaps = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_generatemaps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tDetail Detail = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .xnormal.tViewer3D Viewer3D = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_viewer3d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Version = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "xnormal.Settings.Version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xnormal.Settings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xnormal.Settings)
  return false;
#undef DO_
}

void Settings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xnormal.Settings)
  // .xnormal.tHighPolyModel HighPolyModel = 1;
  if (this->has_highpolymodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->highpolymodel_, output);
  }

  // .xnormal.tLowPolyModel LowPolyModel = 2;
  if (this->has_lowpolymodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lowpolymodel_, output);
  }

  // .xnormal.tGenerateMaps GenerateMaps = 3;
  if (this->has_generatemaps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->generatemaps_, output);
  }

  // .xnormal.tDetail Detail = 4;
  if (this->has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->detail_, output);
  }

  // .xnormal.tViewer3D Viewer3D = 5;
  if (this->has_viewer3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->viewer3d_, output);
  }

  // string Version = 6;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.Settings.Version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:xnormal.Settings)
}

::google::protobuf::uint8* Settings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:xnormal.Settings)
  // .xnormal.tHighPolyModel HighPolyModel = 1;
  if (this->has_highpolymodel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->highpolymodel_, false, target);
  }

  // .xnormal.tLowPolyModel LowPolyModel = 2;
  if (this->has_lowpolymodel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->lowpolymodel_, false, target);
  }

  // .xnormal.tGenerateMaps GenerateMaps = 3;
  if (this->has_generatemaps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->generatemaps_, false, target);
  }

  // .xnormal.tDetail Detail = 4;
  if (this->has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->detail_, false, target);
  }

  // .xnormal.tViewer3D Viewer3D = 5;
  if (this->has_viewer3d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->viewer3d_, false, target);
  }

  // string Version = 6;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "xnormal.Settings.Version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:xnormal.Settings)
  return target;
}

size_t Settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:xnormal.Settings)
  size_t total_size = 0;

  // string Version = 6;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // .xnormal.tHighPolyModel HighPolyModel = 1;
  if (this->has_highpolymodel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->highpolymodel_);
  }

  // .xnormal.tLowPolyModel LowPolyModel = 2;
  if (this->has_lowpolymodel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lowpolymodel_);
  }

  // .xnormal.tGenerateMaps GenerateMaps = 3;
  if (this->has_generatemaps()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->generatemaps_);
  }

  // .xnormal.tDetail Detail = 4;
  if (this->has_detail()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->detail_);
  }

  // .xnormal.tViewer3D Viewer3D = 5;
  if (this->has_viewer3d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->viewer3d_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Settings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xnormal.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  const Settings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Settings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xnormal.Settings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xnormal.Settings)
    MergeFrom(*source);
  }
}

void Settings::MergeFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xnormal.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_highpolymodel()) {
    mutable_highpolymodel()->::xnormal::tHighPolyModel::MergeFrom(from.highpolymodel());
  }
  if (from.has_lowpolymodel()) {
    mutable_lowpolymodel()->::xnormal::tLowPolyModel::MergeFrom(from.lowpolymodel());
  }
  if (from.has_generatemaps()) {
    mutable_generatemaps()->::xnormal::tGenerateMaps::MergeFrom(from.generatemaps());
  }
  if (from.has_detail()) {
    mutable_detail()->::xnormal::tDetail::MergeFrom(from.detail());
  }
  if (from.has_viewer3d()) {
    mutable_viewer3d()->::xnormal::tViewer3D::MergeFrom(from.viewer3d());
  }
}

void Settings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xnormal.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Settings::CopyFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xnormal.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settings::IsInitialized() const {
  return true;
}

void Settings::Swap(Settings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Settings::InternalSwap(Settings* other) {
  version_.Swap(&other->version_);
  std::swap(highpolymodel_, other->highpolymodel_);
  std::swap(lowpolymodel_, other->lowpolymodel_);
  std::swap(generatemaps_, other->generatemaps_);
  std::swap(detail_, other->detail_);
  std::swap(viewer3d_, other->viewer3d_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Settings::GetMetadata() const {
  protobuf_xnormal_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_xnormal_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Settings

// .xnormal.tHighPolyModel HighPolyModel = 1;
bool Settings::has_highpolymodel() const {
  return this != internal_default_instance() && highpolymodel_ != NULL;
}
void Settings::clear_highpolymodel() {
  if (GetArenaNoVirtual() == NULL && highpolymodel_ != NULL) delete highpolymodel_;
  highpolymodel_ = NULL;
}
const ::xnormal::tHighPolyModel& Settings::highpolymodel() const {
  // @@protoc_insertion_point(field_get:xnormal.Settings.HighPolyModel)
  return highpolymodel_ != NULL ? *highpolymodel_
                         : *::xnormal::tHighPolyModel::internal_default_instance();
}
::xnormal::tHighPolyModel* Settings::mutable_highpolymodel() {
  
  if (highpolymodel_ == NULL) {
    highpolymodel_ = new ::xnormal::tHighPolyModel;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.Settings.HighPolyModel)
  return highpolymodel_;
}
::xnormal::tHighPolyModel* Settings::release_highpolymodel() {
  // @@protoc_insertion_point(field_release:xnormal.Settings.HighPolyModel)
  
  ::xnormal::tHighPolyModel* temp = highpolymodel_;
  highpolymodel_ = NULL;
  return temp;
}
void Settings::set_allocated_highpolymodel(::xnormal::tHighPolyModel* highpolymodel) {
  delete highpolymodel_;
  highpolymodel_ = highpolymodel;
  if (highpolymodel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.Settings.HighPolyModel)
}

// .xnormal.tLowPolyModel LowPolyModel = 2;
bool Settings::has_lowpolymodel() const {
  return this != internal_default_instance() && lowpolymodel_ != NULL;
}
void Settings::clear_lowpolymodel() {
  if (GetArenaNoVirtual() == NULL && lowpolymodel_ != NULL) delete lowpolymodel_;
  lowpolymodel_ = NULL;
}
const ::xnormal::tLowPolyModel& Settings::lowpolymodel() const {
  // @@protoc_insertion_point(field_get:xnormal.Settings.LowPolyModel)
  return lowpolymodel_ != NULL ? *lowpolymodel_
                         : *::xnormal::tLowPolyModel::internal_default_instance();
}
::xnormal::tLowPolyModel* Settings::mutable_lowpolymodel() {
  
  if (lowpolymodel_ == NULL) {
    lowpolymodel_ = new ::xnormal::tLowPolyModel;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.Settings.LowPolyModel)
  return lowpolymodel_;
}
::xnormal::tLowPolyModel* Settings::release_lowpolymodel() {
  // @@protoc_insertion_point(field_release:xnormal.Settings.LowPolyModel)
  
  ::xnormal::tLowPolyModel* temp = lowpolymodel_;
  lowpolymodel_ = NULL;
  return temp;
}
void Settings::set_allocated_lowpolymodel(::xnormal::tLowPolyModel* lowpolymodel) {
  delete lowpolymodel_;
  lowpolymodel_ = lowpolymodel;
  if (lowpolymodel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.Settings.LowPolyModel)
}

// .xnormal.tGenerateMaps GenerateMaps = 3;
bool Settings::has_generatemaps() const {
  return this != internal_default_instance() && generatemaps_ != NULL;
}
void Settings::clear_generatemaps() {
  if (GetArenaNoVirtual() == NULL && generatemaps_ != NULL) delete generatemaps_;
  generatemaps_ = NULL;
}
const ::xnormal::tGenerateMaps& Settings::generatemaps() const {
  // @@protoc_insertion_point(field_get:xnormal.Settings.GenerateMaps)
  return generatemaps_ != NULL ? *generatemaps_
                         : *::xnormal::tGenerateMaps::internal_default_instance();
}
::xnormal::tGenerateMaps* Settings::mutable_generatemaps() {
  
  if (generatemaps_ == NULL) {
    generatemaps_ = new ::xnormal::tGenerateMaps;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.Settings.GenerateMaps)
  return generatemaps_;
}
::xnormal::tGenerateMaps* Settings::release_generatemaps() {
  // @@protoc_insertion_point(field_release:xnormal.Settings.GenerateMaps)
  
  ::xnormal::tGenerateMaps* temp = generatemaps_;
  generatemaps_ = NULL;
  return temp;
}
void Settings::set_allocated_generatemaps(::xnormal::tGenerateMaps* generatemaps) {
  delete generatemaps_;
  generatemaps_ = generatemaps;
  if (generatemaps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.Settings.GenerateMaps)
}

// .xnormal.tDetail Detail = 4;
bool Settings::has_detail() const {
  return this != internal_default_instance() && detail_ != NULL;
}
void Settings::clear_detail() {
  if (GetArenaNoVirtual() == NULL && detail_ != NULL) delete detail_;
  detail_ = NULL;
}
const ::xnormal::tDetail& Settings::detail() const {
  // @@protoc_insertion_point(field_get:xnormal.Settings.Detail)
  return detail_ != NULL ? *detail_
                         : *::xnormal::tDetail::internal_default_instance();
}
::xnormal::tDetail* Settings::mutable_detail() {
  
  if (detail_ == NULL) {
    detail_ = new ::xnormal::tDetail;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.Settings.Detail)
  return detail_;
}
::xnormal::tDetail* Settings::release_detail() {
  // @@protoc_insertion_point(field_release:xnormal.Settings.Detail)
  
  ::xnormal::tDetail* temp = detail_;
  detail_ = NULL;
  return temp;
}
void Settings::set_allocated_detail(::xnormal::tDetail* detail) {
  delete detail_;
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.Settings.Detail)
}

// .xnormal.tViewer3D Viewer3D = 5;
bool Settings::has_viewer3d() const {
  return this != internal_default_instance() && viewer3d_ != NULL;
}
void Settings::clear_viewer3d() {
  if (GetArenaNoVirtual() == NULL && viewer3d_ != NULL) delete viewer3d_;
  viewer3d_ = NULL;
}
const ::xnormal::tViewer3D& Settings::viewer3d() const {
  // @@protoc_insertion_point(field_get:xnormal.Settings.Viewer3D)
  return viewer3d_ != NULL ? *viewer3d_
                         : *::xnormal::tViewer3D::internal_default_instance();
}
::xnormal::tViewer3D* Settings::mutable_viewer3d() {
  
  if (viewer3d_ == NULL) {
    viewer3d_ = new ::xnormal::tViewer3D;
  }
  // @@protoc_insertion_point(field_mutable:xnormal.Settings.Viewer3D)
  return viewer3d_;
}
::xnormal::tViewer3D* Settings::release_viewer3d() {
  // @@protoc_insertion_point(field_release:xnormal.Settings.Viewer3D)
  
  ::xnormal::tViewer3D* temp = viewer3d_;
  viewer3d_ = NULL;
  return temp;
}
void Settings::set_allocated_viewer3d(::xnormal::tViewer3D* viewer3d) {
  delete viewer3d_;
  viewer3d_ = viewer3d;
  if (viewer3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:xnormal.Settings.Viewer3D)
}

// string Version = 6;
void Settings::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Settings::version() const {
  // @@protoc_insertion_point(field_get:xnormal.Settings.Version)
  return version_.GetNoArena();
}
void Settings::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xnormal.Settings.Version)
}
#if LANG_CXX11
void Settings::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xnormal.Settings.Version)
}
#endif
void Settings::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xnormal.Settings.Version)
}
void Settings::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xnormal.Settings.Version)
}
::std::string* Settings::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:xnormal.Settings.Version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Settings::release_version() {
  // @@protoc_insertion_point(field_release:xnormal.Settings.Version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Settings::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:xnormal.Settings.Version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace xnormal

// @@protoc_insertion_point(global_scope)
