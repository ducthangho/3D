// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ymat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ymat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace y3d {
class YRGBColorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<YRGBColor> {
} _YRGBColor_default_instance_;
class YColorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<YColor> {
} _YColor_default_instance_;
class YImageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<YImage> {
} _YImage_default_instance_;
class YDiffuseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<YDiffuse> {
} _YDiffuse_default_instance_;
class YSpecularDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<YSpecular> {
} _YSpecular_default_instance_;
class YAmbientDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<YAmbient> {
} _YAmbient_default_instance_;
class YEmissiveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<YEmissive> {
} _YEmissive_default_instance_;
class YMatPBRDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<YMatPBR> {
} _YMatPBR_default_instance_;
class YMatMapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<YMatMap> {
} _YMatMap_default_instance_;
class YBaseMapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<YBaseMap> {
} _YBaseMap_default_instance_;
class YMatStandardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<YMatStandard> {
} _YMatStandard_default_instance_;
class YMatVrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<YMatVray> {
} _YMatVray_default_instance_;
class YMatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<YMat> {
} _YMat_default_instance_;
class YMultiMatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<YMultiMat> {
} _YMultiMat_default_instance_;

namespace protobuf_ymat_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YRGBColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YRGBColor, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YRGBColor, g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YRGBColor, b_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YColor, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YColor, argb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YColor, rgb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YColor, hex_color_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YImage, file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YImage, scale_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YDiffuse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YDiffuse, set_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YDiffuse, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YDiffuse, image_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YSpecular, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YSpecular, set_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YSpecular, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YSpecular, image_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YAmbient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YAmbient, set_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YAmbient, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YAmbient, image_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YEmissive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YEmissive, set_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YEmissive, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YEmissive, image_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMatPBR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMatMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMatMap, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMatMap, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMatMap, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YBaseMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YBaseMap, albedo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YBaseMap, bump_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YBaseMap, normal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YBaseMap, ao_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YBaseMap, specular_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YBaseMap, displacement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YBaseMap, transclucency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YBaseMap, roughness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YBaseMap, opactity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMatStandard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMatStandard, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMatStandard, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMatStandard, diffuse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMatStandard, specular_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMatStandard, ambient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMatStandard, emissive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMatStandard, map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMatVray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMatVray, brdf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMatVray, diffuse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMatVray, map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMat, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMat, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMat, m_standard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMat, m_vray_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMat, m_pbr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMat, m_multi_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMultiMat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMultiMat, default_diffuse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YMultiMat, materials_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(YRGBColor)},
  { 7, -1, sizeof(YColor)},
  { 15, -1, sizeof(YImage)},
  { 21, -1, sizeof(YDiffuse)},
  { 28, -1, sizeof(YSpecular)},
  { 35, -1, sizeof(YAmbient)},
  { 42, -1, sizeof(YEmissive)},
  { 49, -1, sizeof(YMatPBR)},
  { 53, -1, sizeof(YMatMap)},
  { 60, -1, sizeof(YBaseMap)},
  { 73, -1, sizeof(YMatStandard)},
  { 84, -1, sizeof(YMatVray)},
  { 91, -1, sizeof(YMat)},
  { 101, -1, sizeof(YMultiMat)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_YRGBColor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YColor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YImage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YDiffuse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YSpecular_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YAmbient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YEmissive_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YMatPBR_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YMatMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YBaseMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YMatStandard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YMatVray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YMat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_YMultiMat_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ymat.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

}  // namespace

void TableStruct::Shutdown() {
  _YRGBColor_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _YColor_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _YImage_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _YDiffuse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _YSpecular_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _YAmbient_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _YEmissive_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _YMatPBR_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _YMatMap_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _YBaseMap_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _YMatStandard_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _YMatVray_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _YMat_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _YMultiMat_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _YRGBColor_default_instance_.DefaultConstruct();
  _YColor_default_instance_.DefaultConstruct();
  _YImage_default_instance_.DefaultConstruct();
  _YDiffuse_default_instance_.DefaultConstruct();
  _YSpecular_default_instance_.DefaultConstruct();
  _YAmbient_default_instance_.DefaultConstruct();
  _YEmissive_default_instance_.DefaultConstruct();
  _YMatPBR_default_instance_.DefaultConstruct();
  _YMatMap_default_instance_.DefaultConstruct();
  _YBaseMap_default_instance_.DefaultConstruct();
  _YMatStandard_default_instance_.DefaultConstruct();
  _YMatVray_default_instance_.DefaultConstruct();
  _YMat_default_instance_.DefaultConstruct();
  _YMultiMat_default_instance_.DefaultConstruct();
  _YColor_default_instance_.get_mutable()->rgb_ = const_cast< ::y3d::YRGBColor*>(
      ::y3d::YRGBColor::internal_default_instance());
  _YDiffuse_default_instance_.get_mutable()->color_ = const_cast< ::y3d::YColor*>(
      ::y3d::YColor::internal_default_instance());
  _YDiffuse_default_instance_.get_mutable()->image_ = const_cast< ::y3d::YImage*>(
      ::y3d::YImage::internal_default_instance());
  _YSpecular_default_instance_.get_mutable()->color_ = const_cast< ::y3d::YColor*>(
      ::y3d::YColor::internal_default_instance());
  _YSpecular_default_instance_.get_mutable()->image_ = const_cast< ::y3d::YImage*>(
      ::y3d::YImage::internal_default_instance());
  _YAmbient_default_instance_.get_mutable()->color_ = const_cast< ::y3d::YColor*>(
      ::y3d::YColor::internal_default_instance());
  _YAmbient_default_instance_.get_mutable()->image_ = const_cast< ::y3d::YImage*>(
      ::y3d::YImage::internal_default_instance());
  _YEmissive_default_instance_.get_mutable()->color_ = const_cast< ::y3d::YColor*>(
      ::y3d::YColor::internal_default_instance());
  _YEmissive_default_instance_.get_mutable()->image_ = const_cast< ::y3d::YImage*>(
      ::y3d::YImage::internal_default_instance());
  _YMatMap_default_instance_.get_mutable()->image_ = const_cast< ::y3d::YImage*>(
      ::y3d::YImage::internal_default_instance());
  _YBaseMap_default_instance_.get_mutable()->albedo_ = const_cast< ::y3d::YMatMap*>(
      ::y3d::YMatMap::internal_default_instance());
  _YBaseMap_default_instance_.get_mutable()->bump_ = const_cast< ::y3d::YMatMap*>(
      ::y3d::YMatMap::internal_default_instance());
  _YBaseMap_default_instance_.get_mutable()->normal_ = const_cast< ::y3d::YMatMap*>(
      ::y3d::YMatMap::internal_default_instance());
  _YBaseMap_default_instance_.get_mutable()->ao_ = const_cast< ::y3d::YMatMap*>(
      ::y3d::YMatMap::internal_default_instance());
  _YBaseMap_default_instance_.get_mutable()->specular_ = const_cast< ::y3d::YMatMap*>(
      ::y3d::YMatMap::internal_default_instance());
  _YBaseMap_default_instance_.get_mutable()->displacement_ = const_cast< ::y3d::YMatMap*>(
      ::y3d::YMatMap::internal_default_instance());
  _YBaseMap_default_instance_.get_mutable()->transclucency_ = const_cast< ::y3d::YMatMap*>(
      ::y3d::YMatMap::internal_default_instance());
  _YBaseMap_default_instance_.get_mutable()->roughness_ = const_cast< ::y3d::YMatMap*>(
      ::y3d::YMatMap::internal_default_instance());
  _YBaseMap_default_instance_.get_mutable()->opactity_ = const_cast< ::y3d::YMatMap*>(
      ::y3d::YMatMap::internal_default_instance());
  _YMatStandard_default_instance_.get_mutable()->diffuse_ = const_cast< ::y3d::YDiffuse*>(
      ::y3d::YDiffuse::internal_default_instance());
  _YMatStandard_default_instance_.get_mutable()->specular_ = const_cast< ::y3d::YSpecular*>(
      ::y3d::YSpecular::internal_default_instance());
  _YMatStandard_default_instance_.get_mutable()->ambient_ = const_cast< ::y3d::YAmbient*>(
      ::y3d::YAmbient::internal_default_instance());
  _YMatStandard_default_instance_.get_mutable()->emissive_ = const_cast< ::y3d::YEmissive*>(
      ::y3d::YEmissive::internal_default_instance());
  _YMatStandard_default_instance_.get_mutable()->map_ = const_cast< ::y3d::YBaseMap*>(
      ::y3d::YBaseMap::internal_default_instance());
  _YMatVray_default_instance_.get_mutable()->diffuse_ = const_cast< ::y3d::YDiffuse*>(
      ::y3d::YDiffuse::internal_default_instance());
  _YMatVray_default_instance_.get_mutable()->map_ = const_cast< ::y3d::YBaseMap*>(
      ::y3d::YBaseMap::internal_default_instance());
  _YMat_default_instance_.get_mutable()->m_standard_ = const_cast< ::y3d::YMatStandard*>(
      ::y3d::YMatStandard::internal_default_instance());
  _YMat_default_instance_.get_mutable()->m_vray_ = const_cast< ::y3d::YMatVray*>(
      ::y3d::YMatVray::internal_default_instance());
  _YMat_default_instance_.get_mutable()->m_pbr_ = const_cast< ::y3d::YMatPBR*>(
      ::y3d::YMatPBR::internal_default_instance());
  _YMat_default_instance_.get_mutable()->m_multi_ = const_cast< ::y3d::YMultiMat*>(
      ::y3d::YMultiMat::internal_default_instance());
  _YMultiMat_default_instance_.get_mutable()->default_diffuse_ = const_cast< ::y3d::YDiffuse*>(
      ::y3d::YDiffuse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\nymat.proto\022\003y3d\",\n\tYRGBColor\022\t\n\001R\030\001 \001("
      "\r\022\t\n\001G\030\002 \001(\r\022\t\n\001B\030\003 \001(\r\"T\n\006YColor\022\014\n\004nam"
      "e\030\001 \001(\t\022\014\n\004argb\030\002 \001(\005\022\033\n\003rgb\030\003 \001(\0132\016.y3d"
      ".YRGBColor\022\021\n\thex_color\030\004 \001(\t\"%\n\006YImage\022"
      "\014\n\004file\030\001 \001(\t\022\r\n\005scale\030\002 \001(\002\"T\n\010YDiffuse"
      "\022\020\n\010set_name\030\001 \001(\t\022\032\n\005color\030\002 \001(\0132\013.y3d."
      "YColor\022\032\n\005image\030\003 \001(\0132\013.y3d.YImage\"U\n\tYS"
      "pecular\022\020\n\010set_name\030\001 \001(\t\022\032\n\005color\030\002 \001(\013"
      "2\013.y3d.YColor\022\032\n\005image\030\003 \001(\0132\013.y3d.YImag"
      "e\"T\n\010YAmbient\022\020\n\010set_name\030\001 \001(\t\022\032\n\005color"
      "\030\002 \001(\0132\013.y3d.YColor\022\032\n\005image\030\003 \001(\0132\013.y3d"
      ".YImage\"U\n\tYEmissive\022\020\n\010set_name\030\001 \001(\t\022\032"
      "\n\005color\030\002 \001(\0132\013.y3d.YColor\022\032\n\005image\030\003 \001("
      "\0132\013.y3d.YImage\"\t\n\007YMatPBR\"B\n\007YMatMap\022\032\n\005"
      "image\030\001 \001(\0132\013.y3d.YImage\022\r\n\005scale\030\002 \001(\002\022"
      "\014\n\004name\030\003 \001(\t\"\246\002\n\010YBaseMap\022\034\n\006albedo\030\001 \001"
      "(\0132\014.y3d.YMatMap\022\032\n\004bump\030\002 \001(\0132\014.y3d.YMa"
      "tMap\022\034\n\006normal\030\003 \001(\0132\014.y3d.YMatMap\022\030\n\002ao"
      "\030\004 \001(\0132\014.y3d.YMatMap\022\036\n\010specular\030\005 \001(\0132\014"
      ".y3d.YMatMap\022\"\n\014displacement\030\006 \001(\0132\014.y3d"
      ".YMatMap\022#\n\rtransclucency\030O \001(\0132\014.y3d.YM"
      "atMap\022\037\n\troughness\030\010 \001(\0132\014.y3d.YMatMap\022\036"
      "\n\010opactity\030\t \001(\0132\014.y3d.YMatMap\"\310\001\n\014YMatS"
      "tandard\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\036\n\007dif"
      "fuse\030\003 \001(\0132\r.y3d.YDiffuse\022 \n\010specular\030\004 "
      "\001(\0132\016.y3d.YSpecular\022\036\n\007ambient\030\005 \001(\0132\r.y"
      "3d.YAmbient\022 \n\010emissive\030\006 \001(\0132\016.y3d.YEmi"
      "ssive\022\032\n\003map\030\007 \001(\0132\r.y3d.YBaseMap\"d\n\010YMa"
      "tVray\022\034\n\004brdf\030\001 \001(\0162\016.y3d.BRDF_Type\022\036\n\007d"
      "iffuse\030\002 \001(\0132\r.y3d.YDiffuse\022\032\n\003map\030\003 \001(\013"
      "2\r.y3d.YBaseMap\"\244\001\n\004YMat\022\n\n\002id\030\001 \001(\r\022\014\n\004"
      "name\030\002 \001(\t\022%\n\nm_standard\030\003 \001(\0132\021.y3d.YMa"
      "tStandard\022\035\n\006m_vray\030\004 \001(\0132\r.y3d.YMatVray"
      "\022\033\n\005m_pbr\030\005 \001(\0132\014.y3d.YMatPBR\022\037\n\007m_multi"
      "\030\006 \001(\0132\016.y3d.YMultiMat\"Q\n\tYMultiMat\022&\n\017d"
      "efault_diffuse\030\001 \001(\0132\r.y3d.YDiffuse\022\034\n\tm"
      "aterials\030\002 \003(\0132\t.y3d.YMat*+\n\tBRDF_Type\022\t"
      "\n\005PHONG\020\000\022\t\n\005BLINN\020\001\022\010\n\004WARD\020\002B\010\252\002\005y3d.e"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1528);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ymat.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_ymat_2eproto

const ::google::protobuf::EnumDescriptor* BRDF_Type_descriptor() {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_enum_descriptors[0];
}
bool BRDF_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YRGBColor::kRFieldNumber;
const int YRGBColor::kGFieldNumber;
const int YRGBColor::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YRGBColor::YRGBColor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ymat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:y3d.YRGBColor)
}
YRGBColor::YRGBColor(const YRGBColor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:y3d.YRGBColor)
}

void YRGBColor::SharedCtor() {
  ::memset(&r_, 0, reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_) + sizeof(b_));
  _cached_size_ = 0;
}

YRGBColor::~YRGBColor() {
  // @@protoc_insertion_point(destructor:y3d.YRGBColor)
  SharedDtor();
}

void YRGBColor::SharedDtor() {
}

void YRGBColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YRGBColor::descriptor() {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[0].descriptor;
}

const YRGBColor& YRGBColor::default_instance() {
  protobuf_ymat_2eproto::InitDefaults();
  return *internal_default_instance();
}

YRGBColor* YRGBColor::New(::google::protobuf::Arena* arena) const {
  YRGBColor* n = new YRGBColor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YRGBColor::Clear() {
// @@protoc_insertion_point(message_clear_start:y3d.YRGBColor)
  ::memset(&r_, 0, reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_) + sizeof(b_));
}

bool YRGBColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:y3d.YRGBColor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 R = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 G = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 B = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:y3d.YRGBColor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:y3d.YRGBColor)
  return false;
#undef DO_
}

void YRGBColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:y3d.YRGBColor)
  // uint32 R = 1;
  if (this->r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->r(), output);
  }

  // uint32 G = 2;
  if (this->g() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->g(), output);
  }

  // uint32 B = 3;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->b(), output);
  }

  // @@protoc_insertion_point(serialize_end:y3d.YRGBColor)
}

::google::protobuf::uint8* YRGBColor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:y3d.YRGBColor)
  // uint32 R = 1;
  if (this->r() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->r(), target);
  }

  // uint32 G = 2;
  if (this->g() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->g(), target);
  }

  // uint32 B = 3;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->b(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:y3d.YRGBColor)
  return target;
}

size_t YRGBColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:y3d.YRGBColor)
  size_t total_size = 0;

  // uint32 R = 1;
  if (this->r() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->r());
  }

  // uint32 G = 2;
  if (this->g() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->g());
  }

  // uint32 B = 3;
  if (this->b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->b());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YRGBColor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:y3d.YRGBColor)
  GOOGLE_DCHECK_NE(&from, this);
  const YRGBColor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YRGBColor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:y3d.YRGBColor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:y3d.YRGBColor)
    MergeFrom(*source);
  }
}

void YRGBColor::MergeFrom(const YRGBColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:y3d.YRGBColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.r() != 0) {
    set_r(from.r());
  }
  if (from.g() != 0) {
    set_g(from.g());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
}

void YRGBColor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:y3d.YRGBColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YRGBColor::CopyFrom(const YRGBColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:y3d.YRGBColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YRGBColor::IsInitialized() const {
  return true;
}

void YRGBColor::Swap(YRGBColor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YRGBColor::InternalSwap(YRGBColor* other) {
  std::swap(r_, other->r_);
  std::swap(g_, other->g_);
  std::swap(b_, other->b_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YRGBColor::GetMetadata() const {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YRGBColor

// uint32 R = 1;
void YRGBColor::clear_r() {
  r_ = 0u;
}
::google::protobuf::uint32 YRGBColor::r() const {
  // @@protoc_insertion_point(field_get:y3d.YRGBColor.R)
  return r_;
}
void YRGBColor::set_r(::google::protobuf::uint32 value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:y3d.YRGBColor.R)
}

// uint32 G = 2;
void YRGBColor::clear_g() {
  g_ = 0u;
}
::google::protobuf::uint32 YRGBColor::g() const {
  // @@protoc_insertion_point(field_get:y3d.YRGBColor.G)
  return g_;
}
void YRGBColor::set_g(::google::protobuf::uint32 value) {
  
  g_ = value;
  // @@protoc_insertion_point(field_set:y3d.YRGBColor.G)
}

// uint32 B = 3;
void YRGBColor::clear_b() {
  b_ = 0u;
}
::google::protobuf::uint32 YRGBColor::b() const {
  // @@protoc_insertion_point(field_get:y3d.YRGBColor.B)
  return b_;
}
void YRGBColor::set_b(::google::protobuf::uint32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:y3d.YRGBColor.B)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YColor::kNameFieldNumber;
const int YColor::kArgbFieldNumber;
const int YColor::kRgbFieldNumber;
const int YColor::kHexColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YColor::YColor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ymat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:y3d.YColor)
}
YColor::YColor(const YColor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  hex_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hex_color().size() > 0) {
    hex_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hex_color_);
  }
  if (from.has_rgb()) {
    rgb_ = new ::y3d::YRGBColor(*from.rgb_);
  } else {
    rgb_ = NULL;
  }
  argb_ = from.argb_;
  // @@protoc_insertion_point(copy_constructor:y3d.YColor)
}

void YColor::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hex_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rgb_, 0, reinterpret_cast<char*>(&argb_) -
    reinterpret_cast<char*>(&rgb_) + sizeof(argb_));
  _cached_size_ = 0;
}

YColor::~YColor() {
  // @@protoc_insertion_point(destructor:y3d.YColor)
  SharedDtor();
}

void YColor::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hex_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete rgb_;
  }
}

void YColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YColor::descriptor() {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[1].descriptor;
}

const YColor& YColor::default_instance() {
  protobuf_ymat_2eproto::InitDefaults();
  return *internal_default_instance();
}

YColor* YColor::New(::google::protobuf::Arena* arena) const {
  YColor* n = new YColor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YColor::Clear() {
// @@protoc_insertion_point(message_clear_start:y3d.YColor)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hex_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && rgb_ != NULL) {
    delete rgb_;
  }
  rgb_ = NULL;
  argb_ = 0;
}

bool YColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:y3d.YColor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "y3d.YColor.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 argb = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &argb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YRGBColor rgb = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rgb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hex_color = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hex_color()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hex_color().data(), this->hex_color().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "y3d.YColor.hex_color"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:y3d.YColor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:y3d.YColor)
  return false;
#undef DO_
}

void YColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:y3d.YColor)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YColor.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 argb = 2;
  if (this->argb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->argb(), output);
  }

  // .y3d.YRGBColor rgb = 3;
  if (this->has_rgb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rgb_, output);
  }

  // string hex_color = 4;
  if (this->hex_color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hex_color().data(), this->hex_color().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YColor.hex_color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hex_color(), output);
  }

  // @@protoc_insertion_point(serialize_end:y3d.YColor)
}

::google::protobuf::uint8* YColor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:y3d.YColor)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YColor.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 argb = 2;
  if (this->argb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->argb(), target);
  }

  // .y3d.YRGBColor rgb = 3;
  if (this->has_rgb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->rgb_, false, target);
  }

  // string hex_color = 4;
  if (this->hex_color().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hex_color().data(), this->hex_color().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YColor.hex_color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hex_color(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:y3d.YColor)
  return target;
}

size_t YColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:y3d.YColor)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string hex_color = 4;
  if (this->hex_color().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hex_color());
  }

  // .y3d.YRGBColor rgb = 3;
  if (this->has_rgb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rgb_);
  }

  // int32 argb = 2;
  if (this->argb() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->argb());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YColor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:y3d.YColor)
  GOOGLE_DCHECK_NE(&from, this);
  const YColor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YColor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:y3d.YColor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:y3d.YColor)
    MergeFrom(*source);
  }
}

void YColor::MergeFrom(const YColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:y3d.YColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.hex_color().size() > 0) {

    hex_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hex_color_);
  }
  if (from.has_rgb()) {
    mutable_rgb()->::y3d::YRGBColor::MergeFrom(from.rgb());
  }
  if (from.argb() != 0) {
    set_argb(from.argb());
  }
}

void YColor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:y3d.YColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YColor::CopyFrom(const YColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:y3d.YColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YColor::IsInitialized() const {
  return true;
}

void YColor::Swap(YColor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YColor::InternalSwap(YColor* other) {
  name_.Swap(&other->name_);
  hex_color_.Swap(&other->hex_color_);
  std::swap(rgb_, other->rgb_);
  std::swap(argb_, other->argb_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YColor::GetMetadata() const {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YColor

// string name = 1;
void YColor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& YColor::name() const {
  // @@protoc_insertion_point(field_get:y3d.YColor.name)
  return name_.GetNoArena();
}
void YColor::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YColor.name)
}
#if LANG_CXX11
void YColor::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:y3d.YColor.name)
}
#endif
void YColor::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YColor.name)
}
void YColor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YColor.name)
}
::std::string* YColor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YColor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* YColor::release_name() {
  // @@protoc_insertion_point(field_release:y3d.YColor.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void YColor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:y3d.YColor.name)
}

// int32 argb = 2;
void YColor::clear_argb() {
  argb_ = 0;
}
::google::protobuf::int32 YColor::argb() const {
  // @@protoc_insertion_point(field_get:y3d.YColor.argb)
  return argb_;
}
void YColor::set_argb(::google::protobuf::int32 value) {
  
  argb_ = value;
  // @@protoc_insertion_point(field_set:y3d.YColor.argb)
}

// .y3d.YRGBColor rgb = 3;
bool YColor::has_rgb() const {
  return this != internal_default_instance() && rgb_ != NULL;
}
void YColor::clear_rgb() {
  if (GetArenaNoVirtual() == NULL && rgb_ != NULL) delete rgb_;
  rgb_ = NULL;
}
const ::y3d::YRGBColor& YColor::rgb() const {
  // @@protoc_insertion_point(field_get:y3d.YColor.rgb)
  return rgb_ != NULL ? *rgb_
                         : *::y3d::YRGBColor::internal_default_instance();
}
::y3d::YRGBColor* YColor::mutable_rgb() {
  
  if (rgb_ == NULL) {
    rgb_ = new ::y3d::YRGBColor;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YColor.rgb)
  return rgb_;
}
::y3d::YRGBColor* YColor::release_rgb() {
  // @@protoc_insertion_point(field_release:y3d.YColor.rgb)
  
  ::y3d::YRGBColor* temp = rgb_;
  rgb_ = NULL;
  return temp;
}
void YColor::set_allocated_rgb(::y3d::YRGBColor* rgb) {
  delete rgb_;
  rgb_ = rgb;
  if (rgb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YColor.rgb)
}

// string hex_color = 4;
void YColor::clear_hex_color() {
  hex_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& YColor::hex_color() const {
  // @@protoc_insertion_point(field_get:y3d.YColor.hex_color)
  return hex_color_.GetNoArena();
}
void YColor::set_hex_color(const ::std::string& value) {
  
  hex_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YColor.hex_color)
}
#if LANG_CXX11
void YColor::set_hex_color(::std::string&& value) {
  
  hex_color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:y3d.YColor.hex_color)
}
#endif
void YColor::set_hex_color(const char* value) {
  
  hex_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YColor.hex_color)
}
void YColor::set_hex_color(const char* value, size_t size) {
  
  hex_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YColor.hex_color)
}
::std::string* YColor::mutable_hex_color() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YColor.hex_color)
  return hex_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* YColor::release_hex_color() {
  // @@protoc_insertion_point(field_release:y3d.YColor.hex_color)
  
  return hex_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void YColor::set_allocated_hex_color(::std::string* hex_color) {
  if (hex_color != NULL) {
    
  } else {
    
  }
  hex_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hex_color);
  // @@protoc_insertion_point(field_set_allocated:y3d.YColor.hex_color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YImage::kFileFieldNumber;
const int YImage::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YImage::YImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ymat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:y3d.YImage)
}
YImage::YImage(const YImage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  scale_ = from.scale_;
  // @@protoc_insertion_point(copy_constructor:y3d.YImage)
}

void YImage::SharedCtor() {
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_ = 0;
  _cached_size_ = 0;
}

YImage::~YImage() {
  // @@protoc_insertion_point(destructor:y3d.YImage)
  SharedDtor();
}

void YImage::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void YImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YImage::descriptor() {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[2].descriptor;
}

const YImage& YImage::default_instance() {
  protobuf_ymat_2eproto::InitDefaults();
  return *internal_default_instance();
}

YImage* YImage::New(::google::protobuf::Arena* arena) const {
  YImage* n = new YImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YImage::Clear() {
// @@protoc_insertion_point(message_clear_start:y3d.YImage)
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_ = 0;
}

bool YImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:y3d.YImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "y3d.YImage.file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float scale = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:y3d.YImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:y3d.YImage)
  return false;
#undef DO_
}

void YImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:y3d.YImage)
  // string file = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YImage.file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file(), output);
  }

  // float scale = 2;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // @@protoc_insertion_point(serialize_end:y3d.YImage)
}

::google::protobuf::uint8* YImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:y3d.YImage)
  // string file = 1;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YImage.file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file(), target);
  }

  // float scale = 2;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:y3d.YImage)
  return target;
}

size_t YImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:y3d.YImage)
  size_t total_size = 0;

  // string file = 1;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // float scale = 2;
  if (this->scale() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:y3d.YImage)
  GOOGLE_DCHECK_NE(&from, this);
  const YImage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:y3d.YImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:y3d.YImage)
    MergeFrom(*source);
  }
}

void YImage::MergeFrom(const YImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:y3d.YImage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
}

void YImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:y3d.YImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YImage::CopyFrom(const YImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:y3d.YImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YImage::IsInitialized() const {
  return true;
}

void YImage::Swap(YImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YImage::InternalSwap(YImage* other) {
  file_.Swap(&other->file_);
  std::swap(scale_, other->scale_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YImage::GetMetadata() const {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YImage

// string file = 1;
void YImage::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& YImage::file() const {
  // @@protoc_insertion_point(field_get:y3d.YImage.file)
  return file_.GetNoArena();
}
void YImage::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YImage.file)
}
#if LANG_CXX11
void YImage::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:y3d.YImage.file)
}
#endif
void YImage::set_file(const char* value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YImage.file)
}
void YImage::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YImage.file)
}
::std::string* YImage::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YImage.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* YImage::release_file() {
  // @@protoc_insertion_point(field_release:y3d.YImage.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void YImage::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:y3d.YImage.file)
}

// float scale = 2;
void YImage::clear_scale() {
  scale_ = 0;
}
float YImage::scale() const {
  // @@protoc_insertion_point(field_get:y3d.YImage.scale)
  return scale_;
}
void YImage::set_scale(float value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:y3d.YImage.scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YDiffuse::kSetNameFieldNumber;
const int YDiffuse::kColorFieldNumber;
const int YDiffuse::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YDiffuse::YDiffuse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ymat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:y3d.YDiffuse)
}
YDiffuse::YDiffuse(const YDiffuse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.set_name().size() > 0) {
    set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.set_name_);
  }
  if (from.has_color()) {
    color_ = new ::y3d::YColor(*from.color_);
  } else {
    color_ = NULL;
  }
  if (from.has_image()) {
    image_ = new ::y3d::YImage(*from.image_);
  } else {
    image_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:y3d.YDiffuse)
}

void YDiffuse::SharedCtor() {
  set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, reinterpret_cast<char*>(&image_) -
    reinterpret_cast<char*>(&color_) + sizeof(image_));
  _cached_size_ = 0;
}

YDiffuse::~YDiffuse() {
  // @@protoc_insertion_point(destructor:y3d.YDiffuse)
  SharedDtor();
}

void YDiffuse::SharedDtor() {
  set_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete color_;
  }
  if (this != internal_default_instance()) {
    delete image_;
  }
}

void YDiffuse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YDiffuse::descriptor() {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[3].descriptor;
}

const YDiffuse& YDiffuse::default_instance() {
  protobuf_ymat_2eproto::InitDefaults();
  return *internal_default_instance();
}

YDiffuse* YDiffuse::New(::google::protobuf::Arena* arena) const {
  YDiffuse* n = new YDiffuse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YDiffuse::Clear() {
// @@protoc_insertion_point(message_clear_start:y3d.YDiffuse)
  set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
}

bool YDiffuse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:y3d.YDiffuse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string set_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_set_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->set_name().data(), this->set_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "y3d.YDiffuse.set_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YColor color = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YImage image = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:y3d.YDiffuse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:y3d.YDiffuse)
  return false;
#undef DO_
}

void YDiffuse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:y3d.YDiffuse)
  // string set_name = 1;
  if (this->set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->set_name().data(), this->set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YDiffuse.set_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->set_name(), output);
  }

  // .y3d.YColor color = 2;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->color_, output);
  }

  // .y3d.YImage image = 3;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->image_, output);
  }

  // @@protoc_insertion_point(serialize_end:y3d.YDiffuse)
}

::google::protobuf::uint8* YDiffuse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:y3d.YDiffuse)
  // string set_name = 1;
  if (this->set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->set_name().data(), this->set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YDiffuse.set_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->set_name(), target);
  }

  // .y3d.YColor color = 2;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->color_, false, target);
  }

  // .y3d.YImage image = 3;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->image_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:y3d.YDiffuse)
  return target;
}

size_t YDiffuse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:y3d.YDiffuse)
  size_t total_size = 0;

  // string set_name = 1;
  if (this->set_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->set_name());
  }

  // .y3d.YColor color = 2;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->color_);
  }

  // .y3d.YImage image = 3;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YDiffuse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:y3d.YDiffuse)
  GOOGLE_DCHECK_NE(&from, this);
  const YDiffuse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YDiffuse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:y3d.YDiffuse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:y3d.YDiffuse)
    MergeFrom(*source);
  }
}

void YDiffuse::MergeFrom(const YDiffuse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:y3d.YDiffuse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.set_name().size() > 0) {

    set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.set_name_);
  }
  if (from.has_color()) {
    mutable_color()->::y3d::YColor::MergeFrom(from.color());
  }
  if (from.has_image()) {
    mutable_image()->::y3d::YImage::MergeFrom(from.image());
  }
}

void YDiffuse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:y3d.YDiffuse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YDiffuse::CopyFrom(const YDiffuse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:y3d.YDiffuse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YDiffuse::IsInitialized() const {
  return true;
}

void YDiffuse::Swap(YDiffuse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YDiffuse::InternalSwap(YDiffuse* other) {
  set_name_.Swap(&other->set_name_);
  std::swap(color_, other->color_);
  std::swap(image_, other->image_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YDiffuse::GetMetadata() const {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YDiffuse

// string set_name = 1;
void YDiffuse::clear_set_name() {
  set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& YDiffuse::set_name() const {
  // @@protoc_insertion_point(field_get:y3d.YDiffuse.set_name)
  return set_name_.GetNoArena();
}
void YDiffuse::set_set_name(const ::std::string& value) {
  
  set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YDiffuse.set_name)
}
#if LANG_CXX11
void YDiffuse::set_set_name(::std::string&& value) {
  
  set_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:y3d.YDiffuse.set_name)
}
#endif
void YDiffuse::set_set_name(const char* value) {
  
  set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YDiffuse.set_name)
}
void YDiffuse::set_set_name(const char* value, size_t size) {
  
  set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YDiffuse.set_name)
}
::std::string* YDiffuse::mutable_set_name() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YDiffuse.set_name)
  return set_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* YDiffuse::release_set_name() {
  // @@protoc_insertion_point(field_release:y3d.YDiffuse.set_name)
  
  return set_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void YDiffuse::set_allocated_set_name(::std::string* set_name) {
  if (set_name != NULL) {
    
  } else {
    
  }
  set_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), set_name);
  // @@protoc_insertion_point(field_set_allocated:y3d.YDiffuse.set_name)
}

// .y3d.YColor color = 2;
bool YDiffuse::has_color() const {
  return this != internal_default_instance() && color_ != NULL;
}
void YDiffuse::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
const ::y3d::YColor& YDiffuse::color() const {
  // @@protoc_insertion_point(field_get:y3d.YDiffuse.color)
  return color_ != NULL ? *color_
                         : *::y3d::YColor::internal_default_instance();
}
::y3d::YColor* YDiffuse::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::y3d::YColor;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YDiffuse.color)
  return color_;
}
::y3d::YColor* YDiffuse::release_color() {
  // @@protoc_insertion_point(field_release:y3d.YDiffuse.color)
  
  ::y3d::YColor* temp = color_;
  color_ = NULL;
  return temp;
}
void YDiffuse::set_allocated_color(::y3d::YColor* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YDiffuse.color)
}

// .y3d.YImage image = 3;
bool YDiffuse::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
void YDiffuse::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::y3d::YImage& YDiffuse::image() const {
  // @@protoc_insertion_point(field_get:y3d.YDiffuse.image)
  return image_ != NULL ? *image_
                         : *::y3d::YImage::internal_default_instance();
}
::y3d::YImage* YDiffuse::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::y3d::YImage;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YDiffuse.image)
  return image_;
}
::y3d::YImage* YDiffuse::release_image() {
  // @@protoc_insertion_point(field_release:y3d.YDiffuse.image)
  
  ::y3d::YImage* temp = image_;
  image_ = NULL;
  return temp;
}
void YDiffuse::set_allocated_image(::y3d::YImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YDiffuse.image)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YSpecular::kSetNameFieldNumber;
const int YSpecular::kColorFieldNumber;
const int YSpecular::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YSpecular::YSpecular()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ymat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:y3d.YSpecular)
}
YSpecular::YSpecular(const YSpecular& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.set_name().size() > 0) {
    set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.set_name_);
  }
  if (from.has_color()) {
    color_ = new ::y3d::YColor(*from.color_);
  } else {
    color_ = NULL;
  }
  if (from.has_image()) {
    image_ = new ::y3d::YImage(*from.image_);
  } else {
    image_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:y3d.YSpecular)
}

void YSpecular::SharedCtor() {
  set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, reinterpret_cast<char*>(&image_) -
    reinterpret_cast<char*>(&color_) + sizeof(image_));
  _cached_size_ = 0;
}

YSpecular::~YSpecular() {
  // @@protoc_insertion_point(destructor:y3d.YSpecular)
  SharedDtor();
}

void YSpecular::SharedDtor() {
  set_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete color_;
  }
  if (this != internal_default_instance()) {
    delete image_;
  }
}

void YSpecular::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YSpecular::descriptor() {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[4].descriptor;
}

const YSpecular& YSpecular::default_instance() {
  protobuf_ymat_2eproto::InitDefaults();
  return *internal_default_instance();
}

YSpecular* YSpecular::New(::google::protobuf::Arena* arena) const {
  YSpecular* n = new YSpecular;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YSpecular::Clear() {
// @@protoc_insertion_point(message_clear_start:y3d.YSpecular)
  set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
}

bool YSpecular::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:y3d.YSpecular)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string set_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_set_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->set_name().data(), this->set_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "y3d.YSpecular.set_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YColor color = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YImage image = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:y3d.YSpecular)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:y3d.YSpecular)
  return false;
#undef DO_
}

void YSpecular::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:y3d.YSpecular)
  // string set_name = 1;
  if (this->set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->set_name().data(), this->set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YSpecular.set_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->set_name(), output);
  }

  // .y3d.YColor color = 2;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->color_, output);
  }

  // .y3d.YImage image = 3;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->image_, output);
  }

  // @@protoc_insertion_point(serialize_end:y3d.YSpecular)
}

::google::protobuf::uint8* YSpecular::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:y3d.YSpecular)
  // string set_name = 1;
  if (this->set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->set_name().data(), this->set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YSpecular.set_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->set_name(), target);
  }

  // .y3d.YColor color = 2;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->color_, false, target);
  }

  // .y3d.YImage image = 3;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->image_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:y3d.YSpecular)
  return target;
}

size_t YSpecular::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:y3d.YSpecular)
  size_t total_size = 0;

  // string set_name = 1;
  if (this->set_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->set_name());
  }

  // .y3d.YColor color = 2;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->color_);
  }

  // .y3d.YImage image = 3;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YSpecular::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:y3d.YSpecular)
  GOOGLE_DCHECK_NE(&from, this);
  const YSpecular* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YSpecular>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:y3d.YSpecular)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:y3d.YSpecular)
    MergeFrom(*source);
  }
}

void YSpecular::MergeFrom(const YSpecular& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:y3d.YSpecular)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.set_name().size() > 0) {

    set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.set_name_);
  }
  if (from.has_color()) {
    mutable_color()->::y3d::YColor::MergeFrom(from.color());
  }
  if (from.has_image()) {
    mutable_image()->::y3d::YImage::MergeFrom(from.image());
  }
}

void YSpecular::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:y3d.YSpecular)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YSpecular::CopyFrom(const YSpecular& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:y3d.YSpecular)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YSpecular::IsInitialized() const {
  return true;
}

void YSpecular::Swap(YSpecular* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YSpecular::InternalSwap(YSpecular* other) {
  set_name_.Swap(&other->set_name_);
  std::swap(color_, other->color_);
  std::swap(image_, other->image_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YSpecular::GetMetadata() const {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YSpecular

// string set_name = 1;
void YSpecular::clear_set_name() {
  set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& YSpecular::set_name() const {
  // @@protoc_insertion_point(field_get:y3d.YSpecular.set_name)
  return set_name_.GetNoArena();
}
void YSpecular::set_set_name(const ::std::string& value) {
  
  set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YSpecular.set_name)
}
#if LANG_CXX11
void YSpecular::set_set_name(::std::string&& value) {
  
  set_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:y3d.YSpecular.set_name)
}
#endif
void YSpecular::set_set_name(const char* value) {
  
  set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YSpecular.set_name)
}
void YSpecular::set_set_name(const char* value, size_t size) {
  
  set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YSpecular.set_name)
}
::std::string* YSpecular::mutable_set_name() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YSpecular.set_name)
  return set_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* YSpecular::release_set_name() {
  // @@protoc_insertion_point(field_release:y3d.YSpecular.set_name)
  
  return set_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void YSpecular::set_allocated_set_name(::std::string* set_name) {
  if (set_name != NULL) {
    
  } else {
    
  }
  set_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), set_name);
  // @@protoc_insertion_point(field_set_allocated:y3d.YSpecular.set_name)
}

// .y3d.YColor color = 2;
bool YSpecular::has_color() const {
  return this != internal_default_instance() && color_ != NULL;
}
void YSpecular::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
const ::y3d::YColor& YSpecular::color() const {
  // @@protoc_insertion_point(field_get:y3d.YSpecular.color)
  return color_ != NULL ? *color_
                         : *::y3d::YColor::internal_default_instance();
}
::y3d::YColor* YSpecular::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::y3d::YColor;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YSpecular.color)
  return color_;
}
::y3d::YColor* YSpecular::release_color() {
  // @@protoc_insertion_point(field_release:y3d.YSpecular.color)
  
  ::y3d::YColor* temp = color_;
  color_ = NULL;
  return temp;
}
void YSpecular::set_allocated_color(::y3d::YColor* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YSpecular.color)
}

// .y3d.YImage image = 3;
bool YSpecular::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
void YSpecular::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::y3d::YImage& YSpecular::image() const {
  // @@protoc_insertion_point(field_get:y3d.YSpecular.image)
  return image_ != NULL ? *image_
                         : *::y3d::YImage::internal_default_instance();
}
::y3d::YImage* YSpecular::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::y3d::YImage;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YSpecular.image)
  return image_;
}
::y3d::YImage* YSpecular::release_image() {
  // @@protoc_insertion_point(field_release:y3d.YSpecular.image)
  
  ::y3d::YImage* temp = image_;
  image_ = NULL;
  return temp;
}
void YSpecular::set_allocated_image(::y3d::YImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YSpecular.image)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YAmbient::kSetNameFieldNumber;
const int YAmbient::kColorFieldNumber;
const int YAmbient::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YAmbient::YAmbient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ymat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:y3d.YAmbient)
}
YAmbient::YAmbient(const YAmbient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.set_name().size() > 0) {
    set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.set_name_);
  }
  if (from.has_color()) {
    color_ = new ::y3d::YColor(*from.color_);
  } else {
    color_ = NULL;
  }
  if (from.has_image()) {
    image_ = new ::y3d::YImage(*from.image_);
  } else {
    image_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:y3d.YAmbient)
}

void YAmbient::SharedCtor() {
  set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, reinterpret_cast<char*>(&image_) -
    reinterpret_cast<char*>(&color_) + sizeof(image_));
  _cached_size_ = 0;
}

YAmbient::~YAmbient() {
  // @@protoc_insertion_point(destructor:y3d.YAmbient)
  SharedDtor();
}

void YAmbient::SharedDtor() {
  set_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete color_;
  }
  if (this != internal_default_instance()) {
    delete image_;
  }
}

void YAmbient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YAmbient::descriptor() {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[5].descriptor;
}

const YAmbient& YAmbient::default_instance() {
  protobuf_ymat_2eproto::InitDefaults();
  return *internal_default_instance();
}

YAmbient* YAmbient::New(::google::protobuf::Arena* arena) const {
  YAmbient* n = new YAmbient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YAmbient::Clear() {
// @@protoc_insertion_point(message_clear_start:y3d.YAmbient)
  set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
}

bool YAmbient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:y3d.YAmbient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string set_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_set_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->set_name().data(), this->set_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "y3d.YAmbient.set_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YColor color = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YImage image = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:y3d.YAmbient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:y3d.YAmbient)
  return false;
#undef DO_
}

void YAmbient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:y3d.YAmbient)
  // string set_name = 1;
  if (this->set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->set_name().data(), this->set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YAmbient.set_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->set_name(), output);
  }

  // .y3d.YColor color = 2;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->color_, output);
  }

  // .y3d.YImage image = 3;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->image_, output);
  }

  // @@protoc_insertion_point(serialize_end:y3d.YAmbient)
}

::google::protobuf::uint8* YAmbient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:y3d.YAmbient)
  // string set_name = 1;
  if (this->set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->set_name().data(), this->set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YAmbient.set_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->set_name(), target);
  }

  // .y3d.YColor color = 2;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->color_, false, target);
  }

  // .y3d.YImage image = 3;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->image_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:y3d.YAmbient)
  return target;
}

size_t YAmbient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:y3d.YAmbient)
  size_t total_size = 0;

  // string set_name = 1;
  if (this->set_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->set_name());
  }

  // .y3d.YColor color = 2;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->color_);
  }

  // .y3d.YImage image = 3;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YAmbient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:y3d.YAmbient)
  GOOGLE_DCHECK_NE(&from, this);
  const YAmbient* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YAmbient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:y3d.YAmbient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:y3d.YAmbient)
    MergeFrom(*source);
  }
}

void YAmbient::MergeFrom(const YAmbient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:y3d.YAmbient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.set_name().size() > 0) {

    set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.set_name_);
  }
  if (from.has_color()) {
    mutable_color()->::y3d::YColor::MergeFrom(from.color());
  }
  if (from.has_image()) {
    mutable_image()->::y3d::YImage::MergeFrom(from.image());
  }
}

void YAmbient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:y3d.YAmbient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YAmbient::CopyFrom(const YAmbient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:y3d.YAmbient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YAmbient::IsInitialized() const {
  return true;
}

void YAmbient::Swap(YAmbient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YAmbient::InternalSwap(YAmbient* other) {
  set_name_.Swap(&other->set_name_);
  std::swap(color_, other->color_);
  std::swap(image_, other->image_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YAmbient::GetMetadata() const {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YAmbient

// string set_name = 1;
void YAmbient::clear_set_name() {
  set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& YAmbient::set_name() const {
  // @@protoc_insertion_point(field_get:y3d.YAmbient.set_name)
  return set_name_.GetNoArena();
}
void YAmbient::set_set_name(const ::std::string& value) {
  
  set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YAmbient.set_name)
}
#if LANG_CXX11
void YAmbient::set_set_name(::std::string&& value) {
  
  set_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:y3d.YAmbient.set_name)
}
#endif
void YAmbient::set_set_name(const char* value) {
  
  set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YAmbient.set_name)
}
void YAmbient::set_set_name(const char* value, size_t size) {
  
  set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YAmbient.set_name)
}
::std::string* YAmbient::mutable_set_name() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YAmbient.set_name)
  return set_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* YAmbient::release_set_name() {
  // @@protoc_insertion_point(field_release:y3d.YAmbient.set_name)
  
  return set_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void YAmbient::set_allocated_set_name(::std::string* set_name) {
  if (set_name != NULL) {
    
  } else {
    
  }
  set_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), set_name);
  // @@protoc_insertion_point(field_set_allocated:y3d.YAmbient.set_name)
}

// .y3d.YColor color = 2;
bool YAmbient::has_color() const {
  return this != internal_default_instance() && color_ != NULL;
}
void YAmbient::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
const ::y3d::YColor& YAmbient::color() const {
  // @@protoc_insertion_point(field_get:y3d.YAmbient.color)
  return color_ != NULL ? *color_
                         : *::y3d::YColor::internal_default_instance();
}
::y3d::YColor* YAmbient::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::y3d::YColor;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YAmbient.color)
  return color_;
}
::y3d::YColor* YAmbient::release_color() {
  // @@protoc_insertion_point(field_release:y3d.YAmbient.color)
  
  ::y3d::YColor* temp = color_;
  color_ = NULL;
  return temp;
}
void YAmbient::set_allocated_color(::y3d::YColor* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YAmbient.color)
}

// .y3d.YImage image = 3;
bool YAmbient::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
void YAmbient::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::y3d::YImage& YAmbient::image() const {
  // @@protoc_insertion_point(field_get:y3d.YAmbient.image)
  return image_ != NULL ? *image_
                         : *::y3d::YImage::internal_default_instance();
}
::y3d::YImage* YAmbient::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::y3d::YImage;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YAmbient.image)
  return image_;
}
::y3d::YImage* YAmbient::release_image() {
  // @@protoc_insertion_point(field_release:y3d.YAmbient.image)
  
  ::y3d::YImage* temp = image_;
  image_ = NULL;
  return temp;
}
void YAmbient::set_allocated_image(::y3d::YImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YAmbient.image)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YEmissive::kSetNameFieldNumber;
const int YEmissive::kColorFieldNumber;
const int YEmissive::kImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YEmissive::YEmissive()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ymat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:y3d.YEmissive)
}
YEmissive::YEmissive(const YEmissive& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.set_name().size() > 0) {
    set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.set_name_);
  }
  if (from.has_color()) {
    color_ = new ::y3d::YColor(*from.color_);
  } else {
    color_ = NULL;
  }
  if (from.has_image()) {
    image_ = new ::y3d::YImage(*from.image_);
  } else {
    image_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:y3d.YEmissive)
}

void YEmissive::SharedCtor() {
  set_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, reinterpret_cast<char*>(&image_) -
    reinterpret_cast<char*>(&color_) + sizeof(image_));
  _cached_size_ = 0;
}

YEmissive::~YEmissive() {
  // @@protoc_insertion_point(destructor:y3d.YEmissive)
  SharedDtor();
}

void YEmissive::SharedDtor() {
  set_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete color_;
  }
  if (this != internal_default_instance()) {
    delete image_;
  }
}

void YEmissive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YEmissive::descriptor() {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[6].descriptor;
}

const YEmissive& YEmissive::default_instance() {
  protobuf_ymat_2eproto::InitDefaults();
  return *internal_default_instance();
}

YEmissive* YEmissive::New(::google::protobuf::Arena* arena) const {
  YEmissive* n = new YEmissive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YEmissive::Clear() {
// @@protoc_insertion_point(message_clear_start:y3d.YEmissive)
  set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
}

bool YEmissive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:y3d.YEmissive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string set_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_set_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->set_name().data(), this->set_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "y3d.YEmissive.set_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YColor color = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YImage image = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:y3d.YEmissive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:y3d.YEmissive)
  return false;
#undef DO_
}

void YEmissive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:y3d.YEmissive)
  // string set_name = 1;
  if (this->set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->set_name().data(), this->set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YEmissive.set_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->set_name(), output);
  }

  // .y3d.YColor color = 2;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->color_, output);
  }

  // .y3d.YImage image = 3;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->image_, output);
  }

  // @@protoc_insertion_point(serialize_end:y3d.YEmissive)
}

::google::protobuf::uint8* YEmissive::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:y3d.YEmissive)
  // string set_name = 1;
  if (this->set_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->set_name().data(), this->set_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YEmissive.set_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->set_name(), target);
  }

  // .y3d.YColor color = 2;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->color_, false, target);
  }

  // .y3d.YImage image = 3;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->image_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:y3d.YEmissive)
  return target;
}

size_t YEmissive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:y3d.YEmissive)
  size_t total_size = 0;

  // string set_name = 1;
  if (this->set_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->set_name());
  }

  // .y3d.YColor color = 2;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->color_);
  }

  // .y3d.YImage image = 3;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YEmissive::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:y3d.YEmissive)
  GOOGLE_DCHECK_NE(&from, this);
  const YEmissive* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YEmissive>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:y3d.YEmissive)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:y3d.YEmissive)
    MergeFrom(*source);
  }
}

void YEmissive::MergeFrom(const YEmissive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:y3d.YEmissive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.set_name().size() > 0) {

    set_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.set_name_);
  }
  if (from.has_color()) {
    mutable_color()->::y3d::YColor::MergeFrom(from.color());
  }
  if (from.has_image()) {
    mutable_image()->::y3d::YImage::MergeFrom(from.image());
  }
}

void YEmissive::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:y3d.YEmissive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YEmissive::CopyFrom(const YEmissive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:y3d.YEmissive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YEmissive::IsInitialized() const {
  return true;
}

void YEmissive::Swap(YEmissive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YEmissive::InternalSwap(YEmissive* other) {
  set_name_.Swap(&other->set_name_);
  std::swap(color_, other->color_);
  std::swap(image_, other->image_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YEmissive::GetMetadata() const {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YEmissive

// string set_name = 1;
void YEmissive::clear_set_name() {
  set_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& YEmissive::set_name() const {
  // @@protoc_insertion_point(field_get:y3d.YEmissive.set_name)
  return set_name_.GetNoArena();
}
void YEmissive::set_set_name(const ::std::string& value) {
  
  set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YEmissive.set_name)
}
#if LANG_CXX11
void YEmissive::set_set_name(::std::string&& value) {
  
  set_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:y3d.YEmissive.set_name)
}
#endif
void YEmissive::set_set_name(const char* value) {
  
  set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YEmissive.set_name)
}
void YEmissive::set_set_name(const char* value, size_t size) {
  
  set_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YEmissive.set_name)
}
::std::string* YEmissive::mutable_set_name() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YEmissive.set_name)
  return set_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* YEmissive::release_set_name() {
  // @@protoc_insertion_point(field_release:y3d.YEmissive.set_name)
  
  return set_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void YEmissive::set_allocated_set_name(::std::string* set_name) {
  if (set_name != NULL) {
    
  } else {
    
  }
  set_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), set_name);
  // @@protoc_insertion_point(field_set_allocated:y3d.YEmissive.set_name)
}

// .y3d.YColor color = 2;
bool YEmissive::has_color() const {
  return this != internal_default_instance() && color_ != NULL;
}
void YEmissive::clear_color() {
  if (GetArenaNoVirtual() == NULL && color_ != NULL) delete color_;
  color_ = NULL;
}
const ::y3d::YColor& YEmissive::color() const {
  // @@protoc_insertion_point(field_get:y3d.YEmissive.color)
  return color_ != NULL ? *color_
                         : *::y3d::YColor::internal_default_instance();
}
::y3d::YColor* YEmissive::mutable_color() {
  
  if (color_ == NULL) {
    color_ = new ::y3d::YColor;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YEmissive.color)
  return color_;
}
::y3d::YColor* YEmissive::release_color() {
  // @@protoc_insertion_point(field_release:y3d.YEmissive.color)
  
  ::y3d::YColor* temp = color_;
  color_ = NULL;
  return temp;
}
void YEmissive::set_allocated_color(::y3d::YColor* color) {
  delete color_;
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YEmissive.color)
}

// .y3d.YImage image = 3;
bool YEmissive::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
void YEmissive::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::y3d::YImage& YEmissive::image() const {
  // @@protoc_insertion_point(field_get:y3d.YEmissive.image)
  return image_ != NULL ? *image_
                         : *::y3d::YImage::internal_default_instance();
}
::y3d::YImage* YEmissive::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::y3d::YImage;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YEmissive.image)
  return image_;
}
::y3d::YImage* YEmissive::release_image() {
  // @@protoc_insertion_point(field_release:y3d.YEmissive.image)
  
  ::y3d::YImage* temp = image_;
  image_ = NULL;
  return temp;
}
void YEmissive::set_allocated_image(::y3d::YImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YEmissive.image)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YMatPBR::YMatPBR()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ymat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:y3d.YMatPBR)
}
YMatPBR::YMatPBR(const YMatPBR& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:y3d.YMatPBR)
}

void YMatPBR::SharedCtor() {
  _cached_size_ = 0;
}

YMatPBR::~YMatPBR() {
  // @@protoc_insertion_point(destructor:y3d.YMatPBR)
  SharedDtor();
}

void YMatPBR::SharedDtor() {
}

void YMatPBR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YMatPBR::descriptor() {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[7].descriptor;
}

const YMatPBR& YMatPBR::default_instance() {
  protobuf_ymat_2eproto::InitDefaults();
  return *internal_default_instance();
}

YMatPBR* YMatPBR::New(::google::protobuf::Arena* arena) const {
  YMatPBR* n = new YMatPBR;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YMatPBR::Clear() {
// @@protoc_insertion_point(message_clear_start:y3d.YMatPBR)
}

bool YMatPBR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:y3d.YMatPBR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:y3d.YMatPBR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:y3d.YMatPBR)
  return false;
#undef DO_
}

void YMatPBR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:y3d.YMatPBR)
  // @@protoc_insertion_point(serialize_end:y3d.YMatPBR)
}

::google::protobuf::uint8* YMatPBR::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:y3d.YMatPBR)
  // @@protoc_insertion_point(serialize_to_array_end:y3d.YMatPBR)
  return target;
}

size_t YMatPBR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:y3d.YMatPBR)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YMatPBR::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:y3d.YMatPBR)
  GOOGLE_DCHECK_NE(&from, this);
  const YMatPBR* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YMatPBR>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:y3d.YMatPBR)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:y3d.YMatPBR)
    MergeFrom(*source);
  }
}

void YMatPBR::MergeFrom(const YMatPBR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:y3d.YMatPBR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void YMatPBR::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:y3d.YMatPBR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YMatPBR::CopyFrom(const YMatPBR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:y3d.YMatPBR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YMatPBR::IsInitialized() const {
  return true;
}

void YMatPBR::Swap(YMatPBR* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YMatPBR::InternalSwap(YMatPBR* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YMatPBR::GetMetadata() const {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YMatPBR

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YMatMap::kImageFieldNumber;
const int YMatMap::kScaleFieldNumber;
const int YMatMap::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YMatMap::YMatMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ymat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:y3d.YMatMap)
}
YMatMap::YMatMap(const YMatMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_image()) {
    image_ = new ::y3d::YImage(*from.image_);
  } else {
    image_ = NULL;
  }
  scale_ = from.scale_;
  // @@protoc_insertion_point(copy_constructor:y3d.YMatMap)
}

void YMatMap::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_, 0, reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&image_) + sizeof(scale_));
  _cached_size_ = 0;
}

YMatMap::~YMatMap() {
  // @@protoc_insertion_point(destructor:y3d.YMatMap)
  SharedDtor();
}

void YMatMap::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete image_;
  }
}

void YMatMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YMatMap::descriptor() {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[8].descriptor;
}

const YMatMap& YMatMap::default_instance() {
  protobuf_ymat_2eproto::InitDefaults();
  return *internal_default_instance();
}

YMatMap* YMatMap::New(::google::protobuf::Arena* arena) const {
  YMatMap* n = new YMatMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YMatMap::Clear() {
// @@protoc_insertion_point(message_clear_start:y3d.YMatMap)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
  scale_ = 0;
}

bool YMatMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:y3d.YMatMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .y3d.YImage image = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float scale = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "y3d.YMatMap.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:y3d.YMatMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:y3d.YMatMap)
  return false;
#undef DO_
}

void YMatMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:y3d.YMatMap)
  // .y3d.YImage image = 1;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->image_, output);
  }

  // float scale = 2;
  if (this->scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YMatMap.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:y3d.YMatMap)
}

::google::protobuf::uint8* YMatMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:y3d.YMatMap)
  // .y3d.YImage image = 1;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->image_, false, target);
  }

  // float scale = 2;
  if (this->scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YMatMap.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:y3d.YMatMap)
  return target;
}

size_t YMatMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:y3d.YMatMap)
  size_t total_size = 0;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .y3d.YImage image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  // float scale = 2;
  if (this->scale() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YMatMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:y3d.YMatMap)
  GOOGLE_DCHECK_NE(&from, this);
  const YMatMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YMatMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:y3d.YMatMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:y3d.YMatMap)
    MergeFrom(*source);
  }
}

void YMatMap::MergeFrom(const YMatMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:y3d.YMatMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_image()) {
    mutable_image()->::y3d::YImage::MergeFrom(from.image());
  }
  if (from.scale() != 0) {
    set_scale(from.scale());
  }
}

void YMatMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:y3d.YMatMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YMatMap::CopyFrom(const YMatMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:y3d.YMatMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YMatMap::IsInitialized() const {
  return true;
}

void YMatMap::Swap(YMatMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YMatMap::InternalSwap(YMatMap* other) {
  name_.Swap(&other->name_);
  std::swap(image_, other->image_);
  std::swap(scale_, other->scale_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YMatMap::GetMetadata() const {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YMatMap

// .y3d.YImage image = 1;
bool YMatMap::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
void YMatMap::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::y3d::YImage& YMatMap::image() const {
  // @@protoc_insertion_point(field_get:y3d.YMatMap.image)
  return image_ != NULL ? *image_
                         : *::y3d::YImage::internal_default_instance();
}
::y3d::YImage* YMatMap::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::y3d::YImage;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YMatMap.image)
  return image_;
}
::y3d::YImage* YMatMap::release_image() {
  // @@protoc_insertion_point(field_release:y3d.YMatMap.image)
  
  ::y3d::YImage* temp = image_;
  image_ = NULL;
  return temp;
}
void YMatMap::set_allocated_image(::y3d::YImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YMatMap.image)
}

// float scale = 2;
void YMatMap::clear_scale() {
  scale_ = 0;
}
float YMatMap::scale() const {
  // @@protoc_insertion_point(field_get:y3d.YMatMap.scale)
  return scale_;
}
void YMatMap::set_scale(float value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:y3d.YMatMap.scale)
}

// string name = 3;
void YMatMap::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& YMatMap::name() const {
  // @@protoc_insertion_point(field_get:y3d.YMatMap.name)
  return name_.GetNoArena();
}
void YMatMap::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YMatMap.name)
}
#if LANG_CXX11
void YMatMap::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:y3d.YMatMap.name)
}
#endif
void YMatMap::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YMatMap.name)
}
void YMatMap::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YMatMap.name)
}
::std::string* YMatMap::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YMatMap.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* YMatMap::release_name() {
  // @@protoc_insertion_point(field_release:y3d.YMatMap.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void YMatMap::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:y3d.YMatMap.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YBaseMap::kAlbedoFieldNumber;
const int YBaseMap::kBumpFieldNumber;
const int YBaseMap::kNormalFieldNumber;
const int YBaseMap::kAoFieldNumber;
const int YBaseMap::kSpecularFieldNumber;
const int YBaseMap::kDisplacementFieldNumber;
const int YBaseMap::kTransclucencyFieldNumber;
const int YBaseMap::kRoughnessFieldNumber;
const int YBaseMap::kOpactityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YBaseMap::YBaseMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ymat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:y3d.YBaseMap)
}
YBaseMap::YBaseMap(const YBaseMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_albedo()) {
    albedo_ = new ::y3d::YMatMap(*from.albedo_);
  } else {
    albedo_ = NULL;
  }
  if (from.has_bump()) {
    bump_ = new ::y3d::YMatMap(*from.bump_);
  } else {
    bump_ = NULL;
  }
  if (from.has_normal()) {
    normal_ = new ::y3d::YMatMap(*from.normal_);
  } else {
    normal_ = NULL;
  }
  if (from.has_ao()) {
    ao_ = new ::y3d::YMatMap(*from.ao_);
  } else {
    ao_ = NULL;
  }
  if (from.has_specular()) {
    specular_ = new ::y3d::YMatMap(*from.specular_);
  } else {
    specular_ = NULL;
  }
  if (from.has_displacement()) {
    displacement_ = new ::y3d::YMatMap(*from.displacement_);
  } else {
    displacement_ = NULL;
  }
  if (from.has_transclucency()) {
    transclucency_ = new ::y3d::YMatMap(*from.transclucency_);
  } else {
    transclucency_ = NULL;
  }
  if (from.has_roughness()) {
    roughness_ = new ::y3d::YMatMap(*from.roughness_);
  } else {
    roughness_ = NULL;
  }
  if (from.has_opactity()) {
    opactity_ = new ::y3d::YMatMap(*from.opactity_);
  } else {
    opactity_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:y3d.YBaseMap)
}

void YBaseMap::SharedCtor() {
  ::memset(&albedo_, 0, reinterpret_cast<char*>(&opactity_) -
    reinterpret_cast<char*>(&albedo_) + sizeof(opactity_));
  _cached_size_ = 0;
}

YBaseMap::~YBaseMap() {
  // @@protoc_insertion_point(destructor:y3d.YBaseMap)
  SharedDtor();
}

void YBaseMap::SharedDtor() {
  if (this != internal_default_instance()) {
    delete albedo_;
  }
  if (this != internal_default_instance()) {
    delete bump_;
  }
  if (this != internal_default_instance()) {
    delete normal_;
  }
  if (this != internal_default_instance()) {
    delete ao_;
  }
  if (this != internal_default_instance()) {
    delete specular_;
  }
  if (this != internal_default_instance()) {
    delete displacement_;
  }
  if (this != internal_default_instance()) {
    delete transclucency_;
  }
  if (this != internal_default_instance()) {
    delete roughness_;
  }
  if (this != internal_default_instance()) {
    delete opactity_;
  }
}

void YBaseMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YBaseMap::descriptor() {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[9].descriptor;
}

const YBaseMap& YBaseMap::default_instance() {
  protobuf_ymat_2eproto::InitDefaults();
  return *internal_default_instance();
}

YBaseMap* YBaseMap::New(::google::protobuf::Arena* arena) const {
  YBaseMap* n = new YBaseMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YBaseMap::Clear() {
// @@protoc_insertion_point(message_clear_start:y3d.YBaseMap)
  if (GetArenaNoVirtual() == NULL && albedo_ != NULL) {
    delete albedo_;
  }
  albedo_ = NULL;
  if (GetArenaNoVirtual() == NULL && bump_ != NULL) {
    delete bump_;
  }
  bump_ = NULL;
  if (GetArenaNoVirtual() == NULL && normal_ != NULL) {
    delete normal_;
  }
  normal_ = NULL;
  if (GetArenaNoVirtual() == NULL && ao_ != NULL) {
    delete ao_;
  }
  ao_ = NULL;
  if (GetArenaNoVirtual() == NULL && specular_ != NULL) {
    delete specular_;
  }
  specular_ = NULL;
  if (GetArenaNoVirtual() == NULL && displacement_ != NULL) {
    delete displacement_;
  }
  displacement_ = NULL;
  if (GetArenaNoVirtual() == NULL && transclucency_ != NULL) {
    delete transclucency_;
  }
  transclucency_ = NULL;
  if (GetArenaNoVirtual() == NULL && roughness_ != NULL) {
    delete roughness_;
  }
  roughness_ = NULL;
  if (GetArenaNoVirtual() == NULL && opactity_ != NULL) {
    delete opactity_;
  }
  opactity_ = NULL;
}

bool YBaseMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:y3d.YBaseMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .y3d.YMatMap albedo = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_albedo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YMatMap bump = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bump()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YMatMap normal = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YMatMap ao = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ao()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YMatMap specular = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specular()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YMatMap displacement = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_displacement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YMatMap roughness = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roughness()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YMatMap opactity = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opactity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YMatMap transclucency = 79;
      case 79: {
        if (tag == 634u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transclucency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:y3d.YBaseMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:y3d.YBaseMap)
  return false;
#undef DO_
}

void YBaseMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:y3d.YBaseMap)
  // .y3d.YMatMap albedo = 1;
  if (this->has_albedo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->albedo_, output);
  }

  // .y3d.YMatMap bump = 2;
  if (this->has_bump()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->bump_, output);
  }

  // .y3d.YMatMap normal = 3;
  if (this->has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->normal_, output);
  }

  // .y3d.YMatMap ao = 4;
  if (this->has_ao()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ao_, output);
  }

  // .y3d.YMatMap specular = 5;
  if (this->has_specular()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->specular_, output);
  }

  // .y3d.YMatMap displacement = 6;
  if (this->has_displacement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->displacement_, output);
  }

  // .y3d.YMatMap roughness = 8;
  if (this->has_roughness()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->roughness_, output);
  }

  // .y3d.YMatMap opactity = 9;
  if (this->has_opactity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->opactity_, output);
  }

  // .y3d.YMatMap transclucency = 79;
  if (this->has_transclucency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      79, *this->transclucency_, output);
  }

  // @@protoc_insertion_point(serialize_end:y3d.YBaseMap)
}

::google::protobuf::uint8* YBaseMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:y3d.YBaseMap)
  // .y3d.YMatMap albedo = 1;
  if (this->has_albedo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->albedo_, false, target);
  }

  // .y3d.YMatMap bump = 2;
  if (this->has_bump()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->bump_, false, target);
  }

  // .y3d.YMatMap normal = 3;
  if (this->has_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->normal_, false, target);
  }

  // .y3d.YMatMap ao = 4;
  if (this->has_ao()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->ao_, false, target);
  }

  // .y3d.YMatMap specular = 5;
  if (this->has_specular()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->specular_, false, target);
  }

  // .y3d.YMatMap displacement = 6;
  if (this->has_displacement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->displacement_, false, target);
  }

  // .y3d.YMatMap roughness = 8;
  if (this->has_roughness()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->roughness_, false, target);
  }

  // .y3d.YMatMap opactity = 9;
  if (this->has_opactity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->opactity_, false, target);
  }

  // .y3d.YMatMap transclucency = 79;
  if (this->has_transclucency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        79, *this->transclucency_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:y3d.YBaseMap)
  return target;
}

size_t YBaseMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:y3d.YBaseMap)
  size_t total_size = 0;

  // .y3d.YMatMap albedo = 1;
  if (this->has_albedo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->albedo_);
  }

  // .y3d.YMatMap bump = 2;
  if (this->has_bump()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bump_);
  }

  // .y3d.YMatMap normal = 3;
  if (this->has_normal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->normal_);
  }

  // .y3d.YMatMap ao = 4;
  if (this->has_ao()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ao_);
  }

  // .y3d.YMatMap specular = 5;
  if (this->has_specular()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->specular_);
  }

  // .y3d.YMatMap displacement = 6;
  if (this->has_displacement()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->displacement_);
  }

  // .y3d.YMatMap transclucency = 79;
  if (this->has_transclucency()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transclucency_);
  }

  // .y3d.YMatMap roughness = 8;
  if (this->has_roughness()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->roughness_);
  }

  // .y3d.YMatMap opactity = 9;
  if (this->has_opactity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->opactity_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YBaseMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:y3d.YBaseMap)
  GOOGLE_DCHECK_NE(&from, this);
  const YBaseMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YBaseMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:y3d.YBaseMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:y3d.YBaseMap)
    MergeFrom(*source);
  }
}

void YBaseMap::MergeFrom(const YBaseMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:y3d.YBaseMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_albedo()) {
    mutable_albedo()->::y3d::YMatMap::MergeFrom(from.albedo());
  }
  if (from.has_bump()) {
    mutable_bump()->::y3d::YMatMap::MergeFrom(from.bump());
  }
  if (from.has_normal()) {
    mutable_normal()->::y3d::YMatMap::MergeFrom(from.normal());
  }
  if (from.has_ao()) {
    mutable_ao()->::y3d::YMatMap::MergeFrom(from.ao());
  }
  if (from.has_specular()) {
    mutable_specular()->::y3d::YMatMap::MergeFrom(from.specular());
  }
  if (from.has_displacement()) {
    mutable_displacement()->::y3d::YMatMap::MergeFrom(from.displacement());
  }
  if (from.has_transclucency()) {
    mutable_transclucency()->::y3d::YMatMap::MergeFrom(from.transclucency());
  }
  if (from.has_roughness()) {
    mutable_roughness()->::y3d::YMatMap::MergeFrom(from.roughness());
  }
  if (from.has_opactity()) {
    mutable_opactity()->::y3d::YMatMap::MergeFrom(from.opactity());
  }
}

void YBaseMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:y3d.YBaseMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YBaseMap::CopyFrom(const YBaseMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:y3d.YBaseMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YBaseMap::IsInitialized() const {
  return true;
}

void YBaseMap::Swap(YBaseMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YBaseMap::InternalSwap(YBaseMap* other) {
  std::swap(albedo_, other->albedo_);
  std::swap(bump_, other->bump_);
  std::swap(normal_, other->normal_);
  std::swap(ao_, other->ao_);
  std::swap(specular_, other->specular_);
  std::swap(displacement_, other->displacement_);
  std::swap(transclucency_, other->transclucency_);
  std::swap(roughness_, other->roughness_);
  std::swap(opactity_, other->opactity_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YBaseMap::GetMetadata() const {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YBaseMap

// .y3d.YMatMap albedo = 1;
bool YBaseMap::has_albedo() const {
  return this != internal_default_instance() && albedo_ != NULL;
}
void YBaseMap::clear_albedo() {
  if (GetArenaNoVirtual() == NULL && albedo_ != NULL) delete albedo_;
  albedo_ = NULL;
}
const ::y3d::YMatMap& YBaseMap::albedo() const {
  // @@protoc_insertion_point(field_get:y3d.YBaseMap.albedo)
  return albedo_ != NULL ? *albedo_
                         : *::y3d::YMatMap::internal_default_instance();
}
::y3d::YMatMap* YBaseMap::mutable_albedo() {
  
  if (albedo_ == NULL) {
    albedo_ = new ::y3d::YMatMap;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YBaseMap.albedo)
  return albedo_;
}
::y3d::YMatMap* YBaseMap::release_albedo() {
  // @@protoc_insertion_point(field_release:y3d.YBaseMap.albedo)
  
  ::y3d::YMatMap* temp = albedo_;
  albedo_ = NULL;
  return temp;
}
void YBaseMap::set_allocated_albedo(::y3d::YMatMap* albedo) {
  delete albedo_;
  albedo_ = albedo;
  if (albedo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YBaseMap.albedo)
}

// .y3d.YMatMap bump = 2;
bool YBaseMap::has_bump() const {
  return this != internal_default_instance() && bump_ != NULL;
}
void YBaseMap::clear_bump() {
  if (GetArenaNoVirtual() == NULL && bump_ != NULL) delete bump_;
  bump_ = NULL;
}
const ::y3d::YMatMap& YBaseMap::bump() const {
  // @@protoc_insertion_point(field_get:y3d.YBaseMap.bump)
  return bump_ != NULL ? *bump_
                         : *::y3d::YMatMap::internal_default_instance();
}
::y3d::YMatMap* YBaseMap::mutable_bump() {
  
  if (bump_ == NULL) {
    bump_ = new ::y3d::YMatMap;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YBaseMap.bump)
  return bump_;
}
::y3d::YMatMap* YBaseMap::release_bump() {
  // @@protoc_insertion_point(field_release:y3d.YBaseMap.bump)
  
  ::y3d::YMatMap* temp = bump_;
  bump_ = NULL;
  return temp;
}
void YBaseMap::set_allocated_bump(::y3d::YMatMap* bump) {
  delete bump_;
  bump_ = bump;
  if (bump) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YBaseMap.bump)
}

// .y3d.YMatMap normal = 3;
bool YBaseMap::has_normal() const {
  return this != internal_default_instance() && normal_ != NULL;
}
void YBaseMap::clear_normal() {
  if (GetArenaNoVirtual() == NULL && normal_ != NULL) delete normal_;
  normal_ = NULL;
}
const ::y3d::YMatMap& YBaseMap::normal() const {
  // @@protoc_insertion_point(field_get:y3d.YBaseMap.normal)
  return normal_ != NULL ? *normal_
                         : *::y3d::YMatMap::internal_default_instance();
}
::y3d::YMatMap* YBaseMap::mutable_normal() {
  
  if (normal_ == NULL) {
    normal_ = new ::y3d::YMatMap;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YBaseMap.normal)
  return normal_;
}
::y3d::YMatMap* YBaseMap::release_normal() {
  // @@protoc_insertion_point(field_release:y3d.YBaseMap.normal)
  
  ::y3d::YMatMap* temp = normal_;
  normal_ = NULL;
  return temp;
}
void YBaseMap::set_allocated_normal(::y3d::YMatMap* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YBaseMap.normal)
}

// .y3d.YMatMap ao = 4;
bool YBaseMap::has_ao() const {
  return this != internal_default_instance() && ao_ != NULL;
}
void YBaseMap::clear_ao() {
  if (GetArenaNoVirtual() == NULL && ao_ != NULL) delete ao_;
  ao_ = NULL;
}
const ::y3d::YMatMap& YBaseMap::ao() const {
  // @@protoc_insertion_point(field_get:y3d.YBaseMap.ao)
  return ao_ != NULL ? *ao_
                         : *::y3d::YMatMap::internal_default_instance();
}
::y3d::YMatMap* YBaseMap::mutable_ao() {
  
  if (ao_ == NULL) {
    ao_ = new ::y3d::YMatMap;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YBaseMap.ao)
  return ao_;
}
::y3d::YMatMap* YBaseMap::release_ao() {
  // @@protoc_insertion_point(field_release:y3d.YBaseMap.ao)
  
  ::y3d::YMatMap* temp = ao_;
  ao_ = NULL;
  return temp;
}
void YBaseMap::set_allocated_ao(::y3d::YMatMap* ao) {
  delete ao_;
  ao_ = ao;
  if (ao) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YBaseMap.ao)
}

// .y3d.YMatMap specular = 5;
bool YBaseMap::has_specular() const {
  return this != internal_default_instance() && specular_ != NULL;
}
void YBaseMap::clear_specular() {
  if (GetArenaNoVirtual() == NULL && specular_ != NULL) delete specular_;
  specular_ = NULL;
}
const ::y3d::YMatMap& YBaseMap::specular() const {
  // @@protoc_insertion_point(field_get:y3d.YBaseMap.specular)
  return specular_ != NULL ? *specular_
                         : *::y3d::YMatMap::internal_default_instance();
}
::y3d::YMatMap* YBaseMap::mutable_specular() {
  
  if (specular_ == NULL) {
    specular_ = new ::y3d::YMatMap;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YBaseMap.specular)
  return specular_;
}
::y3d::YMatMap* YBaseMap::release_specular() {
  // @@protoc_insertion_point(field_release:y3d.YBaseMap.specular)
  
  ::y3d::YMatMap* temp = specular_;
  specular_ = NULL;
  return temp;
}
void YBaseMap::set_allocated_specular(::y3d::YMatMap* specular) {
  delete specular_;
  specular_ = specular;
  if (specular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YBaseMap.specular)
}

// .y3d.YMatMap displacement = 6;
bool YBaseMap::has_displacement() const {
  return this != internal_default_instance() && displacement_ != NULL;
}
void YBaseMap::clear_displacement() {
  if (GetArenaNoVirtual() == NULL && displacement_ != NULL) delete displacement_;
  displacement_ = NULL;
}
const ::y3d::YMatMap& YBaseMap::displacement() const {
  // @@protoc_insertion_point(field_get:y3d.YBaseMap.displacement)
  return displacement_ != NULL ? *displacement_
                         : *::y3d::YMatMap::internal_default_instance();
}
::y3d::YMatMap* YBaseMap::mutable_displacement() {
  
  if (displacement_ == NULL) {
    displacement_ = new ::y3d::YMatMap;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YBaseMap.displacement)
  return displacement_;
}
::y3d::YMatMap* YBaseMap::release_displacement() {
  // @@protoc_insertion_point(field_release:y3d.YBaseMap.displacement)
  
  ::y3d::YMatMap* temp = displacement_;
  displacement_ = NULL;
  return temp;
}
void YBaseMap::set_allocated_displacement(::y3d::YMatMap* displacement) {
  delete displacement_;
  displacement_ = displacement;
  if (displacement) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YBaseMap.displacement)
}

// .y3d.YMatMap transclucency = 79;
bool YBaseMap::has_transclucency() const {
  return this != internal_default_instance() && transclucency_ != NULL;
}
void YBaseMap::clear_transclucency() {
  if (GetArenaNoVirtual() == NULL && transclucency_ != NULL) delete transclucency_;
  transclucency_ = NULL;
}
const ::y3d::YMatMap& YBaseMap::transclucency() const {
  // @@protoc_insertion_point(field_get:y3d.YBaseMap.transclucency)
  return transclucency_ != NULL ? *transclucency_
                         : *::y3d::YMatMap::internal_default_instance();
}
::y3d::YMatMap* YBaseMap::mutable_transclucency() {
  
  if (transclucency_ == NULL) {
    transclucency_ = new ::y3d::YMatMap;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YBaseMap.transclucency)
  return transclucency_;
}
::y3d::YMatMap* YBaseMap::release_transclucency() {
  // @@protoc_insertion_point(field_release:y3d.YBaseMap.transclucency)
  
  ::y3d::YMatMap* temp = transclucency_;
  transclucency_ = NULL;
  return temp;
}
void YBaseMap::set_allocated_transclucency(::y3d::YMatMap* transclucency) {
  delete transclucency_;
  transclucency_ = transclucency;
  if (transclucency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YBaseMap.transclucency)
}

// .y3d.YMatMap roughness = 8;
bool YBaseMap::has_roughness() const {
  return this != internal_default_instance() && roughness_ != NULL;
}
void YBaseMap::clear_roughness() {
  if (GetArenaNoVirtual() == NULL && roughness_ != NULL) delete roughness_;
  roughness_ = NULL;
}
const ::y3d::YMatMap& YBaseMap::roughness() const {
  // @@protoc_insertion_point(field_get:y3d.YBaseMap.roughness)
  return roughness_ != NULL ? *roughness_
                         : *::y3d::YMatMap::internal_default_instance();
}
::y3d::YMatMap* YBaseMap::mutable_roughness() {
  
  if (roughness_ == NULL) {
    roughness_ = new ::y3d::YMatMap;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YBaseMap.roughness)
  return roughness_;
}
::y3d::YMatMap* YBaseMap::release_roughness() {
  // @@protoc_insertion_point(field_release:y3d.YBaseMap.roughness)
  
  ::y3d::YMatMap* temp = roughness_;
  roughness_ = NULL;
  return temp;
}
void YBaseMap::set_allocated_roughness(::y3d::YMatMap* roughness) {
  delete roughness_;
  roughness_ = roughness;
  if (roughness) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YBaseMap.roughness)
}

// .y3d.YMatMap opactity = 9;
bool YBaseMap::has_opactity() const {
  return this != internal_default_instance() && opactity_ != NULL;
}
void YBaseMap::clear_opactity() {
  if (GetArenaNoVirtual() == NULL && opactity_ != NULL) delete opactity_;
  opactity_ = NULL;
}
const ::y3d::YMatMap& YBaseMap::opactity() const {
  // @@protoc_insertion_point(field_get:y3d.YBaseMap.opactity)
  return opactity_ != NULL ? *opactity_
                         : *::y3d::YMatMap::internal_default_instance();
}
::y3d::YMatMap* YBaseMap::mutable_opactity() {
  
  if (opactity_ == NULL) {
    opactity_ = new ::y3d::YMatMap;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YBaseMap.opactity)
  return opactity_;
}
::y3d::YMatMap* YBaseMap::release_opactity() {
  // @@protoc_insertion_point(field_release:y3d.YBaseMap.opactity)
  
  ::y3d::YMatMap* temp = opactity_;
  opactity_ = NULL;
  return temp;
}
void YBaseMap::set_allocated_opactity(::y3d::YMatMap* opactity) {
  delete opactity_;
  opactity_ = opactity;
  if (opactity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YBaseMap.opactity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YMatStandard::kIdFieldNumber;
const int YMatStandard::kNameFieldNumber;
const int YMatStandard::kDiffuseFieldNumber;
const int YMatStandard::kSpecularFieldNumber;
const int YMatStandard::kAmbientFieldNumber;
const int YMatStandard::kEmissiveFieldNumber;
const int YMatStandard::kMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YMatStandard::YMatStandard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ymat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:y3d.YMatStandard)
}
YMatStandard::YMatStandard(const YMatStandard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_diffuse()) {
    diffuse_ = new ::y3d::YDiffuse(*from.diffuse_);
  } else {
    diffuse_ = NULL;
  }
  if (from.has_specular()) {
    specular_ = new ::y3d::YSpecular(*from.specular_);
  } else {
    specular_ = NULL;
  }
  if (from.has_ambient()) {
    ambient_ = new ::y3d::YAmbient(*from.ambient_);
  } else {
    ambient_ = NULL;
  }
  if (from.has_emissive()) {
    emissive_ = new ::y3d::YEmissive(*from.emissive_);
  } else {
    emissive_ = NULL;
  }
  if (from.has_map()) {
    map_ = new ::y3d::YBaseMap(*from.map_);
  } else {
    map_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:y3d.YMatStandard)
}

void YMatStandard::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&diffuse_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&diffuse_) + sizeof(id_));
  _cached_size_ = 0;
}

YMatStandard::~YMatStandard() {
  // @@protoc_insertion_point(destructor:y3d.YMatStandard)
  SharedDtor();
}

void YMatStandard::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete diffuse_;
  }
  if (this != internal_default_instance()) {
    delete specular_;
  }
  if (this != internal_default_instance()) {
    delete ambient_;
  }
  if (this != internal_default_instance()) {
    delete emissive_;
  }
  if (this != internal_default_instance()) {
    delete map_;
  }
}

void YMatStandard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YMatStandard::descriptor() {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[10].descriptor;
}

const YMatStandard& YMatStandard::default_instance() {
  protobuf_ymat_2eproto::InitDefaults();
  return *internal_default_instance();
}

YMatStandard* YMatStandard::New(::google::protobuf::Arena* arena) const {
  YMatStandard* n = new YMatStandard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YMatStandard::Clear() {
// @@protoc_insertion_point(message_clear_start:y3d.YMatStandard)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && diffuse_ != NULL) {
    delete diffuse_;
  }
  diffuse_ = NULL;
  if (GetArenaNoVirtual() == NULL && specular_ != NULL) {
    delete specular_;
  }
  specular_ = NULL;
  if (GetArenaNoVirtual() == NULL && ambient_ != NULL) {
    delete ambient_;
  }
  ambient_ = NULL;
  if (GetArenaNoVirtual() == NULL && emissive_ != NULL) {
    delete emissive_;
  }
  emissive_ = NULL;
  if (GetArenaNoVirtual() == NULL && map_ != NULL) {
    delete map_;
  }
  map_ = NULL;
  id_ = 0u;
}

bool YMatStandard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:y3d.YMatStandard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "y3d.YMatStandard.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YDiffuse diffuse = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diffuse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YSpecular specular = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specular()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YAmbient ambient = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ambient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YEmissive emissive = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emissive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YBaseMap map = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:y3d.YMatStandard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:y3d.YMatStandard)
  return false;
#undef DO_
}

void YMatStandard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:y3d.YMatStandard)
  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YMatStandard.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .y3d.YDiffuse diffuse = 3;
  if (this->has_diffuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->diffuse_, output);
  }

  // .y3d.YSpecular specular = 4;
  if (this->has_specular()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->specular_, output);
  }

  // .y3d.YAmbient ambient = 5;
  if (this->has_ambient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ambient_, output);
  }

  // .y3d.YEmissive emissive = 6;
  if (this->has_emissive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->emissive_, output);
  }

  // .y3d.YBaseMap map = 7;
  if (this->has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->map_, output);
  }

  // @@protoc_insertion_point(serialize_end:y3d.YMatStandard)
}

::google::protobuf::uint8* YMatStandard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:y3d.YMatStandard)
  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YMatStandard.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .y3d.YDiffuse diffuse = 3;
  if (this->has_diffuse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->diffuse_, false, target);
  }

  // .y3d.YSpecular specular = 4;
  if (this->has_specular()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->specular_, false, target);
  }

  // .y3d.YAmbient ambient = 5;
  if (this->has_ambient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->ambient_, false, target);
  }

  // .y3d.YEmissive emissive = 6;
  if (this->has_emissive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->emissive_, false, target);
  }

  // .y3d.YBaseMap map = 7;
  if (this->has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->map_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:y3d.YMatStandard)
  return target;
}

size_t YMatStandard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:y3d.YMatStandard)
  size_t total_size = 0;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .y3d.YDiffuse diffuse = 3;
  if (this->has_diffuse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->diffuse_);
  }

  // .y3d.YSpecular specular = 4;
  if (this->has_specular()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->specular_);
  }

  // .y3d.YAmbient ambient = 5;
  if (this->has_ambient()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ambient_);
  }

  // .y3d.YEmissive emissive = 6;
  if (this->has_emissive()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->emissive_);
  }

  // .y3d.YBaseMap map = 7;
  if (this->has_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->map_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YMatStandard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:y3d.YMatStandard)
  GOOGLE_DCHECK_NE(&from, this);
  const YMatStandard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YMatStandard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:y3d.YMatStandard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:y3d.YMatStandard)
    MergeFrom(*source);
  }
}

void YMatStandard::MergeFrom(const YMatStandard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:y3d.YMatStandard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_diffuse()) {
    mutable_diffuse()->::y3d::YDiffuse::MergeFrom(from.diffuse());
  }
  if (from.has_specular()) {
    mutable_specular()->::y3d::YSpecular::MergeFrom(from.specular());
  }
  if (from.has_ambient()) {
    mutable_ambient()->::y3d::YAmbient::MergeFrom(from.ambient());
  }
  if (from.has_emissive()) {
    mutable_emissive()->::y3d::YEmissive::MergeFrom(from.emissive());
  }
  if (from.has_map()) {
    mutable_map()->::y3d::YBaseMap::MergeFrom(from.map());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void YMatStandard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:y3d.YMatStandard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YMatStandard::CopyFrom(const YMatStandard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:y3d.YMatStandard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YMatStandard::IsInitialized() const {
  return true;
}

void YMatStandard::Swap(YMatStandard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YMatStandard::InternalSwap(YMatStandard* other) {
  name_.Swap(&other->name_);
  std::swap(diffuse_, other->diffuse_);
  std::swap(specular_, other->specular_);
  std::swap(ambient_, other->ambient_);
  std::swap(emissive_, other->emissive_);
  std::swap(map_, other->map_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YMatStandard::GetMetadata() const {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YMatStandard

// uint32 id = 1;
void YMatStandard::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 YMatStandard::id() const {
  // @@protoc_insertion_point(field_get:y3d.YMatStandard.id)
  return id_;
}
void YMatStandard::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:y3d.YMatStandard.id)
}

// string name = 2;
void YMatStandard::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& YMatStandard::name() const {
  // @@protoc_insertion_point(field_get:y3d.YMatStandard.name)
  return name_.GetNoArena();
}
void YMatStandard::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YMatStandard.name)
}
#if LANG_CXX11
void YMatStandard::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:y3d.YMatStandard.name)
}
#endif
void YMatStandard::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YMatStandard.name)
}
void YMatStandard::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YMatStandard.name)
}
::std::string* YMatStandard::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YMatStandard.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* YMatStandard::release_name() {
  // @@protoc_insertion_point(field_release:y3d.YMatStandard.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void YMatStandard::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:y3d.YMatStandard.name)
}

// .y3d.YDiffuse diffuse = 3;
bool YMatStandard::has_diffuse() const {
  return this != internal_default_instance() && diffuse_ != NULL;
}
void YMatStandard::clear_diffuse() {
  if (GetArenaNoVirtual() == NULL && diffuse_ != NULL) delete diffuse_;
  diffuse_ = NULL;
}
const ::y3d::YDiffuse& YMatStandard::diffuse() const {
  // @@protoc_insertion_point(field_get:y3d.YMatStandard.diffuse)
  return diffuse_ != NULL ? *diffuse_
                         : *::y3d::YDiffuse::internal_default_instance();
}
::y3d::YDiffuse* YMatStandard::mutable_diffuse() {
  
  if (diffuse_ == NULL) {
    diffuse_ = new ::y3d::YDiffuse;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YMatStandard.diffuse)
  return diffuse_;
}
::y3d::YDiffuse* YMatStandard::release_diffuse() {
  // @@protoc_insertion_point(field_release:y3d.YMatStandard.diffuse)
  
  ::y3d::YDiffuse* temp = diffuse_;
  diffuse_ = NULL;
  return temp;
}
void YMatStandard::set_allocated_diffuse(::y3d::YDiffuse* diffuse) {
  delete diffuse_;
  diffuse_ = diffuse;
  if (diffuse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YMatStandard.diffuse)
}

// .y3d.YSpecular specular = 4;
bool YMatStandard::has_specular() const {
  return this != internal_default_instance() && specular_ != NULL;
}
void YMatStandard::clear_specular() {
  if (GetArenaNoVirtual() == NULL && specular_ != NULL) delete specular_;
  specular_ = NULL;
}
const ::y3d::YSpecular& YMatStandard::specular() const {
  // @@protoc_insertion_point(field_get:y3d.YMatStandard.specular)
  return specular_ != NULL ? *specular_
                         : *::y3d::YSpecular::internal_default_instance();
}
::y3d::YSpecular* YMatStandard::mutable_specular() {
  
  if (specular_ == NULL) {
    specular_ = new ::y3d::YSpecular;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YMatStandard.specular)
  return specular_;
}
::y3d::YSpecular* YMatStandard::release_specular() {
  // @@protoc_insertion_point(field_release:y3d.YMatStandard.specular)
  
  ::y3d::YSpecular* temp = specular_;
  specular_ = NULL;
  return temp;
}
void YMatStandard::set_allocated_specular(::y3d::YSpecular* specular) {
  delete specular_;
  specular_ = specular;
  if (specular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YMatStandard.specular)
}

// .y3d.YAmbient ambient = 5;
bool YMatStandard::has_ambient() const {
  return this != internal_default_instance() && ambient_ != NULL;
}
void YMatStandard::clear_ambient() {
  if (GetArenaNoVirtual() == NULL && ambient_ != NULL) delete ambient_;
  ambient_ = NULL;
}
const ::y3d::YAmbient& YMatStandard::ambient() const {
  // @@protoc_insertion_point(field_get:y3d.YMatStandard.ambient)
  return ambient_ != NULL ? *ambient_
                         : *::y3d::YAmbient::internal_default_instance();
}
::y3d::YAmbient* YMatStandard::mutable_ambient() {
  
  if (ambient_ == NULL) {
    ambient_ = new ::y3d::YAmbient;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YMatStandard.ambient)
  return ambient_;
}
::y3d::YAmbient* YMatStandard::release_ambient() {
  // @@protoc_insertion_point(field_release:y3d.YMatStandard.ambient)
  
  ::y3d::YAmbient* temp = ambient_;
  ambient_ = NULL;
  return temp;
}
void YMatStandard::set_allocated_ambient(::y3d::YAmbient* ambient) {
  delete ambient_;
  ambient_ = ambient;
  if (ambient) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YMatStandard.ambient)
}

// .y3d.YEmissive emissive = 6;
bool YMatStandard::has_emissive() const {
  return this != internal_default_instance() && emissive_ != NULL;
}
void YMatStandard::clear_emissive() {
  if (GetArenaNoVirtual() == NULL && emissive_ != NULL) delete emissive_;
  emissive_ = NULL;
}
const ::y3d::YEmissive& YMatStandard::emissive() const {
  // @@protoc_insertion_point(field_get:y3d.YMatStandard.emissive)
  return emissive_ != NULL ? *emissive_
                         : *::y3d::YEmissive::internal_default_instance();
}
::y3d::YEmissive* YMatStandard::mutable_emissive() {
  
  if (emissive_ == NULL) {
    emissive_ = new ::y3d::YEmissive;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YMatStandard.emissive)
  return emissive_;
}
::y3d::YEmissive* YMatStandard::release_emissive() {
  // @@protoc_insertion_point(field_release:y3d.YMatStandard.emissive)
  
  ::y3d::YEmissive* temp = emissive_;
  emissive_ = NULL;
  return temp;
}
void YMatStandard::set_allocated_emissive(::y3d::YEmissive* emissive) {
  delete emissive_;
  emissive_ = emissive;
  if (emissive) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YMatStandard.emissive)
}

// .y3d.YBaseMap map = 7;
bool YMatStandard::has_map() const {
  return this != internal_default_instance() && map_ != NULL;
}
void YMatStandard::clear_map() {
  if (GetArenaNoVirtual() == NULL && map_ != NULL) delete map_;
  map_ = NULL;
}
const ::y3d::YBaseMap& YMatStandard::map() const {
  // @@protoc_insertion_point(field_get:y3d.YMatStandard.map)
  return map_ != NULL ? *map_
                         : *::y3d::YBaseMap::internal_default_instance();
}
::y3d::YBaseMap* YMatStandard::mutable_map() {
  
  if (map_ == NULL) {
    map_ = new ::y3d::YBaseMap;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YMatStandard.map)
  return map_;
}
::y3d::YBaseMap* YMatStandard::release_map() {
  // @@protoc_insertion_point(field_release:y3d.YMatStandard.map)
  
  ::y3d::YBaseMap* temp = map_;
  map_ = NULL;
  return temp;
}
void YMatStandard::set_allocated_map(::y3d::YBaseMap* map) {
  delete map_;
  map_ = map;
  if (map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YMatStandard.map)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YMatVray::kBrdfFieldNumber;
const int YMatVray::kDiffuseFieldNumber;
const int YMatVray::kMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YMatVray::YMatVray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ymat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:y3d.YMatVray)
}
YMatVray::YMatVray(const YMatVray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_diffuse()) {
    diffuse_ = new ::y3d::YDiffuse(*from.diffuse_);
  } else {
    diffuse_ = NULL;
  }
  if (from.has_map()) {
    map_ = new ::y3d::YBaseMap(*from.map_);
  } else {
    map_ = NULL;
  }
  brdf_ = from.brdf_;
  // @@protoc_insertion_point(copy_constructor:y3d.YMatVray)
}

void YMatVray::SharedCtor() {
  ::memset(&diffuse_, 0, reinterpret_cast<char*>(&brdf_) -
    reinterpret_cast<char*>(&diffuse_) + sizeof(brdf_));
  _cached_size_ = 0;
}

YMatVray::~YMatVray() {
  // @@protoc_insertion_point(destructor:y3d.YMatVray)
  SharedDtor();
}

void YMatVray::SharedDtor() {
  if (this != internal_default_instance()) {
    delete diffuse_;
  }
  if (this != internal_default_instance()) {
    delete map_;
  }
}

void YMatVray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YMatVray::descriptor() {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[11].descriptor;
}

const YMatVray& YMatVray::default_instance() {
  protobuf_ymat_2eproto::InitDefaults();
  return *internal_default_instance();
}

YMatVray* YMatVray::New(::google::protobuf::Arena* arena) const {
  YMatVray* n = new YMatVray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YMatVray::Clear() {
// @@protoc_insertion_point(message_clear_start:y3d.YMatVray)
  if (GetArenaNoVirtual() == NULL && diffuse_ != NULL) {
    delete diffuse_;
  }
  diffuse_ = NULL;
  if (GetArenaNoVirtual() == NULL && map_ != NULL) {
    delete map_;
  }
  map_ = NULL;
  brdf_ = 0;
}

bool YMatVray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:y3d.YMatVray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .y3d.BRDF_Type brdf = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_brdf(static_cast< ::y3d::BRDF_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YDiffuse diffuse = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diffuse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YBaseMap map = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:y3d.YMatVray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:y3d.YMatVray)
  return false;
#undef DO_
}

void YMatVray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:y3d.YMatVray)
  // .y3d.BRDF_Type brdf = 1;
  if (this->brdf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->brdf(), output);
  }

  // .y3d.YDiffuse diffuse = 2;
  if (this->has_diffuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->diffuse_, output);
  }

  // .y3d.YBaseMap map = 3;
  if (this->has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->map_, output);
  }

  // @@protoc_insertion_point(serialize_end:y3d.YMatVray)
}

::google::protobuf::uint8* YMatVray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:y3d.YMatVray)
  // .y3d.BRDF_Type brdf = 1;
  if (this->brdf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->brdf(), target);
  }

  // .y3d.YDiffuse diffuse = 2;
  if (this->has_diffuse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->diffuse_, false, target);
  }

  // .y3d.YBaseMap map = 3;
  if (this->has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->map_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:y3d.YMatVray)
  return target;
}

size_t YMatVray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:y3d.YMatVray)
  size_t total_size = 0;

  // .y3d.YDiffuse diffuse = 2;
  if (this->has_diffuse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->diffuse_);
  }

  // .y3d.YBaseMap map = 3;
  if (this->has_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->map_);
  }

  // .y3d.BRDF_Type brdf = 1;
  if (this->brdf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->brdf());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YMatVray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:y3d.YMatVray)
  GOOGLE_DCHECK_NE(&from, this);
  const YMatVray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YMatVray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:y3d.YMatVray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:y3d.YMatVray)
    MergeFrom(*source);
  }
}

void YMatVray::MergeFrom(const YMatVray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:y3d.YMatVray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_diffuse()) {
    mutable_diffuse()->::y3d::YDiffuse::MergeFrom(from.diffuse());
  }
  if (from.has_map()) {
    mutable_map()->::y3d::YBaseMap::MergeFrom(from.map());
  }
  if (from.brdf() != 0) {
    set_brdf(from.brdf());
  }
}

void YMatVray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:y3d.YMatVray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YMatVray::CopyFrom(const YMatVray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:y3d.YMatVray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YMatVray::IsInitialized() const {
  return true;
}

void YMatVray::Swap(YMatVray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YMatVray::InternalSwap(YMatVray* other) {
  std::swap(diffuse_, other->diffuse_);
  std::swap(map_, other->map_);
  std::swap(brdf_, other->brdf_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YMatVray::GetMetadata() const {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YMatVray

// .y3d.BRDF_Type brdf = 1;
void YMatVray::clear_brdf() {
  brdf_ = 0;
}
::y3d::BRDF_Type YMatVray::brdf() const {
  // @@protoc_insertion_point(field_get:y3d.YMatVray.brdf)
  return static_cast< ::y3d::BRDF_Type >(brdf_);
}
void YMatVray::set_brdf(::y3d::BRDF_Type value) {
  
  brdf_ = value;
  // @@protoc_insertion_point(field_set:y3d.YMatVray.brdf)
}

// .y3d.YDiffuse diffuse = 2;
bool YMatVray::has_diffuse() const {
  return this != internal_default_instance() && diffuse_ != NULL;
}
void YMatVray::clear_diffuse() {
  if (GetArenaNoVirtual() == NULL && diffuse_ != NULL) delete diffuse_;
  diffuse_ = NULL;
}
const ::y3d::YDiffuse& YMatVray::diffuse() const {
  // @@protoc_insertion_point(field_get:y3d.YMatVray.diffuse)
  return diffuse_ != NULL ? *diffuse_
                         : *::y3d::YDiffuse::internal_default_instance();
}
::y3d::YDiffuse* YMatVray::mutable_diffuse() {
  
  if (diffuse_ == NULL) {
    diffuse_ = new ::y3d::YDiffuse;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YMatVray.diffuse)
  return diffuse_;
}
::y3d::YDiffuse* YMatVray::release_diffuse() {
  // @@protoc_insertion_point(field_release:y3d.YMatVray.diffuse)
  
  ::y3d::YDiffuse* temp = diffuse_;
  diffuse_ = NULL;
  return temp;
}
void YMatVray::set_allocated_diffuse(::y3d::YDiffuse* diffuse) {
  delete diffuse_;
  diffuse_ = diffuse;
  if (diffuse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YMatVray.diffuse)
}

// .y3d.YBaseMap map = 3;
bool YMatVray::has_map() const {
  return this != internal_default_instance() && map_ != NULL;
}
void YMatVray::clear_map() {
  if (GetArenaNoVirtual() == NULL && map_ != NULL) delete map_;
  map_ = NULL;
}
const ::y3d::YBaseMap& YMatVray::map() const {
  // @@protoc_insertion_point(field_get:y3d.YMatVray.map)
  return map_ != NULL ? *map_
                         : *::y3d::YBaseMap::internal_default_instance();
}
::y3d::YBaseMap* YMatVray::mutable_map() {
  
  if (map_ == NULL) {
    map_ = new ::y3d::YBaseMap;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YMatVray.map)
  return map_;
}
::y3d::YBaseMap* YMatVray::release_map() {
  // @@protoc_insertion_point(field_release:y3d.YMatVray.map)
  
  ::y3d::YBaseMap* temp = map_;
  map_ = NULL;
  return temp;
}
void YMatVray::set_allocated_map(::y3d::YBaseMap* map) {
  delete map_;
  map_ = map;
  if (map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YMatVray.map)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YMat::kIdFieldNumber;
const int YMat::kNameFieldNumber;
const int YMat::kMStandardFieldNumber;
const int YMat::kMVrayFieldNumber;
const int YMat::kMPbrFieldNumber;
const int YMat::kMMultiFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YMat::YMat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ymat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:y3d.YMat)
}
YMat::YMat(const YMat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_m_standard()) {
    m_standard_ = new ::y3d::YMatStandard(*from.m_standard_);
  } else {
    m_standard_ = NULL;
  }
  if (from.has_m_vray()) {
    m_vray_ = new ::y3d::YMatVray(*from.m_vray_);
  } else {
    m_vray_ = NULL;
  }
  if (from.has_m_pbr()) {
    m_pbr_ = new ::y3d::YMatPBR(*from.m_pbr_);
  } else {
    m_pbr_ = NULL;
  }
  if (from.has_m_multi()) {
    m_multi_ = new ::y3d::YMultiMat(*from.m_multi_);
  } else {
    m_multi_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:y3d.YMat)
}

void YMat::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&m_standard_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&m_standard_) + sizeof(id_));
  _cached_size_ = 0;
}

YMat::~YMat() {
  // @@protoc_insertion_point(destructor:y3d.YMat)
  SharedDtor();
}

void YMat::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete m_standard_;
  }
  if (this != internal_default_instance()) {
    delete m_vray_;
  }
  if (this != internal_default_instance()) {
    delete m_pbr_;
  }
  if (this != internal_default_instance()) {
    delete m_multi_;
  }
}

void YMat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YMat::descriptor() {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[12].descriptor;
}

const YMat& YMat::default_instance() {
  protobuf_ymat_2eproto::InitDefaults();
  return *internal_default_instance();
}

YMat* YMat::New(::google::protobuf::Arena* arena) const {
  YMat* n = new YMat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YMat::Clear() {
// @@protoc_insertion_point(message_clear_start:y3d.YMat)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && m_standard_ != NULL) {
    delete m_standard_;
  }
  m_standard_ = NULL;
  if (GetArenaNoVirtual() == NULL && m_vray_ != NULL) {
    delete m_vray_;
  }
  m_vray_ = NULL;
  if (GetArenaNoVirtual() == NULL && m_pbr_ != NULL) {
    delete m_pbr_;
  }
  m_pbr_ = NULL;
  if (GetArenaNoVirtual() == NULL && m_multi_ != NULL) {
    delete m_multi_;
  }
  m_multi_ = NULL;
  id_ = 0u;
}

bool YMat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:y3d.YMat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "y3d.YMat.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YMatStandard m_standard = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_standard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YMatVray m_vray = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_vray()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YMatPBR m_pbr = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_pbr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .y3d.YMultiMat m_multi = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_multi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:y3d.YMat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:y3d.YMat)
  return false;
#undef DO_
}

void YMat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:y3d.YMat)
  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YMat.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .y3d.YMatStandard m_standard = 3;
  if (this->has_m_standard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->m_standard_, output);
  }

  // .y3d.YMatVray m_vray = 4;
  if (this->has_m_vray()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->m_vray_, output);
  }

  // .y3d.YMatPBR m_pbr = 5;
  if (this->has_m_pbr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->m_pbr_, output);
  }

  // .y3d.YMultiMat m_multi = 6;
  if (this->has_m_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->m_multi_, output);
  }

  // @@protoc_insertion_point(serialize_end:y3d.YMat)
}

::google::protobuf::uint8* YMat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:y3d.YMat)
  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "y3d.YMat.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .y3d.YMatStandard m_standard = 3;
  if (this->has_m_standard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->m_standard_, false, target);
  }

  // .y3d.YMatVray m_vray = 4;
  if (this->has_m_vray()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->m_vray_, false, target);
  }

  // .y3d.YMatPBR m_pbr = 5;
  if (this->has_m_pbr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->m_pbr_, false, target);
  }

  // .y3d.YMultiMat m_multi = 6;
  if (this->has_m_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->m_multi_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:y3d.YMat)
  return target;
}

size_t YMat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:y3d.YMat)
  size_t total_size = 0;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .y3d.YMatStandard m_standard = 3;
  if (this->has_m_standard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->m_standard_);
  }

  // .y3d.YMatVray m_vray = 4;
  if (this->has_m_vray()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->m_vray_);
  }

  // .y3d.YMatPBR m_pbr = 5;
  if (this->has_m_pbr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->m_pbr_);
  }

  // .y3d.YMultiMat m_multi = 6;
  if (this->has_m_multi()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->m_multi_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YMat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:y3d.YMat)
  GOOGLE_DCHECK_NE(&from, this);
  const YMat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YMat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:y3d.YMat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:y3d.YMat)
    MergeFrom(*source);
  }
}

void YMat::MergeFrom(const YMat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:y3d.YMat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_m_standard()) {
    mutable_m_standard()->::y3d::YMatStandard::MergeFrom(from.m_standard());
  }
  if (from.has_m_vray()) {
    mutable_m_vray()->::y3d::YMatVray::MergeFrom(from.m_vray());
  }
  if (from.has_m_pbr()) {
    mutable_m_pbr()->::y3d::YMatPBR::MergeFrom(from.m_pbr());
  }
  if (from.has_m_multi()) {
    mutable_m_multi()->::y3d::YMultiMat::MergeFrom(from.m_multi());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void YMat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:y3d.YMat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YMat::CopyFrom(const YMat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:y3d.YMat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YMat::IsInitialized() const {
  return true;
}

void YMat::Swap(YMat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YMat::InternalSwap(YMat* other) {
  name_.Swap(&other->name_);
  std::swap(m_standard_, other->m_standard_);
  std::swap(m_vray_, other->m_vray_);
  std::swap(m_pbr_, other->m_pbr_);
  std::swap(m_multi_, other->m_multi_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YMat::GetMetadata() const {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YMat

// uint32 id = 1;
void YMat::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 YMat::id() const {
  // @@protoc_insertion_point(field_get:y3d.YMat.id)
  return id_;
}
void YMat::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:y3d.YMat.id)
}

// string name = 2;
void YMat::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& YMat::name() const {
  // @@protoc_insertion_point(field_get:y3d.YMat.name)
  return name_.GetNoArena();
}
void YMat::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:y3d.YMat.name)
}
#if LANG_CXX11
void YMat::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:y3d.YMat.name)
}
#endif
void YMat::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:y3d.YMat.name)
}
void YMat::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:y3d.YMat.name)
}
::std::string* YMat::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:y3d.YMat.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* YMat::release_name() {
  // @@protoc_insertion_point(field_release:y3d.YMat.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void YMat::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:y3d.YMat.name)
}

// .y3d.YMatStandard m_standard = 3;
bool YMat::has_m_standard() const {
  return this != internal_default_instance() && m_standard_ != NULL;
}
void YMat::clear_m_standard() {
  if (GetArenaNoVirtual() == NULL && m_standard_ != NULL) delete m_standard_;
  m_standard_ = NULL;
}
const ::y3d::YMatStandard& YMat::m_standard() const {
  // @@protoc_insertion_point(field_get:y3d.YMat.m_standard)
  return m_standard_ != NULL ? *m_standard_
                         : *::y3d::YMatStandard::internal_default_instance();
}
::y3d::YMatStandard* YMat::mutable_m_standard() {
  
  if (m_standard_ == NULL) {
    m_standard_ = new ::y3d::YMatStandard;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YMat.m_standard)
  return m_standard_;
}
::y3d::YMatStandard* YMat::release_m_standard() {
  // @@protoc_insertion_point(field_release:y3d.YMat.m_standard)
  
  ::y3d::YMatStandard* temp = m_standard_;
  m_standard_ = NULL;
  return temp;
}
void YMat::set_allocated_m_standard(::y3d::YMatStandard* m_standard) {
  delete m_standard_;
  m_standard_ = m_standard;
  if (m_standard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YMat.m_standard)
}

// .y3d.YMatVray m_vray = 4;
bool YMat::has_m_vray() const {
  return this != internal_default_instance() && m_vray_ != NULL;
}
void YMat::clear_m_vray() {
  if (GetArenaNoVirtual() == NULL && m_vray_ != NULL) delete m_vray_;
  m_vray_ = NULL;
}
const ::y3d::YMatVray& YMat::m_vray() const {
  // @@protoc_insertion_point(field_get:y3d.YMat.m_vray)
  return m_vray_ != NULL ? *m_vray_
                         : *::y3d::YMatVray::internal_default_instance();
}
::y3d::YMatVray* YMat::mutable_m_vray() {
  
  if (m_vray_ == NULL) {
    m_vray_ = new ::y3d::YMatVray;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YMat.m_vray)
  return m_vray_;
}
::y3d::YMatVray* YMat::release_m_vray() {
  // @@protoc_insertion_point(field_release:y3d.YMat.m_vray)
  
  ::y3d::YMatVray* temp = m_vray_;
  m_vray_ = NULL;
  return temp;
}
void YMat::set_allocated_m_vray(::y3d::YMatVray* m_vray) {
  delete m_vray_;
  m_vray_ = m_vray;
  if (m_vray) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YMat.m_vray)
}

// .y3d.YMatPBR m_pbr = 5;
bool YMat::has_m_pbr() const {
  return this != internal_default_instance() && m_pbr_ != NULL;
}
void YMat::clear_m_pbr() {
  if (GetArenaNoVirtual() == NULL && m_pbr_ != NULL) delete m_pbr_;
  m_pbr_ = NULL;
}
const ::y3d::YMatPBR& YMat::m_pbr() const {
  // @@protoc_insertion_point(field_get:y3d.YMat.m_pbr)
  return m_pbr_ != NULL ? *m_pbr_
                         : *::y3d::YMatPBR::internal_default_instance();
}
::y3d::YMatPBR* YMat::mutable_m_pbr() {
  
  if (m_pbr_ == NULL) {
    m_pbr_ = new ::y3d::YMatPBR;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YMat.m_pbr)
  return m_pbr_;
}
::y3d::YMatPBR* YMat::release_m_pbr() {
  // @@protoc_insertion_point(field_release:y3d.YMat.m_pbr)
  
  ::y3d::YMatPBR* temp = m_pbr_;
  m_pbr_ = NULL;
  return temp;
}
void YMat::set_allocated_m_pbr(::y3d::YMatPBR* m_pbr) {
  delete m_pbr_;
  m_pbr_ = m_pbr;
  if (m_pbr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YMat.m_pbr)
}

// .y3d.YMultiMat m_multi = 6;
bool YMat::has_m_multi() const {
  return this != internal_default_instance() && m_multi_ != NULL;
}
void YMat::clear_m_multi() {
  if (GetArenaNoVirtual() == NULL && m_multi_ != NULL) delete m_multi_;
  m_multi_ = NULL;
}
const ::y3d::YMultiMat& YMat::m_multi() const {
  // @@protoc_insertion_point(field_get:y3d.YMat.m_multi)
  return m_multi_ != NULL ? *m_multi_
                         : *::y3d::YMultiMat::internal_default_instance();
}
::y3d::YMultiMat* YMat::mutable_m_multi() {
  
  if (m_multi_ == NULL) {
    m_multi_ = new ::y3d::YMultiMat;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YMat.m_multi)
  return m_multi_;
}
::y3d::YMultiMat* YMat::release_m_multi() {
  // @@protoc_insertion_point(field_release:y3d.YMat.m_multi)
  
  ::y3d::YMultiMat* temp = m_multi_;
  m_multi_ = NULL;
  return temp;
}
void YMat::set_allocated_m_multi(::y3d::YMultiMat* m_multi) {
  delete m_multi_;
  m_multi_ = m_multi;
  if (m_multi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YMat.m_multi)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int YMultiMat::kDefaultDiffuseFieldNumber;
const int YMultiMat::kMaterialsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

YMultiMat::YMultiMat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ymat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:y3d.YMultiMat)
}
YMultiMat::YMultiMat(const YMultiMat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      materials_(from.materials_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_default_diffuse()) {
    default_diffuse_ = new ::y3d::YDiffuse(*from.default_diffuse_);
  } else {
    default_diffuse_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:y3d.YMultiMat)
}

void YMultiMat::SharedCtor() {
  default_diffuse_ = NULL;
  _cached_size_ = 0;
}

YMultiMat::~YMultiMat() {
  // @@protoc_insertion_point(destructor:y3d.YMultiMat)
  SharedDtor();
}

void YMultiMat::SharedDtor() {
  if (this != internal_default_instance()) {
    delete default_diffuse_;
  }
}

void YMultiMat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YMultiMat::descriptor() {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[13].descriptor;
}

const YMultiMat& YMultiMat::default_instance() {
  protobuf_ymat_2eproto::InitDefaults();
  return *internal_default_instance();
}

YMultiMat* YMultiMat::New(::google::protobuf::Arena* arena) const {
  YMultiMat* n = new YMultiMat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void YMultiMat::Clear() {
// @@protoc_insertion_point(message_clear_start:y3d.YMultiMat)
  materials_.Clear();
  if (GetArenaNoVirtual() == NULL && default_diffuse_ != NULL) {
    delete default_diffuse_;
  }
  default_diffuse_ = NULL;
}

bool YMultiMat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:y3d.YMultiMat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .y3d.YDiffuse default_diffuse = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_diffuse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .y3d.YMat materials = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_materials()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:y3d.YMultiMat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:y3d.YMultiMat)
  return false;
#undef DO_
}

void YMultiMat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:y3d.YMultiMat)
  // .y3d.YDiffuse default_diffuse = 1;
  if (this->has_default_diffuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->default_diffuse_, output);
  }

  // repeated .y3d.YMat materials = 2;
  for (unsigned int i = 0, n = this->materials_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->materials(i), output);
  }

  // @@protoc_insertion_point(serialize_end:y3d.YMultiMat)
}

::google::protobuf::uint8* YMultiMat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:y3d.YMultiMat)
  // .y3d.YDiffuse default_diffuse = 1;
  if (this->has_default_diffuse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->default_diffuse_, false, target);
  }

  // repeated .y3d.YMat materials = 2;
  for (unsigned int i = 0, n = this->materials_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->materials(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:y3d.YMultiMat)
  return target;
}

size_t YMultiMat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:y3d.YMultiMat)
  size_t total_size = 0;

  // repeated .y3d.YMat materials = 2;
  {
    unsigned int count = this->materials_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->materials(i));
    }
  }

  // .y3d.YDiffuse default_diffuse = 1;
  if (this->has_default_diffuse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->default_diffuse_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YMultiMat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:y3d.YMultiMat)
  GOOGLE_DCHECK_NE(&from, this);
  const YMultiMat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const YMultiMat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:y3d.YMultiMat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:y3d.YMultiMat)
    MergeFrom(*source);
  }
}

void YMultiMat::MergeFrom(const YMultiMat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:y3d.YMultiMat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  materials_.MergeFrom(from.materials_);
  if (from.has_default_diffuse()) {
    mutable_default_diffuse()->::y3d::YDiffuse::MergeFrom(from.default_diffuse());
  }
}

void YMultiMat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:y3d.YMultiMat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YMultiMat::CopyFrom(const YMultiMat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:y3d.YMultiMat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YMultiMat::IsInitialized() const {
  return true;
}

void YMultiMat::Swap(YMultiMat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void YMultiMat::InternalSwap(YMultiMat* other) {
  materials_.UnsafeArenaSwap(&other->materials_);
  std::swap(default_diffuse_, other->default_diffuse_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata YMultiMat::GetMetadata() const {
  protobuf_ymat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ymat_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// YMultiMat

// .y3d.YDiffuse default_diffuse = 1;
bool YMultiMat::has_default_diffuse() const {
  return this != internal_default_instance() && default_diffuse_ != NULL;
}
void YMultiMat::clear_default_diffuse() {
  if (GetArenaNoVirtual() == NULL && default_diffuse_ != NULL) delete default_diffuse_;
  default_diffuse_ = NULL;
}
const ::y3d::YDiffuse& YMultiMat::default_diffuse() const {
  // @@protoc_insertion_point(field_get:y3d.YMultiMat.default_diffuse)
  return default_diffuse_ != NULL ? *default_diffuse_
                         : *::y3d::YDiffuse::internal_default_instance();
}
::y3d::YDiffuse* YMultiMat::mutable_default_diffuse() {
  
  if (default_diffuse_ == NULL) {
    default_diffuse_ = new ::y3d::YDiffuse;
  }
  // @@protoc_insertion_point(field_mutable:y3d.YMultiMat.default_diffuse)
  return default_diffuse_;
}
::y3d::YDiffuse* YMultiMat::release_default_diffuse() {
  // @@protoc_insertion_point(field_release:y3d.YMultiMat.default_diffuse)
  
  ::y3d::YDiffuse* temp = default_diffuse_;
  default_diffuse_ = NULL;
  return temp;
}
void YMultiMat::set_allocated_default_diffuse(::y3d::YDiffuse* default_diffuse) {
  delete default_diffuse_;
  default_diffuse_ = default_diffuse;
  if (default_diffuse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:y3d.YMultiMat.default_diffuse)
}

// repeated .y3d.YMat materials = 2;
int YMultiMat::materials_size() const {
  return materials_.size();
}
void YMultiMat::clear_materials() {
  materials_.Clear();
}
const ::y3d::YMat& YMultiMat::materials(int index) const {
  // @@protoc_insertion_point(field_get:y3d.YMultiMat.materials)
  return materials_.Get(index);
}
::y3d::YMat* YMultiMat::mutable_materials(int index) {
  // @@protoc_insertion_point(field_mutable:y3d.YMultiMat.materials)
  return materials_.Mutable(index);
}
::y3d::YMat* YMultiMat::add_materials() {
  // @@protoc_insertion_point(field_add:y3d.YMultiMat.materials)
  return materials_.Add();
}
::google::protobuf::RepeatedPtrField< ::y3d::YMat >*
YMultiMat::mutable_materials() {
  // @@protoc_insertion_point(field_mutable_list:y3d.YMultiMat.materials)
  return &materials_;
}
const ::google::protobuf::RepeatedPtrField< ::y3d::YMat >&
YMultiMat::materials() const {
  // @@protoc_insertion_point(field_list:y3d.YMultiMat.materials)
  return materials_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace y3d

// @@protoc_insertion_point(global_scope)
