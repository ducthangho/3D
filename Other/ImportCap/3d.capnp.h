// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: 3d.capnp

#ifndef CAPNP_INCLUDED_cbac686543505bdb_
#define CAPNP_INCLUDED_cbac686543505bdb_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c26571d6c4078489);
CAPNP_DECLARE_SCHEMA(ccfdf72800028cb8);
CAPNP_DECLARE_SCHEMA(ea04a9b6249da4a1);
CAPNP_DECLARE_SCHEMA(935d8854aa9820f9);
CAPNP_DECLARE_SCHEMA(a142aaa1dbd4ee7c);
CAPNP_DECLARE_SCHEMA(de34b57feb18bf7c);
CAPNP_DECLARE_SCHEMA(e23c68709dfc0747);
CAPNP_DECLARE_SCHEMA(f01da3c6361bac70);
CAPNP_DECLARE_SCHEMA(91eff6b5ec2e89a9);
CAPNP_DECLARE_SCHEMA(a6971fbce338676e);
CAPNP_DECLARE_SCHEMA(a3063ea15a0ad310);
CAPNP_DECLARE_SCHEMA(98cf9f3feec0aa21);
CAPNP_DECLARE_SCHEMA(9dbf2b0919637044);
CAPNP_DECLARE_SCHEMA(f7787615b1fc6cf0);
CAPNP_DECLARE_SCHEMA(88f1d4c1a4fdc485);

}  // namespace schemas
}  // namespace capnp

namespace format3d {

struct Point3 {
  Point3() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c26571d6c4078489, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Box3 {
  Box3() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ccfdf72800028cb8, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TriFace {
  TriFace() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea04a9b6249da4a1, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MNFaceInfo {
  MNFaceInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(935d8854aa9820f9, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MNMap {
  MNMap() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a142aaa1dbd4ee7c, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Mesh {
  Mesh() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Faces;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de34b57feb18bf7c, 2, 11)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Mesh::Faces {
  Faces() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    F3,
    MNFACES,
  };
  struct Mnfaces;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e23c68709dfc0747, 2, 11)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Mesh::Faces::Mnfaces {
  Mnfaces() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f01da3c6361bac70, 2, 11)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Object {
  Object() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Group;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(91eff6b5ec2e89a9, 2, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Object::Group {
  Group() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    INDEX,
    GR_NAME,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a6971fbce338676e, 2, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Objects {
  Objects() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a3063ea15a0ad310, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Anything {
  Anything() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Items;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(98cf9f3feec0aa21, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Anything::Items {
  Items() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    EMPTY,
    OBJ,
    OBJS,
    MESH,
    NORMALS,
    SELECTION,
    UVMAPS,
  };
  struct Normals;
  struct Selection;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9dbf2b0919637044, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Anything::Items::Normals {
  Normals() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f7787615b1fc6cf0, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Anything::Items::Selection {
  Selection() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(88f1d4c1a4fdc485, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Point3::Reader {
public:
  typedef Point3 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline float getX() const;

  inline float getY() const;

  inline float getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Point3::Builder {
public:
  typedef Point3 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getZ();
  inline void setZ(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Point3::Pipeline {
public:
  typedef Point3 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Box3::Reader {
public:
  typedef Box3 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPmin() const;
  inline  ::format3d::Point3::Reader getPmin() const;

  inline bool hasPmax() const;
  inline  ::format3d::Point3::Reader getPmax() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Box3::Builder {
public:
  typedef Box3 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPmin();
  inline  ::format3d::Point3::Builder getPmin();
  inline void setPmin( ::format3d::Point3::Reader value);
  inline  ::format3d::Point3::Builder initPmin();
  inline void adoptPmin(::capnp::Orphan< ::format3d::Point3>&& value);
  inline ::capnp::Orphan< ::format3d::Point3> disownPmin();

  inline bool hasPmax();
  inline  ::format3d::Point3::Builder getPmax();
  inline void setPmax( ::format3d::Point3::Reader value);
  inline  ::format3d::Point3::Builder initPmax();
  inline void adoptPmax(::capnp::Orphan< ::format3d::Point3>&& value);
  inline ::capnp::Orphan< ::format3d::Point3> disownPmax();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Box3::Pipeline {
public:
  typedef Box3 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::format3d::Point3::Pipeline getPmin();
  inline  ::format3d::Point3::Pipeline getPmax();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TriFace::Reader {
public:
  typedef TriFace Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getV0() const;

  inline  ::int32_t getV1() const;

  inline  ::int32_t getV2() const;

  inline  ::uint8_t getSmGroup() const;

  inline  ::uint8_t getMaterial() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TriFace::Builder {
public:
  typedef TriFace Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getV0();
  inline void setV0( ::int32_t value);

  inline  ::int32_t getV1();
  inline void setV1( ::int32_t value);

  inline  ::int32_t getV2();
  inline void setV2( ::int32_t value);

  inline  ::uint8_t getSmGroup();
  inline void setSmGroup( ::uint8_t value);

  inline  ::uint8_t getMaterial();
  inline void setMaterial( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TriFace::Pipeline {
public:
  typedef TriFace Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MNFaceInfo::Reader {
public:
  typedef MNFaceInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getDeg() const;

  inline  ::uint8_t getSmGroup() const;

  inline  ::uint8_t getMaterial() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MNFaceInfo::Builder {
public:
  typedef MNFaceInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getDeg();
  inline void setDeg( ::int32_t value);

  inline  ::uint8_t getSmGroup();
  inline void setSmGroup( ::uint8_t value);

  inline  ::uint8_t getMaterial();
  inline void setMaterial( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MNFaceInfo::Pipeline {
public:
  typedef MNFaceInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MNMap::Reader {
public:
  typedef MNMap Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasF() const;
  inline  ::capnp::List< ::int32_t>::Reader getF() const;

  inline bool hasV() const;
  inline  ::capnp::List< ::format3d::Point3>::Reader getV() const;

  inline  ::int8_t getChannel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MNMap::Builder {
public:
  typedef MNMap Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasF();
  inline  ::capnp::List< ::int32_t>::Builder getF();
  inline void setF( ::capnp::List< ::int32_t>::Reader value);
  inline void setF(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initF(unsigned int size);
  inline void adoptF(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownF();

  inline bool hasV();
  inline  ::capnp::List< ::format3d::Point3>::Builder getV();
  inline void setV( ::capnp::List< ::format3d::Point3>::Reader value);
  inline  ::capnp::List< ::format3d::Point3>::Builder initV(unsigned int size);
  inline void adoptV(::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> disownV();

  inline  ::int8_t getChannel();
  inline void setChannel( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MNMap::Pipeline {
public:
  typedef MNMap Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Mesh::Reader {
public:
  typedef Mesh Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasV() const;
  inline  ::capnp::List< ::format3d::Point3>::Reader getV() const;

  inline Faces::Reader getFaces() const;

  inline  ::int32_t getSelLevel() const;

  inline  ::int32_t getDispFlags() const;

  inline bool hasBdgBox() const;
  inline  ::format3d::Box3::Reader getBdgBox() const;

  inline bool hasM() const;
  inline  ::capnp::List< ::format3d::MNMap>::Reader getM() const;

  inline bool hasVSel() const;
  inline  ::capnp::List<bool>::Reader getVSel() const;

  inline bool hasESel() const;
  inline  ::capnp::List<bool>::Reader getESel() const;

  inline bool hasFSel() const;
  inline  ::capnp::List<bool>::Reader getFSel() const;

  inline bool hasEVis() const;
  inline  ::capnp::List<bool>::Reader getEVis() const;

  inline bool hasMpNormal() const;
  inline  ::capnp::List< ::format3d::Point3>::Reader getMpNormal() const;

  inline bool hasMpFace() const;
  inline  ::capnp::List< ::int32_t>::Reader getMpFace() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Mesh::Builder {
public:
  typedef Mesh Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasV();
  inline  ::capnp::List< ::format3d::Point3>::Builder getV();
  inline void setV( ::capnp::List< ::format3d::Point3>::Reader value);
  inline  ::capnp::List< ::format3d::Point3>::Builder initV(unsigned int size);
  inline void adoptV(::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> disownV();

  inline Faces::Builder getFaces();
  inline Faces::Builder initFaces();

  inline  ::int32_t getSelLevel();
  inline void setSelLevel( ::int32_t value);

  inline  ::int32_t getDispFlags();
  inline void setDispFlags( ::int32_t value);

  inline bool hasBdgBox();
  inline  ::format3d::Box3::Builder getBdgBox();
  inline void setBdgBox( ::format3d::Box3::Reader value);
  inline  ::format3d::Box3::Builder initBdgBox();
  inline void adoptBdgBox(::capnp::Orphan< ::format3d::Box3>&& value);
  inline ::capnp::Orphan< ::format3d::Box3> disownBdgBox();

  inline bool hasM();
  inline  ::capnp::List< ::format3d::MNMap>::Builder getM();
  inline void setM( ::capnp::List< ::format3d::MNMap>::Reader value);
  inline  ::capnp::List< ::format3d::MNMap>::Builder initM(unsigned int size);
  inline void adoptM(::capnp::Orphan< ::capnp::List< ::format3d::MNMap>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>> disownM();

  inline bool hasVSel();
  inline  ::capnp::List<bool>::Builder getVSel();
  inline void setVSel( ::capnp::List<bool>::Reader value);
  inline void setVSel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initVSel(unsigned int size);
  inline void adoptVSel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownVSel();

  inline bool hasESel();
  inline  ::capnp::List<bool>::Builder getESel();
  inline void setESel( ::capnp::List<bool>::Reader value);
  inline void setESel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initESel(unsigned int size);
  inline void adoptESel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownESel();

  inline bool hasFSel();
  inline  ::capnp::List<bool>::Builder getFSel();
  inline void setFSel( ::capnp::List<bool>::Reader value);
  inline void setFSel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initFSel(unsigned int size);
  inline void adoptFSel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownFSel();

  inline bool hasEVis();
  inline  ::capnp::List<bool>::Builder getEVis();
  inline void setEVis( ::capnp::List<bool>::Reader value);
  inline void setEVis(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initEVis(unsigned int size);
  inline void adoptEVis(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownEVis();

  inline bool hasMpNormal();
  inline  ::capnp::List< ::format3d::Point3>::Builder getMpNormal();
  inline void setMpNormal( ::capnp::List< ::format3d::Point3>::Reader value);
  inline  ::capnp::List< ::format3d::Point3>::Builder initMpNormal(unsigned int size);
  inline void adoptMpNormal(::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> disownMpNormal();

  inline bool hasMpFace();
  inline  ::capnp::List< ::int32_t>::Builder getMpFace();
  inline void setMpFace( ::capnp::List< ::int32_t>::Reader value);
  inline void setMpFace(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initMpFace(unsigned int size);
  inline void adoptMpFace(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownMpFace();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Mesh::Pipeline {
public:
  typedef Mesh Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline Faces::Pipeline getFaces();
  inline  ::format3d::Box3::Pipeline getBdgBox();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Mesh::Faces::Reader {
public:
  typedef Faces Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isF3() const;
  inline bool hasF3() const;
  inline  ::capnp::List< ::format3d::TriFace>::Reader getF3() const;

  inline bool isMnfaces() const;
  inline Mnfaces::Reader getMnfaces() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Mesh::Faces::Builder {
public:
  typedef Faces Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isF3();
  inline bool hasF3();
  inline  ::capnp::List< ::format3d::TriFace>::Builder getF3();
  inline void setF3( ::capnp::List< ::format3d::TriFace>::Reader value);
  inline  ::capnp::List< ::format3d::TriFace>::Builder initF3(unsigned int size);
  inline void adoptF3(::capnp::Orphan< ::capnp::List< ::format3d::TriFace>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::TriFace>> disownF3();

  inline bool isMnfaces();
  inline Mnfaces::Builder getMnfaces();
  inline Mnfaces::Builder initMnfaces();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Mesh::Faces::Pipeline {
public:
  typedef Faces Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Mesh::Faces::Mnfaces::Reader {
public:
  typedef Mnfaces Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasInfo() const;
  inline  ::capnp::List< ::format3d::MNFaceInfo>::Reader getInfo() const;

  inline bool hasF() const;
  inline  ::capnp::List< ::int32_t>::Reader getF() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Mesh::Faces::Mnfaces::Builder {
public:
  typedef Mnfaces Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasInfo();
  inline  ::capnp::List< ::format3d::MNFaceInfo>::Builder getInfo();
  inline void setInfo( ::capnp::List< ::format3d::MNFaceInfo>::Reader value);
  inline  ::capnp::List< ::format3d::MNFaceInfo>::Builder initInfo(unsigned int size);
  inline void adoptInfo(::capnp::Orphan< ::capnp::List< ::format3d::MNFaceInfo>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::MNFaceInfo>> disownInfo();

  inline bool hasF();
  inline  ::capnp::List< ::int32_t>::Builder getF();
  inline void setF( ::capnp::List< ::int32_t>::Reader value);
  inline void setF(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initF(unsigned int size);
  inline void adoptF(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownF();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Mesh::Faces::Mnfaces::Pipeline {
public:
  typedef Mnfaces Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Object::Reader {
public:
  typedef Object Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::int8_t getType() const;

  inline bool hasMesh() const;
  inline  ::format3d::Mesh::Reader getMesh() const;

  inline bool hasTm() const;
  inline  ::capnp::List<float>::Reader getTm() const;

  inline  ::uint32_t getIFlags() const;

  inline bool hasParent() const;
  inline  ::capnp::Text::Reader getParent() const;

  inline  ::uint8_t getGroupType() const;

  inline Group::Reader getGroup() const;

  inline  ::uint32_t getHandle() const;

  inline bool hasPivot() const;
  inline  ::capnp::List<float>::Reader getPivot() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Object::Builder {
public:
  typedef Object Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::int8_t getType();
  inline void setType( ::int8_t value);

  inline bool hasMesh();
  inline  ::format3d::Mesh::Builder getMesh();
  inline void setMesh( ::format3d::Mesh::Reader value);
  inline  ::format3d::Mesh::Builder initMesh();
  inline void adoptMesh(::capnp::Orphan< ::format3d::Mesh>&& value);
  inline ::capnp::Orphan< ::format3d::Mesh> disownMesh();

  inline bool hasTm();
  inline  ::capnp::List<float>::Builder getTm();
  inline void setTm( ::capnp::List<float>::Reader value);
  inline void setTm(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initTm(unsigned int size);
  inline void adoptTm(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownTm();

  inline  ::uint32_t getIFlags();
  inline void setIFlags( ::uint32_t value);

  inline bool hasParent();
  inline  ::capnp::Text::Builder getParent();
  inline void setParent( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initParent(unsigned int size);
  inline void adoptParent(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownParent();

  inline  ::uint8_t getGroupType();
  inline void setGroupType( ::uint8_t value);

  inline Group::Builder getGroup();
  inline Group::Builder initGroup();

  inline  ::uint32_t getHandle();
  inline void setHandle( ::uint32_t value);

  inline bool hasPivot();
  inline  ::capnp::List<float>::Builder getPivot();
  inline void setPivot( ::capnp::List<float>::Reader value);
  inline void setPivot(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float>::Builder initPivot(unsigned int size);
  inline void adoptPivot(::capnp::Orphan< ::capnp::List<float>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float>> disownPivot();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Object::Pipeline {
public:
  typedef Object Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::format3d::Mesh::Pipeline getMesh();
  inline Group::Pipeline getGroup();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Object::Group::Reader {
public:
  typedef Group Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isIndex() const;
  inline  ::int32_t getIndex() const;

  inline bool isGrName() const;
  inline bool hasGrName() const;
  inline  ::capnp::Text::Reader getGrName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Object::Group::Builder {
public:
  typedef Group Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isIndex();
  inline  ::int32_t getIndex();
  inline void setIndex( ::int32_t value);

  inline bool isGrName();
  inline bool hasGrName();
  inline  ::capnp::Text::Builder getGrName();
  inline void setGrName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initGrName(unsigned int size);
  inline void adoptGrName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownGrName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Object::Group::Pipeline {
public:
  typedef Group Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Objects::Reader {
public:
  typedef Objects Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasObjs() const;
  inline  ::capnp::List< ::format3d::Object>::Reader getObjs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Objects::Builder {
public:
  typedef Objects Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasObjs();
  inline  ::capnp::List< ::format3d::Object>::Builder getObjs();
  inline void setObjs( ::capnp::List< ::format3d::Object>::Reader value);
  inline  ::capnp::List< ::format3d::Object>::Builder initObjs(unsigned int size);
  inline void adoptObjs(::capnp::Orphan< ::capnp::List< ::format3d::Object>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::Object>> disownObjs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Objects::Pipeline {
public:
  typedef Objects Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Anything::Reader {
public:
  typedef Anything Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Items::Reader getItems() const;

  inline float getMasterScale() const;

  inline bool hasGroupInfo() const;
  inline  ::capnp::List< ::capnp::Text>::Reader getGroupInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Anything::Builder {
public:
  typedef Anything Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Items::Builder getItems();
  inline Items::Builder initItems();

  inline float getMasterScale();
  inline void setMasterScale(float value);

  inline bool hasGroupInfo();
  inline  ::capnp::List< ::capnp::Text>::Builder getGroupInfo();
  inline void setGroupInfo( ::capnp::List< ::capnp::Text>::Reader value);
  inline void setGroupInfo(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text>::Builder initGroupInfo(unsigned int size);
  inline void adoptGroupInfo(::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> disownGroupInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Anything::Pipeline {
public:
  typedef Anything Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline Items::Pipeline getItems();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Anything::Items::Reader {
public:
  typedef Items Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isEmpty() const;
  inline bool getEmpty() const;

  inline bool isObj() const;
  inline bool hasObj() const;
  inline  ::format3d::Object::Reader getObj() const;

  inline bool isObjs() const;
  inline bool hasObjs() const;
  inline  ::capnp::List< ::format3d::Object>::Reader getObjs() const;

  inline bool isMesh() const;
  inline bool hasMesh() const;
  inline  ::format3d::Mesh::Reader getMesh() const;

  inline bool isNormals() const;
  inline Normals::Reader getNormals() const;

  inline bool isSelection() const;
  inline Selection::Reader getSelection() const;

  inline bool isUvmaps() const;
  inline bool hasUvmaps() const;
  inline  ::capnp::List< ::format3d::MNMap>::Reader getUvmaps() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Anything::Items::Builder {
public:
  typedef Items Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isEmpty();
  inline bool getEmpty();
  inline void setEmpty(bool value);

  inline bool isObj();
  inline bool hasObj();
  inline  ::format3d::Object::Builder getObj();
  inline void setObj( ::format3d::Object::Reader value);
  inline  ::format3d::Object::Builder initObj();
  inline void adoptObj(::capnp::Orphan< ::format3d::Object>&& value);
  inline ::capnp::Orphan< ::format3d::Object> disownObj();

  inline bool isObjs();
  inline bool hasObjs();
  inline  ::capnp::List< ::format3d::Object>::Builder getObjs();
  inline void setObjs( ::capnp::List< ::format3d::Object>::Reader value);
  inline  ::capnp::List< ::format3d::Object>::Builder initObjs(unsigned int size);
  inline void adoptObjs(::capnp::Orphan< ::capnp::List< ::format3d::Object>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::Object>> disownObjs();

  inline bool isMesh();
  inline bool hasMesh();
  inline  ::format3d::Mesh::Builder getMesh();
  inline void setMesh( ::format3d::Mesh::Reader value);
  inline  ::format3d::Mesh::Builder initMesh();
  inline void adoptMesh(::capnp::Orphan< ::format3d::Mesh>&& value);
  inline ::capnp::Orphan< ::format3d::Mesh> disownMesh();

  inline bool isNormals();
  inline Normals::Builder getNormals();
  inline Normals::Builder initNormals();

  inline bool isSelection();
  inline Selection::Builder getSelection();
  inline Selection::Builder initSelection();

  inline bool isUvmaps();
  inline bool hasUvmaps();
  inline  ::capnp::List< ::format3d::MNMap>::Builder getUvmaps();
  inline void setUvmaps( ::capnp::List< ::format3d::MNMap>::Reader value);
  inline  ::capnp::List< ::format3d::MNMap>::Builder initUvmaps(unsigned int size);
  inline void adoptUvmaps(::capnp::Orphan< ::capnp::List< ::format3d::MNMap>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>> disownUvmaps();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Anything::Items::Pipeline {
public:
  typedef Items Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Anything::Items::Normals::Reader {
public:
  typedef Normals Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMpNormal() const;
  inline  ::capnp::List< ::format3d::Point3>::Reader getMpNormal() const;

  inline bool hasMpFace() const;
  inline  ::capnp::List< ::int32_t>::Reader getMpFace() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Anything::Items::Normals::Builder {
public:
  typedef Normals Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMpNormal();
  inline  ::capnp::List< ::format3d::Point3>::Builder getMpNormal();
  inline void setMpNormal( ::capnp::List< ::format3d::Point3>::Reader value);
  inline  ::capnp::List< ::format3d::Point3>::Builder initMpNormal(unsigned int size);
  inline void adoptMpNormal(::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> disownMpNormal();

  inline bool hasMpFace();
  inline  ::capnp::List< ::int32_t>::Builder getMpFace();
  inline void setMpFace( ::capnp::List< ::int32_t>::Reader value);
  inline void setMpFace(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initMpFace(unsigned int size);
  inline void adoptMpFace(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownMpFace();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Anything::Items::Normals::Pipeline {
public:
  typedef Normals Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Anything::Items::Selection::Reader {
public:
  typedef Selection Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasVSel() const;
  inline  ::capnp::List<bool>::Reader getVSel() const;

  inline bool hasESel() const;
  inline  ::capnp::List<bool>::Reader getESel() const;

  inline bool hasFSel() const;
  inline  ::capnp::List<bool>::Reader getFSel() const;

  inline bool hasEVis() const;
  inline  ::capnp::List<bool>::Reader getEVis() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Anything::Items::Selection::Builder {
public:
  typedef Selection Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasVSel();
  inline  ::capnp::List<bool>::Builder getVSel();
  inline void setVSel( ::capnp::List<bool>::Reader value);
  inline void setVSel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initVSel(unsigned int size);
  inline void adoptVSel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownVSel();

  inline bool hasESel();
  inline  ::capnp::List<bool>::Builder getESel();
  inline void setESel( ::capnp::List<bool>::Reader value);
  inline void setESel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initESel(unsigned int size);
  inline void adoptESel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownESel();

  inline bool hasFSel();
  inline  ::capnp::List<bool>::Builder getFSel();
  inline void setFSel( ::capnp::List<bool>::Reader value);
  inline void setFSel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initFSel(unsigned int size);
  inline void adoptFSel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownFSel();

  inline bool hasEVis();
  inline  ::capnp::List<bool>::Builder getEVis();
  inline void setEVis( ::capnp::List<bool>::Reader value);
  inline void setEVis(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initEVis(unsigned int size);
  inline void adoptEVis(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownEVis();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Anything::Items::Selection::Pipeline {
public:
  typedef Selection Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline float Point3::Reader::getX() const {
  return _reader.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}

inline float Point3::Builder::getX() {
  return _builder.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}
inline void Point3::Builder::setX(float value) {
  _builder.setDataField<float>(
      0 * ::capnp::ELEMENTS, value);
}

inline float Point3::Reader::getY() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float Point3::Builder::getY() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void Point3::Builder::setY(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline float Point3::Reader::getZ() const {
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float Point3::Builder::getZ() {
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void Point3::Builder::setZ(float value) {
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool Box3::Reader::hasPmin() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Box3::Builder::hasPmin() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::format3d::Point3::Reader Box3::Reader::getPmin() const {
  return ::capnp::_::PointerHelpers< ::format3d::Point3>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::format3d::Point3::Builder Box3::Builder::getPmin() {
  return ::capnp::_::PointerHelpers< ::format3d::Point3>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::format3d::Point3::Pipeline Box3::Pipeline::getPmin() {
  return  ::format3d::Point3::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Box3::Builder::setPmin( ::format3d::Point3::Reader value) {
  ::capnp::_::PointerHelpers< ::format3d::Point3>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::format3d::Point3::Builder Box3::Builder::initPmin() {
  return ::capnp::_::PointerHelpers< ::format3d::Point3>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Box3::Builder::adoptPmin(
    ::capnp::Orphan< ::format3d::Point3>&& value) {
  ::capnp::_::PointerHelpers< ::format3d::Point3>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::format3d::Point3> Box3::Builder::disownPmin() {
  return ::capnp::_::PointerHelpers< ::format3d::Point3>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Box3::Reader::hasPmax() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Box3::Builder::hasPmax() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::format3d::Point3::Reader Box3::Reader::getPmax() const {
  return ::capnp::_::PointerHelpers< ::format3d::Point3>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::format3d::Point3::Builder Box3::Builder::getPmax() {
  return ::capnp::_::PointerHelpers< ::format3d::Point3>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::format3d::Point3::Pipeline Box3::Pipeline::getPmax() {
  return  ::format3d::Point3::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Box3::Builder::setPmax( ::format3d::Point3::Reader value) {
  ::capnp::_::PointerHelpers< ::format3d::Point3>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::format3d::Point3::Builder Box3::Builder::initPmax() {
  return ::capnp::_::PointerHelpers< ::format3d::Point3>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Box3::Builder::adoptPmax(
    ::capnp::Orphan< ::format3d::Point3>&& value) {
  ::capnp::_::PointerHelpers< ::format3d::Point3>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::format3d::Point3> Box3::Builder::disownPmax() {
  return ::capnp::_::PointerHelpers< ::format3d::Point3>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int32_t TriFace::Reader::getV0() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t TriFace::Builder::getV0() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TriFace::Builder::setV0( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TriFace::Reader::getV1() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t TriFace::Builder::getV1() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TriFace::Builder::setV1( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TriFace::Reader::getV2() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t TriFace::Builder::getV2() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void TriFace::Builder::setV2( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TriFace::Reader::getSmGroup() const {
  return _reader.getDataField< ::uint8_t>(
      12 * ::capnp::ELEMENTS);
}

inline  ::uint8_t TriFace::Builder::getSmGroup() {
  return _builder.getDataField< ::uint8_t>(
      12 * ::capnp::ELEMENTS);
}
inline void TriFace::Builder::setSmGroup( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      12 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TriFace::Reader::getMaterial() const {
  return _reader.getDataField< ::uint8_t>(
      13 * ::capnp::ELEMENTS);
}

inline  ::uint8_t TriFace::Builder::getMaterial() {
  return _builder.getDataField< ::uint8_t>(
      13 * ::capnp::ELEMENTS);
}
inline void TriFace::Builder::setMaterial( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      13 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t MNFaceInfo::Reader::getDeg() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t MNFaceInfo::Builder::getDeg() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void MNFaceInfo::Builder::setDeg( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t MNFaceInfo::Reader::getSmGroup() const {
  return _reader.getDataField< ::uint8_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint8_t MNFaceInfo::Builder::getSmGroup() {
  return _builder.getDataField< ::uint8_t>(
      4 * ::capnp::ELEMENTS);
}
inline void MNFaceInfo::Builder::setSmGroup( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t MNFaceInfo::Reader::getMaterial() const {
  return _reader.getDataField< ::uint8_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint8_t MNFaceInfo::Builder::getMaterial() {
  return _builder.getDataField< ::uint8_t>(
      5 * ::capnp::ELEMENTS);
}
inline void MNFaceInfo::Builder::setMaterial( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline bool MNMap::Reader::hasF() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool MNMap::Builder::hasF() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader MNMap::Reader::getF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder MNMap::Builder::getF() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void MNMap::Builder::setF( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void MNMap::Builder::setF(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder MNMap::Builder::initF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void MNMap::Builder::adoptF(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> MNMap::Builder::disownF() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool MNMap::Reader::hasV() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool MNMap::Builder::hasV() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::Point3>::Reader MNMap::Reader::getV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::Point3>::Builder MNMap::Builder::getV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void MNMap::Builder::setV( ::capnp::List< ::format3d::Point3>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::Point3>::Builder MNMap::Builder::initV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void MNMap::Builder::adoptV(
    ::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> MNMap::Builder::disownV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int8_t MNMap::Reader::getChannel() const {
  return _reader.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int8_t MNMap::Builder::getChannel() {
  return _builder.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}
inline void MNMap::Builder::setChannel( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Mesh::Reader::hasV() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasV() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::Point3>::Reader Mesh::Reader::getV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::Point3>::Builder Mesh::Builder::getV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setV( ::capnp::List< ::format3d::Point3>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::Point3>::Builder Mesh::Builder::initV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptV(
    ::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> Mesh::Builder::disownV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline Mesh::Faces::Reader Mesh::Reader::getFaces() const {
  return Mesh::Faces::Reader(_reader);
}
inline Mesh::Faces::Builder Mesh::Builder::getFaces() {
  return Mesh::Faces::Builder(_builder);
}
#if !CAPNP_LITE
inline Mesh::Faces::Pipeline Mesh::Pipeline::getFaces() {
  return Mesh::Faces::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline Mesh::Faces::Builder Mesh::Builder::initFaces() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  _builder.getPointerField(2 * ::capnp::POINTERS).clear();
  return Mesh::Faces::Builder(_builder);
}
inline  ::int32_t Mesh::Reader::getSelLevel() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t Mesh::Builder::getSelLevel() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Mesh::Builder::setSelLevel( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Mesh::Reader::getDispFlags() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t Mesh::Builder::getDispFlags() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Mesh::Builder::setDispFlags( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool Mesh::Reader::hasBdgBox() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasBdgBox() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::format3d::Box3::Reader Mesh::Reader::getBdgBox() const {
  return ::capnp::_::PointerHelpers< ::format3d::Box3>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::format3d::Box3::Builder Mesh::Builder::getBdgBox() {
  return ::capnp::_::PointerHelpers< ::format3d::Box3>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::format3d::Box3::Pipeline Mesh::Pipeline::getBdgBox() {
  return  ::format3d::Box3::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void Mesh::Builder::setBdgBox( ::format3d::Box3::Reader value) {
  ::capnp::_::PointerHelpers< ::format3d::Box3>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::format3d::Box3::Builder Mesh::Builder::initBdgBox() {
  return ::capnp::_::PointerHelpers< ::format3d::Box3>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Mesh::Builder::adoptBdgBox(
    ::capnp::Orphan< ::format3d::Box3>&& value) {
  ::capnp::_::PointerHelpers< ::format3d::Box3>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::format3d::Box3> Mesh::Builder::disownBdgBox() {
  return ::capnp::_::PointerHelpers< ::format3d::Box3>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasM() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasM() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::MNMap>::Reader Mesh::Reader::getM() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::MNMap>::Builder Mesh::Builder::getM() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setM( ::capnp::List< ::format3d::MNMap>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::MNMap>::Builder Mesh::Builder::initM(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptM(
    ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>> Mesh::Builder::disownM() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasVSel() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasVSel() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader Mesh::Reader::getVSel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder Mesh::Builder::getVSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setVSel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void Mesh::Builder::setVSel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder Mesh::Builder::initVSel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptVSel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> Mesh::Builder::disownVSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasESel() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasESel() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader Mesh::Reader::getESel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder Mesh::Builder::getESel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setESel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void Mesh::Builder::setESel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder Mesh::Builder::initESel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptESel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> Mesh::Builder::disownESel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasFSel() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasFSel() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader Mesh::Reader::getFSel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder Mesh::Builder::getFSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setFSel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline void Mesh::Builder::setFSel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder Mesh::Builder::initFSel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptFSel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> Mesh::Builder::disownFSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasEVis() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasEVis() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader Mesh::Reader::getEVis() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder Mesh::Builder::getEVis() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setEVis( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline void Mesh::Builder::setEVis(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder Mesh::Builder::initEVis(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptEVis(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> Mesh::Builder::disownEVis() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasMpNormal() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasMpNormal() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::Point3>::Reader Mesh::Reader::getMpNormal() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::Point3>::Builder Mesh::Builder::getMpNormal() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setMpNormal( ::capnp::List< ::format3d::Point3>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::Point3>::Builder Mesh::Builder::initMpNormal(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptMpNormal(
    ::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> Mesh::Builder::disownMpNormal() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasMpFace() const {
  return !_reader.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasMpFace() {
  return !_builder.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader Mesh::Reader::getMpFace() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(10 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder Mesh::Builder::getMpFace() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setMpFace( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline void Mesh::Builder::setMpFace(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder Mesh::Builder::initMpFace(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(10 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptMpFace(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(10 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> Mesh::Builder::disownMpFace() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}

inline  ::format3d::Mesh::Faces::Which Mesh::Faces::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::format3d::Mesh::Faces::Which Mesh::Faces::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool Mesh::Faces::Reader::isF3() const {
  return which() == Mesh::Faces::F3;
}
inline bool Mesh::Faces::Builder::isF3() {
  return which() == Mesh::Faces::F3;
}
inline bool Mesh::Faces::Reader::hasF3() const {
  if (which() != Mesh::Faces::F3) return false;
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Faces::Builder::hasF3() {
  if (which() != Mesh::Faces::F3) return false;
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::TriFace>::Reader Mesh::Faces::Reader::getF3() const {
  KJ_IREQUIRE((which() == Mesh::Faces::F3),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::TriFace>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::TriFace>::Builder Mesh::Faces::Builder::getF3() {
  KJ_IREQUIRE((which() == Mesh::Faces::F3),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::TriFace>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Mesh::Faces::Builder::setF3( ::capnp::List< ::format3d::TriFace>::Reader value) {
  _builder.setDataField<Mesh::Faces::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Faces::F3);
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::TriFace>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::TriFace>::Builder Mesh::Faces::Builder::initF3(unsigned int size) {
  _builder.setDataField<Mesh::Faces::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Faces::F3);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::TriFace>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Mesh::Faces::Builder::adoptF3(
    ::capnp::Orphan< ::capnp::List< ::format3d::TriFace>>&& value) {
  _builder.setDataField<Mesh::Faces::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Faces::F3);
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::TriFace>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::TriFace>> Mesh::Faces::Builder::disownF3() {
  KJ_IREQUIRE((which() == Mesh::Faces::F3),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::TriFace>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Mesh::Faces::Reader::isMnfaces() const {
  return which() == Mesh::Faces::MNFACES;
}
inline bool Mesh::Faces::Builder::isMnfaces() {
  return which() == Mesh::Faces::MNFACES;
}
inline Mesh::Faces::Mnfaces::Reader Mesh::Faces::Reader::getMnfaces() const {
  KJ_IREQUIRE((which() == Mesh::Faces::MNFACES),
              "Must check which() before get()ing a union member.");
  return Mesh::Faces::Mnfaces::Reader(_reader);
}
inline Mesh::Faces::Mnfaces::Builder Mesh::Faces::Builder::getMnfaces() {
  KJ_IREQUIRE((which() == Mesh::Faces::MNFACES),
              "Must check which() before get()ing a union member.");
  return Mesh::Faces::Mnfaces::Builder(_builder);
}
inline Mesh::Faces::Mnfaces::Builder Mesh::Faces::Builder::initMnfaces() {
  _builder.setDataField<Mesh::Faces::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Faces::MNFACES);
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  _builder.getPointerField(2 * ::capnp::POINTERS).clear();
  return Mesh::Faces::Mnfaces::Builder(_builder);
}
inline bool Mesh::Faces::Mnfaces::Reader::hasInfo() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Faces::Mnfaces::Builder::hasInfo() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::MNFaceInfo>::Reader Mesh::Faces::Mnfaces::Reader::getInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFaceInfo>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::MNFaceInfo>::Builder Mesh::Faces::Mnfaces::Builder::getInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFaceInfo>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Mesh::Faces::Mnfaces::Builder::setInfo( ::capnp::List< ::format3d::MNFaceInfo>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFaceInfo>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::MNFaceInfo>::Builder Mesh::Faces::Mnfaces::Builder::initInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFaceInfo>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Mesh::Faces::Mnfaces::Builder::adoptInfo(
    ::capnp::Orphan< ::capnp::List< ::format3d::MNFaceInfo>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFaceInfo>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::MNFaceInfo>> Mesh::Faces::Mnfaces::Builder::disownInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFaceInfo>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Mesh::Faces::Mnfaces::Reader::hasF() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Faces::Mnfaces::Builder::hasF() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader Mesh::Faces::Mnfaces::Reader::getF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder Mesh::Faces::Mnfaces::Builder::getF() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Mesh::Faces::Mnfaces::Builder::setF( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void Mesh::Faces::Mnfaces::Builder::setF(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder Mesh::Faces::Mnfaces::Builder::initF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Mesh::Faces::Mnfaces::Builder::adoptF(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> Mesh::Faces::Mnfaces::Builder::disownF() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Object::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Object::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Object::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Object::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Object::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Object::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Object::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int8_t Object::Reader::getType() const {
  return _reader.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int8_t Object::Builder::getType() {
  return _builder.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Object::Builder::setType( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Object::Reader::hasMesh() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasMesh() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::format3d::Mesh::Reader Object::Reader::getMesh() const {
  return ::capnp::_::PointerHelpers< ::format3d::Mesh>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::format3d::Mesh::Builder Object::Builder::getMesh() {
  return ::capnp::_::PointerHelpers< ::format3d::Mesh>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::format3d::Mesh::Pipeline Object::Pipeline::getMesh() {
  return  ::format3d::Mesh::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setMesh( ::format3d::Mesh::Reader value) {
  ::capnp::_::PointerHelpers< ::format3d::Mesh>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::format3d::Mesh::Builder Object::Builder::initMesh() {
  return ::capnp::_::PointerHelpers< ::format3d::Mesh>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Object::Builder::adoptMesh(
    ::capnp::Orphan< ::format3d::Mesh>&& value) {
  ::capnp::_::PointerHelpers< ::format3d::Mesh>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::format3d::Mesh> Object::Builder::disownMesh() {
  return ::capnp::_::PointerHelpers< ::format3d::Mesh>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Object::Reader::hasTm() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasTm() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader Object::Reader::getTm() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder Object::Builder::getTm() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Object::Builder::setTm( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void Object::Builder::setTm(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder Object::Builder::initTm(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Object::Builder::adoptTm(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> Object::Builder::disownTm() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::uint32_t Object::Reader::getIFlags() const {
  return _reader.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Object::Builder::getIFlags() {
  return _builder.getDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Object::Builder::setIFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Object::Reader::hasParent() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasParent() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Object::Reader::getParent() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Object::Builder::getParent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Object::Builder::setParent( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Object::Builder::initParent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Object::Builder::adoptParent(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Object::Builder::disownParent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline  ::uint8_t Object::Reader::getGroupType() const {
  return _reader.getDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint8_t Object::Builder::getGroupType() {
  return _builder.getDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Object::Builder::setGroupType( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline Object::Group::Reader Object::Reader::getGroup() const {
  return Object::Group::Reader(_reader);
}
inline Object::Group::Builder Object::Builder::getGroup() {
  return Object::Group::Builder(_builder);
}
#if !CAPNP_LITE
inline Object::Group::Pipeline Object::Pipeline::getGroup() {
  return Object::Group::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline Object::Group::Builder Object::Builder::initGroup() {
  _builder.setDataField< ::uint16_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint32_t>(2 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(4 * ::capnp::POINTERS).clear();
  return Object::Group::Builder(_builder);
}
inline  ::uint32_t Object::Reader::getHandle() const {
  return _reader.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::uint32_t Object::Builder::getHandle() {
  return _builder.getDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void Object::Builder::setHandle( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline bool Object::Reader::hasPivot() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasPivot() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float>::Reader Object::Reader::getPivot() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List<float>::Builder Object::Builder::getPivot() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Object::Builder::setPivot( ::capnp::List<float>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void Object::Builder::setPivot(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float>::Builder Object::Builder::initPivot(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void Object::Builder::adoptPivot(
    ::capnp::Orphan< ::capnp::List<float>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float>> Object::Builder::disownPivot() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline  ::format3d::Object::Group::Which Object::Group::Reader::which() const {
  return _reader.getDataField<Which>(1 * ::capnp::ELEMENTS);
}
inline  ::format3d::Object::Group::Which Object::Group::Builder::which() {
  return _builder.getDataField<Which>(1 * ::capnp::ELEMENTS);
}

inline bool Object::Group::Reader::isIndex() const {
  return which() == Object::Group::INDEX;
}
inline bool Object::Group::Builder::isIndex() {
  return which() == Object::Group::INDEX;
}
inline  ::int32_t Object::Group::Reader::getIndex() const {
  KJ_IREQUIRE((which() == Object::Group::INDEX),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t Object::Group::Builder::getIndex() {
  KJ_IREQUIRE((which() == Object::Group::INDEX),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Object::Group::Builder::setIndex( ::int32_t value) {
  _builder.setDataField<Object::Group::Which>(
      1 * ::capnp::ELEMENTS, Object::Group::INDEX);
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool Object::Group::Reader::isGrName() const {
  return which() == Object::Group::GR_NAME;
}
inline bool Object::Group::Builder::isGrName() {
  return which() == Object::Group::GR_NAME;
}
inline bool Object::Group::Reader::hasGrName() const {
  if (which() != Object::Group::GR_NAME) return false;
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Object::Group::Builder::hasGrName() {
  if (which() != Object::Group::GR_NAME) return false;
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Object::Group::Reader::getGrName() const {
  KJ_IREQUIRE((which() == Object::Group::GR_NAME),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Object::Group::Builder::getGrName() {
  KJ_IREQUIRE((which() == Object::Group::GR_NAME),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Object::Group::Builder::setGrName( ::capnp::Text::Reader value) {
  _builder.setDataField<Object::Group::Which>(
      1 * ::capnp::ELEMENTS, Object::Group::GR_NAME);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Object::Group::Builder::initGrName(unsigned int size) {
  _builder.setDataField<Object::Group::Which>(
      1 * ::capnp::ELEMENTS, Object::Group::GR_NAME);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Object::Group::Builder::adoptGrName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Object::Group::Which>(
      1 * ::capnp::ELEMENTS, Object::Group::GR_NAME);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Object::Group::Builder::disownGrName() {
  KJ_IREQUIRE((which() == Object::Group::GR_NAME),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool Objects::Reader::hasObjs() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Objects::Builder::hasObjs() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::Object>::Reader Objects::Reader::getObjs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::Object>::Builder Objects::Builder::getObjs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Objects::Builder::setObjs( ::capnp::List< ::format3d::Object>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::Object>::Builder Objects::Builder::initObjs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Objects::Builder::adoptObjs(
    ::capnp::Orphan< ::capnp::List< ::format3d::Object>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::Object>> Objects::Builder::disownObjs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline Anything::Items::Reader Anything::Reader::getItems() const {
  return Anything::Items::Reader(_reader);
}
inline Anything::Items::Builder Anything::Builder::getItems() {
  return Anything::Items::Builder(_builder);
}
#if !CAPNP_LITE
inline Anything::Items::Pipeline Anything::Pipeline::getItems() {
  return Anything::Items::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline Anything::Items::Builder Anything::Builder::initItems() {
  _builder.setDataField<bool>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  _builder.getPointerField(2 * ::capnp::POINTERS).clear();
  _builder.getPointerField(3 * ::capnp::POINTERS).clear();
  return Anything::Items::Builder(_builder);
}
inline float Anything::Reader::getMasterScale() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float Anything::Builder::getMasterScale() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void Anything::Builder::setMasterScale(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool Anything::Reader::hasGroupInfo() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Builder::hasGroupInfo() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text>::Reader Anything::Reader::getGroupInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text>::Builder Anything::Builder::getGroupInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Anything::Builder::setGroupInfo( ::capnp::List< ::capnp::Text>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void Anything::Builder::setGroupInfo(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text>::Builder Anything::Builder::initGroupInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Anything::Builder::adoptGroupInfo(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text>> Anything::Builder::disownGroupInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline  ::format3d::Anything::Items::Which Anything::Items::Reader::which() const {
  return _reader.getDataField<Which>(1 * ::capnp::ELEMENTS);
}
inline  ::format3d::Anything::Items::Which Anything::Items::Builder::which() {
  return _builder.getDataField<Which>(1 * ::capnp::ELEMENTS);
}

inline bool Anything::Items::Reader::isEmpty() const {
  return which() == Anything::Items::EMPTY;
}
inline bool Anything::Items::Builder::isEmpty() {
  return which() == Anything::Items::EMPTY;
}
inline bool Anything::Items::Reader::getEmpty() const {
  KJ_IREQUIRE((which() == Anything::Items::EMPTY),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool Anything::Items::Builder::getEmpty() {
  KJ_IREQUIRE((which() == Anything::Items::EMPTY),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void Anything::Items::Builder::setEmpty(bool value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::EMPTY);
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Anything::Items::Reader::isObj() const {
  return which() == Anything::Items::OBJ;
}
inline bool Anything::Items::Builder::isObj() {
  return which() == Anything::Items::OBJ;
}
inline bool Anything::Items::Reader::hasObj() const {
  if (which() != Anything::Items::OBJ) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Builder::hasObj() {
  if (which() != Anything::Items::OBJ) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::format3d::Object::Reader Anything::Items::Reader::getObj() const {
  KJ_IREQUIRE((which() == Anything::Items::OBJ),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::format3d::Object>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::format3d::Object::Builder Anything::Items::Builder::getObj() {
  KJ_IREQUIRE((which() == Anything::Items::OBJ),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::format3d::Object>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Anything::Items::Builder::setObj( ::format3d::Object::Reader value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::OBJ);
  ::capnp::_::PointerHelpers< ::format3d::Object>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::format3d::Object::Builder Anything::Items::Builder::initObj() {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::OBJ);
  return ::capnp::_::PointerHelpers< ::format3d::Object>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Anything::Items::Builder::adoptObj(
    ::capnp::Orphan< ::format3d::Object>&& value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::OBJ);
  ::capnp::_::PointerHelpers< ::format3d::Object>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::format3d::Object> Anything::Items::Builder::disownObj() {
  KJ_IREQUIRE((which() == Anything::Items::OBJ),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::format3d::Object>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Anything::Items::Reader::isObjs() const {
  return which() == Anything::Items::OBJS;
}
inline bool Anything::Items::Builder::isObjs() {
  return which() == Anything::Items::OBJS;
}
inline bool Anything::Items::Reader::hasObjs() const {
  if (which() != Anything::Items::OBJS) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Builder::hasObjs() {
  if (which() != Anything::Items::OBJS) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::Object>::Reader Anything::Items::Reader::getObjs() const {
  KJ_IREQUIRE((which() == Anything::Items::OBJS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::Object>::Builder Anything::Items::Builder::getObjs() {
  KJ_IREQUIRE((which() == Anything::Items::OBJS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Anything::Items::Builder::setObjs( ::capnp::List< ::format3d::Object>::Reader value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::OBJS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::Object>::Builder Anything::Items::Builder::initObjs(unsigned int size) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::OBJS);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Anything::Items::Builder::adoptObjs(
    ::capnp::Orphan< ::capnp::List< ::format3d::Object>>&& value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::OBJS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::Object>> Anything::Items::Builder::disownObjs() {
  KJ_IREQUIRE((which() == Anything::Items::OBJS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Anything::Items::Reader::isMesh() const {
  return which() == Anything::Items::MESH;
}
inline bool Anything::Items::Builder::isMesh() {
  return which() == Anything::Items::MESH;
}
inline bool Anything::Items::Reader::hasMesh() const {
  if (which() != Anything::Items::MESH) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Builder::hasMesh() {
  if (which() != Anything::Items::MESH) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::format3d::Mesh::Reader Anything::Items::Reader::getMesh() const {
  KJ_IREQUIRE((which() == Anything::Items::MESH),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::format3d::Mesh>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::format3d::Mesh::Builder Anything::Items::Builder::getMesh() {
  KJ_IREQUIRE((which() == Anything::Items::MESH),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::format3d::Mesh>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Anything::Items::Builder::setMesh( ::format3d::Mesh::Reader value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::MESH);
  ::capnp::_::PointerHelpers< ::format3d::Mesh>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::format3d::Mesh::Builder Anything::Items::Builder::initMesh() {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::MESH);
  return ::capnp::_::PointerHelpers< ::format3d::Mesh>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Anything::Items::Builder::adoptMesh(
    ::capnp::Orphan< ::format3d::Mesh>&& value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::MESH);
  ::capnp::_::PointerHelpers< ::format3d::Mesh>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::format3d::Mesh> Anything::Items::Builder::disownMesh() {
  KJ_IREQUIRE((which() == Anything::Items::MESH),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::format3d::Mesh>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Anything::Items::Reader::isNormals() const {
  return which() == Anything::Items::NORMALS;
}
inline bool Anything::Items::Builder::isNormals() {
  return which() == Anything::Items::NORMALS;
}
inline Anything::Items::Normals::Reader Anything::Items::Reader::getNormals() const {
  KJ_IREQUIRE((which() == Anything::Items::NORMALS),
              "Must check which() before get()ing a union member.");
  return Anything::Items::Normals::Reader(_reader);
}
inline Anything::Items::Normals::Builder Anything::Items::Builder::getNormals() {
  KJ_IREQUIRE((which() == Anything::Items::NORMALS),
              "Must check which() before get()ing a union member.");
  return Anything::Items::Normals::Builder(_builder);
}
inline Anything::Items::Normals::Builder Anything::Items::Builder::initNormals() {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::NORMALS);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  return Anything::Items::Normals::Builder(_builder);
}
inline bool Anything::Items::Reader::isSelection() const {
  return which() == Anything::Items::SELECTION;
}
inline bool Anything::Items::Builder::isSelection() {
  return which() == Anything::Items::SELECTION;
}
inline Anything::Items::Selection::Reader Anything::Items::Reader::getSelection() const {
  KJ_IREQUIRE((which() == Anything::Items::SELECTION),
              "Must check which() before get()ing a union member.");
  return Anything::Items::Selection::Reader(_reader);
}
inline Anything::Items::Selection::Builder Anything::Items::Builder::getSelection() {
  KJ_IREQUIRE((which() == Anything::Items::SELECTION),
              "Must check which() before get()ing a union member.");
  return Anything::Items::Selection::Builder(_builder);
}
inline Anything::Items::Selection::Builder Anything::Items::Builder::initSelection() {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::SELECTION);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  _builder.getPointerField(2 * ::capnp::POINTERS).clear();
  _builder.getPointerField(3 * ::capnp::POINTERS).clear();
  return Anything::Items::Selection::Builder(_builder);
}
inline bool Anything::Items::Reader::isUvmaps() const {
  return which() == Anything::Items::UVMAPS;
}
inline bool Anything::Items::Builder::isUvmaps() {
  return which() == Anything::Items::UVMAPS;
}
inline bool Anything::Items::Reader::hasUvmaps() const {
  if (which() != Anything::Items::UVMAPS) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Builder::hasUvmaps() {
  if (which() != Anything::Items::UVMAPS) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::MNMap>::Reader Anything::Items::Reader::getUvmaps() const {
  KJ_IREQUIRE((which() == Anything::Items::UVMAPS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::MNMap>::Builder Anything::Items::Builder::getUvmaps() {
  KJ_IREQUIRE((which() == Anything::Items::UVMAPS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Anything::Items::Builder::setUvmaps( ::capnp::List< ::format3d::MNMap>::Reader value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::UVMAPS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::MNMap>::Builder Anything::Items::Builder::initUvmaps(unsigned int size) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::UVMAPS);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Anything::Items::Builder::adoptUvmaps(
    ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>>&& value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::UVMAPS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>> Anything::Items::Builder::disownUvmaps() {
  KJ_IREQUIRE((which() == Anything::Items::UVMAPS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Anything::Items::Normals::Reader::hasMpNormal() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Normals::Builder::hasMpNormal() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::Point3>::Reader Anything::Items::Normals::Reader::getMpNormal() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::Point3>::Builder Anything::Items::Normals::Builder::getMpNormal() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Anything::Items::Normals::Builder::setMpNormal( ::capnp::List< ::format3d::Point3>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::Point3>::Builder Anything::Items::Normals::Builder::initMpNormal(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Anything::Items::Normals::Builder::adoptMpNormal(
    ::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> Anything::Items::Normals::Builder::disownMpNormal() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Anything::Items::Normals::Reader::hasMpFace() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Normals::Builder::hasMpFace() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader Anything::Items::Normals::Reader::getMpFace() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder Anything::Items::Normals::Builder::getMpFace() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Anything::Items::Normals::Builder::setMpFace( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void Anything::Items::Normals::Builder::setMpFace(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder Anything::Items::Normals::Builder::initMpFace(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Anything::Items::Normals::Builder::adoptMpFace(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> Anything::Items::Normals::Builder::disownMpFace() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Anything::Items::Selection::Reader::hasVSel() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Selection::Builder::hasVSel() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader Anything::Items::Selection::Reader::getVSel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder Anything::Items::Selection::Builder::getVSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Anything::Items::Selection::Builder::setVSel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Anything::Items::Selection::Builder::setVSel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder Anything::Items::Selection::Builder::initVSel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Anything::Items::Selection::Builder::adoptVSel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> Anything::Items::Selection::Builder::disownVSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Anything::Items::Selection::Reader::hasESel() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Selection::Builder::hasESel() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader Anything::Items::Selection::Reader::getESel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder Anything::Items::Selection::Builder::getESel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Anything::Items::Selection::Builder::setESel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void Anything::Items::Selection::Builder::setESel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder Anything::Items::Selection::Builder::initESel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Anything::Items::Selection::Builder::adoptESel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> Anything::Items::Selection::Builder::disownESel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Anything::Items::Selection::Reader::hasFSel() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Selection::Builder::hasFSel() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader Anything::Items::Selection::Reader::getFSel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder Anything::Items::Selection::Builder::getFSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Anything::Items::Selection::Builder::setFSel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void Anything::Items::Selection::Builder::setFSel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder Anything::Items::Selection::Builder::initFSel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Anything::Items::Selection::Builder::adoptFSel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> Anything::Items::Selection::Builder::disownFSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Anything::Items::Selection::Reader::hasEVis() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Selection::Builder::hasEVis() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader Anything::Items::Selection::Reader::getEVis() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder Anything::Items::Selection::Builder::getEVis() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Anything::Items::Selection::Builder::setEVis( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void Anything::Items::Selection::Builder::setEVis(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder Anything::Items::Selection::Builder::initEVis(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Anything::Items::Selection::Builder::adoptEVis(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> Anything::Items::Selection::Builder::disownEVis() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

}  // namespace

#endif  // CAPNP_INCLUDED_cbac686543505bdb_
