// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: 3d.capnp

#ifndef CAPNP_INCLUDED_cbac686543505bdb_
#define CAPNP_INCLUDED_cbac686543505bdb_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 6000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c26571d6c4078489);
CAPNP_DECLARE_SCHEMA(ccfdf72800028cb8);
CAPNP_DECLARE_SCHEMA(d548f2fa0058bb48);
CAPNP_DECLARE_SCHEMA(9db77979bf59ad4c);
CAPNP_DECLARE_SCHEMA(bab571806e4c494f);
CAPNP_DECLARE_SCHEMA(da63927eb0a7d72f);
CAPNP_DECLARE_SCHEMA(ea04a9b6249da4a1);
CAPNP_DECLARE_SCHEMA(b7cf5512b90c3a5f);
CAPNP_DECLARE_SCHEMA(9b7dc22fdfa402e6);
CAPNP_DECLARE_SCHEMA(cbd71226cf43e22c);
CAPNP_DECLARE_SCHEMA(a142aaa1dbd4ee7c);
CAPNP_DECLARE_SCHEMA(a4c09a2a48491986);
CAPNP_DECLARE_SCHEMA(85cd2621efd33144);
CAPNP_DECLARE_SCHEMA(d97ae6df6ee01f73);
CAPNP_DECLARE_SCHEMA(979fe08790a6d18e);
CAPNP_DECLARE_SCHEMA(f7d06c305524f669);
CAPNP_DECLARE_SCHEMA(d9c7fcb57f5143bb);
CAPNP_DECLARE_SCHEMA(de34b57feb18bf7c);
CAPNP_DECLARE_SCHEMA(e23c68709dfc0747);
CAPNP_DECLARE_SCHEMA(91eff6b5ec2e89a9);
CAPNP_DECLARE_SCHEMA(a3063ea15a0ad310);
CAPNP_DECLARE_SCHEMA(98cf9f3feec0aa21);
CAPNP_DECLARE_SCHEMA(9dbf2b0919637044);
CAPNP_DECLARE_SCHEMA(f7787615b1fc6cf0);
CAPNP_DECLARE_SCHEMA(88f1d4c1a4fdc485);

}  // namespace schemas
}  // namespace capnp

namespace format3d {

struct Point3 {
  Point3() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c26571d6c4078489, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Box3 {
  Box3() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ccfdf72800028cb8, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MNVert {
  MNVert() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d548f2fa0058bb48, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MNEdge {
  MNEdge() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9db77979bf59ad4c, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MNFace {
  MNFace() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bab571806e4c494f, 2, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MNFaceStripped {
  MNFaceStripped() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(da63927eb0a7d72f, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct TriFace {
  TriFace() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea04a9b6249da4a1, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct QuadFace {
  QuadFace() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b7cf5512b90c3a5f, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct PerData {
  PerData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9b7dc22fdfa402e6, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MNMapFace {
  MNMapFace() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cbd71226cf43e22c, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MNMap {
  MNMap() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a142aaa1dbd4ee7c, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MNNormalSpec {
  MNNormalSpec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a4c09a2a48491986, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MNMesh {
  MNMesh() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(85cd2621efd33144, 1, 16)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MNMeshStripped {
  MNMeshStripped() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d97ae6df6ee01f73, 1, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct PolyObj {
  PolyObj() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(979fe08790a6d18e, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct PolyObjStripped {
  PolyObjStripped() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f7d06c305524f669, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct ListObjects {
  ListObjects() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d9c7fcb57f5143bb, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Mesh {
  Mesh() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Faces;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de34b57feb18bf7c, 2, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Mesh::Faces {
  Faces() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    F3,
    F4,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e23c68709dfc0747, 2, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Object {
  Object() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(91eff6b5ec2e89a9, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Objects {
  Objects() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a3063ea15a0ad310, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Anything {
  Anything() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Items;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(98cf9f3feec0aa21, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Anything::Items {
  Items() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    EMPTY,
    OBJ,
    OBJS,
    MESH,
    NORMALS,
    SELECTION,
    UVMAPS,
  };
  struct Normals;
  struct Selection;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9dbf2b0919637044, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Anything::Items::Normals {
  Normals() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f7787615b1fc6cf0, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct Anything::Items::Selection {
  Selection() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(88f1d4c1a4fdc485, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Point3::Reader {
public:
  typedef Point3 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline float getX() const;

  inline float getY() const;

  inline float getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Point3::Builder {
public:
  typedef Point3 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getZ();
  inline void setZ(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Point3::Pipeline {
public:
  typedef Point3 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Box3::Reader {
public:
  typedef Box3 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPmin() const;
  inline  ::format3d::Point3::Reader getPmin() const;

  inline bool hasPmax() const;
  inline  ::format3d::Point3::Reader getPmax() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Box3::Builder {
public:
  typedef Box3 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPmin();
  inline  ::format3d::Point3::Builder getPmin();
  inline void setPmin( ::format3d::Point3::Reader value);
  inline  ::format3d::Point3::Builder initPmin();
  inline void adoptPmin(::capnp::Orphan< ::format3d::Point3>&& value);
  inline ::capnp::Orphan< ::format3d::Point3> disownPmin();

  inline bool hasPmax();
  inline  ::format3d::Point3::Builder getPmax();
  inline void setPmax( ::format3d::Point3::Reader value);
  inline  ::format3d::Point3::Builder initPmax();
  inline void adoptPmax(::capnp::Orphan< ::format3d::Point3>&& value);
  inline ::capnp::Orphan< ::format3d::Point3> disownPmax();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Box3::Pipeline {
public:
  typedef Box3 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::format3d::Point3::Pipeline getPmin();
  inline  ::format3d::Point3::Pipeline getPmax();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MNVert::Reader {
public:
  typedef MNVert Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFlags() const;

  inline float getX() const;

  inline float getY() const;

  inline float getZ() const;

  inline  ::int32_t getOrig() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MNVert::Builder {
public:
  typedef MNVert Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFlags();
  inline void setFlags( ::uint32_t value);

  inline float getX();
  inline void setX(float value);

  inline float getY();
  inline void setY(float value);

  inline float getZ();
  inline void setZ(float value);

  inline  ::int32_t getOrig();
  inline void setOrig( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MNVert::Pipeline {
public:
  typedef MNVert Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MNEdge::Reader {
public:
  typedef MNEdge Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFlags() const;

  inline  ::int32_t getV1() const;

  inline  ::int32_t getV2() const;

  inline  ::int32_t getF1() const;

  inline  ::int32_t getF2() const;

  inline  ::int32_t getTrack() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MNEdge::Builder {
public:
  typedef MNEdge Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFlags();
  inline void setFlags( ::uint32_t value);

  inline  ::int32_t getV1();
  inline void setV1( ::int32_t value);

  inline  ::int32_t getV2();
  inline void setV2( ::int32_t value);

  inline  ::int32_t getF1();
  inline void setF1( ::int32_t value);

  inline  ::int32_t getF2();
  inline void setF2( ::int32_t value);

  inline  ::int32_t getTrack();
  inline void setTrack( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MNEdge::Pipeline {
public:
  typedef MNEdge Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MNFace::Reader {
public:
  typedef MNFace Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFlags() const;

  inline  ::uint8_t getDeg() const;

  inline bool hasVtx() const;
  inline  ::capnp::List< ::int32_t>::Reader getVtx() const;

  inline bool hasEdg() const;
  inline  ::capnp::List< ::int32_t>::Reader getEdg() const;

  inline bool hasDiag() const;
  inline  ::capnp::List< ::int32_t>::Reader getDiag() const;

  inline  ::uint8_t getSmGroup() const;

  inline  ::uint8_t getMaterial() const;

  inline  ::int32_t getTrack() const;

  inline bool hasVisedg() const;
  inline  ::capnp::List<bool>::Reader getVisedg() const;

  inline bool hasEdgsel() const;
  inline  ::capnp::List<bool>::Reader getEdgsel() const;

  inline bool hasBndedg() const;
  inline  ::capnp::List<bool>::Reader getBndedg() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MNFace::Builder {
public:
  typedef MNFace Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getFlags();
  inline void setFlags( ::uint32_t value);

  inline  ::uint8_t getDeg();
  inline void setDeg( ::uint8_t value);

  inline bool hasVtx();
  inline  ::capnp::List< ::int32_t>::Builder getVtx();
  inline void setVtx( ::capnp::List< ::int32_t>::Reader value);
  inline void setVtx(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initVtx(unsigned int size);
  inline void adoptVtx(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownVtx();

  inline bool hasEdg();
  inline  ::capnp::List< ::int32_t>::Builder getEdg();
  inline void setEdg( ::capnp::List< ::int32_t>::Reader value);
  inline void setEdg(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initEdg(unsigned int size);
  inline void adoptEdg(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownEdg();

  inline bool hasDiag();
  inline  ::capnp::List< ::int32_t>::Builder getDiag();
  inline void setDiag( ::capnp::List< ::int32_t>::Reader value);
  inline void setDiag(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initDiag(unsigned int size);
  inline void adoptDiag(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownDiag();

  inline  ::uint8_t getSmGroup();
  inline void setSmGroup( ::uint8_t value);

  inline  ::uint8_t getMaterial();
  inline void setMaterial( ::uint8_t value);

  inline  ::int32_t getTrack();
  inline void setTrack( ::int32_t value);

  inline bool hasVisedg();
  inline  ::capnp::List<bool>::Builder getVisedg();
  inline void setVisedg( ::capnp::List<bool>::Reader value);
  inline void setVisedg(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initVisedg(unsigned int size);
  inline void adoptVisedg(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownVisedg();

  inline bool hasEdgsel();
  inline  ::capnp::List<bool>::Builder getEdgsel();
  inline void setEdgsel( ::capnp::List<bool>::Reader value);
  inline void setEdgsel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initEdgsel(unsigned int size);
  inline void adoptEdgsel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownEdgsel();

  inline bool hasBndedg();
  inline  ::capnp::List<bool>::Builder getBndedg();
  inline void setBndedg( ::capnp::List<bool>::Reader value);
  inline void setBndedg(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initBndedg(unsigned int size);
  inline void adoptBndedg(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownBndedg();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MNFace::Pipeline {
public:
  typedef MNFace Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MNFaceStripped::Reader {
public:
  typedef MNFaceStripped Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int8_t getDeg() const;

  inline bool hasVtx() const;
  inline  ::capnp::List< ::int32_t>::Reader getVtx() const;

  inline  ::uint8_t getSmGroup() const;

  inline  ::uint8_t getMaterial() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MNFaceStripped::Builder {
public:
  typedef MNFaceStripped Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int8_t getDeg();
  inline void setDeg( ::int8_t value);

  inline bool hasVtx();
  inline  ::capnp::List< ::int32_t>::Builder getVtx();
  inline void setVtx( ::capnp::List< ::int32_t>::Reader value);
  inline void setVtx(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initVtx(unsigned int size);
  inline void adoptVtx(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownVtx();

  inline  ::uint8_t getSmGroup();
  inline void setSmGroup( ::uint8_t value);

  inline  ::uint8_t getMaterial();
  inline void setMaterial( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MNFaceStripped::Pipeline {
public:
  typedef MNFaceStripped Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TriFace::Reader {
public:
  typedef TriFace Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getV0() const;

  inline  ::int32_t getV1() const;

  inline  ::int32_t getV2() const;

  inline  ::uint8_t getSmGroup() const;

  inline  ::uint8_t getMaterial() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TriFace::Builder {
public:
  typedef TriFace Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getV0();
  inline void setV0( ::int32_t value);

  inline  ::int32_t getV1();
  inline void setV1( ::int32_t value);

  inline  ::int32_t getV2();
  inline void setV2( ::int32_t value);

  inline  ::uint8_t getSmGroup();
  inline void setSmGroup( ::uint8_t value);

  inline  ::uint8_t getMaterial();
  inline void setMaterial( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TriFace::Pipeline {
public:
  typedef TriFace Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QuadFace::Reader {
public:
  typedef QuadFace Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getV0() const;

  inline  ::int32_t getV1() const;

  inline  ::int32_t getV2() const;

  inline  ::int32_t getV3() const;

  inline  ::uint8_t getSmGroup() const;

  inline  ::uint8_t getMaterial() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QuadFace::Builder {
public:
  typedef QuadFace Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getV0();
  inline void setV0( ::int32_t value);

  inline  ::int32_t getV1();
  inline void setV1( ::int32_t value);

  inline  ::int32_t getV2();
  inline void setV2( ::int32_t value);

  inline  ::int32_t getV3();
  inline void setV3( ::int32_t value);

  inline  ::uint8_t getSmGroup();
  inline void setSmGroup( ::uint8_t value);

  inline  ::uint8_t getMaterial();
  inline void setMaterial( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QuadFace::Pipeline {
public:
  typedef QuadFace Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PerData::Reader {
public:
  typedef PerData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getDnum() const;

  inline  ::int32_t getType() const;

  inline  ::int32_t getAlloc() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PerData::Builder {
public:
  typedef PerData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getDnum();
  inline void setDnum( ::int32_t value);

  inline  ::int32_t getType();
  inline void setType( ::int32_t value);

  inline  ::int32_t getAlloc();
  inline void setAlloc( ::int32_t value);

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PerData::Pipeline {
public:
  typedef PerData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MNMapFace::Reader {
public:
  typedef MNMapFace Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasTv() const;
  inline  ::capnp::List< ::int32_t>::Reader getTv() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MNMapFace::Builder {
public:
  typedef MNMapFace Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTv();
  inline  ::capnp::List< ::int32_t>::Builder getTv();
  inline void setTv( ::capnp::List< ::int32_t>::Reader value);
  inline void setTv(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initTv(unsigned int size);
  inline void adoptTv(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownTv();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MNMapFace::Pipeline {
public:
  typedef MNMapFace Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MNMap::Reader {
public:
  typedef MNMap Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasF() const;
  inline  ::capnp::List< ::int32_t>::Reader getF() const;

  inline bool hasV() const;
  inline  ::capnp::List< ::format3d::Point3>::Reader getV() const;

  inline  ::int8_t getChannel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MNMap::Builder {
public:
  typedef MNMap Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasF();
  inline  ::capnp::List< ::int32_t>::Builder getF();
  inline void setF( ::capnp::List< ::int32_t>::Reader value);
  inline void setF(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initF(unsigned int size);
  inline void adoptF(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownF();

  inline bool hasV();
  inline  ::capnp::List< ::format3d::Point3>::Builder getV();
  inline void setV( ::capnp::List< ::format3d::Point3>::Reader value);
  inline  ::capnp::List< ::format3d::Point3>::Builder initV(unsigned int size);
  inline void adoptV(::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> disownV();

  inline  ::int8_t getChannel();
  inline void setChannel( ::int8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MNMap::Pipeline {
public:
  typedef MNMap Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MNNormalSpec::Reader {
public:
  typedef MNNormalSpec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMpNormal() const;
  inline  ::capnp::List< ::format3d::Point3>::Reader getMpNormal() const;

  inline bool hasMpFace() const;
  inline  ::capnp::List< ::capnp::List< ::int32_t>>::Reader getMpFace() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MNNormalSpec::Builder {
public:
  typedef MNNormalSpec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMpNormal();
  inline  ::capnp::List< ::format3d::Point3>::Builder getMpNormal();
  inline void setMpNormal( ::capnp::List< ::format3d::Point3>::Reader value);
  inline  ::capnp::List< ::format3d::Point3>::Builder initMpNormal(unsigned int size);
  inline void adoptMpNormal(::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> disownMpNormal();

  inline bool hasMpFace();
  inline  ::capnp::List< ::capnp::List< ::int32_t>>::Builder getMpFace();
  inline void setMpFace( ::capnp::List< ::capnp::List< ::int32_t>>::Reader value);
  inline void setMpFace(::kj::ArrayPtr<const  ::capnp::List< ::int32_t>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::int32_t>>::Builder initMpFace(unsigned int size);
  inline void adoptMpFace(::capnp::Orphan< ::capnp::List< ::capnp::List< ::int32_t>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::int32_t>>> disownMpFace();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MNNormalSpec::Pipeline {
public:
  typedef MNNormalSpec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MNMesh::Reader {
public:
  typedef MNMesh Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasV() const;
  inline  ::capnp::List< ::format3d::MNVert>::Reader getV() const;

  inline bool hasE() const;
  inline  ::capnp::List< ::format3d::MNEdge>::Reader getE() const;

  inline bool hasF() const;
  inline  ::capnp::List< ::format3d::MNFace>::Reader getF() const;

  inline bool hasM() const;
  inline  ::capnp::List< ::format3d::MNMap>::Reader getM() const;

  inline bool hasVd() const;
  inline  ::capnp::List< ::format3d::PerData>::Reader getVd() const;

  inline bool hasVdSupport() const;
  inline  ::capnp::List<bool>::Reader getVdSupport() const;

  inline bool hasEd() const;
  inline  ::capnp::List< ::format3d::PerData>::Reader getEd() const;

  inline bool hasEdSupport() const;
  inline  ::capnp::List<bool>::Reader getEdSupport() const;

  inline  ::int32_t getSelLevel() const;

  inline  ::int32_t getDispFlags() const;

  inline bool hasVedg() const;
  inline  ::capnp::List< ::int32_t>::Reader getVedg() const;

  inline bool hasVfac() const;
  inline  ::capnp::List< ::int32_t>::Reader getVfac() const;

  inline bool hasBdgBox() const;
  inline  ::format3d::Box3::Reader getBdgBox() const;

  inline bool hasHmap() const;
  inline  ::capnp::List< ::format3d::MNMap>::Reader getHmap() const;

  inline bool hasNormals() const;
  inline  ::format3d::MNNormalSpec::Reader getNormals() const;

  inline bool hasVSel() const;
  inline  ::capnp::List<bool>::Reader getVSel() const;

  inline bool hasESel() const;
  inline  ::capnp::List<bool>::Reader getESel() const;

  inline bool hasFSel() const;
  inline  ::capnp::List<bool>::Reader getFSel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MNMesh::Builder {
public:
  typedef MNMesh Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasV();
  inline  ::capnp::List< ::format3d::MNVert>::Builder getV();
  inline void setV( ::capnp::List< ::format3d::MNVert>::Reader value);
  inline  ::capnp::List< ::format3d::MNVert>::Builder initV(unsigned int size);
  inline void adoptV(::capnp::Orphan< ::capnp::List< ::format3d::MNVert>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::MNVert>> disownV();

  inline bool hasE();
  inline  ::capnp::List< ::format3d::MNEdge>::Builder getE();
  inline void setE( ::capnp::List< ::format3d::MNEdge>::Reader value);
  inline  ::capnp::List< ::format3d::MNEdge>::Builder initE(unsigned int size);
  inline void adoptE(::capnp::Orphan< ::capnp::List< ::format3d::MNEdge>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::MNEdge>> disownE();

  inline bool hasF();
  inline  ::capnp::List< ::format3d::MNFace>::Builder getF();
  inline void setF( ::capnp::List< ::format3d::MNFace>::Reader value);
  inline  ::capnp::List< ::format3d::MNFace>::Builder initF(unsigned int size);
  inline void adoptF(::capnp::Orphan< ::capnp::List< ::format3d::MNFace>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::MNFace>> disownF();

  inline bool hasM();
  inline  ::capnp::List< ::format3d::MNMap>::Builder getM();
  inline void setM( ::capnp::List< ::format3d::MNMap>::Reader value);
  inline  ::capnp::List< ::format3d::MNMap>::Builder initM(unsigned int size);
  inline void adoptM(::capnp::Orphan< ::capnp::List< ::format3d::MNMap>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>> disownM();

  inline bool hasVd();
  inline  ::capnp::List< ::format3d::PerData>::Builder getVd();
  inline void setVd( ::capnp::List< ::format3d::PerData>::Reader value);
  inline  ::capnp::List< ::format3d::PerData>::Builder initVd(unsigned int size);
  inline void adoptVd(::capnp::Orphan< ::capnp::List< ::format3d::PerData>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::PerData>> disownVd();

  inline bool hasVdSupport();
  inline  ::capnp::List<bool>::Builder getVdSupport();
  inline void setVdSupport( ::capnp::List<bool>::Reader value);
  inline void setVdSupport(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initVdSupport(unsigned int size);
  inline void adoptVdSupport(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownVdSupport();

  inline bool hasEd();
  inline  ::capnp::List< ::format3d::PerData>::Builder getEd();
  inline void setEd( ::capnp::List< ::format3d::PerData>::Reader value);
  inline  ::capnp::List< ::format3d::PerData>::Builder initEd(unsigned int size);
  inline void adoptEd(::capnp::Orphan< ::capnp::List< ::format3d::PerData>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::PerData>> disownEd();

  inline bool hasEdSupport();
  inline  ::capnp::List<bool>::Builder getEdSupport();
  inline void setEdSupport( ::capnp::List<bool>::Reader value);
  inline void setEdSupport(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initEdSupport(unsigned int size);
  inline void adoptEdSupport(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownEdSupport();

  inline  ::int32_t getSelLevel();
  inline void setSelLevel( ::int32_t value);

  inline  ::int32_t getDispFlags();
  inline void setDispFlags( ::int32_t value);

  inline bool hasVedg();
  inline  ::capnp::List< ::int32_t>::Builder getVedg();
  inline void setVedg( ::capnp::List< ::int32_t>::Reader value);
  inline void setVedg(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initVedg(unsigned int size);
  inline void adoptVedg(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownVedg();

  inline bool hasVfac();
  inline  ::capnp::List< ::int32_t>::Builder getVfac();
  inline void setVfac( ::capnp::List< ::int32_t>::Reader value);
  inline void setVfac(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initVfac(unsigned int size);
  inline void adoptVfac(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownVfac();

  inline bool hasBdgBox();
  inline  ::format3d::Box3::Builder getBdgBox();
  inline void setBdgBox( ::format3d::Box3::Reader value);
  inline  ::format3d::Box3::Builder initBdgBox();
  inline void adoptBdgBox(::capnp::Orphan< ::format3d::Box3>&& value);
  inline ::capnp::Orphan< ::format3d::Box3> disownBdgBox();

  inline bool hasHmap();
  inline  ::capnp::List< ::format3d::MNMap>::Builder getHmap();
  inline void setHmap( ::capnp::List< ::format3d::MNMap>::Reader value);
  inline  ::capnp::List< ::format3d::MNMap>::Builder initHmap(unsigned int size);
  inline void adoptHmap(::capnp::Orphan< ::capnp::List< ::format3d::MNMap>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>> disownHmap();

  inline bool hasNormals();
  inline  ::format3d::MNNormalSpec::Builder getNormals();
  inline void setNormals( ::format3d::MNNormalSpec::Reader value);
  inline  ::format3d::MNNormalSpec::Builder initNormals();
  inline void adoptNormals(::capnp::Orphan< ::format3d::MNNormalSpec>&& value);
  inline ::capnp::Orphan< ::format3d::MNNormalSpec> disownNormals();

  inline bool hasVSel();
  inline  ::capnp::List<bool>::Builder getVSel();
  inline void setVSel( ::capnp::List<bool>::Reader value);
  inline void setVSel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initVSel(unsigned int size);
  inline void adoptVSel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownVSel();

  inline bool hasESel();
  inline  ::capnp::List<bool>::Builder getESel();
  inline void setESel( ::capnp::List<bool>::Reader value);
  inline void setESel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initESel(unsigned int size);
  inline void adoptESel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownESel();

  inline bool hasFSel();
  inline  ::capnp::List<bool>::Builder getFSel();
  inline void setFSel( ::capnp::List<bool>::Reader value);
  inline void setFSel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initFSel(unsigned int size);
  inline void adoptFSel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownFSel();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MNMesh::Pipeline {
public:
  typedef MNMesh Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::format3d::Box3::Pipeline getBdgBox();
  inline  ::format3d::MNNormalSpec::Pipeline getNormals();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MNMeshStripped::Reader {
public:
  typedef MNMeshStripped Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasV() const;
  inline  ::capnp::List< ::format3d::Point3>::Reader getV() const;

  inline bool hasF() const;
  inline  ::capnp::List< ::format3d::MNFaceStripped>::Reader getF() const;

  inline  ::int32_t getSelLevel() const;

  inline  ::int32_t getDispFlags() const;

  inline bool hasBdgBox() const;
  inline  ::format3d::Box3::Reader getBdgBox() const;

  inline bool hasM() const;
  inline  ::capnp::List< ::format3d::MNMap>::Reader getM() const;

  inline bool hasHmap() const;
  inline  ::capnp::List< ::format3d::MNMap>::Reader getHmap() const;

  inline bool hasVSel() const;
  inline  ::capnp::List<bool>::Reader getVSel() const;

  inline bool hasESel() const;
  inline  ::capnp::List<bool>::Reader getESel() const;

  inline bool hasFSel() const;
  inline  ::capnp::List<bool>::Reader getFSel() const;

  inline bool hasMpNormal() const;
  inline  ::capnp::List< ::format3d::Point3>::Reader getMpNormal() const;

  inline bool hasMpFace() const;
  inline  ::capnp::List< ::capnp::List< ::int32_t>>::Reader getMpFace() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MNMeshStripped::Builder {
public:
  typedef MNMeshStripped Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasV();
  inline  ::capnp::List< ::format3d::Point3>::Builder getV();
  inline void setV( ::capnp::List< ::format3d::Point3>::Reader value);
  inline  ::capnp::List< ::format3d::Point3>::Builder initV(unsigned int size);
  inline void adoptV(::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> disownV();

  inline bool hasF();
  inline  ::capnp::List< ::format3d::MNFaceStripped>::Builder getF();
  inline void setF( ::capnp::List< ::format3d::MNFaceStripped>::Reader value);
  inline  ::capnp::List< ::format3d::MNFaceStripped>::Builder initF(unsigned int size);
  inline void adoptF(::capnp::Orphan< ::capnp::List< ::format3d::MNFaceStripped>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::MNFaceStripped>> disownF();

  inline  ::int32_t getSelLevel();
  inline void setSelLevel( ::int32_t value);

  inline  ::int32_t getDispFlags();
  inline void setDispFlags( ::int32_t value);

  inline bool hasBdgBox();
  inline  ::format3d::Box3::Builder getBdgBox();
  inline void setBdgBox( ::format3d::Box3::Reader value);
  inline  ::format3d::Box3::Builder initBdgBox();
  inline void adoptBdgBox(::capnp::Orphan< ::format3d::Box3>&& value);
  inline ::capnp::Orphan< ::format3d::Box3> disownBdgBox();

  inline bool hasM();
  inline  ::capnp::List< ::format3d::MNMap>::Builder getM();
  inline void setM( ::capnp::List< ::format3d::MNMap>::Reader value);
  inline  ::capnp::List< ::format3d::MNMap>::Builder initM(unsigned int size);
  inline void adoptM(::capnp::Orphan< ::capnp::List< ::format3d::MNMap>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>> disownM();

  inline bool hasHmap();
  inline  ::capnp::List< ::format3d::MNMap>::Builder getHmap();
  inline void setHmap( ::capnp::List< ::format3d::MNMap>::Reader value);
  inline  ::capnp::List< ::format3d::MNMap>::Builder initHmap(unsigned int size);
  inline void adoptHmap(::capnp::Orphan< ::capnp::List< ::format3d::MNMap>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>> disownHmap();

  inline bool hasVSel();
  inline  ::capnp::List<bool>::Builder getVSel();
  inline void setVSel( ::capnp::List<bool>::Reader value);
  inline void setVSel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initVSel(unsigned int size);
  inline void adoptVSel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownVSel();

  inline bool hasESel();
  inline  ::capnp::List<bool>::Builder getESel();
  inline void setESel( ::capnp::List<bool>::Reader value);
  inline void setESel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initESel(unsigned int size);
  inline void adoptESel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownESel();

  inline bool hasFSel();
  inline  ::capnp::List<bool>::Builder getFSel();
  inline void setFSel( ::capnp::List<bool>::Reader value);
  inline void setFSel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initFSel(unsigned int size);
  inline void adoptFSel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownFSel();

  inline bool hasMpNormal();
  inline  ::capnp::List< ::format3d::Point3>::Builder getMpNormal();
  inline void setMpNormal( ::capnp::List< ::format3d::Point3>::Reader value);
  inline  ::capnp::List< ::format3d::Point3>::Builder initMpNormal(unsigned int size);
  inline void adoptMpNormal(::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> disownMpNormal();

  inline bool hasMpFace();
  inline  ::capnp::List< ::capnp::List< ::int32_t>>::Builder getMpFace();
  inline void setMpFace( ::capnp::List< ::capnp::List< ::int32_t>>::Reader value);
  inline void setMpFace(::kj::ArrayPtr<const  ::capnp::List< ::int32_t>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::int32_t>>::Builder initMpFace(unsigned int size);
  inline void adoptMpFace(::capnp::Orphan< ::capnp::List< ::capnp::List< ::int32_t>>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::int32_t>>> disownMpFace();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MNMeshStripped::Pipeline {
public:
  typedef MNMeshStripped Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::format3d::Box3::Pipeline getBdgBox();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PolyObj::Reader {
public:
  typedef PolyObj Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::int8_t getType() const;

  inline bool hasMmesh() const;
  inline  ::format3d::MNMesh::Reader getMmesh() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PolyObj::Builder {
public:
  typedef PolyObj Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::int8_t getType();
  inline void setType( ::int8_t value);

  inline bool hasMmesh();
  inline  ::format3d::MNMesh::Builder getMmesh();
  inline void setMmesh( ::format3d::MNMesh::Reader value);
  inline  ::format3d::MNMesh::Builder initMmesh();
  inline void adoptMmesh(::capnp::Orphan< ::format3d::MNMesh>&& value);
  inline ::capnp::Orphan< ::format3d::MNMesh> disownMmesh();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PolyObj::Pipeline {
public:
  typedef PolyObj Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::format3d::MNMesh::Pipeline getMmesh();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PolyObjStripped::Reader {
public:
  typedef PolyObjStripped Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::int8_t getType() const;

  inline bool hasMmesh() const;
  inline  ::format3d::MNMeshStripped::Reader getMmesh() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PolyObjStripped::Builder {
public:
  typedef PolyObjStripped Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::int8_t getType();
  inline void setType( ::int8_t value);

  inline bool hasMmesh();
  inline  ::format3d::MNMeshStripped::Builder getMmesh();
  inline void setMmesh( ::format3d::MNMeshStripped::Reader value);
  inline  ::format3d::MNMeshStripped::Builder initMmesh();
  inline void adoptMmesh(::capnp::Orphan< ::format3d::MNMeshStripped>&& value);
  inline ::capnp::Orphan< ::format3d::MNMeshStripped> disownMmesh();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PolyObjStripped::Pipeline {
public:
  typedef PolyObjStripped Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::format3d::MNMeshStripped::Pipeline getMmesh();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ListObjects::Reader {
public:
  typedef ListObjects Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasPolyObjs() const;
  inline  ::capnp::List< ::format3d::PolyObjStripped>::Reader getPolyObjs() const;

  inline bool hasTriObjs() const;
  inline  ::capnp::List< ::format3d::PolyObj>::Reader getTriObjs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ListObjects::Builder {
public:
  typedef ListObjects Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPolyObjs();
  inline  ::capnp::List< ::format3d::PolyObjStripped>::Builder getPolyObjs();
  inline void setPolyObjs( ::capnp::List< ::format3d::PolyObjStripped>::Reader value);
  inline  ::capnp::List< ::format3d::PolyObjStripped>::Builder initPolyObjs(unsigned int size);
  inline void adoptPolyObjs(::capnp::Orphan< ::capnp::List< ::format3d::PolyObjStripped>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::PolyObjStripped>> disownPolyObjs();

  inline bool hasTriObjs();
  inline  ::capnp::List< ::format3d::PolyObj>::Builder getTriObjs();
  inline void setTriObjs( ::capnp::List< ::format3d::PolyObj>::Reader value);
  inline  ::capnp::List< ::format3d::PolyObj>::Builder initTriObjs(unsigned int size);
  inline void adoptTriObjs(::capnp::Orphan< ::capnp::List< ::format3d::PolyObj>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::PolyObj>> disownTriObjs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ListObjects::Pipeline {
public:
  typedef ListObjects Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Mesh::Reader {
public:
  typedef Mesh Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasV() const;
  inline  ::capnp::List< ::format3d::Point3>::Reader getV() const;

  inline Faces::Reader getFaces() const;

  inline  ::int32_t getSelLevel() const;

  inline  ::int32_t getDispFlags() const;

  inline bool hasBdgBox() const;
  inline  ::format3d::Box3::Reader getBdgBox() const;

  inline bool hasM() const;
  inline  ::capnp::List< ::format3d::MNMap>::Reader getM() const;

  inline bool hasVSel() const;
  inline  ::capnp::List<bool>::Reader getVSel() const;

  inline bool hasESel() const;
  inline  ::capnp::List<bool>::Reader getESel() const;

  inline bool hasFSel() const;
  inline  ::capnp::List<bool>::Reader getFSel() const;

  inline bool hasEVis() const;
  inline  ::capnp::List<bool>::Reader getEVis() const;

  inline bool hasMpNormal() const;
  inline  ::capnp::List< ::format3d::Point3>::Reader getMpNormal() const;

  inline bool hasMpFace() const;
  inline  ::capnp::List< ::int32_t>::Reader getMpFace() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Mesh::Builder {
public:
  typedef Mesh Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasV();
  inline  ::capnp::List< ::format3d::Point3>::Builder getV();
  inline void setV( ::capnp::List< ::format3d::Point3>::Reader value);
  inline  ::capnp::List< ::format3d::Point3>::Builder initV(unsigned int size);
  inline void adoptV(::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> disownV();

  inline Faces::Builder getFaces();
  inline Faces::Builder initFaces();

  inline  ::int32_t getSelLevel();
  inline void setSelLevel( ::int32_t value);

  inline  ::int32_t getDispFlags();
  inline void setDispFlags( ::int32_t value);

  inline bool hasBdgBox();
  inline  ::format3d::Box3::Builder getBdgBox();
  inline void setBdgBox( ::format3d::Box3::Reader value);
  inline  ::format3d::Box3::Builder initBdgBox();
  inline void adoptBdgBox(::capnp::Orphan< ::format3d::Box3>&& value);
  inline ::capnp::Orphan< ::format3d::Box3> disownBdgBox();

  inline bool hasM();
  inline  ::capnp::List< ::format3d::MNMap>::Builder getM();
  inline void setM( ::capnp::List< ::format3d::MNMap>::Reader value);
  inline  ::capnp::List< ::format3d::MNMap>::Builder initM(unsigned int size);
  inline void adoptM(::capnp::Orphan< ::capnp::List< ::format3d::MNMap>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>> disownM();

  inline bool hasVSel();
  inline  ::capnp::List<bool>::Builder getVSel();
  inline void setVSel( ::capnp::List<bool>::Reader value);
  inline void setVSel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initVSel(unsigned int size);
  inline void adoptVSel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownVSel();

  inline bool hasESel();
  inline  ::capnp::List<bool>::Builder getESel();
  inline void setESel( ::capnp::List<bool>::Reader value);
  inline void setESel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initESel(unsigned int size);
  inline void adoptESel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownESel();

  inline bool hasFSel();
  inline  ::capnp::List<bool>::Builder getFSel();
  inline void setFSel( ::capnp::List<bool>::Reader value);
  inline void setFSel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initFSel(unsigned int size);
  inline void adoptFSel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownFSel();

  inline bool hasEVis();
  inline  ::capnp::List<bool>::Builder getEVis();
  inline void setEVis( ::capnp::List<bool>::Reader value);
  inline void setEVis(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initEVis(unsigned int size);
  inline void adoptEVis(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownEVis();

  inline bool hasMpNormal();
  inline  ::capnp::List< ::format3d::Point3>::Builder getMpNormal();
  inline void setMpNormal( ::capnp::List< ::format3d::Point3>::Reader value);
  inline  ::capnp::List< ::format3d::Point3>::Builder initMpNormal(unsigned int size);
  inline void adoptMpNormal(::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> disownMpNormal();

  inline bool hasMpFace();
  inline  ::capnp::List< ::int32_t>::Builder getMpFace();
  inline void setMpFace( ::capnp::List< ::int32_t>::Reader value);
  inline void setMpFace(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initMpFace(unsigned int size);
  inline void adoptMpFace(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownMpFace();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Mesh::Pipeline {
public:
  typedef Mesh Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline Faces::Pipeline getFaces();
  inline  ::format3d::Box3::Pipeline getBdgBox();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Mesh::Faces::Reader {
public:
  typedef Faces Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isF3() const;
  inline bool hasF3() const;
  inline  ::capnp::List< ::format3d::TriFace>::Reader getF3() const;

  inline bool isF4() const;
  inline bool hasF4() const;
  inline  ::capnp::List< ::format3d::QuadFace>::Reader getF4() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Mesh::Faces::Builder {
public:
  typedef Faces Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isF3();
  inline bool hasF3();
  inline  ::capnp::List< ::format3d::TriFace>::Builder getF3();
  inline void setF3( ::capnp::List< ::format3d::TriFace>::Reader value);
  inline  ::capnp::List< ::format3d::TriFace>::Builder initF3(unsigned int size);
  inline void adoptF3(::capnp::Orphan< ::capnp::List< ::format3d::TriFace>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::TriFace>> disownF3();

  inline bool isF4();
  inline bool hasF4();
  inline  ::capnp::List< ::format3d::QuadFace>::Builder getF4();
  inline void setF4( ::capnp::List< ::format3d::QuadFace>::Reader value);
  inline  ::capnp::List< ::format3d::QuadFace>::Builder initF4(unsigned int size);
  inline void adoptF4(::capnp::Orphan< ::capnp::List< ::format3d::QuadFace>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::QuadFace>> disownF4();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Mesh::Faces::Pipeline {
public:
  typedef Faces Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Object::Reader {
public:
  typedef Object Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::int8_t getType() const;

  inline bool hasMesh() const;
  inline  ::format3d::Mesh::Reader getMesh() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Object::Builder {
public:
  typedef Object Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::int8_t getType();
  inline void setType( ::int8_t value);

  inline bool hasMesh();
  inline  ::format3d::Mesh::Builder getMesh();
  inline void setMesh( ::format3d::Mesh::Reader value);
  inline  ::format3d::Mesh::Builder initMesh();
  inline void adoptMesh(::capnp::Orphan< ::format3d::Mesh>&& value);
  inline ::capnp::Orphan< ::format3d::Mesh> disownMesh();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Object::Pipeline {
public:
  typedef Object Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::format3d::Mesh::Pipeline getMesh();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Objects::Reader {
public:
  typedef Objects Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasObjs() const;
  inline  ::capnp::List< ::format3d::Object>::Reader getObjs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Objects::Builder {
public:
  typedef Objects Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasObjs();
  inline  ::capnp::List< ::format3d::Object>::Builder getObjs();
  inline void setObjs( ::capnp::List< ::format3d::Object>::Reader value);
  inline  ::capnp::List< ::format3d::Object>::Builder initObjs(unsigned int size);
  inline void adoptObjs(::capnp::Orphan< ::capnp::List< ::format3d::Object>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::Object>> disownObjs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Objects::Pipeline {
public:
  typedef Objects Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Anything::Reader {
public:
  typedef Anything Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Items::Reader getItems() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Anything::Builder {
public:
  typedef Anything Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Items::Builder getItems();
  inline Items::Builder initItems();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Anything::Pipeline {
public:
  typedef Anything Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline Items::Pipeline getItems();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Anything::Items::Reader {
public:
  typedef Items Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isEmpty() const;
  inline bool getEmpty() const;

  inline bool isObj() const;
  inline bool hasObj() const;
  inline  ::format3d::Object::Reader getObj() const;

  inline bool isObjs() const;
  inline bool hasObjs() const;
  inline  ::capnp::List< ::format3d::Object>::Reader getObjs() const;

  inline bool isMesh() const;
  inline bool hasMesh() const;
  inline  ::format3d::Mesh::Reader getMesh() const;

  inline bool isNormals() const;
  inline Normals::Reader getNormals() const;

  inline bool isSelection() const;
  inline Selection::Reader getSelection() const;

  inline bool isUvmaps() const;
  inline bool hasUvmaps() const;
  inline  ::capnp::List< ::format3d::MNMap>::Reader getUvmaps() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Anything::Items::Builder {
public:
  typedef Items Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isEmpty();
  inline bool getEmpty();
  inline void setEmpty(bool value);

  inline bool isObj();
  inline bool hasObj();
  inline  ::format3d::Object::Builder getObj();
  inline void setObj( ::format3d::Object::Reader value);
  inline  ::format3d::Object::Builder initObj();
  inline void adoptObj(::capnp::Orphan< ::format3d::Object>&& value);
  inline ::capnp::Orphan< ::format3d::Object> disownObj();

  inline bool isObjs();
  inline bool hasObjs();
  inline  ::capnp::List< ::format3d::Object>::Builder getObjs();
  inline void setObjs( ::capnp::List< ::format3d::Object>::Reader value);
  inline  ::capnp::List< ::format3d::Object>::Builder initObjs(unsigned int size);
  inline void adoptObjs(::capnp::Orphan< ::capnp::List< ::format3d::Object>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::Object>> disownObjs();

  inline bool isMesh();
  inline bool hasMesh();
  inline  ::format3d::Mesh::Builder getMesh();
  inline void setMesh( ::format3d::Mesh::Reader value);
  inline  ::format3d::Mesh::Builder initMesh();
  inline void adoptMesh(::capnp::Orphan< ::format3d::Mesh>&& value);
  inline ::capnp::Orphan< ::format3d::Mesh> disownMesh();

  inline bool isNormals();
  inline Normals::Builder getNormals();
  inline Normals::Builder initNormals();

  inline bool isSelection();
  inline Selection::Builder getSelection();
  inline Selection::Builder initSelection();

  inline bool isUvmaps();
  inline bool hasUvmaps();
  inline  ::capnp::List< ::format3d::MNMap>::Builder getUvmaps();
  inline void setUvmaps( ::capnp::List< ::format3d::MNMap>::Reader value);
  inline  ::capnp::List< ::format3d::MNMap>::Builder initUvmaps(unsigned int size);
  inline void adoptUvmaps(::capnp::Orphan< ::capnp::List< ::format3d::MNMap>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>> disownUvmaps();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Anything::Items::Pipeline {
public:
  typedef Items Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Anything::Items::Normals::Reader {
public:
  typedef Normals Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasMpNormal() const;
  inline  ::capnp::List< ::format3d::Point3>::Reader getMpNormal() const;

  inline bool hasMpFace() const;
  inline  ::capnp::List< ::int32_t>::Reader getMpFace() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Anything::Items::Normals::Builder {
public:
  typedef Normals Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMpNormal();
  inline  ::capnp::List< ::format3d::Point3>::Builder getMpNormal();
  inline void setMpNormal( ::capnp::List< ::format3d::Point3>::Reader value);
  inline  ::capnp::List< ::format3d::Point3>::Builder initMpNormal(unsigned int size);
  inline void adoptMpNormal(::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> disownMpNormal();

  inline bool hasMpFace();
  inline  ::capnp::List< ::int32_t>::Builder getMpFace();
  inline void setMpFace( ::capnp::List< ::int32_t>::Reader value);
  inline void setMpFace(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t>::Builder initMpFace(unsigned int size);
  inline void adoptMpFace(::capnp::Orphan< ::capnp::List< ::int32_t>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t>> disownMpFace();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Anything::Items::Normals::Pipeline {
public:
  typedef Normals Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Anything::Items::Selection::Reader {
public:
  typedef Selection Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasVSel() const;
  inline  ::capnp::List<bool>::Reader getVSel() const;

  inline bool hasESel() const;
  inline  ::capnp::List<bool>::Reader getESel() const;

  inline bool hasFSel() const;
  inline  ::capnp::List<bool>::Reader getFSel() const;

  inline bool hasEVis() const;
  inline  ::capnp::List<bool>::Reader getEVis() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Anything::Items::Selection::Builder {
public:
  typedef Selection Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasVSel();
  inline  ::capnp::List<bool>::Builder getVSel();
  inline void setVSel( ::capnp::List<bool>::Reader value);
  inline void setVSel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initVSel(unsigned int size);
  inline void adoptVSel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownVSel();

  inline bool hasESel();
  inline  ::capnp::List<bool>::Builder getESel();
  inline void setESel( ::capnp::List<bool>::Reader value);
  inline void setESel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initESel(unsigned int size);
  inline void adoptESel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownESel();

  inline bool hasFSel();
  inline  ::capnp::List<bool>::Builder getFSel();
  inline void setFSel( ::capnp::List<bool>::Reader value);
  inline void setFSel(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initFSel(unsigned int size);
  inline void adoptFSel(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownFSel();

  inline bool hasEVis();
  inline  ::capnp::List<bool>::Builder getEVis();
  inline void setEVis( ::capnp::List<bool>::Reader value);
  inline void setEVis(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool>::Builder initEVis(unsigned int size);
  inline void adoptEVis(::capnp::Orphan< ::capnp::List<bool>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool>> disownEVis();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Anything::Items::Selection::Pipeline {
public:
  typedef Selection Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline float Point3::Reader::getX() const {
  return _reader.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}

inline float Point3::Builder::getX() {
  return _builder.getDataField<float>(
      0 * ::capnp::ELEMENTS);
}
inline void Point3::Builder::setX(float value) {
  _builder.setDataField<float>(
      0 * ::capnp::ELEMENTS, value);
}

inline float Point3::Reader::getY() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float Point3::Builder::getY() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void Point3::Builder::setY(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline float Point3::Reader::getZ() const {
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float Point3::Builder::getZ() {
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void Point3::Builder::setZ(float value) {
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool Box3::Reader::hasPmin() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Box3::Builder::hasPmin() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::format3d::Point3::Reader Box3::Reader::getPmin() const {
  return ::capnp::_::PointerHelpers< ::format3d::Point3>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::format3d::Point3::Builder Box3::Builder::getPmin() {
  return ::capnp::_::PointerHelpers< ::format3d::Point3>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::format3d::Point3::Pipeline Box3::Pipeline::getPmin() {
  return  ::format3d::Point3::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Box3::Builder::setPmin( ::format3d::Point3::Reader value) {
  ::capnp::_::PointerHelpers< ::format3d::Point3>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::format3d::Point3::Builder Box3::Builder::initPmin() {
  return ::capnp::_::PointerHelpers< ::format3d::Point3>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Box3::Builder::adoptPmin(
    ::capnp::Orphan< ::format3d::Point3>&& value) {
  ::capnp::_::PointerHelpers< ::format3d::Point3>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::format3d::Point3> Box3::Builder::disownPmin() {
  return ::capnp::_::PointerHelpers< ::format3d::Point3>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Box3::Reader::hasPmax() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Box3::Builder::hasPmax() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::format3d::Point3::Reader Box3::Reader::getPmax() const {
  return ::capnp::_::PointerHelpers< ::format3d::Point3>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::format3d::Point3::Builder Box3::Builder::getPmax() {
  return ::capnp::_::PointerHelpers< ::format3d::Point3>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::format3d::Point3::Pipeline Box3::Pipeline::getPmax() {
  return  ::format3d::Point3::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Box3::Builder::setPmax( ::format3d::Point3::Reader value) {
  ::capnp::_::PointerHelpers< ::format3d::Point3>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::format3d::Point3::Builder Box3::Builder::initPmax() {
  return ::capnp::_::PointerHelpers< ::format3d::Point3>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Box3::Builder::adoptPmax(
    ::capnp::Orphan< ::format3d::Point3>&& value) {
  ::capnp::_::PointerHelpers< ::format3d::Point3>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::format3d::Point3> Box3::Builder::disownPmax() {
  return ::capnp::_::PointerHelpers< ::format3d::Point3>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::uint32_t MNVert::Reader::getFlags() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t MNVert::Builder::getFlags() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void MNVert::Builder::setFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline float MNVert::Reader::getX() const {
  return _reader.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}

inline float MNVert::Builder::getX() {
  return _builder.getDataField<float>(
      1 * ::capnp::ELEMENTS);
}
inline void MNVert::Builder::setX(float value) {
  _builder.setDataField<float>(
      1 * ::capnp::ELEMENTS, value);
}

inline float MNVert::Reader::getY() const {
  return _reader.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}

inline float MNVert::Builder::getY() {
  return _builder.getDataField<float>(
      2 * ::capnp::ELEMENTS);
}
inline void MNVert::Builder::setY(float value) {
  _builder.setDataField<float>(
      2 * ::capnp::ELEMENTS, value);
}

inline float MNVert::Reader::getZ() const {
  return _reader.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}

inline float MNVert::Builder::getZ() {
  return _builder.getDataField<float>(
      3 * ::capnp::ELEMENTS);
}
inline void MNVert::Builder::setZ(float value) {
  _builder.setDataField<float>(
      3 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t MNVert::Reader::getOrig() const {
  return _reader.getDataField< ::int32_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::int32_t MNVert::Builder::getOrig() {
  return _builder.getDataField< ::int32_t>(
      4 * ::capnp::ELEMENTS);
}
inline void MNVert::Builder::setOrig( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t MNEdge::Reader::getFlags() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t MNEdge::Builder::getFlags() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void MNEdge::Builder::setFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t MNEdge::Reader::getV1() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t MNEdge::Builder::getV1() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void MNEdge::Builder::setV1( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t MNEdge::Reader::getV2() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t MNEdge::Builder::getV2() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void MNEdge::Builder::setV2( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t MNEdge::Reader::getF1() const {
  return _reader.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int32_t MNEdge::Builder::getF1() {
  return _builder.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void MNEdge::Builder::setF1( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t MNEdge::Reader::getF2() const {
  return _reader.getDataField< ::int32_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::int32_t MNEdge::Builder::getF2() {
  return _builder.getDataField< ::int32_t>(
      4 * ::capnp::ELEMENTS);
}
inline void MNEdge::Builder::setF2( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t MNEdge::Reader::getTrack() const {
  return _reader.getDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::int32_t MNEdge::Builder::getTrack() {
  return _builder.getDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS);
}
inline void MNEdge::Builder::setTrack( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t MNFace::Reader::getFlags() const {
  return _reader.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint32_t MNFace::Builder::getFlags() {
  return _builder.getDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void MNFace::Builder::setFlags( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t MNFace::Reader::getDeg() const {
  return _reader.getDataField< ::uint8_t>(
      4 * ::capnp::ELEMENTS);
}

inline  ::uint8_t MNFace::Builder::getDeg() {
  return _builder.getDataField< ::uint8_t>(
      4 * ::capnp::ELEMENTS);
}
inline void MNFace::Builder::setDeg( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      4 * ::capnp::ELEMENTS, value);
}

inline bool MNFace::Reader::hasVtx() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool MNFace::Builder::hasVtx() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader MNFace::Reader::getVtx() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder MNFace::Builder::getVtx() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void MNFace::Builder::setVtx( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void MNFace::Builder::setVtx(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder MNFace::Builder::initVtx(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void MNFace::Builder::adoptVtx(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> MNFace::Builder::disownVtx() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool MNFace::Reader::hasEdg() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool MNFace::Builder::hasEdg() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader MNFace::Reader::getEdg() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder MNFace::Builder::getEdg() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void MNFace::Builder::setEdg( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void MNFace::Builder::setEdg(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder MNFace::Builder::initEdg(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void MNFace::Builder::adoptEdg(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> MNFace::Builder::disownEdg() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool MNFace::Reader::hasDiag() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool MNFace::Builder::hasDiag() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader MNFace::Reader::getDiag() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder MNFace::Builder::getDiag() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void MNFace::Builder::setDiag( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void MNFace::Builder::setDiag(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder MNFace::Builder::initDiag(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void MNFace::Builder::adoptDiag(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> MNFace::Builder::disownDiag() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline  ::uint8_t MNFace::Reader::getSmGroup() const {
  return _reader.getDataField< ::uint8_t>(
      5 * ::capnp::ELEMENTS);
}

inline  ::uint8_t MNFace::Builder::getSmGroup() {
  return _builder.getDataField< ::uint8_t>(
      5 * ::capnp::ELEMENTS);
}
inline void MNFace::Builder::setSmGroup( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      5 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t MNFace::Reader::getMaterial() const {
  return _reader.getDataField< ::uint8_t>(
      6 * ::capnp::ELEMENTS);
}

inline  ::uint8_t MNFace::Builder::getMaterial() {
  return _builder.getDataField< ::uint8_t>(
      6 * ::capnp::ELEMENTS);
}
inline void MNFace::Builder::setMaterial( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      6 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t MNFace::Reader::getTrack() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t MNFace::Builder::getTrack() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void MNFace::Builder::setTrack( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool MNFace::Reader::hasVisedg() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool MNFace::Builder::hasVisedg() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader MNFace::Reader::getVisedg() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder MNFace::Builder::getVisedg() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void MNFace::Builder::setVisedg( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void MNFace::Builder::setVisedg(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder MNFace::Builder::initVisedg(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void MNFace::Builder::adoptVisedg(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> MNFace::Builder::disownVisedg() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool MNFace::Reader::hasEdgsel() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool MNFace::Builder::hasEdgsel() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader MNFace::Reader::getEdgsel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder MNFace::Builder::getEdgsel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void MNFace::Builder::setEdgsel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void MNFace::Builder::setEdgsel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder MNFace::Builder::initEdgsel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void MNFace::Builder::adoptEdgsel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> MNFace::Builder::disownEdgsel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool MNFace::Reader::hasBndedg() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool MNFace::Builder::hasBndedg() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader MNFace::Reader::getBndedg() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder MNFace::Builder::getBndedg() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void MNFace::Builder::setBndedg( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void MNFace::Builder::setBndedg(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder MNFace::Builder::initBndedg(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void MNFace::Builder::adoptBndedg(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> MNFace::Builder::disownBndedg() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline  ::int8_t MNFaceStripped::Reader::getDeg() const {
  return _reader.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int8_t MNFaceStripped::Builder::getDeg() {
  return _builder.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}
inline void MNFaceStripped::Builder::setDeg( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool MNFaceStripped::Reader::hasVtx() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool MNFaceStripped::Builder::hasVtx() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader MNFaceStripped::Reader::getVtx() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder MNFaceStripped::Builder::getVtx() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void MNFaceStripped::Builder::setVtx( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void MNFaceStripped::Builder::setVtx(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder MNFaceStripped::Builder::initVtx(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void MNFaceStripped::Builder::adoptVtx(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> MNFaceStripped::Builder::disownVtx() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint8_t MNFaceStripped::Reader::getSmGroup() const {
  return _reader.getDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint8_t MNFaceStripped::Builder::getSmGroup() {
  return _builder.getDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS);
}
inline void MNFaceStripped::Builder::setSmGroup( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t MNFaceStripped::Reader::getMaterial() const {
  return _reader.getDataField< ::uint8_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint8_t MNFaceStripped::Builder::getMaterial() {
  return _builder.getDataField< ::uint8_t>(
      2 * ::capnp::ELEMENTS);
}
inline void MNFaceStripped::Builder::setMaterial( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TriFace::Reader::getV0() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t TriFace::Builder::getV0() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void TriFace::Builder::setV0( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TriFace::Reader::getV1() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t TriFace::Builder::getV1() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void TriFace::Builder::setV1( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t TriFace::Reader::getV2() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t TriFace::Builder::getV2() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void TriFace::Builder::setV2( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TriFace::Reader::getSmGroup() const {
  return _reader.getDataField< ::uint8_t>(
      12 * ::capnp::ELEMENTS);
}

inline  ::uint8_t TriFace::Builder::getSmGroup() {
  return _builder.getDataField< ::uint8_t>(
      12 * ::capnp::ELEMENTS);
}
inline void TriFace::Builder::setSmGroup( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      12 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t TriFace::Reader::getMaterial() const {
  return _reader.getDataField< ::uint8_t>(
      13 * ::capnp::ELEMENTS);
}

inline  ::uint8_t TriFace::Builder::getMaterial() {
  return _builder.getDataField< ::uint8_t>(
      13 * ::capnp::ELEMENTS);
}
inline void TriFace::Builder::setMaterial( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      13 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t QuadFace::Reader::getV0() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t QuadFace::Builder::getV0() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void QuadFace::Builder::setV0( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t QuadFace::Reader::getV1() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t QuadFace::Builder::getV1() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void QuadFace::Builder::setV1( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t QuadFace::Reader::getV2() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t QuadFace::Builder::getV2() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void QuadFace::Builder::setV2( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t QuadFace::Reader::getV3() const {
  return _reader.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}

inline  ::int32_t QuadFace::Builder::getV3() {
  return _builder.getDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS);
}
inline void QuadFace::Builder::setV3( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      3 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QuadFace::Reader::getSmGroup() const {
  return _reader.getDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS);
}

inline  ::uint8_t QuadFace::Builder::getSmGroup() {
  return _builder.getDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS);
}
inline void QuadFace::Builder::setSmGroup( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      16 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t QuadFace::Reader::getMaterial() const {
  return _reader.getDataField< ::uint8_t>(
      17 * ::capnp::ELEMENTS);
}

inline  ::uint8_t QuadFace::Builder::getMaterial() {
  return _builder.getDataField< ::uint8_t>(
      17 * ::capnp::ELEMENTS);
}
inline void QuadFace::Builder::setMaterial( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      17 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t PerData::Reader::getDnum() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t PerData::Builder::getDnum() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void PerData::Builder::setDnum( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t PerData::Reader::getType() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t PerData::Builder::getType() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void PerData::Builder::setType( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t PerData::Reader::getAlloc() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t PerData::Builder::getAlloc() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void PerData::Builder::setAlloc( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool PerData::Reader::hasData() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool PerData::Builder::hasData() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader PerData::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder PerData::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void PerData::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder PerData::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void PerData::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> PerData::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool MNMapFace::Reader::hasTv() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool MNMapFace::Builder::hasTv() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader MNMapFace::Reader::getTv() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder MNMapFace::Builder::getTv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void MNMapFace::Builder::setTv( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void MNMapFace::Builder::setTv(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder MNMapFace::Builder::initTv(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void MNMapFace::Builder::adoptTv(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> MNMapFace::Builder::disownTv() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool MNMap::Reader::hasF() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool MNMap::Builder::hasF() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader MNMap::Reader::getF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder MNMap::Builder::getF() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void MNMap::Builder::setF( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void MNMap::Builder::setF(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder MNMap::Builder::initF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void MNMap::Builder::adoptF(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> MNMap::Builder::disownF() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool MNMap::Reader::hasV() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool MNMap::Builder::hasV() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::Point3>::Reader MNMap::Reader::getV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::Point3>::Builder MNMap::Builder::getV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void MNMap::Builder::setV( ::capnp::List< ::format3d::Point3>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::Point3>::Builder MNMap::Builder::initV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void MNMap::Builder::adoptV(
    ::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> MNMap::Builder::disownV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int8_t MNMap::Reader::getChannel() const {
  return _reader.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int8_t MNMap::Builder::getChannel() {
  return _builder.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}
inline void MNMap::Builder::setChannel( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool MNNormalSpec::Reader::hasMpNormal() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool MNNormalSpec::Builder::hasMpNormal() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::Point3>::Reader MNNormalSpec::Reader::getMpNormal() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::Point3>::Builder MNNormalSpec::Builder::getMpNormal() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void MNNormalSpec::Builder::setMpNormal( ::capnp::List< ::format3d::Point3>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::Point3>::Builder MNNormalSpec::Builder::initMpNormal(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void MNNormalSpec::Builder::adoptMpNormal(
    ::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> MNNormalSpec::Builder::disownMpNormal() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool MNNormalSpec::Reader::hasMpFace() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool MNNormalSpec::Builder::hasMpFace() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List< ::int32_t>>::Reader MNNormalSpec::Reader::getMpFace() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List< ::int32_t>>::Builder MNNormalSpec::Builder::getMpFace() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void MNNormalSpec::Builder::setMpFace( ::capnp::List< ::capnp::List< ::int32_t>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void MNNormalSpec::Builder::setMpFace(::kj::ArrayPtr<const  ::capnp::List< ::int32_t>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List< ::int32_t>>::Builder MNNormalSpec::Builder::initMpFace(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void MNNormalSpec::Builder::adoptMpFace(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::int32_t>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::int32_t>>> MNNormalSpec::Builder::disownMpFace() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool MNMesh::Reader::hasV() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool MNMesh::Builder::hasV() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::MNVert>::Reader MNMesh::Reader::getV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNVert>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::MNVert>::Builder MNMesh::Builder::getV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNVert>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void MNMesh::Builder::setV( ::capnp::List< ::format3d::MNVert>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNVert>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::MNVert>::Builder MNMesh::Builder::initV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNVert>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void MNMesh::Builder::adoptV(
    ::capnp::Orphan< ::capnp::List< ::format3d::MNVert>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNVert>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::MNVert>> MNMesh::Builder::disownV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNVert>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool MNMesh::Reader::hasE() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool MNMesh::Builder::hasE() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::MNEdge>::Reader MNMesh::Reader::getE() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNEdge>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::MNEdge>::Builder MNMesh::Builder::getE() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNEdge>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void MNMesh::Builder::setE( ::capnp::List< ::format3d::MNEdge>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNEdge>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::MNEdge>::Builder MNMesh::Builder::initE(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNEdge>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void MNMesh::Builder::adoptE(
    ::capnp::Orphan< ::capnp::List< ::format3d::MNEdge>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNEdge>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::MNEdge>> MNMesh::Builder::disownE() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNEdge>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool MNMesh::Reader::hasF() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool MNMesh::Builder::hasF() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::MNFace>::Reader MNMesh::Reader::getF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFace>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::MNFace>::Builder MNMesh::Builder::getF() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFace>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void MNMesh::Builder::setF( ::capnp::List< ::format3d::MNFace>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFace>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::MNFace>::Builder MNMesh::Builder::initF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFace>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void MNMesh::Builder::adoptF(
    ::capnp::Orphan< ::capnp::List< ::format3d::MNFace>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFace>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::MNFace>> MNMesh::Builder::disownF() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFace>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool MNMesh::Reader::hasM() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool MNMesh::Builder::hasM() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::MNMap>::Reader MNMesh::Reader::getM() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::MNMap>::Builder MNMesh::Builder::getM() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void MNMesh::Builder::setM( ::capnp::List< ::format3d::MNMap>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::MNMap>::Builder MNMesh::Builder::initM(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void MNMesh::Builder::adoptM(
    ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>> MNMesh::Builder::disownM() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool MNMesh::Reader::hasVd() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool MNMesh::Builder::hasVd() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::PerData>::Reader MNMesh::Reader::getVd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PerData>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::PerData>::Builder MNMesh::Builder::getVd() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PerData>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void MNMesh::Builder::setVd( ::capnp::List< ::format3d::PerData>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PerData>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::PerData>::Builder MNMesh::Builder::initVd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PerData>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void MNMesh::Builder::adoptVd(
    ::capnp::Orphan< ::capnp::List< ::format3d::PerData>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PerData>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::PerData>> MNMesh::Builder::disownVd() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PerData>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool MNMesh::Reader::hasVdSupport() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool MNMesh::Builder::hasVdSupport() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader MNMesh::Reader::getVdSupport() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder MNMesh::Builder::getVdSupport() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void MNMesh::Builder::setVdSupport( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void MNMesh::Builder::setVdSupport(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder MNMesh::Builder::initVdSupport(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void MNMesh::Builder::adoptVdSupport(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> MNMesh::Builder::disownVdSupport() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool MNMesh::Reader::hasEd() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool MNMesh::Builder::hasEd() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::PerData>::Reader MNMesh::Reader::getEd() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PerData>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::PerData>::Builder MNMesh::Builder::getEd() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PerData>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void MNMesh::Builder::setEd( ::capnp::List< ::format3d::PerData>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PerData>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::PerData>::Builder MNMesh::Builder::initEd(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PerData>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void MNMesh::Builder::adoptEd(
    ::capnp::Orphan< ::capnp::List< ::format3d::PerData>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PerData>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::PerData>> MNMesh::Builder::disownEd() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PerData>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool MNMesh::Reader::hasEdSupport() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool MNMesh::Builder::hasEdSupport() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader MNMesh::Reader::getEdSupport() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder MNMesh::Builder::getEdSupport() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void MNMesh::Builder::setEdSupport( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline void MNMesh::Builder::setEdSupport(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder MNMesh::Builder::initEdSupport(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void MNMesh::Builder::adoptEdSupport(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> MNMesh::Builder::disownEdSupport() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline  ::int32_t MNMesh::Reader::getSelLevel() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t MNMesh::Builder::getSelLevel() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void MNMesh::Builder::setSelLevel( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t MNMesh::Reader::getDispFlags() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t MNMesh::Builder::getDispFlags() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void MNMesh::Builder::setDispFlags( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool MNMesh::Reader::hasVedg() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool MNMesh::Builder::hasVedg() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader MNMesh::Reader::getVedg() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder MNMesh::Builder::getVedg() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void MNMesh::Builder::setVedg( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline void MNMesh::Builder::setVedg(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder MNMesh::Builder::initVedg(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void MNMesh::Builder::adoptVedg(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> MNMesh::Builder::disownVedg() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool MNMesh::Reader::hasVfac() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool MNMesh::Builder::hasVfac() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader MNMesh::Reader::getVfac() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder MNMesh::Builder::getVfac() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void MNMesh::Builder::setVfac( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline void MNMesh::Builder::setVfac(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder MNMesh::Builder::initVfac(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void MNMesh::Builder::adoptVfac(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> MNMesh::Builder::disownVfac() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool MNMesh::Reader::hasBdgBox() const {
  return !_reader.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline bool MNMesh::Builder::hasBdgBox() {
  return !_builder.getPointerField(10 * ::capnp::POINTERS).isNull();
}
inline  ::format3d::Box3::Reader MNMesh::Reader::getBdgBox() const {
  return ::capnp::_::PointerHelpers< ::format3d::Box3>::get(
      _reader.getPointerField(10 * ::capnp::POINTERS));
}
inline  ::format3d::Box3::Builder MNMesh::Builder::getBdgBox() {
  return ::capnp::_::PointerHelpers< ::format3d::Box3>::get(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::format3d::Box3::Pipeline MNMesh::Pipeline::getBdgBox() {
  return  ::format3d::Box3::Pipeline(_typeless.getPointerField(10));
}
#endif  // !CAPNP_LITE
inline void MNMesh::Builder::setBdgBox( ::format3d::Box3::Reader value) {
  ::capnp::_::PointerHelpers< ::format3d::Box3>::set(
      _builder.getPointerField(10 * ::capnp::POINTERS), value);
}
inline  ::format3d::Box3::Builder MNMesh::Builder::initBdgBox() {
  return ::capnp::_::PointerHelpers< ::format3d::Box3>::init(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}
inline void MNMesh::Builder::adoptBdgBox(
    ::capnp::Orphan< ::format3d::Box3>&& value) {
  ::capnp::_::PointerHelpers< ::format3d::Box3>::adopt(
      _builder.getPointerField(10 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::format3d::Box3> MNMesh::Builder::disownBdgBox() {
  return ::capnp::_::PointerHelpers< ::format3d::Box3>::disown(
      _builder.getPointerField(10 * ::capnp::POINTERS));
}

inline bool MNMesh::Reader::hasHmap() const {
  return !_reader.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline bool MNMesh::Builder::hasHmap() {
  return !_builder.getPointerField(11 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::MNMap>::Reader MNMesh::Reader::getHmap() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::get(
      _reader.getPointerField(11 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::MNMap>::Builder MNMesh::Builder::getHmap() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::get(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}
inline void MNMesh::Builder::setHmap( ::capnp::List< ::format3d::MNMap>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::set(
      _builder.getPointerField(11 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::MNMap>::Builder MNMesh::Builder::initHmap(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::init(
      _builder.getPointerField(11 * ::capnp::POINTERS), size);
}
inline void MNMesh::Builder::adoptHmap(
    ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::adopt(
      _builder.getPointerField(11 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>> MNMesh::Builder::disownHmap() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::disown(
      _builder.getPointerField(11 * ::capnp::POINTERS));
}

inline bool MNMesh::Reader::hasNormals() const {
  return !_reader.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline bool MNMesh::Builder::hasNormals() {
  return !_builder.getPointerField(12 * ::capnp::POINTERS).isNull();
}
inline  ::format3d::MNNormalSpec::Reader MNMesh::Reader::getNormals() const {
  return ::capnp::_::PointerHelpers< ::format3d::MNNormalSpec>::get(
      _reader.getPointerField(12 * ::capnp::POINTERS));
}
inline  ::format3d::MNNormalSpec::Builder MNMesh::Builder::getNormals() {
  return ::capnp::_::PointerHelpers< ::format3d::MNNormalSpec>::get(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::format3d::MNNormalSpec::Pipeline MNMesh::Pipeline::getNormals() {
  return  ::format3d::MNNormalSpec::Pipeline(_typeless.getPointerField(12));
}
#endif  // !CAPNP_LITE
inline void MNMesh::Builder::setNormals( ::format3d::MNNormalSpec::Reader value) {
  ::capnp::_::PointerHelpers< ::format3d::MNNormalSpec>::set(
      _builder.getPointerField(12 * ::capnp::POINTERS), value);
}
inline  ::format3d::MNNormalSpec::Builder MNMesh::Builder::initNormals() {
  return ::capnp::_::PointerHelpers< ::format3d::MNNormalSpec>::init(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}
inline void MNMesh::Builder::adoptNormals(
    ::capnp::Orphan< ::format3d::MNNormalSpec>&& value) {
  ::capnp::_::PointerHelpers< ::format3d::MNNormalSpec>::adopt(
      _builder.getPointerField(12 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::format3d::MNNormalSpec> MNMesh::Builder::disownNormals() {
  return ::capnp::_::PointerHelpers< ::format3d::MNNormalSpec>::disown(
      _builder.getPointerField(12 * ::capnp::POINTERS));
}

inline bool MNMesh::Reader::hasVSel() const {
  return !_reader.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline bool MNMesh::Builder::hasVSel() {
  return !_builder.getPointerField(13 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader MNMesh::Reader::getVSel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(13 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder MNMesh::Builder::getVSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}
inline void MNMesh::Builder::setVSel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline void MNMesh::Builder::setVSel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(13 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder MNMesh::Builder::initVSel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(13 * ::capnp::POINTERS), size);
}
inline void MNMesh::Builder::adoptVSel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(13 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> MNMesh::Builder::disownVSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(13 * ::capnp::POINTERS));
}

inline bool MNMesh::Reader::hasESel() const {
  return !_reader.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline bool MNMesh::Builder::hasESel() {
  return !_builder.getPointerField(14 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader MNMesh::Reader::getESel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(14 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder MNMesh::Builder::getESel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}
inline void MNMesh::Builder::setESel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(14 * ::capnp::POINTERS), value);
}
inline void MNMesh::Builder::setESel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(14 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder MNMesh::Builder::initESel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(14 * ::capnp::POINTERS), size);
}
inline void MNMesh::Builder::adoptESel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(14 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> MNMesh::Builder::disownESel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(14 * ::capnp::POINTERS));
}

inline bool MNMesh::Reader::hasFSel() const {
  return !_reader.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline bool MNMesh::Builder::hasFSel() {
  return !_builder.getPointerField(15 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader MNMesh::Reader::getFSel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(15 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder MNMesh::Builder::getFSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}
inline void MNMesh::Builder::setFSel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(15 * ::capnp::POINTERS), value);
}
inline void MNMesh::Builder::setFSel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(15 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder MNMesh::Builder::initFSel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(15 * ::capnp::POINTERS), size);
}
inline void MNMesh::Builder::adoptFSel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(15 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> MNMesh::Builder::disownFSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(15 * ::capnp::POINTERS));
}

inline bool MNMeshStripped::Reader::hasV() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool MNMeshStripped::Builder::hasV() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::Point3>::Reader MNMeshStripped::Reader::getV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::Point3>::Builder MNMeshStripped::Builder::getV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void MNMeshStripped::Builder::setV( ::capnp::List< ::format3d::Point3>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::Point3>::Builder MNMeshStripped::Builder::initV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void MNMeshStripped::Builder::adoptV(
    ::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> MNMeshStripped::Builder::disownV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool MNMeshStripped::Reader::hasF() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool MNMeshStripped::Builder::hasF() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::MNFaceStripped>::Reader MNMeshStripped::Reader::getF() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFaceStripped>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::MNFaceStripped>::Builder MNMeshStripped::Builder::getF() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFaceStripped>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void MNMeshStripped::Builder::setF( ::capnp::List< ::format3d::MNFaceStripped>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFaceStripped>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::MNFaceStripped>::Builder MNMeshStripped::Builder::initF(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFaceStripped>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void MNMeshStripped::Builder::adoptF(
    ::capnp::Orphan< ::capnp::List< ::format3d::MNFaceStripped>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFaceStripped>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::MNFaceStripped>> MNMeshStripped::Builder::disownF() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNFaceStripped>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline  ::int32_t MNMeshStripped::Reader::getSelLevel() const {
  return _reader.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int32_t MNMeshStripped::Builder::getSelLevel() {
  return _builder.getDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS);
}
inline void MNMeshStripped::Builder::setSelLevel( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t MNMeshStripped::Reader::getDispFlags() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t MNMeshStripped::Builder::getDispFlags() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void MNMeshStripped::Builder::setDispFlags( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline bool MNMeshStripped::Reader::hasBdgBox() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool MNMeshStripped::Builder::hasBdgBox() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::format3d::Box3::Reader MNMeshStripped::Reader::getBdgBox() const {
  return ::capnp::_::PointerHelpers< ::format3d::Box3>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::format3d::Box3::Builder MNMeshStripped::Builder::getBdgBox() {
  return ::capnp::_::PointerHelpers< ::format3d::Box3>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::format3d::Box3::Pipeline MNMeshStripped::Pipeline::getBdgBox() {
  return  ::format3d::Box3::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void MNMeshStripped::Builder::setBdgBox( ::format3d::Box3::Reader value) {
  ::capnp::_::PointerHelpers< ::format3d::Box3>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::format3d::Box3::Builder MNMeshStripped::Builder::initBdgBox() {
  return ::capnp::_::PointerHelpers< ::format3d::Box3>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void MNMeshStripped::Builder::adoptBdgBox(
    ::capnp::Orphan< ::format3d::Box3>&& value) {
  ::capnp::_::PointerHelpers< ::format3d::Box3>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::format3d::Box3> MNMeshStripped::Builder::disownBdgBox() {
  return ::capnp::_::PointerHelpers< ::format3d::Box3>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool MNMeshStripped::Reader::hasM() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool MNMeshStripped::Builder::hasM() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::MNMap>::Reader MNMeshStripped::Reader::getM() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::MNMap>::Builder MNMeshStripped::Builder::getM() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void MNMeshStripped::Builder::setM( ::capnp::List< ::format3d::MNMap>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::MNMap>::Builder MNMeshStripped::Builder::initM(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void MNMeshStripped::Builder::adoptM(
    ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>> MNMeshStripped::Builder::disownM() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool MNMeshStripped::Reader::hasHmap() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool MNMeshStripped::Builder::hasHmap() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::MNMap>::Reader MNMeshStripped::Reader::getHmap() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::MNMap>::Builder MNMeshStripped::Builder::getHmap() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void MNMeshStripped::Builder::setHmap( ::capnp::List< ::format3d::MNMap>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::MNMap>::Builder MNMeshStripped::Builder::initHmap(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void MNMeshStripped::Builder::adoptHmap(
    ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>> MNMeshStripped::Builder::disownHmap() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool MNMeshStripped::Reader::hasVSel() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool MNMeshStripped::Builder::hasVSel() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader MNMeshStripped::Reader::getVSel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder MNMeshStripped::Builder::getVSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void MNMeshStripped::Builder::setVSel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void MNMeshStripped::Builder::setVSel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder MNMeshStripped::Builder::initVSel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void MNMeshStripped::Builder::adoptVSel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> MNMeshStripped::Builder::disownVSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool MNMeshStripped::Reader::hasESel() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool MNMeshStripped::Builder::hasESel() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader MNMeshStripped::Reader::getESel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder MNMeshStripped::Builder::getESel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void MNMeshStripped::Builder::setESel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void MNMeshStripped::Builder::setESel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder MNMeshStripped::Builder::initESel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void MNMeshStripped::Builder::adoptESel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> MNMeshStripped::Builder::disownESel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool MNMeshStripped::Reader::hasFSel() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool MNMeshStripped::Builder::hasFSel() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader MNMeshStripped::Reader::getFSel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder MNMeshStripped::Builder::getFSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void MNMeshStripped::Builder::setFSel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline void MNMeshStripped::Builder::setFSel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder MNMeshStripped::Builder::initFSel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void MNMeshStripped::Builder::adoptFSel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> MNMeshStripped::Builder::disownFSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool MNMeshStripped::Reader::hasMpNormal() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool MNMeshStripped::Builder::hasMpNormal() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::Point3>::Reader MNMeshStripped::Reader::getMpNormal() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::Point3>::Builder MNMeshStripped::Builder::getMpNormal() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void MNMeshStripped::Builder::setMpNormal( ::capnp::List< ::format3d::Point3>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::Point3>::Builder MNMeshStripped::Builder::initMpNormal(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void MNMeshStripped::Builder::adoptMpNormal(
    ::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> MNMeshStripped::Builder::disownMpNormal() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool MNMeshStripped::Reader::hasMpFace() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool MNMeshStripped::Builder::hasMpFace() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List< ::int32_t>>::Reader MNMeshStripped::Reader::getMpFace() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List< ::int32_t>>::Builder MNMeshStripped::Builder::getMpFace() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void MNMeshStripped::Builder::setMpFace( ::capnp::List< ::capnp::List< ::int32_t>>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline void MNMeshStripped::Builder::setMpFace(::kj::ArrayPtr<const  ::capnp::List< ::int32_t>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List< ::int32_t>>::Builder MNMeshStripped::Builder::initMpFace(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void MNMeshStripped::Builder::adoptMpFace(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::int32_t>>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::int32_t>>> MNMeshStripped::Builder::disownMpFace() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::int32_t>>>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline bool PolyObj::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool PolyObj::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PolyObj::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PolyObj::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void PolyObj::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PolyObj::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void PolyObj::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PolyObj::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int8_t PolyObj::Reader::getType() const {
  return _reader.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int8_t PolyObj::Builder::getType() {
  return _builder.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}
inline void PolyObj::Builder::setType( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool PolyObj::Reader::hasMmesh() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool PolyObj::Builder::hasMmesh() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::format3d::MNMesh::Reader PolyObj::Reader::getMmesh() const {
  return ::capnp::_::PointerHelpers< ::format3d::MNMesh>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::format3d::MNMesh::Builder PolyObj::Builder::getMmesh() {
  return ::capnp::_::PointerHelpers< ::format3d::MNMesh>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::format3d::MNMesh::Pipeline PolyObj::Pipeline::getMmesh() {
  return  ::format3d::MNMesh::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void PolyObj::Builder::setMmesh( ::format3d::MNMesh::Reader value) {
  ::capnp::_::PointerHelpers< ::format3d::MNMesh>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::format3d::MNMesh::Builder PolyObj::Builder::initMmesh() {
  return ::capnp::_::PointerHelpers< ::format3d::MNMesh>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void PolyObj::Builder::adoptMmesh(
    ::capnp::Orphan< ::format3d::MNMesh>&& value) {
  ::capnp::_::PointerHelpers< ::format3d::MNMesh>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::format3d::MNMesh> PolyObj::Builder::disownMmesh() {
  return ::capnp::_::PointerHelpers< ::format3d::MNMesh>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool PolyObjStripped::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool PolyObjStripped::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PolyObjStripped::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PolyObjStripped::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void PolyObjStripped::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PolyObjStripped::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void PolyObjStripped::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PolyObjStripped::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int8_t PolyObjStripped::Reader::getType() const {
  return _reader.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int8_t PolyObjStripped::Builder::getType() {
  return _builder.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}
inline void PolyObjStripped::Builder::setType( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool PolyObjStripped::Reader::hasMmesh() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool PolyObjStripped::Builder::hasMmesh() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::format3d::MNMeshStripped::Reader PolyObjStripped::Reader::getMmesh() const {
  return ::capnp::_::PointerHelpers< ::format3d::MNMeshStripped>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::format3d::MNMeshStripped::Builder PolyObjStripped::Builder::getMmesh() {
  return ::capnp::_::PointerHelpers< ::format3d::MNMeshStripped>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::format3d::MNMeshStripped::Pipeline PolyObjStripped::Pipeline::getMmesh() {
  return  ::format3d::MNMeshStripped::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void PolyObjStripped::Builder::setMmesh( ::format3d::MNMeshStripped::Reader value) {
  ::capnp::_::PointerHelpers< ::format3d::MNMeshStripped>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::format3d::MNMeshStripped::Builder PolyObjStripped::Builder::initMmesh() {
  return ::capnp::_::PointerHelpers< ::format3d::MNMeshStripped>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void PolyObjStripped::Builder::adoptMmesh(
    ::capnp::Orphan< ::format3d::MNMeshStripped>&& value) {
  ::capnp::_::PointerHelpers< ::format3d::MNMeshStripped>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::format3d::MNMeshStripped> PolyObjStripped::Builder::disownMmesh() {
  return ::capnp::_::PointerHelpers< ::format3d::MNMeshStripped>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool ListObjects::Reader::hasPolyObjs() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool ListObjects::Builder::hasPolyObjs() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::PolyObjStripped>::Reader ListObjects::Reader::getPolyObjs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PolyObjStripped>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::PolyObjStripped>::Builder ListObjects::Builder::getPolyObjs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PolyObjStripped>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void ListObjects::Builder::setPolyObjs( ::capnp::List< ::format3d::PolyObjStripped>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PolyObjStripped>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::PolyObjStripped>::Builder ListObjects::Builder::initPolyObjs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PolyObjStripped>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void ListObjects::Builder::adoptPolyObjs(
    ::capnp::Orphan< ::capnp::List< ::format3d::PolyObjStripped>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PolyObjStripped>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::PolyObjStripped>> ListObjects::Builder::disownPolyObjs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PolyObjStripped>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool ListObjects::Reader::hasTriObjs() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool ListObjects::Builder::hasTriObjs() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::PolyObj>::Reader ListObjects::Reader::getTriObjs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PolyObj>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::PolyObj>::Builder ListObjects::Builder::getTriObjs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PolyObj>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void ListObjects::Builder::setTriObjs( ::capnp::List< ::format3d::PolyObj>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PolyObj>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::PolyObj>::Builder ListObjects::Builder::initTriObjs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PolyObj>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void ListObjects::Builder::adoptTriObjs(
    ::capnp::Orphan< ::capnp::List< ::format3d::PolyObj>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PolyObj>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::PolyObj>> ListObjects::Builder::disownTriObjs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::PolyObj>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasV() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasV() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::Point3>::Reader Mesh::Reader::getV() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::Point3>::Builder Mesh::Builder::getV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setV( ::capnp::List< ::format3d::Point3>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::Point3>::Builder Mesh::Builder::initV(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptV(
    ::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> Mesh::Builder::disownV() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline Mesh::Faces::Reader Mesh::Reader::getFaces() const {
  return Mesh::Faces::Reader(_reader);
}
inline Mesh::Faces::Builder Mesh::Builder::getFaces() {
  return Mesh::Faces::Builder(_builder);
}
#if !CAPNP_LITE
inline Mesh::Faces::Pipeline Mesh::Pipeline::getFaces() {
  return Mesh::Faces::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline Mesh::Faces::Builder Mesh::Builder::initFaces() {
  _builder.setDataField< ::uint16_t>(0 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  return Mesh::Faces::Builder(_builder);
}
inline  ::int32_t Mesh::Reader::getSelLevel() const {
  return _reader.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::int32_t Mesh::Builder::getSelLevel() {
  return _builder.getDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS);
}
inline void Mesh::Builder::setSelLevel( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline  ::int32_t Mesh::Reader::getDispFlags() const {
  return _reader.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::int32_t Mesh::Builder::getDispFlags() {
  return _builder.getDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS);
}
inline void Mesh::Builder::setDispFlags( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool Mesh::Reader::hasBdgBox() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasBdgBox() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::format3d::Box3::Reader Mesh::Reader::getBdgBox() const {
  return ::capnp::_::PointerHelpers< ::format3d::Box3>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::format3d::Box3::Builder Mesh::Builder::getBdgBox() {
  return ::capnp::_::PointerHelpers< ::format3d::Box3>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::format3d::Box3::Pipeline Mesh::Pipeline::getBdgBox() {
  return  ::format3d::Box3::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Mesh::Builder::setBdgBox( ::format3d::Box3::Reader value) {
  ::capnp::_::PointerHelpers< ::format3d::Box3>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::format3d::Box3::Builder Mesh::Builder::initBdgBox() {
  return ::capnp::_::PointerHelpers< ::format3d::Box3>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Mesh::Builder::adoptBdgBox(
    ::capnp::Orphan< ::format3d::Box3>&& value) {
  ::capnp::_::PointerHelpers< ::format3d::Box3>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::format3d::Box3> Mesh::Builder::disownBdgBox() {
  return ::capnp::_::PointerHelpers< ::format3d::Box3>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasM() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasM() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::MNMap>::Reader Mesh::Reader::getM() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::MNMap>::Builder Mesh::Builder::getM() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setM( ::capnp::List< ::format3d::MNMap>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::MNMap>::Builder Mesh::Builder::initM(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptM(
    ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>> Mesh::Builder::disownM() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasVSel() const {
  return !_reader.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasVSel() {
  return !_builder.getPointerField(4 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader Mesh::Reader::getVSel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(4 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder Mesh::Builder::getVSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setVSel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline void Mesh::Builder::setVSel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(4 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder Mesh::Builder::initVSel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(4 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptVSel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(4 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> Mesh::Builder::disownVSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(4 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasESel() const {
  return !_reader.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasESel() {
  return !_builder.getPointerField(5 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader Mesh::Reader::getESel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(5 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder Mesh::Builder::getESel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setESel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline void Mesh::Builder::setESel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(5 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder Mesh::Builder::initESel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(5 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptESel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(5 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> Mesh::Builder::disownESel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(5 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasFSel() const {
  return !_reader.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasFSel() {
  return !_builder.getPointerField(6 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader Mesh::Reader::getFSel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(6 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder Mesh::Builder::getFSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setFSel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline void Mesh::Builder::setFSel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(6 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder Mesh::Builder::initFSel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(6 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptFSel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(6 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> Mesh::Builder::disownFSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(6 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasEVis() const {
  return !_reader.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasEVis() {
  return !_builder.getPointerField(7 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader Mesh::Reader::getEVis() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(7 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder Mesh::Builder::getEVis() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setEVis( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline void Mesh::Builder::setEVis(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(7 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder Mesh::Builder::initEVis(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(7 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptEVis(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(7 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> Mesh::Builder::disownEVis() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(7 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasMpNormal() const {
  return !_reader.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasMpNormal() {
  return !_builder.getPointerField(8 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::Point3>::Reader Mesh::Reader::getMpNormal() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _reader.getPointerField(8 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::Point3>::Builder Mesh::Builder::getMpNormal() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setMpNormal( ::capnp::List< ::format3d::Point3>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::set(
      _builder.getPointerField(8 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::Point3>::Builder Mesh::Builder::initMpNormal(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::init(
      _builder.getPointerField(8 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptMpNormal(
    ::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::adopt(
      _builder.getPointerField(8 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> Mesh::Builder::disownMpNormal() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::disown(
      _builder.getPointerField(8 * ::capnp::POINTERS));
}

inline bool Mesh::Reader::hasMpFace() const {
  return !_reader.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Builder::hasMpFace() {
  return !_builder.getPointerField(9 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader Mesh::Reader::getMpFace() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(9 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder Mesh::Builder::getMpFace() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}
inline void Mesh::Builder::setMpFace( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline void Mesh::Builder::setMpFace(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(9 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder Mesh::Builder::initMpFace(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(9 * ::capnp::POINTERS), size);
}
inline void Mesh::Builder::adoptMpFace(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(9 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> Mesh::Builder::disownMpFace() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(9 * ::capnp::POINTERS));
}

inline  ::format3d::Mesh::Faces::Which Mesh::Faces::Reader::which() const {
  return _reader.getDataField<Which>(0 * ::capnp::ELEMENTS);
}
inline  ::format3d::Mesh::Faces::Which Mesh::Faces::Builder::which() {
  return _builder.getDataField<Which>(0 * ::capnp::ELEMENTS);
}

inline bool Mesh::Faces::Reader::isF3() const {
  return which() == Mesh::Faces::F3;
}
inline bool Mesh::Faces::Builder::isF3() {
  return which() == Mesh::Faces::F3;
}
inline bool Mesh::Faces::Reader::hasF3() const {
  if (which() != Mesh::Faces::F3) return false;
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Faces::Builder::hasF3() {
  if (which() != Mesh::Faces::F3) return false;
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::TriFace>::Reader Mesh::Faces::Reader::getF3() const {
  KJ_IREQUIRE((which() == Mesh::Faces::F3),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::TriFace>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::TriFace>::Builder Mesh::Faces::Builder::getF3() {
  KJ_IREQUIRE((which() == Mesh::Faces::F3),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::TriFace>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Mesh::Faces::Builder::setF3( ::capnp::List< ::format3d::TriFace>::Reader value) {
  _builder.setDataField<Mesh::Faces::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Faces::F3);
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::TriFace>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::TriFace>::Builder Mesh::Faces::Builder::initF3(unsigned int size) {
  _builder.setDataField<Mesh::Faces::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Faces::F3);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::TriFace>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Mesh::Faces::Builder::adoptF3(
    ::capnp::Orphan< ::capnp::List< ::format3d::TriFace>>&& value) {
  _builder.setDataField<Mesh::Faces::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Faces::F3);
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::TriFace>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::TriFace>> Mesh::Faces::Builder::disownF3() {
  KJ_IREQUIRE((which() == Mesh::Faces::F3),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::TriFace>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Mesh::Faces::Reader::isF4() const {
  return which() == Mesh::Faces::F4;
}
inline bool Mesh::Faces::Builder::isF4() {
  return which() == Mesh::Faces::F4;
}
inline bool Mesh::Faces::Reader::hasF4() const {
  if (which() != Mesh::Faces::F4) return false;
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Mesh::Faces::Builder::hasF4() {
  if (which() != Mesh::Faces::F4) return false;
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::QuadFace>::Reader Mesh::Faces::Reader::getF4() const {
  KJ_IREQUIRE((which() == Mesh::Faces::F4),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::QuadFace>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::QuadFace>::Builder Mesh::Faces::Builder::getF4() {
  KJ_IREQUIRE((which() == Mesh::Faces::F4),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::QuadFace>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Mesh::Faces::Builder::setF4( ::capnp::List< ::format3d::QuadFace>::Reader value) {
  _builder.setDataField<Mesh::Faces::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Faces::F4);
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::QuadFace>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::QuadFace>::Builder Mesh::Faces::Builder::initF4(unsigned int size) {
  _builder.setDataField<Mesh::Faces::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Faces::F4);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::QuadFace>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Mesh::Faces::Builder::adoptF4(
    ::capnp::Orphan< ::capnp::List< ::format3d::QuadFace>>&& value) {
  _builder.setDataField<Mesh::Faces::Which>(
      0 * ::capnp::ELEMENTS, Mesh::Faces::F4);
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::QuadFace>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::QuadFace>> Mesh::Faces::Builder::disownF4() {
  KJ_IREQUIRE((which() == Mesh::Faces::F4),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::QuadFace>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Object::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Object::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Object::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Object::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Object::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Object::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Object::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::int8_t Object::Reader::getType() const {
  return _reader.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::int8_t Object::Builder::getType() {
  return _builder.getDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS);
}
inline void Object::Builder::setType( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Object::Reader::hasMesh() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Object::Builder::hasMesh() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::format3d::Mesh::Reader Object::Reader::getMesh() const {
  return ::capnp::_::PointerHelpers< ::format3d::Mesh>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::format3d::Mesh::Builder Object::Builder::getMesh() {
  return ::capnp::_::PointerHelpers< ::format3d::Mesh>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::format3d::Mesh::Pipeline Object::Pipeline::getMesh() {
  return  ::format3d::Mesh::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Object::Builder::setMesh( ::format3d::Mesh::Reader value) {
  ::capnp::_::PointerHelpers< ::format3d::Mesh>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::format3d::Mesh::Builder Object::Builder::initMesh() {
  return ::capnp::_::PointerHelpers< ::format3d::Mesh>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Object::Builder::adoptMesh(
    ::capnp::Orphan< ::format3d::Mesh>&& value) {
  ::capnp::_::PointerHelpers< ::format3d::Mesh>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::format3d::Mesh> Object::Builder::disownMesh() {
  return ::capnp::_::PointerHelpers< ::format3d::Mesh>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Objects::Reader::hasObjs() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Objects::Builder::hasObjs() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::Object>::Reader Objects::Reader::getObjs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::Object>::Builder Objects::Builder::getObjs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Objects::Builder::setObjs( ::capnp::List< ::format3d::Object>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::Object>::Builder Objects::Builder::initObjs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Objects::Builder::adoptObjs(
    ::capnp::Orphan< ::capnp::List< ::format3d::Object>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::Object>> Objects::Builder::disownObjs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline Anything::Items::Reader Anything::Reader::getItems() const {
  return Anything::Items::Reader(_reader);
}
inline Anything::Items::Builder Anything::Builder::getItems() {
  return Anything::Items::Builder(_builder);
}
#if !CAPNP_LITE
inline Anything::Items::Pipeline Anything::Pipeline::getItems() {
  return Anything::Items::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline Anything::Items::Builder Anything::Builder::initItems() {
  _builder.setDataField<bool>(0 * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(1 * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  _builder.getPointerField(2 * ::capnp::POINTERS).clear();
  _builder.getPointerField(3 * ::capnp::POINTERS).clear();
  return Anything::Items::Builder(_builder);
}
inline  ::format3d::Anything::Items::Which Anything::Items::Reader::which() const {
  return _reader.getDataField<Which>(1 * ::capnp::ELEMENTS);
}
inline  ::format3d::Anything::Items::Which Anything::Items::Builder::which() {
  return _builder.getDataField<Which>(1 * ::capnp::ELEMENTS);
}

inline bool Anything::Items::Reader::isEmpty() const {
  return which() == Anything::Items::EMPTY;
}
inline bool Anything::Items::Builder::isEmpty() {
  return which() == Anything::Items::EMPTY;
}
inline bool Anything::Items::Reader::getEmpty() const {
  KJ_IREQUIRE((which() == Anything::Items::EMPTY),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}

inline bool Anything::Items::Builder::getEmpty() {
  KJ_IREQUIRE((which() == Anything::Items::EMPTY),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      0 * ::capnp::ELEMENTS);
}
inline void Anything::Items::Builder::setEmpty(bool value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::EMPTY);
  _builder.setDataField<bool>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool Anything::Items::Reader::isObj() const {
  return which() == Anything::Items::OBJ;
}
inline bool Anything::Items::Builder::isObj() {
  return which() == Anything::Items::OBJ;
}
inline bool Anything::Items::Reader::hasObj() const {
  if (which() != Anything::Items::OBJ) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Builder::hasObj() {
  if (which() != Anything::Items::OBJ) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::format3d::Object::Reader Anything::Items::Reader::getObj() const {
  KJ_IREQUIRE((which() == Anything::Items::OBJ),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::format3d::Object>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::format3d::Object::Builder Anything::Items::Builder::getObj() {
  KJ_IREQUIRE((which() == Anything::Items::OBJ),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::format3d::Object>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Anything::Items::Builder::setObj( ::format3d::Object::Reader value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::OBJ);
  ::capnp::_::PointerHelpers< ::format3d::Object>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::format3d::Object::Builder Anything::Items::Builder::initObj() {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::OBJ);
  return ::capnp::_::PointerHelpers< ::format3d::Object>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Anything::Items::Builder::adoptObj(
    ::capnp::Orphan< ::format3d::Object>&& value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::OBJ);
  ::capnp::_::PointerHelpers< ::format3d::Object>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::format3d::Object> Anything::Items::Builder::disownObj() {
  KJ_IREQUIRE((which() == Anything::Items::OBJ),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::format3d::Object>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Anything::Items::Reader::isObjs() const {
  return which() == Anything::Items::OBJS;
}
inline bool Anything::Items::Builder::isObjs() {
  return which() == Anything::Items::OBJS;
}
inline bool Anything::Items::Reader::hasObjs() const {
  if (which() != Anything::Items::OBJS) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Builder::hasObjs() {
  if (which() != Anything::Items::OBJS) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::Object>::Reader Anything::Items::Reader::getObjs() const {
  KJ_IREQUIRE((which() == Anything::Items::OBJS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::Object>::Builder Anything::Items::Builder::getObjs() {
  KJ_IREQUIRE((which() == Anything::Items::OBJS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Anything::Items::Builder::setObjs( ::capnp::List< ::format3d::Object>::Reader value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::OBJS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::Object>::Builder Anything::Items::Builder::initObjs(unsigned int size) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::OBJS);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Anything::Items::Builder::adoptObjs(
    ::capnp::Orphan< ::capnp::List< ::format3d::Object>>&& value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::OBJS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::Object>> Anything::Items::Builder::disownObjs() {
  KJ_IREQUIRE((which() == Anything::Items::OBJS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Object>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Anything::Items::Reader::isMesh() const {
  return which() == Anything::Items::MESH;
}
inline bool Anything::Items::Builder::isMesh() {
  return which() == Anything::Items::MESH;
}
inline bool Anything::Items::Reader::hasMesh() const {
  if (which() != Anything::Items::MESH) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Builder::hasMesh() {
  if (which() != Anything::Items::MESH) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::format3d::Mesh::Reader Anything::Items::Reader::getMesh() const {
  KJ_IREQUIRE((which() == Anything::Items::MESH),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::format3d::Mesh>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::format3d::Mesh::Builder Anything::Items::Builder::getMesh() {
  KJ_IREQUIRE((which() == Anything::Items::MESH),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::format3d::Mesh>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Anything::Items::Builder::setMesh( ::format3d::Mesh::Reader value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::MESH);
  ::capnp::_::PointerHelpers< ::format3d::Mesh>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::format3d::Mesh::Builder Anything::Items::Builder::initMesh() {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::MESH);
  return ::capnp::_::PointerHelpers< ::format3d::Mesh>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Anything::Items::Builder::adoptMesh(
    ::capnp::Orphan< ::format3d::Mesh>&& value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::MESH);
  ::capnp::_::PointerHelpers< ::format3d::Mesh>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::format3d::Mesh> Anything::Items::Builder::disownMesh() {
  KJ_IREQUIRE((which() == Anything::Items::MESH),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::format3d::Mesh>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Anything::Items::Reader::isNormals() const {
  return which() == Anything::Items::NORMALS;
}
inline bool Anything::Items::Builder::isNormals() {
  return which() == Anything::Items::NORMALS;
}
inline Anything::Items::Normals::Reader Anything::Items::Reader::getNormals() const {
  KJ_IREQUIRE((which() == Anything::Items::NORMALS),
              "Must check which() before get()ing a union member.");
  return Anything::Items::Normals::Reader(_reader);
}
inline Anything::Items::Normals::Builder Anything::Items::Builder::getNormals() {
  KJ_IREQUIRE((which() == Anything::Items::NORMALS),
              "Must check which() before get()ing a union member.");
  return Anything::Items::Normals::Builder(_builder);
}
inline Anything::Items::Normals::Builder Anything::Items::Builder::initNormals() {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::NORMALS);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  return Anything::Items::Normals::Builder(_builder);
}
inline bool Anything::Items::Reader::isSelection() const {
  return which() == Anything::Items::SELECTION;
}
inline bool Anything::Items::Builder::isSelection() {
  return which() == Anything::Items::SELECTION;
}
inline Anything::Items::Selection::Reader Anything::Items::Reader::getSelection() const {
  KJ_IREQUIRE((which() == Anything::Items::SELECTION),
              "Must check which() before get()ing a union member.");
  return Anything::Items::Selection::Reader(_reader);
}
inline Anything::Items::Selection::Builder Anything::Items::Builder::getSelection() {
  KJ_IREQUIRE((which() == Anything::Items::SELECTION),
              "Must check which() before get()ing a union member.");
  return Anything::Items::Selection::Builder(_builder);
}
inline Anything::Items::Selection::Builder Anything::Items::Builder::initSelection() {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::SELECTION);
  _builder.getPointerField(0 * ::capnp::POINTERS).clear();
  _builder.getPointerField(1 * ::capnp::POINTERS).clear();
  _builder.getPointerField(2 * ::capnp::POINTERS).clear();
  _builder.getPointerField(3 * ::capnp::POINTERS).clear();
  return Anything::Items::Selection::Builder(_builder);
}
inline bool Anything::Items::Reader::isUvmaps() const {
  return which() == Anything::Items::UVMAPS;
}
inline bool Anything::Items::Builder::isUvmaps() {
  return which() == Anything::Items::UVMAPS;
}
inline bool Anything::Items::Reader::hasUvmaps() const {
  if (which() != Anything::Items::UVMAPS) return false;
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Builder::hasUvmaps() {
  if (which() != Anything::Items::UVMAPS) return false;
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::MNMap>::Reader Anything::Items::Reader::getUvmaps() const {
  KJ_IREQUIRE((which() == Anything::Items::UVMAPS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::MNMap>::Builder Anything::Items::Builder::getUvmaps() {
  KJ_IREQUIRE((which() == Anything::Items::UVMAPS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Anything::Items::Builder::setUvmaps( ::capnp::List< ::format3d::MNMap>::Reader value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::UVMAPS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::MNMap>::Builder Anything::Items::Builder::initUvmaps(unsigned int size) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::UVMAPS);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Anything::Items::Builder::adoptUvmaps(
    ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>>&& value) {
  _builder.setDataField<Anything::Items::Which>(
      1 * ::capnp::ELEMENTS, Anything::Items::UVMAPS);
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::MNMap>> Anything::Items::Builder::disownUvmaps() {
  KJ_IREQUIRE((which() == Anything::Items::UVMAPS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::MNMap>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Anything::Items::Normals::Reader::hasMpNormal() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Normals::Builder::hasMpNormal() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::format3d::Point3>::Reader Anything::Items::Normals::Reader::getMpNormal() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::format3d::Point3>::Builder Anything::Items::Normals::Builder::getMpNormal() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Anything::Items::Normals::Builder::setMpNormal( ::capnp::List< ::format3d::Point3>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::format3d::Point3>::Builder Anything::Items::Normals::Builder::initMpNormal(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Anything::Items::Normals::Builder::adoptMpNormal(
    ::capnp::Orphan< ::capnp::List< ::format3d::Point3>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::format3d::Point3>> Anything::Items::Normals::Builder::disownMpNormal() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::format3d::Point3>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Anything::Items::Normals::Reader::hasMpFace() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Normals::Builder::hasMpFace() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t>::Reader Anything::Items::Normals::Reader::getMpFace() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t>::Builder Anything::Items::Normals::Builder::getMpFace() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Anything::Items::Normals::Builder::setMpFace( ::capnp::List< ::int32_t>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void Anything::Items::Normals::Builder::setMpFace(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t>::Builder Anything::Items::Normals::Builder::initMpFace(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Anything::Items::Normals::Builder::adoptMpFace(
    ::capnp::Orphan< ::capnp::List< ::int32_t>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t>> Anything::Items::Normals::Builder::disownMpFace() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Anything::Items::Selection::Reader::hasVSel() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Selection::Builder::hasVSel() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader Anything::Items::Selection::Reader::getVSel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder Anything::Items::Selection::Builder::getVSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Anything::Items::Selection::Builder::setVSel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline void Anything::Items::Selection::Builder::setVSel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder Anything::Items::Selection::Builder::initVSel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Anything::Items::Selection::Builder::adoptVSel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> Anything::Items::Selection::Builder::disownVSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool Anything::Items::Selection::Reader::hasESel() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Selection::Builder::hasESel() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader Anything::Items::Selection::Reader::getESel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder Anything::Items::Selection::Builder::getESel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void Anything::Items::Selection::Builder::setESel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline void Anything::Items::Selection::Builder::setESel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder Anything::Items::Selection::Builder::initESel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void Anything::Items::Selection::Builder::adoptESel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> Anything::Items::Selection::Builder::disownESel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool Anything::Items::Selection::Reader::hasFSel() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Selection::Builder::hasFSel() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader Anything::Items::Selection::Reader::getFSel() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder Anything::Items::Selection::Builder::getFSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void Anything::Items::Selection::Builder::setFSel( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline void Anything::Items::Selection::Builder::setFSel(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder Anything::Items::Selection::Builder::initFSel(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void Anything::Items::Selection::Builder::adoptFSel(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> Anything::Items::Selection::Builder::disownFSel() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Anything::Items::Selection::Reader::hasEVis() const {
  return !_reader.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline bool Anything::Items::Selection::Builder::hasEVis() {
  return !_builder.getPointerField(3 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool>::Reader Anything::Items::Selection::Reader::getEVis() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _reader.getPointerField(3 * ::capnp::POINTERS));
}
inline  ::capnp::List<bool>::Builder Anything::Items::Selection::Builder::getEVis() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::get(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}
inline void Anything::Items::Selection::Builder::setEVis( ::capnp::List<bool>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline void Anything::Items::Selection::Builder::setEVis(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::set(
      _builder.getPointerField(3 * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool>::Builder Anything::Items::Selection::Builder::initEVis(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::init(
      _builder.getPointerField(3 * ::capnp::POINTERS), size);
}
inline void Anything::Items::Selection::Builder::adoptEVis(
    ::capnp::Orphan< ::capnp::List<bool>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool>>::adopt(
      _builder.getPointerField(3 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool>> Anything::Items::Selection::Builder::disownEVis() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool>>::disown(
      _builder.getPointerField(3 * ::capnp::POINTERS));
}

}  // namespace

#endif  // CAPNP_INCLUDED_cbac686543505bdb_
